Some more anti-debug ideas
by juan tamad, 2oo1, philippines 

. to test how this works. first run the program, you will see some msgboxes. this confirms that the program runs ok. now, try loading the exe using loader32 and trace (or i3here on). you will see that the program will crash if you trace through the invalid opcodes. 

this trick is done using seh & trap flag. first we set a handler to handle our trap, then set the trap flag. once its set, the next instruction will create an exception, which our handler will catch. since the next instructions to be executed is invalid, we make it valid by changing it. then resume execution (trap was set again), which will create another EXCEPTION_SINGLE_STEP exception.... until we decide to stop... 

for breakpoints, the process is almost the same. 

this idea is not limited to changing invalid opcodes. the handler can contain a decryption routine so that everytime an instruction is executed, the next instruction is decrypted. but if they use a debugger to trace the code, the decryptor will not be called. :) 

.386
.model flat,stdcall

extrn ExitProcess :proc
extrn MessageBoxA :proc

.data

EXCEPTION_SINGLE_STEP   equ 80000004h
EXCEPTION_BREAKPOINT    equ 80000003h
regFlag                 equ 0c0h
regEip                  equ 0b8h

msg0    db "msg",0
msg1    db "single step!",0
msg2    db "breakpoint!",0
msg3    db "done!",0
tc      dd 0            ;trace counter

begin:
        push offset ex_handler
        push dword ptr fs:[0]
        mov [fs:0],esp

        pushf
        or dword ptr[esp],100h          ;set trap flag
        popf

        nop
        db 8fh          ;invalid opcode
        db 8fh          ;
        db 8fh          ;
        db 8fh          ;
        db 0cch
        db 8fh          ;

        pop dword ptr fs:[0]
        pop ecx

        call MessageBoxA,0,offset msg3,offset msg0,0
        call ExitProcess,0

ex_handler:

        push ebp
        mov ebp,esp

        mov eax,[ebp+8]         ;pEXCEPTION_RECORD
        .if [eax]==EXCEPTION_SINGLE_STEP
                inc tc
                .if tc<5
                        mov edx,[ebp+10h]               ;pCONTEXT
                        mov eax,[edx+regEip]
                        inc dword ptr[eax]              ;8fh+1=90h (nop)
                        or dword ptr[edx+regFlag],100h  ;reset trap flag
                .endif
                call MessageBoxA,0,offset msg1,offset msg0,0
                jmp ret0

        .elseif [eax]==EXCEPTION_BREAKPOINT
                mov edx,[ebp+10h]
                mov eax,[edx+regEip]
                inc dword ptr[eax]
                call MessageBoxA,0,offset msg2,offset msg0,0
                jmp ret0
        .endif

        pop ebp
        mov eax,1               ;ExceptionContinueSearch
        ret
ret0:   pop ebp
        xor eax,eax             ;ExceptionContinueExecution
        ret

.code
start:

        jmp begin

end start


