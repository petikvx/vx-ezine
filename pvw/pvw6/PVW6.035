GetMOD by Chris Vega [gwapo@models.com]
August 10, 1998 
Purpose: Display the Module's Imagebase 

exs:

           getmod kernel32
           getmod gdi32
           getmod user32

Compile: 

	  tasm32 getmod,, /ml /m9 /t

Link: 

	  tlink32 getmod,,,import32.lib -Tpe -x -c

Downloaded from : Chris Vega's Haven [http://trider.8m.com] 

Usage: 

            getmod <ModuleName>


--------------------------------------------------------------------------------

.486
	.model flat

extrn	GetCommandLineA:PROC
extrn	MessageBoxA:PROC
extrn	_wsprintfA:PROC
extrn	LoadLibraryA:PROC
extrn	FreeLibrary:PROC
extrn	ExitProcess:PROC

	.data
appName	db "Module Imagebase Locator by Chris Vega [gwapo@models.com]",0
appUsge db "This is a simple utility on retrieving the Module",0ah,0dh
	db "ImageBase Address",0ah,0dh,0ah,0dh
	db "USAGE:",0ah,0dh
	db "getmod ",0ah,0dh,0ah,0dh
	db "where  is an active-library (DLL) you want",0ah,0dh
	db "to locate the base (extention of .dll will be added",0ah,0dh
	db "if omited).",0
err	db "Cannot locate the Library",0
format	db "'s Imagebase have been located at : %0Xh",0
fmsg	db 128 dup (?)
msggd	db 160 dup (?)
modName	db 256 dup (?)

	.code
start:
	call	getInput

	push	offset modName
	call	LoadLibraryA

	or	eax,eax
	jz	err_load
	push	eax

	push	eax
	push	offset format
	push	offset msggd
	call	_wsprintfA

	; show Message
	push	40h
	push	offset appName
	push	offset msggd
	push	0
	call	MessageBoxA

closin:
	call	FreeLibrary
	push	eax
	call	ExitProcess

err_load:
	push	10h
	push	offset appName
	push	offset err
	push	0
	call	MessageBoxA
	jmp	closin

copyString:
	lodsb
	or	al,al
	jz	endcopy
	stosb
	jmp	copyString
endcopy:
	ret

getInput:
	call	GetCommandLineA
	xchg	esi,eax
	mov	edi, offset msggd
	call	nextArg
	mov	edi, offset modName
	call	nextArg
	jecxz	showHelp
	ret
showHelp:
	push	40h
	push	offset appName
	push	offset	appUsge
	push	0
	call	MessageBoxA
	jmp	closin
nextArg:
	xor	ecx,ecx
elimBlk:
	lodsb
	cmp	al,0
	jz	doneArg
	cmp	al,13h
	jz	doneArg
	cmp	al,20h
	jz	elimBlk
	cmp	al,09h
	jz	elimBlk
colArg:
	cmp	al,22h
	jz	longArg
shortArg:
	inc	ecx
	stosb
	lodsb
	cmp	al,0
	jz	doneArg
	cmp	al,13h
	jz	doneArg
	cmp	al,20h
	jz	doneArg
	cmp	al,22h
	jz	doneArg
	cmp	al,09h
	jnz	shortArg
longArg:
	lodsb
lAx:
	cmp	al,0
	jz	doneArg
	cmp	al,22h
	jz	doneArg
	inc	ecx
	stosb
	lodsb
	jmp	lAx
doneArg:
	xor	eax,eax
	stosb
	ret

	end	start


