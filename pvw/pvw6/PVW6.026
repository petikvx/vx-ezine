Edsamail patch loader 0.1 - dll file
created by juan tamad

 compile with nasm & alink:
  
    nasmw -w+orphan-labels -fobj edll.asm
    alink -oPE -dll -base 0x10000000 -o eloader.dll win32.lib edll.obj

--------------------------------------------------------------------------------

        %include "win32n.inc"

        extern GetProcAddress
        extern GetCommandLineA
        extern GetModuleHandleA
        extern lstrcmpA
        extern lstrlenA
        extern wsprintfA
        extern CreateWindowExA
        extern CreateDialogIndirectParamA
        extern WideCharToMultiByte
        extern SendMessageA
        extern EnumChildWindows
        extern DestroyWindow
        extern GetWindowLongA
        extern FindWindowExA
        extern GetCurrentProcess
        extern WriteProcessMemory
        extern GetParent
        extern GetPrivateProfileIntA
        extern GetPrivateProfileStringA

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        segment .data use32

        ini     db ".\eloader.ini",0
        scn     db "eloader",0
        snoie   db "noie",0
        sltb    db "lefttoolbar",0
        sttb    db "toptoolbar",0
        saddr   db "address%d",0
        soldb   db "oldbyte%d",0
        snewb   db "newbyte%d",0
        sdef    db "$$$$",0

        tbw32   db "ToolbarWindow32",0
        se      db "Shell Embedding",0
        wnd1    db "Advertisement",0
        wnd2    db "Mail Status",0

        adwi    equ 175h        ;height
        adhe    equ 1ah         ;width
        adcx    equ 0eh         ;x
        adcy    equ 10h         ;y

        k32     db "kernel32.dll",0
        u32     db "user32.dll",0
        e32     db "ole32.dll",0
        gpa     db "GetProcAddress",0
        gcl     db "GetCommandLineA",0
        cdip    db "CreateDialogIndirectParamA",0
        cwe     db "CreateWindowExA",0
        cci     db "CoCreateInstance",0

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        align 4

        export apihookchain
        global apihookchain

   apihookchain:        ;API_HOOK struct
        dd k32          ;ModuleExport
        dd gpa          ;ApiNameOrOrd
        dd 0111b        ;dwFlags (HOOK_ALL)
        dd -1           ;ModuleImport (ALL_MODULES)
        dd 0            ;UnHookAddresses
        dd _GetProcAddress ;HookAddress
        dd -1           ;HOOKS_END

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; dll entrypoint.

        segment .text use32

   ..start:

        %define hinstDll ebp+8
        %define fdwReason ebp+0ch
        %define lpvReserved ebp+10h

        push ebp
        mov ebp,esp

        cmp dword [fdwReason],DLL_PROCESS_ATTACH
        jz .a
        jmp .q

.a:     push dword u32
        call GetModuleHandleA
        mov [user32],eax

        push dword e32
        call GetModuleHandleA
        mov [ole32],eax

        push dword ini
        push dword 1
        push dword sltb
        push dword scn
        call GetPrivateProfileIntA
        mov [ltb],eax

        push dword ini
        push dword 1
        push dword sttb
        push dword scn
        call GetPrivateProfileIntA
        mov [ttb],eax

        push dword ini
        push dword 0
        push dword snoie
        push dword scn
        call GetPrivateProfileIntA
        mov [noie],eax

   .q:  pop ebp
        mov eax,1
        ret 4*3

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; hooked api.
   ;

   _GetProcAddress:

        %define hModule ebp+8
        %define lpProcName ebp+0ch

        push ebp
        mov ebp,esp

        push dword [lpProcName]
        push dword cdip
        call lstrcmpA
        or eax,eax
        jne .a
        mov eax,_CreateDialogIndirectParamA
        jmp .q

   .a:  push dword [lpProcName]
        push dword gcl
        call lstrcmpA
        or eax,eax
        jne .b
        mov eax,_GetCommandLineA
        jmp .q

   .b:  push dword [lpProcName]
        push dword cwe
        call lstrcmpA
        or eax,eax
        jne .c
        mov eax,_CreateWindowExA
        jmp .q

   .c:  push dword [lpProcName]
        push dword cci
        call lstrcmpA
        or eax,eax
        jne .d
        cmp dword [noie],1
        jne .d
        mov eax,_CoCreateInstance
        jmp .q

   .d:  push dword [lpProcName]
        push dword [hModule]
        call GetProcAddress

   .q:  pop ebp
        ret 4*2

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; remove the ads dlgbox.
   ;

   _CreateDialogIndirectParamA:

        %define hInstance ebp+8
        %define lpTemplate ebp+0ch
        %define hWndParent ebp+10h
        %define lpDialogFunc ebp+14h
        %define lParamInit ebp+18h

        push ebp
        mov ebp,esp
        push ebx
        push esi
        push edi

        push dword [lParamInit]
        push dword [lpDialogFunc]
        push dword [hWndParent]
        push dword [lpTemplate]
        push dword [hInstance]
        call CreateDialogIndirectParamA
        mov [hdlg],eax

        mov edi,buff
        mov esi,[lpTemplate]    ;read win32 api reference for
        lea esi,[esi+(4*7)+2]   ;details on the dialogbox template

        push dword 0
        push dword 0
        push dword 0ffh
        push edi
        push dword -1
        push esi
        push dword 0
        push dword CP_ACP
        call WideCharToMultiByte

        mov ebx,buff
        push ebx
        push dword wnd1         ;"Advertisement"
        call lstrcmpA
        or eax,eax
        jne .a

        push dword 0
        push dword 0
        push dword WM_CLOSE
        push dword [hdlg]
        call SendMessageA
        jmp .q

   .a:  push ebx
        push dword wnd2         ;"Mail Status"
        call lstrcmpA
        or eax,eax
        jne .b

        push dword 0
        push dword enum_child
        push dword [hdlg]
        call EnumChildWindows
        jmp .q

   .b:  mov esi,[lpTemplate]
        cmp word [esi+adcx],adwi
        jne .q
        cmp word [esi+adcy],adhe
        jne .q

        push dword [hdlg]
        call DestroyWindow

   .q:  mov eax,[hdlg]
        pop edi
        pop esi
        pop ebx
        pop ebp
        ret 4*5

   enum_child:

        %define hWnd ebp+8
        %define lParam ebp+0ch

        push ebp
        mov ebp,esp
        push ebx

   ;get the window style.

        push dword GWL_STYLE
        push dword [hWnd]
        call GetWindowLongA
        cmp eax,(WS_VISIBLE | WS_CHILD | SS_BITMAP | SS_REALSIZEIMAGE)
        jne .a

        push dword [hWnd]
        call DestroyWindow
        jmp .q

   .a:  push dword [hWnd]
        call GetParent
        mov ebx,eax

        push dword 0
        push dword se           ;"Shell Embedding"
        push dword 0
        push dword eax          ;hWndParent
        call FindWindowExA
        or eax,eax
        jz .q

        push ebx
        call DestroyWindow

   .q:  pop ebx
        pop ebp
        mov eax,1
        ret 4*2

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; disable toolbars.
   ;

   _CreateWindowExA:

        %define lpClassName ebp+0ch
        %define dwStyle ebp+14h

        push ebp
        mov ebp,esp

   ;check class name. make sure its the toolbar class.

        push dword [lpClassName]
        push dword tbw32        ;"ToolBarWindow32"
        call lstrcmpA
        or eax,eax
        jne .q

        inc dword [tbi]         ;avoid multiple subs

        cmp dword [tbi],1
        jne .a
        cmp dword [ltb],0
        jne .a
        sub dword [dwStyle],WS_VISIBLE

   .a:  cmp dword [tbi],2
        jne .q
        cmp dword [ttb],0
        jne .q
        sub dword [dwStyle],WS_VISIBLE

   .q:  pop ebp
        jmp CreateWindowExA

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; patcher.
   ;

   _GetCommandLineA:

        push ebx
        push esi
        push edi

   .x:  inc dword [cnt]
        cmp dword [cnt],20              ;avoid endless loop
        jl .v
        jmp .q

   .v:  push dword [cnt]
        push dword saddr
        push dword bufr
        call wsprintfA
        add esp,4*3

        push dword ini
        push dword 0ffh
        push dword addr
        push dword sdef
        push dword bufr
        push dword scn
        call GetPrivateProfileStringA

        cmp dword [addr],'ffff'         ;terminator
        jnz .a
        jmp .q
   .a:  cmp byte [addr],0
        jz .x
        cmp dword [addr],'$$$$'
        jz .x

        push dword addr
        call atoh1
        mov [addr$],eax

        push dword [cnt]
        push dword soldb
        push dword bufr
        call wsprintfA
        add esp,4*3

        push dword ini
        push dword 0ffh
        push dword oldb
        push dword sdef
        push dword bufr
        push dword scn
        call GetPrivateProfileStringA

        push dword oldb
        call lstrlenA
        mov ecx,eax
        shr ecx,1
        mov edi,[addr$]
        mov esi,oldb
   .w:  push esi
        call atoh2
        cmp byte[edi],al
        jnz .g
        add esi,2
        inc edi
        dec ecx
        jnz .w
   .g:  cmp ecx,0
        jz  .b
        jmp .x

   .b:  push dword [cnt]
        push dword snewb
        push dword bufr
        call wsprintfA
        add esp,4*3

        push dword ini
        push dword 0ffh
        push dword newb
        push dword sdef
        push dword bufr
        push dword scn
        call GetPrivateProfileStringA

        push dword newb
        call lstrlenA
        mov ecx,eax
        shr ecx,1
        mov ebx,ecx
        mov esi,newb
        mov edi,newb$
   .c:  push esi
        call atoh2
        mov byte[edi],al
        add esi,2
        inc edi
        dec ecx
        jnz .c
        mov byte[edi],0

        call GetCurrentProcess

        push dword temp
        push ebx
        push dword newb$
        push dword [addr$]
        push eax
        call WriteProcessMemory         ;patch it!

        jmp .x

   .q:  pop edi
        pop esi
        pop edi

        jmp GetCommandLineA

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; no shockwave.

   _CoCreateInstance:

        mov eax,[esp+4*5]
        mov dword [eax],stub0
        xor eax,eax
        ret 4*5

        stub0: dd stub1,stub1,stub1
        stub1: dd stub2,stub2,stub2
        stub2: ret 4

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   ; ascii to hex routines
   ; atoh1 = dword
   ; atoh2 = byte

   atoh1:
        push esi
        push ecx
        mov esi,[esp+0ch]
        xor edx,edx
        mov ecx,8
   .x:  xor eax,eax
        lodsb
        or eax,eax
        jz .a
        sub al,30h
        cmp al,9
        jle .b
        sub al,7
   .b:  shl edx,4
        add edx,eax
   .a:  dec ecx
        jnz .x
   .c:  mov eax,edx
        pop ecx
        pop esi
        ret 4

   atoh2:
        push esi
        push ecx
        mov esi,[esp+0ch]
        xor edx,edx
        mov ecx,2
   .x:  xor eax,eax
        lodsb
        or eax,eax
        jz .a
        sub al,30h
        cmp al,9
        jle .b
        sub al,7
   .b:  shl edx,4
        add edx,eax
   .a:  dec ecx
        jnz .x
   .c:  mov eax,edx
        pop ecx
        pop esi
        ret 4

   ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        segment .bss use32

        user32  resd 1
        ole32   resd 1

        ltb     resd 1
        ttb     resd 1
        noie    resd 1
        tbi     resd 1

        temp    resd 1
        cnt     resd 1
        addr$   resd 1
        newb$   resd 1
        addr    resb 10h
        oldb    resb 10h
        newb    resb 10h
        bufr    resb 0ffh

        hdlg    resd 1
        buff    resb 0ffh

        ;that's all folks!!!

