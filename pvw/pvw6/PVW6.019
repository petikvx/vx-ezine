More with MessageBox 
 What will i learn from this article? 

How to Play with MessageBox 
Retrieve Return Values from APIs 
Add Icons and Buttons to MessageBox 
Adding High-Level Directives with Win32 Assembly 

--------------------------------------------------------------------------------
Introduction 
greets you all, welcome to chapter 2 of my Win32 Assembly Introduction, and today after our success in making Win32 Assembly "Hello World!" Application, i will present you to a more complex MessageBox routine, and shows you the "new" ways of using High-Level Language or HLL directives in Win32 Assembly, lets start! 


--------------------------------------------------------------------------------
Playing with MessageBox's Behavior 
The previous application, shows "Hello World!" using MessageBoxA API, without any design and equiped only with an "OK" button only; offcourse, you must ask how, that you can see MessageBoxes that have Icons, with Different Buttons... 

Lets look at the MessageBox parameters description: 

	hWnd
		[in] Handle to the owner window of the message box to be created. 
		If this parameter is NULL, the message box has no owner window.

	lpText 
		[in] Pointer to a null-terminated string that contains the message
		to be displayed. 

	lpCaption
		[in] Pointer to a null-terminated string that contains the dialog
		box title. If this parameter is NULL, the default title Error is used. 

	uType
		[in] Specifies the contents and behavior of the dialog box. This 
		parameter can be a combination of flags from the following groups of 
		flags. 

the 4th parameter "uType" controls the MessageBox Behaviors, it can be any or combination of constants/values listed below (ignore Return Values for the meantime, well be using that later on to this chapter): 
----[msgbox.inc]-----------------------------------------------cut here----------------

	; =========================================================================
	; Buttons
	; =========================================================================

	MB_OK				equ 0h	; OK Button
	MB_OKCANCEL			equ 1h	; OK and Cancel Buttons
	MB_ABORTRETRYIGNORE		equ 2h	; Abort, Retry and Ignore Buttons
	MB_YESNOCANCEL			equ 3h	; Yes, No and Cancel Buttons
	MB_YESNO			equ 4h	; Yes and No Buttons
	MB_RETRYCANCEL			equ 5h	; Retry and Cancel Buttons

	; =========================================================================
	; Icon
	; =========================================================================

	MB_ICONHAND			equ 10h		; Critical Icon
	MB_ICONQUESTION			equ 20h		; Question Mark Icon
	MB_ICONEXCLAMATION		equ 30h		; Exclamation Point Icon
	MB_ICONASTERISK			equ 40h		; Information Icon
	MB_USERICON			equ 80h		; User-Defined Icon

	; =========================================================================
	; Behavior
	; =========================================================================
	
	MB_DEFBUTTON1			equ 0h		; First Button in Focus
	MB_DEFBUTTON2			equ 100h	; Second Button in Focus
	MB_DEFBUTTON3			equ 200h	; Third Button in Focus
	MB_DEFBUTTON4			equ 300h	; Fourth Button in Focus
	MB_APPLMODAL			equ 0h		; Application Modal (default)
	MB_SYSTEMMODAL			equ 1000h	; System Modal
	MB_TASKMODAL			equ 2000h	; Task Modal
	MB_HELP				equ 4000h	; Add Help Button
	MB_NOFOCUS			equ 8000h	; No Focus
	MB_SETFOREGROUND		equ 10000h	; Set Forground
	MB_DEFAULT_DESKTOP_ONLY		equ 20000h	; Default Desktop Only
	MB_TYPEMASK			equ 0Fh		; Type Mask
	MB_ICONMASK			equ 0F0h	; Icon Mask
	MB_DEFMASK			equ 0F00h	; Defined Mask
	MB_MODEMASK			equ 3000h	; Mode Mask
	MB_MISCMASK			equ 0C000h	; Miscelleneous Mask
	MB_TOPMOST			equ 40000h	; Display as Top Most
	MB_RIGHT			equ 80000h	; Right Aligned Text
	MB_RTLREADING			equ 100000h	; Right to Left Reading
	MB_SERVICE_NOTIFICATION		equ 200000h	; Service Notification

	; =========================================================================
	; Return Values
	; =========================================================================
	IDOK				equ 1		; Ok Button is pressed
	IDCANCEL			equ 2		; Cancel Button is pressed
	IDABORT				equ 3		; Abort Button is pressed
	IDRETRY				equ 4		; Retry Button is pressed
	IDIGNORE			equ 5		; Ignore Button is pressed
	IDYES				equ 6		; Yes Button is pressed
	IDNO				equ 7		; No Button is pressed
	IDCLOSE				equ 8		; Close Button is pressed
	IDHELP				equ 9		; Help Button is pressed

-----------------------------------------------------------end cut here---------------

Save the above list into a file called "msgbox.inc" to "include" directory, and include it to our first example (Hello World) application using the include directive. includes must be located after the main heading, ie, before or after the API declaration lists, since API declaration list itself can be included into your project as an external file, anyway, constants above can also be included into a single source file without even bothering to make include files, but include files makes your project more organized for easy updating, so lets include! save "msgbox.asm" to a different file, let call it "msgbox2.asm" 
---[msgbox2.asm]-----------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	; <-- This is where our include "must" be
					;     located, and take note, msgbox.inc path
					;     has no quote, .. means out of bin directory
					;     and point to "include" directory

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "My First Win32 Assembly Application", 0
	lpText		db "Hello World!", 0

	.code
	start:
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				0		      ; <-- modify this parameter!!!
		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

if you compile and execute msgbox2, the resulting EXE file will be the same as the previous "Hello World!" application, its because we didn't made any difference on the 4th parameter of MessageBoxA API yet, meaning, the API will behave exactly as you wanted if you passed the right parameter, see the remarks on the above listing of msgbox2.asm. 
Since our objective is to show you various different MessageBoxes, we will be modifying the file msgbox2.asm to a more suitable format, ie, changing the Message from "Hello World" to "Does Win32 Assembly Rock?" and the Caption to "Win32 Assembly", then using the constants listed in msgbox.inc, we will be modifying the 4th parameter to any Icons, like: 

	To Display MessageBox with "Critical Icon"
		4th parameter = MB_ICONHAND

	To Display MessageBox with "Question Mark Icon"
		4th parameter = MB_ICONQUESTION

	To Display MessageBox with "Exclamation Point Icon"
		4th parameter = MB_ICONEXCLAMATION

	To Display MessageBox with "Information Icon"
		4th parameter = MB_ICONASTERISK

take a look at the fully modified "msgbox2.asm" that display a MessageBox with an Question Mark Icon: 
---[msgbox2.asm]-----------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Does Win32 Assembly Rock?", 0

	.code
	start:
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	      ; <-- Question Mark Icon
		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

compile and execute "msgbox2.asm" 
	c:\tasm5\bin\mk msgbox2
	c:\tasm5\bin\msgbox2

make sense? not yet? offcourse, its still the same, differs only a bit by displaying an Icon, but it added some life a little, lets add some more life by modifying its button displays, recap the constants: 
	MB_OK				equ 0h	; OK Button
	MB_OKCANCEL			equ 1h	; OK and Cancel Buttons
	MB_ABORTRETRYIGNORE		equ 2h	; Abort, Retry and Ignore Buttons
	MB_YESNOCANCEL			equ 3h	; Yes, No and Cancel Buttons
	MB_YESNO			equ 4h	; Yes and No Buttons
	MB_RETRYCANCEL			equ 5h	; Retry and Cancel Buttons

all need to do next is to make MessageBox display this Buttons (default is MB_OK) is combine the button constants with the icon constant, using the OR operator: 
	Assuming ICON is the previously selected Icon.
	
	To Display OK Button (Default)
		4th parameter = ICON or MB_OK		; or just ICON

	To Display OK and Cancel Buttons
		4th parameter = ICON or MB_OKCANCEL

	To Display Abort, Retry and Ignore Buttons
		4th parameter = ICON or MB_ABORTRETRYIGNORE

	To Display Yes, No and Cancel Buttons
		4th parameter = ICON or MB_YESNOCANCEL

	To Display Yes and No Buttons
		4th parameter = ICON or MB_YESNO

	To Display Retry and Cancel Buttons
		4th parameter = ICON or MB_RETRYCANCEL

	If you want to Add "Help" Button jus conjunc (AND) MB_HELP to the result

Since our message "Does Win32 Assembly Rock?" is in Question form, its Icon Question Mark was made it more approachable, and the expected user-answer is either Yes or No only, MB_YESNO, (while Cancel can be an Option, MB_YESNOCANCEL), therefore we need "Yes" and "No" button in order to catch the user input with the question, hence our adjustment will look: 
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	and MB_YESNO

when you compile it, it will show you design we are aftering, all in all, you can now develop an application that shows a MessageBox with Icon, with Buttons, plus if you take some time looking and experimenting with the behavior constants, the effect will be more absolute to your needs, since you can now control which button has the default focus: 
	MB_DEFBUTTON1			equ 0h		; First Button in Focus
	MB_DEFBUTTON2			equ 100h	; Second Button in Focus
	MB_DEFBUTTON3			equ 200h	; Third Button in Focus
	MB_DEFBUTTON4			equ 300h	; Fourth Button in Focus

or how modally the MessageBox will be displayed: 
	MB_APPLMODAL			equ 0h		; Application Modal (default)
	MB_SYSTEMMODAL			equ 1000h	; System Modal
	MB_TASKMODAL			equ 2000h	; Task Modal

Add a Help Button:

	MB_HELP				equ 4000h	; Add Help Button

Set the focus:

	MB_NOFOCUS			equ 8000h	; No Focus
	MB_SETFOREGROUND		equ 10000h	; Set Forground
	MB_DEFAULT_DESKTOP_ONLY		equ 20000h	; Default Desktop Only

Or add some mask:

	MB_TYPEMASK			equ 0Fh		; Type Mask
	MB_ICONMASK			equ 0F0h	; Icon Mask
	MB_DEFMASK			equ 0F00h	; Defined Mask
	MB_MODEMASK			equ 3000h	; Mode Mask
	MB_MISCMASK			equ 0C000h	; Miscelleneous Mask

Or control its reading and display behavior:

	MB_TOPMOST			equ 40000h	; Display as Top Most
	MB_RIGHT			equ 80000h	; Right Aligned Text
	MB_RTLREADING			equ 100000h	; Right to Left Reading
	MB_SERVICE_NOTIFICATION		equ 200000h	; Service Notification

that completes the MessageBox API? nah! all of this will be off to waste if your application cant operate with the result, sure you wanten to know which button the user pressed, is it "Yes" or "No", lets detail it, next: 
For the meantime, take a look at what we have just completed, i named it msgbox3: 

---[msgbox3.asm]-----------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Does Win32 Assembly Rock?", 0

	.code
	start:
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	and MB_YESNO
		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

compile it: 
	c:\tasm5\bin\mk msgbox2.asm

execute:

	c:\tasm5\bin\msgbox2

Click on any Button and go to the next section to learn how to handle the User Click... 
--------------------------------------------------------------------------------
Introduction to HLL in Win32 Assembly and using the API result 
Now we have a fully running MessageBox application, whats left behind is how we capture the result and test it, simple, same as the Interrupt in old DOS, function results are stored in Accumulator Register (eax), hence our MessageBox API return the Button clicked by the user by Button-Code in eax, see constants from msgbox.inc: 

	IDOK				equ 1		; Ok Button is pressed
	IDCANCEL			equ 2		; Cancel Button is pressed
	IDABORT				equ 3		; Abort Button is pressed
	IDRETRY				equ 4		; Retry Button is pressed
	IDIGNORE			equ 5		; Ignore Button is pressed
	IDYES				equ 6		; Yes Button is pressed
	IDNO				equ 7		; No Button is pressed
	IDCLOSE				equ 8		; Close Button is pressed
	IDHELP				equ 9		; Help Button is pressed

those constants are already defined by itself, so does the comparison, use the raw Assembly opcode in testing the EAX register, and redirect the pointer to the correct location, comparison can take place with these methods: 
	cmp	eax, IDYES	; is it yes
	je	lblYes		; jump to lblYes
	...			; otherwise

	; or

	sub	eax, IDYES	; is it yes
	jz	lblYes		; jump to lblYes
	...			; otherwise

Lets add more MessageBoxes calls in our application, but this time, it will be triggered only if the user pressed Yes or No, or simply, let show different Messages for each buttn pressed, let add more data on our ".data" section: 
	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Does Win32 Assembly Rock?", 0

	lpYes		db "I see bright future for you programmer!", 0
	lpNo		db "Too bad, my crystal ball says something bad on you....", 0

After the data, lets put some comparison after the display of our main Message Box: 
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	and MB_YESNO

		sub	eax, IDYES
		jz	lblYes

		mov	edx, offset lpNo
		jmp	showMsg
	lblYes:
		mov	edx, offset lpYes
	showMsg:
		call	MessageBoxA,\
				0,\
				edx,\
				offset lpCaption,\
				MB_ICONASTERISK	

the flow was the same on how do we compare values with the old DOS assembly, using any opcodes thar affect the flags, so the jump will be directed to its correct flow, the use of EDX register as the holder of lpXXX offset was intentional so the code will be optimized, ie, dont learn optimization after learning Win32 Assembly, learn it now while you're currently progressing, without optimazation, you might have built a project with two different "call MessageBoxA" for each buttons, like: 
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	and MB_YESNO

		sub	eax, IDYES
		jz	lblYes

		call	MessageBoxA,\
				0,\
				offset lpNo,\
				offset lpCaption,\
				MB_ICONASTERISK	
		jmp	closin

	lblYes:
		call	MessageBoxA,\
				0,\
				offset lpYes,\
				offset lpCaption,\
				MB_ICONASTERISK	
	closin:

might be easier to understand since it was made for that purpose, but the optimized way (above) using the edx register to pass the offset of the user choosen message, then pass the content of edx register on the MessageBox call. 
---[msgbox2.asm]-----------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Does Win32 Assembly Rock?", 0

	lpYes		db "I see bright future for you programmer!", 0
	lpNo		db "Too bad, my crystal ball says something bad on you....", 0

	.code
	start:
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	or MB_YESNO

		sub	eax, IDYES
		jz	lblYes

		mov	edx, offset lpNo
		jmp	showMsg
	lblYes:
		mov	edx, offset lpYes
	showMsg:
		call	MessageBoxA,\
				0,\
				edx,\
				offset lpCaption,\
				MB_ICONASTERISK	

		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

it can be optimized more but i wont take that opotunity, since as a programmer, you can (on your own) optimize the code, anyway, test the EXE now: 
	c:\tasm5\bin\mk msgbox2
	c:\tasm5\bin\msgbox2

see the result? the Buttons now responding! 
whoah, wait, i almost forgot, this part of the article is about the HLL, yah, you're not mistakenly reading it, in Win32 Assembly, High-Level Language directive has been introduced, but we will not be using all of them right now, ill give you some only that enough to introduce it (again) here. 

Take a look at the routine of comparing above, what have you noticed? well, if you're thinking about the use of jmp, cmp, sub opcodes to build a flow of "If-Else-EndIf" statement, then you're absolutely correct, HLL is here in Win32 Assembly, and "If-Else-EndIf" is part of this HLL as a serries of directives, well not only "If-Else-EndIf", loops, and other HLL operation like, arithmetics and soon are part of this HLL in Win32 Assembly, I will list them here on a Self-Explanatory format, so you have your chance on playing with them: 

	HLL conditions and loop
	========================================================================

	.if		=	compare two values
	.then		=	if the comparison if true
	.else		=	if the comparison if false
	.elseif		=	if the comparison if false, start a new if
	.endif

	.while		=	loop while
	.endw		=	end while loop

	.repeat		=	loop repeatedly
	.until		=	until this condition met
	.untilcxz	=	until ECX register equal to zero

	.continue	=	exit loop inside .while or .repeat with condition
	.break		=	exit loop inside .while or .repeat instantly

	HLL logical operators
	========================================================================
	==		=	equal
	>		=	greater than
	<		=	less than
	>=		=	greater than or equal
	<=		=	less than or equal
	!=		=	Not equal

And more...this directives greatly affect our programming in Win32 Assembly's conditions and loops, which is, without these directive, will requires serries of opcodes combinations and flag testing, those are not removed since still there are programmers who like the use of them instead of these HLL, while it wont have any effect on the produced EXEcutable file. 
The modified version of our MessageBox application using this directives greatly increased in readability: 

---[msgbox2.asm]-----------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Does Win32 Assembly Rock?", 0

	lpYes		db "I see bright future for you programmer!", 0
	lpNo		db "Too bad, my crystal ball says something bad on you....", 0

	.code
	start:
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	or MB_YESNO

		.if	eax==IDYES

			mov	edx, offset lpYes

		.else

			mov	edx, offset lpNo

		.endif

		call	MessageBoxA,\
				0,\
				edx,\
				offset lpCaption,\
				MB_ICONASTERISK	

		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

Want more? well heres another asm file that will demonstrate the use of loopings, this application will ask if you want to quit (Yes or No), it will keep on showing the message if you keep answering "No": Using the While-EndW Loop: 
---[while.asm]------------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Happy Now?", 0

	.code
	start:
		xor	eax, eax

		.while eax!=IDYES
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	or MB_YESNO

		.endw

		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

Using the Repeat-Until: 
---[repeat.asm]------------------------------------------------cut here----------------

	.486
	.model flat, stdcall

	include ..\include\msgbox.inc	

	extrn MessageBoxA:PROC
	extrn ExitProcess:PROC

	.data
	lpCaption	db "Win32 Assembly", 0
	lpText		db "Happy Now?", 0

	.code
	start:
		.repeat
		call	MessageBoxA,\
				0,\
				offset lpText,\
				offset lpCaption,\
				MB_ICONQUESTION	or MB_YESNO

		.until eax==IDYES

		call	ExitProcess, 0
		end	start

-----------------------------------------------------------end cut here---------------

Thats how it happens, are you thinking of gathering Input from user? instead of opening an Article on how to use Dialog Boxes, which is the common user input in Windows Operating Systems, ill begin walking you into the world of Console Programming, ie, Print Output and Read Input from User using the Console Screen, MS-DOS in Win9x and DOS Box in WinNT/2K, Next Chapter, "Console Programming", lots of APIs used, lots of comparison, and still be very easy....dont worry =) 

Copyright 2001, by Chris Vega [gwapo@models.com] 
 

