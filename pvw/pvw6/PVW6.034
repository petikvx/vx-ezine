GetAPI by Chris Vega [gwapo@models.com]
August 10, 1998 
Purpose: Display the API's Virtual Address from its Module Handler, 

exs:

           getapi kernel32 CloseHandle
           getapi wsock32 send
           getapi user32 MessageBoxA

Compile: 

	  tasm32 getapi,, /ml /m9 /t

Link: 

	  tlink32 getapi,,,import32.lib -Tpe -x -c


Downloaded from : Chris Vega's Haven [http://trider.8m.com] 

Usage: 

           getapi <Module> <ApiName>


--------------------------------------------------------------------------------

.486
	.model flat,stdcall

extrn	GetCommandLineA:PROC
extrn	MessageBoxA:PROC
extrn	_wsprintfA:PROC
extrn	LoadLibraryA:PROC
extrn	GetProcAddress:PROC
extrn	FreeLibrary:PROC
extrn	ExitProcess:PROC

	.data
appName	db "API In-module Information by Chris Vega [gwapo@models.com]",0
appUsge db "This is a simple utility on retrieving the In-Module",0ah,0dh
	db "API-function Entry-Point Address (Virtual Address).",0ah,0dh,0ah,0dh
	db "USAGE:",0ah,0dh
	db "getapi  ",0ah,0dh,0ah,0dh
	db "where  is an active-library (DLL) and  is",0ah,0dh
	db "a funtion name (case-sensitive), Exported by the",0ah,0dh
	db "module.",0
err0	db "Cannot locate the Library",0
err1	db "this API function is not Exported by this module",0
good	db " API function have been found at Module ",0
format	db 0ah,0dh,0ah,0dh,"Entry-Point located at : %0Xh",0
entry	db 80 dup (?)
msggd	db 160 dup (?)
modName	db 256 dup (?)
apiName db 256 dup (?)

	.code
start:
	call	getInput
	call	LoadLibraryA,offset modName

	or	eax,eax
	jz	err_load
	push	eax

	call	GetProcAddress,eax,offset apiName
	or	eax,eax
	jz	err_api

	; Copy API name to Output Message
	call	_wsprintfA,offset entry,offset format,eax

	; String Transfer
	mov	esi,offset apiName
	mov	edi,offset msggd
	call	copyString

	mov	esi,offset good
	call	copyString

	mov	esi,offset modName
	call	copyString

	mov	esi,offset entry
	call	copyString

	; show Message
	call	MessageBoxA,0,offset msggd,offset appName,40h

closin:
	call	FreeLibrary
	call	ExitProcess,0

err_load:
	call	MessageBoxA,0,offset err0,offset appName,10h
	jmp	closin

err_api:
	push	10h
	push	offset appName
	push	offset err1
	push	0
	call	MessageBoxA
	jmp	closin

copyString:
	lodsb
	or	al,al
	jz	endcopy
	stosb
	jmp	copyString
endcopy:
	ret

getInput:
	call	GetCommandLineA
	xchg	esi,eax
	mov	edi, offset msggd
	call	nextArg
	mov	edi, offset modName
	call	nextArg
	jecxz	showHelp
	mov	edi,offset apiName
	call	nextArg
	jecxz	showHelp
	ret
showHelp:
	call	MessageBoxA,0,offset appUsge,offset appName,40h
	jmp	closin
nextArg:
	xor	ecx,ecx
elimBlk:
	lodsb
	cmp	al,0
	jz	doneArg
	cmp	al,13h
	jz	doneArg
	cmp	al,20h
	jz	elimBlk
	cmp	al,09h
	jz	elimBlk
colArg:
	cmp	al,22h
	jz	longArg
shortArg:
	inc	ecx
	stosb
	lodsb
	cmp	al,0
	jz	doneArg
	cmp	al,13h
	jz	doneArg
	cmp	al,20h
	jz	doneArg
	cmp	al,22h
	jz	doneArg
	cmp	al,09h
	jnz	shortArg
longArg:
	lodsb
lAx:
	cmp	al,0
	jz	doneArg
	cmp	al,22h
	jz	doneArg
	inc	ecx
	stosb
	lodsb
	jmp	lAx
doneArg:
	xor	eax,eax
	stosb
	ret

	end	start


