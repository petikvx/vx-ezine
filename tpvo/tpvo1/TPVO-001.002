
               ☆ ＴＰＶＯ病毒雜誌  第００１期  TPVO-001.002 ☆

                             ◎反追蹤之技巧◎
                           by Zhuge Jin of TPVO

  ==========================================================================

       嗨！今番要跟大家研究一些反追蹤的技巧... 雖然這跟病毒沒有很直接的關係
   ，但能夠讓一些 AV 被耍的團團轉也蠻好玩的...

       早期的人在防別人 debug 的時候，不是當掉 int 1h 、int 3h 不然就是將鍵
   盤鎖住，這樣一來就沒辦法再 trace  。雖然這些方法不見得有多大的高明，但她
   終究也達到防 trace  的目的... 隨著一些工具的誕生，這些方法都已不能再做到
   蹤的要求... 於是... 嘻！各種稀奇古怪的方法也接二連三的被挖掘出來了！而我
   反追寫這篇的目的，就是將她來個總整理... 這也是我目前的職責所在... :_)

   ************************
   1) 使用一些特殊的指令???
   ************************

       我們首先要找一些比較特別的指令來放入我們的病毒內，這樣一來就可讓一些
   AV無法追下去，如此你就可以達到反追蹤的目的... 我們就拿TBAV中的TBCLEAN 來
   開刀吧... (喔！這是一個免費的 AV )

   C:\TBAV>debug
   -a100
   xxxx:xxxx LOCK             ; 這道指令 TBCLEAN 是沒法模擬的！為什麼呢？
   xxxx:xxxx int 20h          ; 可能該作者有特別的理由吧...
   xxxx:xxxx           <Enter>
   -n test.com
   rcx
   :3
   -w
   -q
   C:TBAV>tbclean test.com

   除了這個指令外，尚有 ENTER 、LEAVE 、PUSH ??h 、PUSH ????h ...
   當然啦！不只這些指令可用... 你可以去試試看一些 *not used* 的指令！！！

       再來就是 87 指令... 據目前我所看到的 AV 中，沒一套是能夠模擬這些算數
   運算器的指令... (除了 PTAV 之外... 是為了解我的第一隻多形而加的... 嘻！)
   當然你也可以試試 TBCLEAN 看可以不可以模擬！這個答案是否定的... 因為只要
   是他不認識的指令！都可達到反追蹤的目的，這樣說你應該可以了解吧! :_)

       除了以上提到的指令之外！我們還可以使用一些奇特的指令？？嘻！這要感謝
   DS給我一些建議...

     1) D6h (Set AL to carry)
        如果 CF=1 的話，AL 就被設為 FFh！
        如果 CF=h 的話，AL 就被設為 00h！

     2) F1h
        這道指令在 ICE 當中！被做為中斷點... 跟 debug 中的 int 3h 有相同的
        用途...

   ************
   2) 硬体&中斷
   ************

   1) int 00h (除 0 錯誤)

       ...
       xor ax,ax
       mov ds,ax
       push word ptr ds:[0002h]
       push word ptr ds:[0000h]
       mov ds:[0002h],cs
       mov ax,OFFSET int0_jmp
       mov ds:[0000h],ax
       xor ax,ax
       div ax                ; 因為 ax:=0000h 而 ax 除以 ax 而觸發
       int 20h               ; int 0h 中斷... 使程式轉到 int0_jmp !
       ...                   ; 而不是執行 int 20h ...
    int0_jmp:
       pop ax
       pop ax
       pop ax
       pop word ptr ds:[0000h]
       pop word ptr ds:[0002h]
       ...

       這個方法我原先是加在 GCAE v2.0 中，沒想到後來我的朋友傳給我一些雜誌中
   ，居然有相同的方法，可見外國的技術一直比我國強，因此大家要加油囉...
   在以前沒有一個 CPU 指令模擬可追得下去的... (除了新版的 PTAV之外...)


       類似這種方法，還有int 5h(與bound有關)、int 6h(非法指令中斷)、int 7h
   、int 0dh ... 有興趣自行去研究吧... (哇! 我好墮落喔...)  :_)

   2) int 02h (不可遮罩中斷)

       ...
       xor ax,ax
       mov ds,ax
       push word ptr ds:[000ah]
       push word ptr ds:[0008h]
       mov ds:[000ah],cs
       mov ax,OFFSET int0_jmp
       mov ds:[0008h],ax
       int 75h               ; 為何要呼叫 int 75h 呢？？嘻！跟據
       int 20h               ; 我的觀察... 這個中斷裡有一道 int 02h！
       ...                   ; 因此... :_)
    int2_jmp:
       add sp,000ch
       pop word ptr ds:[0008h]
       pop word ptr ds:[000ah]
       ...

   嘻！這個方法我打算用在我的下一版變体引擎中... 到目前為止，沒一個可以模
   擬啦 (我用過 TBAV 試的...) ！
   此外... 還可用 I/O port 來引發 int 2h 中斷，有興趣的可以去研究看看...
       port: 61h 、70h ...

   ***************
   3) CPU 指令佇列
   ***************

   咦？佇列？沒聽過？沒錯... 起初我也不知道她的原理！但我現在之知道囉...
   多虧高人指點！又加上我的聰明才智... (哈！好像有點臭屁...)

      mov ah,09h
      mov word ptr ds:[OFFSET reg_dx+01h],OFFSET msg2  ;*
    reg_dx:
      mov dx,OFFSET msg1
      int 21h
      int 20h

    msg1 db 'Fuck the Mad Satan! Shit!','$'
    msg2 db 'Oh! Zhuge ... You are great!!!','$'

        嗯！在 debug 下追的時後，所得到的是 msg2 ... 但在 DOS 下卻是 msg1
    怎樣？夠好玩吧... 為什麼會產生這種情況呢？？這是因為 Intel的CPU 在執行
    時會連下幾個指令都一起載入... (可能是比較省時吧！！)而此時星號執行後，
    在程式中雖然mov dx,OFFSET msg1被替換成mov dx,OFFSET msg2，但在 CPU當中
    確沒改變，照成執行的結果是 msg1 ！！當然啦！如果在星號後有加個jmp 或是
    call的話，這種現象就不會發生了！這樣應該了解這個跟反追蹤什麼關係吧！還
    可以用這個方法來改變程式流程哦...

    不過... 在 Pentium 中就不會這麼好了... 原因是這個 CPU 中有了 Prefetch
    queues 回寫的功能... (我是看原文的... 好像是這個意思沒錯!!!) 所以，以
    上的問題就只有一種結果囉... :_)

        此外，如果你想到一種新反追蹤的方法時！我建議你不妨用TBCLEAN 來試，
    因為這個不但是免費的，同時也是公認的... 如果這套沒法追的話，那其它的有
    90％的機率也是沒辦法了... 當然啦！！這種方法是要比較特殊的，如果是較平
    常的話，那就未必了！！希望你會有所心得吧... :_)

  ==========================================================================
