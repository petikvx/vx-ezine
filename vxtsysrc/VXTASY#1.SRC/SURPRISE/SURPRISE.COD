surprise proc near
assume ds:surprise_data, es:surprise_data
     pusha
     push ds
     push es


     mov ax, surprise_data
     mov ds, ax
     mov es, ax

     mov ah, 06h
     mov al, 25d
     mov bh, 7
     mov ch, 0
     mov cl, 0
     mov dh, 24
     mov dl, 79
     int 10h

     xor dx, dx
     call pos_cursor

     mov ah, 13h
     mov al, 02h
     mov bh, 0
     mov bl, 0
;    mov cx, skel_text_len
     mov cx, 022Eh
     xor dx, dx
     lea bp, skel_text
     int 10h


     call randomize

skeleton_animation:
     pusha
     call display_all

     xor ax, ax
     call next_head
     call next_rib_cage
     call next_right_hand
     call next_left_hand
     call next_right_leg
     call next_left_leg

     mov ax, 2
     call random
     mov cx, 3
     sub cx, ax
     call delay

     popa
     cmp cs:keys[KESC], 1
     je quit1
     cmp cs:keys[KENTER], 1
     je quit_surprise
     jmp skeleton_animation

quit_surprise:
    mov cs:keys[KENTER], 0

labirinth:
    call labir

quit1:
    mov cs:keys[KESC],0
    pop es
    pop ds
    popa
    ret


labir:
     mov ah, 06h
     mov al, 25d
     mov bh, 7
     mov ch, 0
     mov cl, 0
     mov dh, 24
     mov dl, 79
     int 10h

     xor dx, dx
     call pos_cursor

    lea dx, lab
    mov ah, 09h
    int 21h

    push es
    mov ax, 0b800h
    mov es, ax
    mov cx,  80*25
    mov di, 1

    mov ax, 14d
    call random
    inc al

repeat_color:
    stosb
    inc di
    inc al
    cmp al, 15
    jna ok_color
    mov al, 1

ok_color:
    loop repeat_color
    pop es

    mov byte ptr cs:color_point, 1

    mov counter_, 31
    mov seconds, 0

    mov ax, 0b800h
    mov es, ax


    mov dh, lab_x
    mov dl, lab_y
    call pos_cursor
    jmp xxx

compare:

    pusha
    mov ah, 2ch
    int 21h
    mov dl, 0
    shr dx, 8
    cmp dx, seconds
    je no_second_change

    lea bp, counter_text
    mov seconds, dx
    dec counter_
    jz time_out


    mov ax, counter_
    call do_decimal
    mov ax, counter_
    cmp ax, 10
    jnb qwerty
    mov byte ptr ds:[bp], ' '

qwerty:
    mov dh, 24
    mov dl, 15
    call pos_cursor
    lea dx, counter_text
    mov ah, 09h
    int 21h
    call beep

no_second_change:
    popa

    cmp cs:keys[KLARROW], 1
    jne ___not_1

    mov cs:keys[KLARROW], 0
    call anulate
    dec dl
    call verify
    jnc xxx
    inc dl
    jmp xxx


___not_1:
    cmp cs:keys[KRARROW], 1
    jne ___not_2

    mov cs:keys[KRARROW], 0
    call anulate
    inc dl
    call verify
    jnc xxx
    dec dl
    jmp xxx

___not_2:

    cmp cs:keys[KDARROW], 1
    jne ___not_3

    mov cs:keys[KDARROW], 0
    call anulate
    inc dh
    call verify
    jnc xxx
    dec dh
    jmp xxx

___not_3:
    cmp cs:keys[KUARROW], 1
    jne ___not_4

    mov cs:keys[KUARROW], 0
    call anulate
    dec dh
    call verify
    jnc xxx
    inc dh
    jmp xxx

___not_4:

    cmp cs:keys[KESC], 1
    jne compare
    jmp quito

xxx:
    call pos_cursor
    push dx
    xchg dl, dh
    call computeaddress
    mov bp, dx
    pop dx

    mov byte ptr es:[bp], 'þ'
    mov bl, byte ptr cs:color_point
    mov byte ptr es:[bp+1], bl
    inc bl
    cmp bl, 15d
    jna ok_color_2
    mov bl, 1
ok_color_2:
    mov byte ptr cs:color_point, bl

    cmp dh, 14d
    jne not_found_exit
    cmp dl, 76d
    jne not_found_exit
    jmp finished_lab

not_found_exit:
    jmp compare

anulate:
    call pos_cursor
    push dx
    xchg dl, dh
    call computeaddress
    mov bp, dx
    pop dx
    mov byte ptr es:[bp], ' '
    mov byte ptr es:[bp+1], 7
    ret

verify:
    call pos_cursor
    push dx
    xchg dl, dh
    call computeaddress
    mov bp, dx
    pop dx
    cmp byte ptr es:[bp], ' '
    jne not_free
    clc
    ret
not_free:
    stc
    ret

time_out:
    popa
    mov dx, 0A00h
    call pos_cursor
    lea dx, time_out_text
    mov ah, 09h
    int 21h
    jmp rep_wait_esc2


finished_lab:
    mov dx, 0A00h
    call pos_cursor
    lea dx, finished_text
    mov ah, 09h
    int 21h

rep_wait_esc:
    cmp cs:keys[KESC], 1
    jne rep_wait_esc

    mov cs:keys[KESC], 0
    mov ax, surprise_data
    mov es, ax
    mov ah, 13h
    mov al, 02h
    mov bh, 0
    mov bl, 0
    mov cx, 2000d
    xor dx, dx
    lea bp, romania
    int 10h

rep_wait_esc2:
    cmp cs:keys[KESC], 1
    jne rep_wait_esc2


quito:
    mov cs:keys[KESC], 0

    ret

do_decimal:
        call print_zecimal2
        retn
print_zecimal2:
        xor     dx,dx
        div     cs:ten
        or      ax,ax
        jz      _db_display
        push    dx
        call    print_zecimal2
        pop     dx
_db_display:
        add     dl,30h
        mov al,dl
        mov byte ptr ds:[bp], al
        inc bp
        ret


next_head:
     lea si, head_links
     mov al, c_head
     call locate_pos
     call next_pos
     mov c_head, al
     ret

next_rib_cage:
     lea si, rib_cage_links
     mov al, c_rib_cage
     call locate_pos
     call next_pos
     mov c_rib_cage, al
     ret

next_right_hand:
     lea si, right_hand_links
     mov al, c_right_hand
     call locate_pos
     call next_pos
     mov c_right_hand, al
     ret

next_left_hand:
     lea si, left_hand_links
     mov al, c_left_hand
     call locate_pos
     call next_pos
     mov c_left_hand, al
     ret

next_right_leg:
     lea si, right_leg_links
     mov al, c_right_leg
     call locate_pos
     call next_pos
     mov c_right_leg, al
     ret

next_left_leg:
     lea si, left_leg_links
     mov al, c_left_leg
     call locate_pos
     call next_pos
     mov c_left_leg, al
     ret

display_all:
;display head
     lea si, head_addr
     xor ax, ax
     mov al, c_head
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, head_pos
     call display_block
;display rib cage
     lea si, rib_cage_addr
     xor ax, ax
     mov al, c_rib_cage
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, rib_cage_pos
     call display_block

;display right hand
     lea si, right_hand_addr
     xor ax, ax
     mov al, c_right_hand
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, right_hand_pos
     call display_block

;display left hand
     lea si, left_hand_addr
     xor ax, ax
     mov al, c_left_hand
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, left_hand_pos
     call display_block

;display right leg
     lea si, right_leg_addr
     xor ax, ax
     mov al, c_right_leg
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, right_leg_pos
     call display_block

;display left leg
     lea si, left_leg_addr
     xor ax, ax
     mov al, c_left_leg
     shl ax, 1
     add si, ax
     mov si, word ptr [si]
     lea di, left_leg_pos
     call display_block

     ret

display_block:
; si:address of block
; di:address to block position
     mov dh, byte ptr [di.x1]
     mov dl, byte ptr [di.y1]
     inc si

repeat_block:
     call display_line
     inc dh
     mov al, 0
     mov di, si
     mov cx, 1000
     repnz scasb
     mov si, di
     cmp byte ptr [si], 0Fh
     jne repeat_block
     ret

display_line:
     push dx
     push di ax
     mov di, si
     mov al, 0
     mov cx, 1000
     repnz scasb
     sub cx, 1000
     neg cx
     pop ax di

     add dl, x_intend
     add dh, y_intend

     dec cx
     mov ah, 13h
     mov al, 01h
     mov bl, 14d
     mov bh, 0
     mov bp, si
     int 10h
     pop dx
     ret

locate_pos:
; si:offset to pos
; al:pos
    cmp byte ptr [si], al
    je pos_found

    inc si
    xor ax, ax
    mov al, [si]
    add si, ax
    inc si
    jmp locate_pos

pos_found:
    ret

next_pos:
; si:offset to right pos
    inc si
    xor ax, ax
    mov al, [si]
    call random
    inc ax
    add si, ax
    mov al, byte ptr [si]
    ret



randomize Proc Near                       ; random nr. generator initializer
       Push cx dx                         ; save them
       Xor ah,ah                          ; ah = 0
       Int 1Ah                            ; get date/time
       Mov cs:[rand_seed], dx                ; and save it in the seed
       Xchg ch,cl                         ; make some calculations
       Add cs:[rand_seed_2], cx              ; and generate the second seed
       Pop dx cx                          ; and now pop these
       Ret                                ; and go away
randomize Endp                            ;
                                          ;
random Proc Near                          ; The Random Number Generator
       Push cx                            ;
       Push ax                            ;
       In al,40h                          ; get a random
       Sub ax, cs:[rand_seed]                ; substract it from seed 1
       Db 35h                             ; Xor Ax by seed 2
rand_seed_2 Dw 0                          ;
       Inc ax                             ; increment ax
       Add cs:[rand_seed], ax                ; and create new random seed
       Pop cx                             ; and put the number into the
       Call Modulo                        ; boundaries
       Pop cx                             ;
       Ret                                ; and return
random Endp                               ;
                                          ;
modulo Proc Near                          ; this routine returns Ax modulo Cx.
       Push dx                            ; It's used to put AX between 0 and
       Xor dx, dx                         ; CX. DX is preserved.
       Div cx                             ;
       Xchg ax, dx                        ;
       Pop dx                             ;
       Ret                                ;
modulo Endp                               ;
rand_seed dw 100h

 Delay proc near     ; Simple BIOS delay
  ;Requires number of reiterations in CX on entry.

        push    ds
        mov     ax,0040h
        mov     ds,ax
        mov     bx,6Ch          ;BIOS timer, 40:6C
  d1:   mov     al,[bx]
DelayLoop:
        cmp     al,[bx]         ;Is it the same?
        je      DelayLoop       ;Yes, try again.
        loop    d1              ;Nope, loop and decrement CX.
        pop     ds              ;Restore registers and exit.
        ret
 Delay endp

beep:
        push ax
        sti                             ;Interrupts on
        mov     al,0B6h                 ;Program timer 2 to generate
        out     43h,al                  ;  pulses
        jmp     short $+2
        mov     al,0                    ;Send low byte of the 16-bit
        out     42h,al                  ;  value that will determine
        jmp     short $+2               ;  the pulse frequency
        mov     al,0c0h                 ;Then send the high byte
        out     42h,al
        jmp     short $+2
        in      al,61h                  ;Speaker on
        jmp     short $+2
        or      al,3
        out     61h,al
here:   loop    here
        in      al,61h                  ;Speaker off
        jmp     short $+2
        and     al,0FCh
        out     61h,al
        pop ax
        ret                             ;Return to caller


color_point db 1

assume CS:CODE_SEGMENT, DS:DATA_SEGMENT, SS:STACK_SEGMENT
surprise endp