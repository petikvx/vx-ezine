DEBUG TUTORIAL...
---------------------------------------------------------------------------

     Many of you will say: "DEBUG is a piece of shit".  And you're right,
since as a debugger it's a real pig compared to Turbo Debugger or the much
more advanced TD386.  The thing is, though, that DEBUG is not "only" a
debugger, it's a complete tool for the individual who wants to perform low
level experimentation (and viruses, too).  It allows you to do things other
debuggers don't, and it also gives the program being debugged a little more
slack.  DEBUG has not improved in its newer versions (except in size),  The
DEBUG versions 3.3, 5.0 and 6.0 are basically the same.  The proof that DEBUG
is a good product is that we're still using it to share viruses (via debug
scripts).  Anyhow, enough introduction....

 COMMAND LIST:
 -------------

 - A : Assemble [address]
     Used to assemble.  The default start address is the initial CS:IP.
 - C : Compare [address1] [address2] [range]
     Compares the addresses in memory within the range given.  If there are 
     no differences, nothing is displayed.  Examples:
     -C 100 200 100
     -C 100 600 50
     05DE:0100  B8  F7  05DE:0600
     05DE:0101  00  90  05DE:0601
 - D : Dump [start address] [end address]
     Dumps memory to the screen starting with the given address or with the
     default, if no address is given (in which case the command will dump 80h
     bytes.  Examples:
     -d 100 10F
     05DE:0100 B8 02 00 BA 07 00 CD 21 - B8 00 4C CD 21 90 90 90
     -d
     05DE:0110 90 90 90 90 90 90 90 90 - 90 90 90 90 90 90 90 90
     05DE:0120 90 90 90 90 90 90 90 90 - 90 90 90 90 90 90 90 90
     ...
     05DE:0190 90 90 90 90 90 90 90 90 - 90 90 90 90 90 90 90 90
     -d 100 110
     05DE:0100 B8 02 00 BA 07 00 CD 21 - B8 00 4C CD 21 90 90 90
     05DE:0110 90
 - E : Enter [address] [list]
     Enter bytes into memory, starting with the address provided by the user.

     If 'list' is not provided, the command will prompt for it.  The list can
     be entered in hex or in alpha characters.  Within the prompt, '-' goes
     to the previous byte, space to the next and "enter" exits.  Examples:
     -e 100 "baba"
     -e 100 b4 4c cd 21
     -e 100
     05DE:0100 B4.00 4C.00 CD.00 21.00-
     05DE:0102 00.FF-
     05DE:0101 00.FF
 - F : Fill [start address] [end address] [string]
     Fill bytes with the contents of the string beginning with the start
     address.  If no "end address" is provided, 80h bytes will be filled.   
     -f 100 "PIPI"
     -f 100 1000 "MOLYBDENUM TETRACHLORIDE"
 - G : Go To [=address] [offset list]
     Breakpoint. G=Address causes the program to begin executing starting
     with 'address'.  You can also provide a list of offsets in which to
     place the breakpoints, which can be as many as you want.
     -g=100 109 205
 - H : Hexadecimal [value1] [value2]
     Hexadecimal arithmetic.   Given two hex values, the command shows the
     results of both their sum and subtraction, also in hex.
     -h 102 100
     0202 0002
 - I : Input [port]
     Similar to the 'IN' assembly instruction.  The byte is displayed on the
     screen.  Example:
     -I 70
     FF
 - L : Load [address] [drive] [first sector] [number]
     Similar to INT 25. Examples:
     -L 200 0 0 1
 - M : Move [range] [address]
     Moves memoria. Examples:
     -m 100 200 1
 - N : Name [path\name]
     Redefines the name of the current file and the list of arguments in the
     PSP.
     -N VIRUS.COM
 - O : Output [port] [byte]
     Similar to the 'OUT' assembly instruction. Examples:
     -O 70 1
 - P : Proceed [=address] [number]
     Proceed through the code.  If the 'p=??' is entered, it will start from
     that address (if no address is given, the default is 1).  Note that with
     'P' we are not debugging INTs or CALLs internally (unlike 'T').
 - Q : Quit
     Exit.  All changes made are lost.
 - R : Register [register]
     Typing 'R' by itself only shows the current state of the registers, plus

     the order which points to the CS:IP (next instruction to be executed). 
     Including the register's name displays the value of that particular
     register and allows you to change its value.  Not only can you go into
     AX,BX,CX,DX,SP,BP,SI,DI,DS,ES,CS,SS, you can also get into IP (RIP), and
     the flags register (RF).
     Examples:
     -R
     AX=1020 BX=0000 CX=0000 DX=0000 SP=FFEE BP=0000 SI=0000 DI=0000
     DS=31DC ES=31DC SS=31DC CS=31DC IP=0100 NV UP EI PL NZ NA PO NC
     05DE:0100 01060002      ADD [200], AX           DS:0200=0100
     -RAX
     AX 1020
     :FFFF
     -RIP
     IP 100
     :500
     -RF
     NV UP EI PL NZ NA PO NC - ZR
     -R
     AX=FFFF BX=0000 CX=0000 DX=0000 SP=FFEE BP=0000 SI=0000 DI=0000
     DS=31DC ES=31DC SS=31DC CS=31DC IP=0100 NV UP EI PL ZR NA PO NC
     05DE:0500 B80001        MOV AX, 0100
 - S : Search [start address] [end address] [list .... ]
     Searches for a string of values between the starting and ending
     addresses within the same segment.  The string may be entered in hex or
     typed directly.  It returns the addresses where the values were found. 
     Examples:
     -s ds:100 200 "Ja Je Ji Jo Ju"
     05DE:0190
     -s cs:100 1000 e8 00 00
     05DE:0203
     05DE:0504
 - T : Trace [=address] [value]
     Follow the program execution step-by-step.  If you include an address
     (T=address), the trace will begin as of that address.  If T=number, that
     number of instructions will be traced.  Note that when using this
     parameter it is possible to debug internally all the CALLs and INTs.
     -t 2
     -t=500
 - U : Unassemble [start address] [end address]
     Disassembles the code within the given range ad displays it on the
     screen.  If an ending address is not provided, DEBUG disassembles up to
     20h bytes.  The pointer is actualized every time you "put" this
     parameter; putting two 'u' will cause 40h bytes to be disassembled.
     Example:
     -u 100 110
 - W : Write ds:[address] [drive] [first sector] [number]
     Using 'W' by itself writes the current state of the memory to the file
     defined by the 'N' parameter, using as a size the contents of BX:CX. 
     Similar to INT 26.  Examples:
     -N TEST.COM
     -RCX
     CX 0000
     :100
     -W
     Writing 00100 bytes
     -W 100 0 0 1

EMS Instructions.
-----------------
 - XA : Allocate expanded memory [#pages]
     Reserves expanded memory.  You must provide the number of pages; returns
     the handler obtained to the screen (Similar to INT 67/AH=43).
     Example:
     -XA 1
     Handler created = 0001
 - XD : Deallocate Expanded Memory [handler]
     Frees expanded memory.  You must provide the handler. (Similar to      
     INT 67/AH=45) Example:
     -XA 1
     Handler created = 0001
     -XD 1
     Handler 0001 deallocated
 - XM : Map Expanded Memory Pages [logical page] [physical page] [handler]
     Map an EMS page. (Similar to INT 67/AH=44). Example:
     -XM 0 0 1
 - XS : Get Expanded Memory State
     Displays the current state of expanded memory on your screen.

     I hope you've understood everything.  If not, experiment a bit.  Debug
can be very useful if you know how to use it.  
     For example: You need a .COM to see if your virus infects.  Are you
going to bother to code an ASM and then assemble it?  NO!  Enter DEBUG, type
'a' and then "mov ax, 4c00/int 21", then "rcx/5", and then 'w'. (Note:
obviously the virus does not infect .EXEs, or DEBUG would be infected.  When
working with EXE infectors, I copy DEBUG.EXE to my working directory, use it
and then erase it.  You never know what a bug is going to get into, and I
don;t want to end up with a trashed or infected (with my own virus) DEBUG.
:-))
     Or:  you're experimenting with a BOOT virus and you want to see if it
infects drive A:.  Are you going to use DISK EDITOR and chance that it will
look at al the C: drive directories?  Never!  Enter DEBUG and make a program
to read the boot sector by way of INT 25?  Why work so hard when all it takes
is to use the following parameter: 'L 100 0 0 1'!
     Or typically: you are making a resident virus, but the little queer
doesn't infect.  You suffer for hours studying the ASM code to no avail.  You
simply can't find in which part the of the 4B00 routine the error is in. 
What to do?  Load the virus in memory and debug the resident routine with
DEBUG!  (You can't do this with TurboDebugger.)
     Last:  You want to study a virus, but it uses anti disassembly
techniques. Sourcer, (or whatever you have) comes out looking like an
imbecile when you attempt to disassemble it.  What to do?  Disassemble with
DEBUG!!  Obviously it won't come out the same, but this can be fixed with a
little work.
     Well, enough with the examples.  Now you see why DEBUG is a pretty
little program which is of such help to we virus programmers.  Enjoy!
                                            Trurl
