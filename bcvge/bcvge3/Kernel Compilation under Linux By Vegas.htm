<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0169)http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&formname=download&filetype=text/html -->
<HTML><HEAD><TITLE>Kernel Compilation under Linux By Vegas</TITLE>
<META http-equiv=Content-Language content=en>
<META content="Microsoft FrontPage 5.0" name=GENERATOR>
<META content=FrontPage.Editor.Document name=ProgId>
<META http-equiv=Content-Type content="text/html; charset=windows-1252"></HEAD>
<BODY bgColor=#ffffff>
<P align=left><B><FONT size=7>Kernel Compilation under 
Linux</FONT></B><BR><FONT size=4>By Vegas<BR><A 
href="mailto:vegas@advknowledge.net?subject=Kernel Compilation under Linux">mailto:vegas@advknowledge.net?subject=Kernel 
Compilation under Linux</A><BR>06/11/2002</FONT><BR><BR><BR><A 
title=Introduction 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#1">1. 
Introduction</A><BR><A title="Installation requirements" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#2">2. 
Installation requirements</A><BR>&nbsp;&nbsp; <A title="Download the new kernel" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#21">2.1 
Download the new kernel</A><BR>&nbsp;&nbsp; <A title="Verify your download" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#22">2.2 
Verify your download</A><BR>&nbsp;&nbsp; <A title="Decompress the kernel" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#23">2.3 
Decompress the kernel</A><BR><A title="How to patch a kernel" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#3">3. 
How to patch a kernel</A> <BR><A title="Configuration and Installation" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#4">4. 
Configuration and Installation</A> <BR>&nbsp;&nbsp; <A 
title="make commands: description and usage" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#41">4.1 
make commands: description and usage</A><BR>&nbsp;&nbsp; <A 
title="Build dependencies" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#42">4.2 
Build dependencies</A><BR>&nbsp;&nbsp; <A title="Build the kernel" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#43">4.3 
Build the kernel</A><BR>&nbsp;&nbsp; <A title="Build the modules" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#44">4.4 
Build the modules</A><BR>&nbsp;&nbsp; <A title="Make an initrd image" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#45">4.5 
Make an initrd image</A><BR>&nbsp;&nbsp; <A 
title="Backup and install the kernel" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#46">4.6 
Backup and install the kernel</A><BR>&nbsp;&nbsp; <A title="Install the modules" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#47">4.7 
Install the modules</A><BR><A title="Configure Bootloaders" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#5">5. 
Configure Bootloaders</A> <BR>&nbsp;&nbsp; <A title=LILO 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#51">5.1 
LILO</A><BR>&nbsp;&nbsp; <A title=GRUB 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#52">5.2 
GRUB</A><BR><A title="When it works" 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#6">6. 
When it works</A> <BR><A title=Conclusion 
href="http://f3mail.rediff.com/cgi-bin/gold/download.cgi/kernel_compilation.htm?login=assassin_007&amp;session_id=3K1KUKaJ4jWSqUbDHmN73KVfL5lU&amp;formname=download&amp;filetype=text/html#7">7. 
Conclusion</A> <BR><BR><BR><U><FONT size=5><A name=1></A>1. 
Introduction</FONT></U><BR><BR>I'm sometimes surprised to see people calling 
themselves linux geeks and don't even know how to install a new kernel on their 
OS. I decided to write this paper to show you how simple it is. Be very cautious 
when messing around with the kernel. Make or have a working bootable recovery 
floppy disk or CD-ROM. Don't forget to backup all of your files. I don't take 
any responsability of what you will do with this, it worked for me and will 
normally work for you but take care. This example uses a 2.4.19 kernel which is 
actually the lastest stable version on a x86 architecture. To know what kernel 
version you are actually running, type the command "<I>uname -r</I>". Download 
the lastest version at <A 
href="http://www.kernel.org/">http://www.kernel.org/</A>. You need about 200 MB 
of free space to install the new kernel.<BR><BR><BR><U><FONT size=5><A 
name=2></A>2. Installation requirements</FONT></U><BR><BR>&nbsp;&nbsp; <FONT 
size=4><A name=21></A>2.1 Download the new kernel</FONT><BR><BR><I>$ su<BR>$ cd 
/usr/src<BR>$ wget 
http://www.fr.kernel.org/pub/linux/kernel/v2.4/linux-2.4.19.tar.gz</I><BR><BR>Use 
your country code instead of "fr" in the kernel download url as www.kernel.org 
is quite busy. You can look for all the mirrors at <A 
href="http://kenel.org/mirrors">http://kenel.org/mirrors</A>. I've chosen http 
but you can try to download it through ftp 
(ftp://ftp.fr.kernel.org/pub/linuxkernel/v2.4/linux-2.4.19.tar.gz).<BR><BR>&nbsp;&nbsp; 
<FONT size=4><A name=22></A>2.2 Verify your download</FONT><BR><BR>You have to 
verify if the download is correct by downloading the cryptographic signature 
file, here linux-2.4.19.tar.gz.sign. This file will permit us to verify if the 
kernel you downloaded isn't corrupted and/or authentic. You need gpg to do this. 
If it's the first time you verify your kernel using this, you will first need to 
get the "Linux Kernel Archives Verification Key" by doing this:<BR><BR><I>$ gpg 
-- keyserver wwwkeys.pgp.net --recv-keys 0x517D0F0E</I><BR><BR>You can also get 
the key at http://www.kernel.org/signature.html. Now that you have the PGP key 
on your gpg keyring and the .sign, you can verify the file:<BR><BR><I>$ gpg 
--verify linux-2.4.19.tar.gz.sign linux-2.4.19.tar.gz</I><BR><BR>gpg will tell 
you if the test succeed or not. If it has, you can untar your 
kernel.<BR><BR>&nbsp;&nbsp; <FONT size=4><A name=23></A>2.3 Decompress the 
kernel</FONT><BR><BR><I>$ tar zxvf linux-2.4.19.tar.gz<BR>$ cd 
linux-2.4.19</I><BR><BR>In case you downloaded a bz2 file:<BR><BR><I>$ tar jxvf 
linux-2.4.19.tar.bz2</I><BR><BR><BR><U><FONT size=5><A name=3></A>3. How to 
patch a kernel</FONT></U><BR><BR>You may also have downloaded a patch file (<A 
href="http://www.kernel.org/pub/linux/kernel/v2.4/patch-2.4.19.gz">http://www.kernel.org/pub/linux/kernel/v2.4/patch-2.4.19.gz</A>). 
First make sure that this patch is compatible with your old kernel:<BR><BR><I>$ 
gzip -d patch-2.4.19.gz | patch -p1 --dry-run</I><BR><BR>If the output is full 
of file foo lines then its ok. <I>--dry-run</I> just test your kernel to see if 
it's compatible. Now if you are ready to patch it:<BR><BR><I>$ gzip -d 
patch-2.4.19.gz | patch -p1</I><BR><BR>You won't have to do all the following 
steps if you use a patch.<BR><BR><BR><U><FONT size=5><A name=4></A>4. 
Configuration and Installation</FONT></U><BR><BR>&nbsp;&nbsp; <FONT size=4><A 
name=41></A>4.1 make commands: description and usage</FONT><BR><BR>- "<I>make 
xconfig</I>" starts a GUI interface and can only be used if you're running a X 
Window<BR>- "<I>make menuconfig</I>" starts a console mode interface. It will 
ask you if you want to add in the new options from the kernel by selecting Y 
(yes), N (no), or M (module).<BR>- "<I>make oldconfig</I>" generates the .config 
from your current working kernel.<BR>- "<I>make config</I>" will make the 
configuration from the .config that you will have edited and configured by hand 
(if you want headache, go for it).<BR><BR>I suggest the sweety GUI interface as 
you may imagine. All this commands create or use the .config file at 
/usr/src/linux-2.4.19/.config. If a .config has already been copied in that 
directory (see below), <I>"make xconfig"</I> will read it.<BR><BR><I>$ make 
xconfig</I><BR><BR>Configure your kernel by selecting all the features you want 
to compile into it like networking, sound, SCSI... Save and exit. All the 
selected options are saved in /usr/src/linux-2.4.19/.config before being 
compiled. If you want to use your old kernel configuration, execute "<I>make 
oldconfig</I>" (it will generate the .config file of your old kernel) and copy 
.config in the new kernel directory:<BR><BR><I>$ make oldconfig<BR>$ cp -p 
/usr/src/linux-2.4.x/.config /usr/src/linux-2.4.19/.config</I><BR><BR>I suggest 
you to backup the .config generated or modified by "<I>make xconfig</I>", 
"<I>make menuconfig</I>" or by yourself somewhere for future kernel 
upgrades.<BR><BR><I>$ cp -p /usr/src/linux-2.4.19/.config 
/root/config-2.4.19.txt</I><BR><BR>The -p is used to keep permissions on the 
copied file. "<I>make mrproper</I>" deletes all your kernel sources including 
your old .config file. This command isn't needed if you NEVER compiled a kernel 
before or if you want to keep your old configuration. If you recompile your 
kernel because of some errors you had in the first compilation don't forget 
"<I>make mrproper</I>".<BR><BR><I>$ make mrproper<BR>$ make 
xconfig</I><BR><BR>&nbsp;&nbsp; <FONT size=4><A name=42></A>4.2 Build 
dependencies</FONT><BR><BR><I>$ make dep<BR>$ make clean</I><BR><BR>&nbsp;&nbsp; 
<FONT size=4><A name=43></A>4.3 Build the kernel</FONT><BR><BR>If everything 
goes right, you can now compile your kernel. The operation will take about 5 
minutes (depends your processor)<BR><BR><I>$ make bzImage</I><BR><BR>This will 
put the new kernel in /usr/src/linux-2.4.19/arch/i386/boot/bzImage. Instead of 
"make bzImage" you could also use "make bzdisk". It compiles the kernel and 
copies it on a floppy disk. This command is used to test a new kernel without 
rewriting lilo.conf or grub.conf. A "<I>cp 
/usr/src/linux-2.4.19/arch/i386/boot/bzImage /dev/fd0</I>" after a "<I>make 
bzImage</I>" would do the same. You could also execute "make zImage" if you 
don't want your kernel to be compressed. It was the command used to compile 
older kernels. The image would then be named "vmlinux". This make isn't used 
anymore as the produced kernel is generally too big to be started by lilo or 
grub.<BR><BR>&nbsp;&nbsp; <FONT size=4><A name=44></A>4.4 Build the 
modules</FONT><BR><BR>Modules are parts of the kernel that are loaded on the 
fly, as they are needed. Modules are generally stored in ".o" files.<BR><BR><I>$ 
make modules</I><BR><BR>&nbsp;&nbsp; <FONT size=4><A name=45></A>4.5 Make an 
initrd image</FONT><BR><BR>If you have a SCSI adapter and you made your SCSI 
driver modular, build a new initrd image. If you don't need it skip this part. 
Also, if you build your kernel with ext3 support as a module, you must create an 
initrd image. Use <I>/sbin/mkinitrd</I> to build an initrd image for your 
machine. To use this command, the loopback block device must be 
available.<BR><BR><I>$ mkinitrd /boot/initrd-2.4.19.img 
2.4.19</I><BR><BR>initrd-2.4.19.img is the name of the image that you are 
creating. You can give the name you want to that file but you will have to 
specify the same name on lilo.conf or grub.conf (see below). 2.4.19 is the name 
of the kernel found from /lib/modules that you need to use to build the initrd 
image.<BR><BR>&nbsp;&nbsp; <FONT size=4><A name=46></A>4.6 backup and install 
the kernel</FONT><BR><BR>Now that you compiled your new kernel you have to 
install it on your system. Kernels are generally loaded in /boot so we have to 
copy our new kernel there. I suggest you to backup your old System.map. Also 
make sure you have a bootdisk (<I>mkbootdisk --device /dev/fd0 2.4.x</I>) of 
your old kernel. You could also do a "make install", it will automatically copy 
the kernel and System.map in /boot. Don't forget to backup System.map before 
doing it.<BR><BR><I>$ cd /boot<BR>$ mv System.map System.map-old</I><BR><BR>Now 
copy your new kernel in /boot (or do a "make install"):<BR><BR><I>$ cp 
/usr/src/linux-2.4.19/System.map /boot/System.map<BR>$ cp 
/usr/src/linux-2.4.19/arch/i386/boot/bzImage 
/boot/vmlinuz-2.4.19</I><BR><BR>&nbsp;&nbsp; <FONT size=4><A name=47></A>4.7 
Install the modules</FONT><BR><BR><I>$ make modules_install</I><BR><BR>This will 
copy all the modules in /lib/modules/2.4.19/kernel/drivers even if you didn't 
build any.<BR><BR><BR><U><FONT size=5><A name=5></A>5. Configure 
bootloaders</FONT></U><BR><BR>The bootloader permits you to boot on the OS you 
want and on the kernel you want. It makes the link between the BIOS and the 
kernel. I'll talk about the two most well known bootloaders on linux: LILO and 
GRUB.<BR><BR>&nbsp;&nbsp; <FONT size=4><A name=51></A>5.1 
LILO</FONT><BR><BR>First backup your working lilo.conf:<BR><BR><I>$ cp -p 
/etc/lilo.conf /root/lilo.txt</I><BR><BR>Now edit /etc/lilo.conf to make it 
bootable on the new kernel. Add this in the 
file:<BR><BR><B>image=/boot/vmlinuz-2.4.19<BR>label=Linux-2.4.19<BR>initrd=/boot/initrd-2.4.19.img<BR>read-only<BR>root=/dev/hda2</B><BR><BR>Do 
not change the "<B>default=</B>" line (above in lilo.conf) for the moment and do 
not delete lines corrosponding to current working kernel. The line 
"<B>initrd=/boot/initrd-2.4.19.img</B>" will be used only if you have made an 
initrd image (step 9). Now tell LILO to read lilo.conf:<BR><BR><I>$ lilo 
-v</I><BR><BR>Make sure the kernel have been loaded by looking at the output 
"Writing boot sector". Also tell LILO to treat "linux-2.4.19" as default boot 
kernel just for one time only with -R:<BR><BR><I>$ lilo -R 
linux-2.4.19</I><BR><BR>&nbsp;&nbsp; <FONT size=4><A name=52></A>5.2 
GRUB</FONT><BR><BR>backup the config file of GRUB:<BR><BR><I>$ cp 
/boot/grub/grub.conf /root/grub.txt</I><BR><BR>Edit grub.conf and make this 
changes:<BR><BR><B>title Linux 2.4.19<BR>root (hd0,1)<BR>kernel 
/boot/vmlinuz-2.4.19 ro root=/dev/hda2 hdd=ide-scsi<BR>initrd 
/boot/initrd-2.4.19.img</B><BR><BR><B>(hd0,1)</B> is the partition where GRUB is 
installed. <B>root=/dev/hda2</B> is where the kernel image is located. Here 
again the line "<B>initrd /boot/initrd-2.4.19.img</B>" will be used only if you 
have made an initrd image (step 9). If your /boot has its own partition, remove 
/boot in the kernel path:<BR><BR><B>kernel /vmlinuz-2.4.19 ro root=/dev/hda2 
hdd=ide-scsi</B><BR><BR>Higher in the configuration file, you can see a line 
"<B>default=0</B>". It means the first entry of grub.conf will be the default 
entry. If you want to set your new kernel as default, you have to put the above 
lines before your old kernel entry or if you wrote it at the end of the file, 
set "<B>default=1</B>".<BR><BR><U><FONT size=5><A name=6></A>6. When it 
works</FONT></U><BR><BR>Reboot to your new kernel and pray. Ensure that your 
hardware is detected properly during the boot. If it does not boot, reboot again 
and try to find why it didn't work. Don't be scared to recompile it again, you 
can have to do it more than a time. Now if everything goes ok put the new kernel 
as default:<BR><BR><I>$ rm /usr/src/linux-2.4<BR>$ ln -s /usr/src/linux-2.4.19 
/usr/src/linux-2.4</I><BR><BR>or (it depends the version you have):<BR><BR><I>$ 
rm /usr/src/linux<BR>$ ln -s /usr/src/linux-2.4.19 /usr/src/linux</I><BR><BR>To 
see which one you have to choose, simply do this:<BR><BR><I>$ ls -ld 
/usr/src/linux*<BR>lrwxrwxrwx 1 root root 12 Oct 30 18:55 /usr/src/linux -&gt; 
linux-2.4.17<BR>drwxr-xr-x 14 root root 4096 Oct 30 17:26 
/usr/src/linux-2.4.17<BR>drwxr-xr-x 14 root root 4096 Oct 30 15:16 
/usr/src/linux-2.4.17-openmosix-r2<BR>drwxr-xr-x 14 root root 4096 Nov 1 20:11 
/usr/src/linux-2.4.19<BR>drwxr-xr-x 15 root root 4096 Nov 1 18:01 
/usr/src/linux-2.4.19-openmosix-r7</I><BR><BR>It will show you lines with linux 
in their name. Have a look at the symlink, you will find it by looking at the 
rights of the files: lrwxrwxrwx. The "l" let you know it is a symlink so look at 
the name of this file and remove it to place the new symlink. Here you will 
choose the second solution as the symlink is called linux (/usr/src/linux). You 
can also change your "<B>default=</B>" in lilo.conf. Now make a bootdisk with 
the new kernel installed (<I>mkbootdisk $(uname -r)</I> or <I>mkbootdisk 
2.4.19</I>). If after many efforts it didn't decide to work, apply backuped 
files in their original path. If everything goes good, just enjoy :)<BR><BR>Find 
more infos about kernel compiling in /usr/src/linux/README (general view on 
kernel compilation), /usr/src/linux/Documentation/Configure.help (explain in 
detail every elements of make config) or 
/usr/src/linux/Documentation/modules.txt for modules 
explanation.<BR><BR><U><FONT size=5><A name=7></A>7. 
Conclusion</FONT></U><BR><BR>I hope this tutorial will help you on some stuff. I 
wrote it for everyone and every levels on linux. Compiling the kernel is 
frightening when you don't know how it works but as you may have seen, it's not 
that hard. Enjoy your new kernel and look on kernel.org for changes and new 
stuff added in the new version. If you have any question or simply want to have 
a talk, join irc.netstat.org #aknet. See you there ;P </P>

</BODY></HTML>