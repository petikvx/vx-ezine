      Ü       Ü
     ßßÜÜÜÜÜ Üßß      Ü ÜÜÜÜ   ÜÜÜ  ÜÜ ÜÜÜ  ÜÜ ÜÜÜ
    ÚÄÜÛÛÛÛÛÛÜÄÄÄÄÄÄÄÛÄÛßÜÄßÛÄÛÄÄÄßÛÜÄÛÄÄÄßÛÜÄßŞÛÄÄÄÄÄÄÄÄÜÄÄÄ(C)Ä1995Ä1996Ä¿
    ³ ÛÛÛ Û ÛÛ    ßÜß ÛÛ  ßßÜÜ Û Üß  ÛÜÛ Üß  Û ŞÛ ßÜÜ  Üß ß       by       ³
    ÀÄÜßÛÛÜÛÛßÜÄÄÄÄÄÄÄÄÛÜÄÄÜÛÄßÜßÜÜÄÄÄÛÜßÜÜÄÄÄÛŞÛÜÄÄÜßÜßÄÄÄÄÄNighØÄÄ$piriØÄÙ
    ßÛ  ß ß ß  Ûß       ßßßß       ßßß     ßßß ßßßßßß

     Ú--ÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--Ä¿
     | Welcome to the $pirit's Universal Polymorphic Device, release 2.2! |
     À--ÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÂÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÂ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÙ
                          |(C)1996 by ÄNighÅÄ$piriÅÄ|
                          ÀÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÄ--ÄÄÄÙ



Introduction
~~~~~~~~~~~~

 This is the 2.2 version of $UPD ($pirit's Universal Polymorphic Device).
Old versions (2.0, 2.1)  contain  some  bugs. Version 2.0 don't work cor-
rectly  on  computers  withs  some  types  of  BIOSes  because  of  wrong
realisation of int 16h handler (on those BIOSes, of course ;). So, I  did
more correct variant of device, which works with  all  (I hope)  BIOSes -
that was v2.1. Soon I find new lack: protection  of  new  device  can  be
break by AUTOHACK-II (using standart method)  and  some  another  similar
crackers. But now in [$UPDû2.2] I correct this lack.

Description
~~~~~~~~~~~

 $pirit's  Universal  Polymorphic  Device  ($UPD) is the  polymorph-based
constructor  of  encoders/decoders.  This  device  is  not  similar  with
MTE, TPE, APE, PME, SMEG, GPE  and lot of another polymorphic analogs. Of
course I acquainted  with  such  engines, but  during my creative process
I never  tried  to  make  something  which  resemble  the plagiarism. So,
$UPD-engine present your possibility to convert some ;) your  progs  into
full polymorphic ones. I think  what  in first  viriis  makers will  turn
one's attention to my engine. Yes, they  will  be right, but this  engine
can serve for most useful purpose. For example, you can use it for saving
your  progs  from hacking.
WARNING! Correct work of [$UPDû2.2] guaranted only if nothing was changed
in it's code!
 During encrypting $UPD build decryptor which consist of several encoding
instructions. They  are  select by $UPD from xor/not/add/sub/dec/inc/rol/
ror/neg types. If selected instruction is xor/add/sub, it can  use random
register-key during encoding or decoding. One of them  must be "xor" with
special  register, which  contain CRC of all decryptor :) So, it's unpos-
sible to change any data in  decoder (direct jump anywhere, for example).
Here an example of such decrytion code:

	.....

	cs:
	xor	[si],ax		; CRC key
	cld			; Rubbush
	cs:
	rol	[si],1
	cs:
	sti			; Rubbish
	add	[si],bp
	cs:
	ror	[si],cl
	ds:			; Rubbish
	cs:
	neg	[si]
	cs:
	add	[si],si

	.....

 These registers-keys initialised  by random set of mathematic  commands.
Register-pointer  to  coding  data  select from bx/si/di/bp types. But it
different   with  registers-keys. Cycle  of  decryptors  based  on  high-
polymorpic  matrix. Here  can  used add/sub/dec/inc/loop/jnz instruction.
For example, sub ax,ffff is  same as inc ax. Only types of inc/dec - two,
of add/sub - 4, loop  is  substitute for  jnz. Cycle register select from
all types (exclude sp), but it different  with register-pointer. All this
framework provides with a lot of "empty"  instructions (clc/es:/xchg/and/
or/test/mov...) and  calls  of "empty" 21th interrupt functions (0bh/19h/
30h/...). In the second release appeared best encryption mechanism, which
improwed in this release. Now all dercoder body consist of small routines
and different calls and jumps. Usualy calls appear even in decoding cycle,
so some registers-keys changes by  different  random  lows. So, it's very
difficult  to mind and  disassembly  encrypted  code ;) Now I'll say some
words about pretty possibility, which appeared in some previous releases.
It is an anti-debuging/exploring traps. In first, decoder  use CRC of his
data, which calculate in special routine and places into different regis-
ters. Main of  such  CRC-registers  pushed into  keyboard buffer and then
it value may be taking in any time for it next using. During tracing, all
debugers use keyboard  buffer, so value can be lost and normal encryption
is unpossible. Such thing  also  take  place if user press keys during or
before  decoding, so  decoder  disable IRQ 1 (keyboard), IRQ 3, 4 (mouse)
before decoding.

 For best encrypting you can twice or more encrypt one and the same data,
but it can seriosly increase the size of crypting data ;)
 Size of decoders without encrypted code is about 500-900 bytes length.

 The contents of $UPD22.RAR:

  $UPD22.DOX    -  this file, of course ;-)
  $UPD22.INC    -  assembler module, which you can include in listing
                   of yor own progs (substitution for object module)
  $UPD22.OBJ    -  object module, which you can include in your progs
  $UPDDEMO.ASM  -  sourse of $UPDDEMO.COM
  $UPDDEMO.COM  -  executable file, which generate 20 small
                   progs, encrypted with [$UPDû2.2]
  $UPDVIRI.ASM  -  sourse of $UPDVIRI.COM
  $UPDVIRI.COM  -  this is the example of using $UPD in viriis, be careful!
  C00L.INC      -  assembly routine which display my image (used in *.asm)
  FILE_ID.DIZ   -  small comment for archive
  MAKEDEMO.BAT  -  batch compiler $UPDDEMO.ASM into $UPDDEMO.COM with
                   object module using
  MAKEVIRI.BAT  -  batch compiler $UPDVIRI.ASM into $UPDVIRI.COM with
                   object module using


Be careful, you can meet some bugs.  But during  tests of I am  not found
bugs or gluks. The size of engine's code  is 3689 bytes. That's small for
such cool cryptor, don't you think?
 Now I will tell yor about the method of includes this engine in your asm
files. Declaration of public routines in object module is next:

  .MODEL TINY			; Use TINY model
  .CODE				; Equal for "_TEXT segment para public 'CODE'"
	public	$UPD		; Main routine declaration
	public	FullRandom	; Random word numbers generator
	public	Random		; Random word numbers generator
	public	BRandom		; Random byte numbers generator
	public	Boolean		; Random bits generator
	public	$UPD_Bottom	; Address of firs byte in engine
	public	$UPD_Top	; Address of first byte after engine's body

  $UPD_Bottom	=	$	; Pointer to first byte in engine

	.....			; Body of engine

  $UPD_Top	=	$	; Pointer to first byte after engine's body

  END

 As you can see, I used TINY model of memory  and .CODE  directive, which
compatibility with "_TEXT  segment  para public 'CODE'" declaration. Here
also five public-declared routines and two public-declared  values, which
mean I adduce:

  $UPD        -  main routine, serve for endocing and building of decoders
  FullRandom  -  random word numbers [0,ffff] generation routine
  Random      -  random word numbers [0,ax] generation routine
  BRandom     -  random byte numbers [0,al] generation routine
  Boolean     -  random TRUE/FALSE generation routine
  $UPD_Bottom -  pointer to begin of $UPD-engine
  $UPD_Top    -  pointer to end of $UPD-engine

 You must declare in your oun head module in next order:

  .MODEL TINY
  .CODE

	extrn	$UPD:near
	extrn	FullRandom:near
	extrn	Random:near
	extrn	BRandom:near
	extrn	Boolean:near
	extrn	$UPD_Bottom:near
	extrn	$UPD_Top:near

 After that, you  can  use calls of necessary  procedures or  $UPD_Bottom
and $UPD_Top values. For more detail information - how  compile  it  with
tasm - you may look at the $UPDDEMO.ASM and $UPDMAKE.BAT files.

Routines calls format
~~~~~~~~~~~~~~~~~~~~~

-----------------
$UPD call format:
-----------------

Entry:  ah=crypt methods:
          Bit 0: 1=Use int 21h calls;
                 0=Don't use them (for compatibility of decryptors with
                 another OS)
          Bit 1: 1=Give key value in stack to encrypted code. You can
                 use it for best protection of encrypted code (I hope
                 you understand how). You must use pop command for
                 access to this value. Example (entry - bx=0200h):

			push	0200h	; Somewhere in decryptor

			...

			nop		; Here is the start of encrypted code

			<do_something>

			pop	ax	; Access to value 0200h
			mov	dl,7	; DOS Fn 02: display char @ dl
			int	21h	; (beep)

			...

                 0=Don't give key value in stack
          Bit 2: 1=Give key value in keyboard buffer. It also can be
                 used for more improved encrypted code protection.
                 Example (entry - dx=0200h):

			mov	ah,5	; Somewhere in decryptor:
			mov	cx,00	; Store low byte into keyboard buffer
			int	16h
			mov	cx,02	; Store high byte into keyboard buffer
			int	16h

			...

			nop		; Here is the start of encrypted code

			<do_something>

			xor	ax,ax	; Get low byte of key value:
			int	16h
			mov	bl,al	; bl=00

			xor	ax,ax	; Get high byte of key value
			int	16h
			mov	bh,al	; bh=02

			mov	ax,bx	; DOS Fn 02: display char @ dl
			mov	dl,7	; (beep)
			int	21h

			...

                 0=Don't give key value in buffer
          Bit 3: 1=Disable IRQ 1,3,4 (Keyboard, COM1 & COM2). Use it
		 also for bes protection of encrypted code. Example:

			in	al,21h	; Somewhere in decryptor:
			or	al,1ah	; Disable IRQ 1, 3 and 4
			out	21h,al

			...

			nop		; Here is the start of encrypted code

			<do_something>

			in	al,21h	; Enable IRQ 1, 3 and 4
			and	al,0e5h
			out	21h,al

			...


                 2=Enable all IRQs
        ds=es=cs
        [si]=Coding data
        [di]=Buffer for placing there encoded data
        cx=Coding data length
	bx=key value for $UPD decoder, which it will return in stack to 
	decrypted code, if bit 1 in ah set in 1
        dx=key value for $UPD decoder, which it will return in kbd buffer,
	if bit 2 in ah set in 1
Return: [di]=Encoded data with polymorphic decoder
        cx=Encoded data length and decryptor's size
Notes:  All 8086 segment registers (exclude only ss) must be assumed at
        one place. But  decryptor, which  will be generated  with
        this call, can work even if ds, es and cs are not equal.
        Method of buffer size calculating must be:
         Buffer_Size=Coding_Data_Size+2*1300 (or +2*1100, but be carefull)
        Here:
         Buffer_Size is the size of buffer (put into si register)
         Coding_Size is the size of coding data (put into cx register)
        Example:
         If you need in encrypting code 1000b length, you must reserve
         buffer 3600b length for normal work of this device.

-----------------------
FullRandom call format:
-----------------------

Entry:  None
Return: ax=random number from [0,ffff] interval, ZF=ax

-------------------
Random call format:
-------------------

Entry:  ax=highest bound of random number interval
Return: ax=random number from [0,ax] interval, ZF=ax

--------------------
BRandom call format:
--------------------

Entry:  al=highest bound of random number interval
Return: ax=random number from [0,al] interval (ah=0), ZF=ax

--------------------
Boolean call format:
--------------------

Entry:  None
Return: ax=0 or 1, ZF=ax


    Ü ÜÜÜÜ   ÜÜÜ  ÜÜ ÜÜÜ  ÜÜ ÜÜÜ
   Û ÛßÜ ßÛ Û   ßÛÜ Û   ßÛÜ ßŞÛ        Ü  '96
ßÜß ÛÛ  ßßÜÜ Û Üß  ÛÜÛ Üß  Û ŞÛ ßÜÜ  Üß ß
     ÛÜ  ÜÛ ßÜßÜÜ   ÛÜßÜÜ   ÛŞÛÜ  ÜßÜß
      ßßßß       ßßß     ßßß ßßßßßß


PS: Sorry for bad english - I never check what I write ;)

                                                (C)1995-1996 by ÄNighÅÄ$piriÅÄ
