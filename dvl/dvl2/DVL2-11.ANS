
[0;1;35m                                D V L  # 2

[33m                          Полиморфизм на паскале
                                  Part I
                              (c) by Duke/SMF

[34mВведение
[37m
   На языках высокого уровня написано достаточно много вирусов. Но все они,
как правило, достаточно примитивны - редко встретишь шифрующиеся или  стел-
свирусы. А полиморфиков и того меньше. Точнее говоря, мне  известно  только
три полиморфика, написанных на паскале. (И не стоит упрекать меня  в  неве-
жестве - я не обязан знать все вирусы.)

   Первый из них написан [32mRedArc'ом[37m и опубликован в журнале [32mMoonBug #2[37m.  Ви-
рус состоял из нескольких частей, которые компилировались отдельно друг  от
друга, и при поражении файла эти куски в каждой новой жертве  находились  в
новом месте. Это конечно все оригинально, но занимает [32m75Kb[37m. К тому же анти-
вирусники быстро разобрались с этим полиморфиком.

   Второй вирус - это широко известный [32mWin.Apparition by SSR[37m. Он написан на
[32mBorland Pascal with Objects[37m и поражает файлы в формате PE (для Windows).  К
его недостаткам относится большой размер вируса - около [32m88 Kb[37m.  Этот  вирус
использует собственную функцию-полиморфный генератор. Как  написал  Каспер-
ский в своей книге, "мне так и не удалось  заставить  ее  функционировать".
Тем не менее, этот вирус вполне работоспособен и очень оригинален. Для  му-
тации в исходный текст добавляются команды-"пустышки"  и  код  перекомпили-
руется.

   Третий из известных мне полиморфный вирусов на паскале, является мой ;))
вирус [32mHLLP.TRANS.Demo[37m

[34mСущность технологии TRANS
[37m
   Мой вирус использует технологию [32mTRANS : Take RANdom Switch[37m  (Взять  Слу-
чайный Переключатель). Идея [32mTRANS [37mзаключается  в  перекомпиляции  исходного
текста вируса каждый раз с новыми, выбираемыми случайным образом установка-
ми директив компилятору. Полученные при этом вирусы имеют разный  размер  и
разное содержимое. Недостатком вируса [32mHLLP.TRANS.Demo [37m(так же как и  вируса
Win.Apparition) является невозможность мутирования вируса при отсутствии  в
PATH компилятора языка Pascal.

[34mО вирусе HLLP.TRANS.Demo
[37m
   Представляемый вашему вниманию вирус [32mHLLP.TRANS.Demo  [37mявляется  примером
реализации [32mTRANS-технологии[37m. Он написан на Turbo Pascal 7.0  и  может  быть
откомпилирован компиляторами [32mBPC.EXE[37m (Borland Pascal)  или  [32mTPC.EXE[37m  (Turbo
Pascal). (Стоит заметить, что результатом компиляции одного и того  же  ис-
ходника разными компиляторами, будут являться файлы  с  разным  содержимым.
Чем не зацепка для полиморфизма? ). Этот вирус мной широко не тестировался.
Возможно, что при некоторых комбинациях  ключей  он  утратит  работоспособ-
ность и станет Intended. Так что принимайте его [32mAS IS [37m(как есть),  изучайте
и придумывайте что-то новое.

Процесс создания вируса [32mHLLP.TRANS.Demo[37m

   В связи с тем, что вирус мутирует  путем  перекомпиляции  исходника,  он
должен таскать этот исходник с собой. Если таскать его непакованным, то ви-
рус будет занимать слишком много места (поскольку исходник ~6Kb). К тому же
при просмотре по F3 пораженного файла в нем обнаружится куча  текста.  Зна-
чит исходник надо упаковать - меньше места и нет текста. Воспользуемся  по-
пулярной программой [32mPKZIP [37mи будем таскать с собой [32mZIP-архив  [37mс  исходником.
(Тут выявляется еще один недостаток вируса [32mHLLP.TRANS.Demo[37m  -  его  зависи-
мость от утилиты [32mPKUNZIP.EXE[37m в каталогах [32mPATH[37m.) Но это значит, что в  нашем
вирусе будет иметься постоянный кусок, а именно [32mZIP-архив[37m. Этого  допустить
нельзя, иначе антивирусники получат в руки готовую сигнатуру  :((  Следова-
тельно, надо шифровать архив с ключом, случайно меняющимся от одного экзем-
пляра вируса к другому. Этот ключ мы тоже будем хранить в пораженном файле.

   Каким образом [32mHLLP-вирусы [37mобычно поражают файлы? Они переносят кусок  из
начала файла в конец файла, причем размер куска должен быть больше или  ра-
вен длине вируса, а сами записываются в начало. Раз уж у нас имеется  ключ,
будем [32mшифровать [37m(xor'ить) переносимый кусок файла с этим ключом. Это  свое-
го рода "защита от выкусывания".

   Раз у нас [32mHLLP-вирус[37m, то нам необходима метка-идентификатор  зараженнос-
ти файла. А поскольку у нас полиморный вирус, сделаем эту  метку  разной  в
каждом новом экземпляре вируса. Я сделал ее зависящей от первых двух симво-
лов в шифровальном ключе. Если ключ имеет вид "0123456789ABCDEF", то в  по-
раженном файле по адресу $0A будет стоять "10".

   По адресу $0С располагается длина откомпилированного вируса (назовем  ее
SL). Полная длина вируса равна SL+16+ZS, где длина ключа  равна  16,  ZS  -
размер [32mZIP-архива[37m. Прирост файла при заражении равен SL+16+ZS-2 (т.к.  сим-
волы "MZ" из начала пораженного файла в конец не переносятся,  а  "остаются
на месте").

[34m   Таким образом, структура пораженного файла принимает вид:
[36m
         +--------------------+
         |  Вирус  (SL байт)  |
         +--------------------+
         |   Ключ (16 байт)   |
         +--------------------+
         |ZIP-архив (ZS байт) |
         +--------------------+
         | Конец файла-жертвы |
         +--------------------+
         |Зашифрованное начало|
         |    файла-жертвы    |
         | (SL+16+ZS-2 байт)  |
         +--------------------+
[37m
   После запуска инфицированного файла управление получает вирус. Он прове-
ряет наличие в каталогах [32mPATH [37mутилиты [32mPKUNZIP.EXE [37mи одного из  компиляторов
паскаля ([32mBPC.EXE[37m или [32mTPC.EXE[37m). Если они обнаружены, то проводится поиск од-
ного незараженного [32mEXE-файла [37mв текущем каталоге. Если такой файл найден, то
вирус переходит к его заражению (иначе - к запуску  файла-носителя).  Вирус
читает ключ и расшифровывает [32mZIP-архив [37mв файл [32m$.ZIP[37m;  извлекает  из  архива
файл $.PAS; редактирует файл $.PAS, устанавливая переключатели  директив  в
случайные положения; компилирует его в файл $.EXE; дописывает к $.EXE  слу-
чайно сгенерированный ключ и зашифрованный с этим ключом архив;  определяет
длину (SN) полученного файла $.EXE, ставит метку о пораженности этого  фай-
ла; переносит SN-2 байт из начала жертвы в ее конец; пишет содержимое $.EXE
в начало жертвы. Мы получаем  инфицированный  файл.  Вспомогательные  файлы
удалаются.

   Теперь пора запускать файл-носитель. Для этого пораженный файл копирует-
ся в файл $.DAT, а файл-носитель редактируется :  расшифрованный  кусок  из
конца устанавливается на свое место в начале файла, а лишняя дописка в кон-
це отсекается. Поэтому даже контролирующие себя на предмет заражения  прог-
раммы будут работать без криков о своем изменении. Когда вирус снова  полу-
чает управление, он замещает файл-носитель файлом $.DAT.

   В связи со спецификой вируса он не заражает файлы размером меньше 10Kb.

[36m   Продолжение смотите в следующем файле.
[1;35m                            The End of File