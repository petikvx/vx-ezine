<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>ELF EXECUTABLE RECONSTRUCTION FROM A CORE IMAGE</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="left"><font face="Verdana"><small><img src="er.gif" width="594" height="24"></small><font
size="1"><br>
<br>
&nbsp;&nbsp;&nbsp; - Silvio Cesare<br>
&nbsp;&nbsp;&nbsp; - December 1999<br>
&nbsp;&nbsp;&nbsp; - http://www.big.net.au/~silvio<br>
&nbsp;&nbsp;&nbsp; - http://virus.beergrave.net<br>
<br>
<font color="#FF0000">TABLE OF CONTENTS</font><br>
<br>
KERNEL CHANGES FROM 2.0 TO 2.2<br>
INTRODUCTION<br>
THE PROCESS IMAGE<br>
THE CORE IMAGE<br>
EXECUTABLE RECONSTRUCTION<br>
FAILURES IN RECONSTRUCTION<br>
USES OF RECONSTRUCTION<br>
<br>
<br>
<font color="#FF0000">KERNEL CHANGES FROM 2.0 TO 2.2</font><br>
<br>
This article was written primarily in Linux 2.0.x but the code was patched to work in both
2.0.x and 2.2.x If any inconsistancies occur in this article related to kernel changes
(the ELF core dump image I know has changed. No longer is the first PT_LOAD segment in the
image the TEXT segment). I may modify this article to reflect 2.2, but this is currently
not planned.<br>
<br>
Silvio Cesare, 28 January 2000<br>
<br>
<br>
<font color="#FF0000">INTRODUCTION</font><br>
<br>
This article documents the results from experimenting with binary reconstruction of an ELF
executable given a core dump or snapshot of the process image. ELF knowledge is assumed
and it is suggested that the interested reader understand the structure of an ELF binary
before undertaking full understanding, but if only a rudimentary understanding of the
reconstruction is required, then it may be possible to ignore ELF understanding. A Linux
implementation of this reconstruction code is provided.<br>
<br>
<font color="#FF0000">THE PROCESS IMAGE</font><br>
<br>
In summary, a core image is a dump of the process image at dump time. The process image
contains a number of loadable program segments or virtual memory regions. In an ELF binary
these are referred to by program headers and in the Linux kernel they are referred to as
vm_area_struct's. The actual core dump is a dump of the vm_area_struct's but these
correspond to the program headers of the executable and shared libraries used to create
the process image. In Linux, a group of vm_area_struct's are referred to as a memory map
or as a map in the proc file system. A typical map is given below for a program using
libc.<br>
<br>
debian# cat /proc/16114/maps<br>
08048000-08049000 r-xp 00000000 03:03 50198<br>
08049000-0804a000 rw-p 00000000 03:03 50198<br>
40000000-4000a000 r-xp 00000000 03:03 6001<br>
4000a000-4000c000 rw-p 00009000 03:03 6001<br>
4000c000-4000e000 r--p 00000000 03:03 30009<br>
4000e000-400a0000 r-xp 00000000 03:03 6030<br>
400a0000-400a7000 rw-p 00091000 03:03 6030<br>
400a7000-400b4000 rw-p 00000000 00:00 0<br>
bffff000-c0000000 rwxp 00000000 00:00 0<br>
<br>
The first two memory regions using virtual addresses 8048000 - 8049000 and 8049000 -
804a000 correspond to the text and data segments respectively.<br>
Notice also that the permission bits represent this also. Also notice that the memory
regions only lie on page borders. All memory regions in a core dump or mapping lie on page
borders. This means, that the smallest memory region is one page long. It must also be
noted that a program segment represented by a program header in an ELF binary does not
have to lie on a page border, so program segments do not map one to one on virtual memory
regions. The following six mappings correspond to libc memory regions. The last region is
the stack.<br>
<br>
<font color="#FF0000">THE CORE IMAGE</font><br>
<br>
The core image as stated above is a dump of the process image with some extra sections for
registers and any useful information. In an ELF core image, the memory regions belonging
to the process image as stated correspond to program segments, so a core file has a list
of program headers each for each virtual memory region. The register information and so
forth is stored in a notes section in the ELF binary. To reconstruct an executable from a
core dump or process image we can ignore the registers and concentrate only on the memory
regions.<br>
<br>
<font color="#FF0000">EXECUTABLE RECONSTRUCTION</font><br>
<br>
To reconstruct an executable from a core dump we simply have to create the ELF execute
Abel with the memory regions corresponding to the text and<br>
data segments of the core image. It must be remembered, that when loading the text
segment, the ELF header and program headers are also loaded into memory (for efficiency)
so we can use these for our executable image. The executable ELF header contains such
information as the true text and data segment start and size (remember the memory regions
lie on page borders).<br>
<br>
Now, if we only use the text and data segments in our reconstruction, the result
executable may only work on the system it was reconstructed on. This is because the
Procedure Linkage Table (PLT) may have resolved shared library functions to point to its
loaded value. Moving the binary means that the library may be at a different position, or
that the function may be at a different location. Thus for true, system independence, the
entire image excluding the stack must be used in the reconstructed executable.<br>
<br>
<br>
<font color="#FF0000">FAILURES IN RECONSTRUCTION</font><br>
<br>
The problem with reconstruction, is that the snapshot of the process image is at runtime,
not at initiation time, so its possible that the data segment which is writable may have
changed values. Consider the following code<br>
<br>
&nbsp;&nbsp;&nbsp; static int i = 0;<br>
<br>
&nbsp;&nbsp;&nbsp; int main()<br>
&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i++) exit(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;Hi\n&quot;);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
In this instance, reconstructing the image will result in an executable that immediately
exits because it relies on the initial value of the global variable 'i'. The educated user
may use debugging tools to find such code but for the uneducated user its not so easy.<br>
<br>
<font color="#FF0000">USES OF RECONSTRUCTION</font><br>
<br>
Reconstructing images does not have many uses outside academic use but one possible use is
the ability to copy an executable that has only execute<br>
permission on. Creating the core dump is easy by sending the process a SIGSEGV or
alternately, the image may be copied from the process image in the proc filesystem.<br>
<br>
--<br>
<br>
$ cat test_harness.c<br>
int main()<br>
{<br>
&nbsp;&nbsp;&nbsp; for (;;) printf(&quot;Hi\n&quot;);<br>
}<br>
$ gcc test_harness.c -o test_harness<br>
$ ./test_harness<br>
Hi<br>
Hi<br>
Hi<br>
.<br>
.<br>
.<br>
$ kill -SIGSEGV `ps|grep test_harness|grep -v grep|awk '{print $1}'`<br>
$ ./core_reconstruct<br>
$ ./a.out<br>
Hi<br>
Hi<br>
Hi<br>
.<br>
.<br>
.<br>
<br>
--------------------------------- CUT ---------------------------------------<br>
<br>
#include &lt;stdio.h&gt;<br>
#include &lt;stdlib.h&gt;<br>
#include &lt;unistd.h&gt;<br>
#include &lt;fcntl.h&gt;<br>
#include &lt;elf.h&gt;<br>
#include &lt;stdarg.h&gt;<br>
#include &lt;string.h&gt;<br>
<br>
void die(const char *fmt, ...)<br>
{<br>
&nbsp;&nbsp;&nbsp; va_list ap;<br>
<br>
&nbsp;&nbsp;&nbsp; va_start(ap, fmt);<br>
&nbsp;&nbsp;&nbsp; vfprintf(stderr, fmt, ap);<br>
&nbsp;&nbsp;&nbsp; va_end(ap);<br>
&nbsp;&nbsp;&nbsp; fputc('\n', stderr);<br>
&nbsp;&nbsp;&nbsp; exit(1);<br>
}<br>
<br>
#define PAGE_SIZE&nbsp;&nbsp;&nbsp; 4096<br>
<br>
static char shstr[] =<br>
&nbsp;&nbsp;&nbsp; &quot;\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.symtab\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.strtab\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.shstrtab\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.interp\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.hash\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.dynsym\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.dynstr\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.rel.got\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.rel.bss\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.rel.plt\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.init\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.plt\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.text\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.fini\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.rodata\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.data\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.ctors\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.dtors\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.got\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.dynamic\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.bss\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.comment\0&quot;<br>
&nbsp;&nbsp;&nbsp; &quot;.note&quot;<br>
;<br>
<br>
char *xget(int fd, int off, int sz)<br>
{<br>
&nbsp;&nbsp;&nbsp; char *buf;<br>
<br>
&nbsp;&nbsp;&nbsp; if (lseek(fd, off, SEEK_SET) &lt; 0) die(&quot;Seek error&quot;);<br>
&nbsp;&nbsp;&nbsp; buf = (char *)malloc(sz);<br>
&nbsp;&nbsp;&nbsp; if (buf == NULL) die(&quot;No memory&quot;);<br>
&nbsp;&nbsp;&nbsp; if (read(fd, buf, sz) != sz) die(&quot;Read error&quot;);<br>
&nbsp;&nbsp;&nbsp; return buf;<br>
}<br>
<br>
<br>
void do_elf_checks(Elf32_Ehdr *ehdr)<br>
{<br>
if (strncmp(ehdr-&gt;e_ident, ELFMAG, SELFMAG)) die(&quot;File not ELF&quot;);<br>
if (ehdr-&gt;e_type != ET_CORE) die(&quot;ELF type not ET_CORE&quot;);<br>
if (ehdr-&gt;e_machine != EM_386 &amp;&amp; ehdr-&gt;e_machine != EM_486)<br>
die(&quot;ELF machine type not EM_386 or EM_486&quot;);<br>
if (ehdr-&gt;e_version != EV_CURRENT) die(&quot;ELF version not current&quot;);<br>
}<br>
<br>
int main(int argc, char *argv[])<br>
{<br>
&nbsp;&nbsp;&nbsp; Elf32_Ehdr ehdr, *core_ehdr;<br>
&nbsp;&nbsp;&nbsp; Elf32_Phdr *phdr, *core_phdr, *tmpphdr;<br>
&nbsp;&nbsp;&nbsp; Elf32_Shdr shdr;<br>
&nbsp;&nbsp;&nbsp; char *core;<br>
&nbsp;&nbsp;&nbsp; char *data[2], *core_data[3];<br>
&nbsp;&nbsp;&nbsp; int prog[2], core_prog[3];<br>
&nbsp;&nbsp;&nbsp; int in, out;<br>
&nbsp;&nbsp;&nbsp; int i, p;<br>
&nbsp;&nbsp;&nbsp; int plen;<br>
<br>
&nbsp;&nbsp;&nbsp; if (argc &gt; 2) die(&quot;usage: %s [core-file]&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; if (argc == 2) core = argv[1];<br>
&nbsp;&nbsp;&nbsp; else core = &quot;core&quot;;<br>
&nbsp;&nbsp;&nbsp; in = open(core, O_RDONLY);<br>
&nbsp;&nbsp;&nbsp; if (in &lt; 0) die(&quot;Coudln't open file: %s&quot;, core); <br>
<br>
&nbsp;&nbsp;&nbsp; if (read(in, &amp;ehdr, sizeof(ehdr)) != sizeof(ehdr)) die(&quot;Read
error&quot;);<br>
&nbsp;&nbsp;&nbsp; do_elf_checks(&amp;ehdr);<br>
<br>
&nbsp;&nbsp;&nbsp; if (lseek(in, ehdr.e_phoff, SEEK_SET) &lt; 0) die(&quot;Seek
error&quot;);<br>
&nbsp;&nbsp;&nbsp; phdr = (Elf32_Phdr *)malloc(plen = sizeof(Elf32_Phdr)*ehdr.e_phnum);<br>
&nbsp;&nbsp;&nbsp; if (read(in, phdr, plen) != plen) die(&quot;Read error&quot;);<br>
<br>
for (i = 0; i &lt; ehdr.e_phnum; i++)<br>
printf(&quot;0x%x - 0x%x (%i)\n&quot;, <br>
phdr[i].p_vaddr, phdr[i].p_vaddr + phdr[i].p_memsz, phdr[i].p_memsz);<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; copy segments (in memory)<br>
<br>
&nbsp;&nbsp;&nbsp; prog/data[0] ... text<br>
&nbsp;&nbsp;&nbsp; prog/data[1] ... data<br>
&nbsp;&nbsp;&nbsp; prog/data[2] ... dynamic<br>
*/<br>
&nbsp;&nbsp;&nbsp; for (i = 0, p = 0; i &lt; ehdr.e_phnum; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; phdr[i].p_vaddr &gt;=
0x8000000 &amp;&amp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; phdr[i].p_type ==
PT_LOAD<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prog[p] = i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p == 1) break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++p;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; if (i == ehdr.e_phnum) die(&quot;Couldnt find TEXT/DATA&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; 2; i++) data[i] = xget(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; phdr[prog[i]].p_offset,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (phdr[prog[i]].p_memsz + 4095) &amp; 4095<br>
&nbsp;&nbsp;&nbsp; );<br>
<br>
&nbsp;&nbsp;&nbsp; core_ehdr = (Elf32_Ehdr *)&amp;data[0][0];<br>
&nbsp;&nbsp;&nbsp; core_phdr = (Elf32_Phdr *)&amp;data[0][core_ehdr-&gt;e_phoff];<br>
<br>
&nbsp;&nbsp;&nbsp; for (i = 0, p = 0; i &lt; core_ehdr-&gt;e_phnum; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (core_phdr[i].p_type == PT_LOAD) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_prog[p] = i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p == 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_data[0]
= &amp;data[0][0]; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_data[1]
= &amp;data[1][<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (core_phdr[i].p_vaddr
&amp; 4095)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++p;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; if (i == core_ehdr-&gt;e_phnum) die(&quot;No TEXT and DATA
segment&quot;);<br>
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; core_ehdr-&gt;e_phnum; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (core_phdr[i].p_type == PT_DYNAMIC) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_prog[2] = i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_data[2] =
&amp;data[1][64];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; if (i == core_ehdr-&gt;e_phnum) die(&quot;No DYNAMIC segment&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; out = open(&quot;a.out&quot;, O_WRONLY | O_CREAT | O_TRUNC);<br>
&nbsp;&nbsp;&nbsp; if (out &lt; 0) die(&quot;Coudln't open file: %s&quot;,
&quot;a.out&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; core_ehdr-&gt;e_shoff =<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_phdr[core_prog[2]].p_offset +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; core_phdr[core_prog[2]].p_filesz +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(shstr);<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; text<br>
&nbsp;&nbsp;&nbsp; data<br>
&nbsp;&nbsp;&nbsp; bss<br>
&nbsp;&nbsp;&nbsp; dynamic<br>
&nbsp;&nbsp;&nbsp; shstrtab<br>
*/<br>
&nbsp;&nbsp;&nbsp; core_ehdr-&gt;e_shnum = 6;<br>
&nbsp;&nbsp;&nbsp; core_ehdr-&gt;e_shstrndx = 5;<br>
<br>
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; 2; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Elf32_Phdr *p = &amp;core_phdr[core_prog[i]];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sz = p-&gt;p_filesz;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (lseek(out, p-&gt;p_offset, SEEK_SET) &lt;
0) goto cleanup;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (write(out, core_data[i], sz) != sz) goto
cleanup;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, shstr, sizeof(shstr)) != sizeof(shstr)) goto cleanup;<br>
<br>
&nbsp;&nbsp;&nbsp; memset(&amp;shdr, 0, sizeof(shdr));<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; text section<br>
*/<br>
&nbsp;&nbsp;&nbsp; tmpphdr = &amp;core_phdr[core_prog[0]];<br>
<br>
&nbsp;&nbsp;&nbsp; shdr.sh_name = 95;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_type = SHT_PROGBITS;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addr = tmpphdr-&gt;p_vaddr;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_offset = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_size = tmpphdr-&gt;p_filesz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_flags = SHF_ALLOC | SHF_EXECINSTR;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_link = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_info = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addralign = 16;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_entsize = 0;<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; data section<br>
*/<br>
&nbsp;&nbsp;&nbsp; tmpphdr = &amp;core_phdr[core_prog[1]];<br>
<br>
&nbsp;&nbsp;&nbsp; shdr.sh_name = 115;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_type = SHT_PROGBITS;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addr = tmpphdr-&gt;p_vaddr;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_offset = tmpphdr-&gt;p_offset;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_size = tmpphdr-&gt;p_filesz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_flags = SHF_ALLOC | SHF_WRITE;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_link = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_info = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addralign = 4;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_entsize = 0;<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; dynamic section<br>
*/<br>
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; core_ehdr-&gt;e_phnum; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (core_phdr[i].p_type == PT_DYNAMIC) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tmpphdr =
&amp;core_phdr[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; shdr.sh_name = 140;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_type = SHT_PROGBITS;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addr = tmpphdr-&gt;p_vaddr;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_offset = tmpphdr-&gt;p_offset;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_size = tmpphdr-&gt;p_memsz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_flags = SHF_ALLOC;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_link = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_info = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addralign = 4;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_entsize = 8;<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; bss section<br>
*/<br>
&nbsp;&nbsp;&nbsp; shdr.sh_name = 149;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_type = SHT_PROGBITS;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addr = tmpphdr-&gt;p_vaddr + tmpphdr-&gt;p_filesz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_offset = tmpphdr-&gt;p_offset + tmpphdr-&gt;p_filesz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_size = tmpphdr-&gt;p_memsz - tmpphdr-&gt;p_filesz;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_flags = SHF_ALLOC;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_link = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_info = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addralign = 1;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_entsize = 0;<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; shstrtab<br>
*/<br>
<br>
&nbsp;&nbsp;&nbsp; shdr.sh_name = 17;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_type = SHT_STRTAB;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addr = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_offset = core_ehdr-&gt;e_shoff - sizeof(shstr);<br>
&nbsp;&nbsp;&nbsp; shdr.sh_size = sizeof(shstr);<br>
&nbsp;&nbsp;&nbsp; shdr.sh_flags = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_link = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_info = 0;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_addralign = 1;<br>
&nbsp;&nbsp;&nbsp; shdr.sh_entsize = 0;<br>
<br>
&nbsp;&nbsp;&nbsp; if (write(out, &amp;shdr, sizeof(shdr)) != sizeof(shdr)) goto cleanup;<br>
<br>
&nbsp;&nbsp;&nbsp; return 0;<br>
<br>
cleanup:<br>
&nbsp;&nbsp;&nbsp; unlink(&quot;a.out&quot;);<br>
&nbsp;&nbsp;&nbsp; die(&quot;Error writing file: %s&quot;, &quot;a.out&quot;);<br>
&nbsp;&nbsp;&nbsp; return 1; /* not reached */<br>
}</font></font></p>
</body>
</html>
