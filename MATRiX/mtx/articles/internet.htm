<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Internet And ASM</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p><img src="internet.gif" width="293" height="23" alt="internet.gif (4356 bytes)"><font
face="Verdana"><small><small><small><br>
<br>
</small>Fisrt of all, i'm sorry 4 my english mistakes, this is not my native language.<br>
<br>
<font color="#FF0000">Greetz:</font><br>
<br>
Vecna - You teach me with your emails, ideas, codes ( like Babylonia, Updater and Vecna
Server ). Thanx<br>
<br>
All VX on #virus/#vir channels<br>
<br>
<strong>[MATRiX] team</strong>:<br>
<br>
Ultras, Mort, Nbk, Tgr, Del_Armg0<br>
<br>
<font color="#FF0000">HTTP ( Hypertext Transfer Protocol )</font><br>
<br>
It's the network protocol used on the World Wide Web. Like most network protocols, uses
client and servers. An HTTP client opens a connection and sends a request<br>
message to an HTTP server; the server then returns a response message, usually containing
the resource that was requested.<br>
<br>
<font color="#FF0000">API'S:</font><br>
<br>
My programs usually use this api's from WSOCK32.DLL:<br>
<br>
WSAStartup - Before use Windows sockets operations, you must make a successful
&lt;WSAStartup&gt;. If success, will return NULL in eax.<br>
<br>
socket - Creates a socket<br>
<br>
gethostbyname - Get IP address from a specific site.<br>
EX: 'www.geocities.com'<br>
<br>
connect - Establishes a connection to a peer<br>
<br>
send - Sends data on a connected socket.<br>
<br>
recv - Receives data from a socket.<br>
<br>
closesocket - Closes a socket.<br>
<br>
WSACleanup - Terminates use of the Windows Sockets DLL<br>
<br>
WSAGetLastError - Gets the error status for the last operation that failed<br>
<br>
<font color="#FF0000">CODING:</font><br>
<br>
As my english is terrible, i'll just show a program connecting itself to an internet
address and request a dummy file. You can get more RFC(S) at internet, but I prefer a
tutorial from James Marshall that could be found at:<br>
<br>
&lt;http://www.jmarshall.com/easy/&gt;<br>
<br>
<br>
;________________________CUT HERE_______________________<br>
<br>
.586p<br>
.model flat<br>
<br>
; KERNEL32.DLL<br>
<br>
extrn ExitProcess:proc<br>
<br>
; WSOCK32.DLL<br>
<br>
extrn WSACleanup:proc<br>
extrn socket:proc<br>
extrn connect:proc<br>
extrn send:proc<br>
extrn recv:proc<br>
extrn WSAStartup:proc<br>
extrn WSAGetLastError:proc<br>
extrn gethostbyname:proc<br>
extrn closesocket:proc<br>
<br>
; USER32.DLL<br>
<br>
extrn MessageBoxA:proc<br>
<br>
<br>
.data<br>
<br>
buffer db 512 dup (0)<br>
sock dd 0<br>
geocities db 'www.geocities.com',0<br>
<br>
request db 'GET MATRIX.VX HTTP/1.1',13,10 ; CRLF<br>
db 'Host: www.geocities.com',13,10 ; CRLF<br>
db 'User-Agent: [MATRiX]/1.0',13,10 ; CRLF<br>
db 'Accept: *.*, */*',13,10,13,10 ; CRLF CRLF<br>
request_size equ $ - request<br>
error1 db 'ERROR',0<br>
<br>
sockaddr:<br>
<br>
dd 050000002h ; Port number = 80 = http<br>
ipnumber dd 0 ; Host in hex.<br>
dd 0<br>
dd 0<br>
<br>
.code<br>
<br>
start:<br>
<br>
push offset buffer ;<br>
push 101h ; The program is asking the system if<br>
; this socket version is valid (1.01)<br>
call WSAStartup<br>
<br>
test eax,eax ; If eax return 0 the version was<br>
jnz error ; accepted<br>
<br>
push 00H ; Particular protocol to be used<br>
push 01H ; Type specification for the new socket<br>
push 02H ; PF_INET (format currently supported)<br>
call socket<br>
<br>
mov [sock],eax ; If eax = 0FFFFFFFFh, the socket can't be<br>
inc eax ; created<br>
jz error<br>
<br>
; Let's get the IP number from geocities<br>
<br>
push offset geocities<br>
call gethostbyname<br>
<br>
test eax,eax ; If eax = 0 the function fail<br>
jz error<br>
<br>
mov eax,[eax+4]<br>
mov eax,[eax+4]<br>
mov [ipnumber],eax ; Save IP number in eax<br>
<br>
; Now we can connect our socket to<br>
; an specific site<br>
<br>
push 16 ; The size of connect structure<br>
push offset sockaddr ; Point for it<br>
push [sock] ; Use our socket<br>
call connect<br>
<br>
test eax,eax ; If eax = 0 we are connected<br>
jnz error ; to geocities<br>
<br>
<br>
; I have to request files.<br>
; I'll request a file called<br>
; &lt;MATRIX.VX&gt;<br>
; Geocities don't have this file,<br>
; then the server will return<br>
; a line with the error:<br>
<br>
; 404 NOT FOUND<br>
<br>
repeat_send:<br>
<br>
push 0 ; Specifies the way the call is made<br>
push request_size ; The size of my request to the server<br>
push offset request ; Where my request can be found<br>
push [sock] ; And our socket (connected to geocities)<br>
call send<br>
<br>
inc eax ; If eax = 0FFFFFFFFh the function<br>
jnz sendok ; fail. But this is very common for<br>
; &lt;send&gt; function, and can be just an<br>
; ERROR called &lt;WSAEWOULDBLOCK&gt; (see more above)<br>
; When this error occur, we have just to<br>
; repeat the operation.<br>
<br>
call WSAGetLastError<br>
<br>
; You can add much more routines for<br>
; error codes. You can found an error<br>
; codes list at the end of this file.<br>
cmp eax, 10035<br>
je repeat_send<br>
<br>
jmp error<br>
<br>
sendok:<br>
<br>
; The request was done, now the program will<br>
; get the WEB SERVER response and show it in<br>
; a message box<br>
<br>
mov esi,offset buffer<br>
<br>
repeat_recv:<br>
<br>
push 0<br>
push 4096<br>
push esi<br>
push [sock]<br>
call recv<br>
<br>
inc eax<br>
jnz recvok<br>
<br>
call WSAGetLastError<br>
<br>
cmp eax, 10035 ; check for &lt;WSAEWOULDBLOCK&gt; error<br>
je repeat_recv<br>
<br>
jmp error<br>
<br>
recvok:<br>
<br>
dec eax<br>
jz done<br>
<br>
; We have to update the offset for the buffer<br>
<br>
add esi,eax<br>
jmp repeat_recv<br>
<br>
done:<br>
<br>
; Ok, the response was sent<br>
; Now i'll print it in the screen<br>
<br>
push 0<br>
push offset $<br>
push offset buffer<br>
push 0<br>
call MessageBoxA<br>
jmp theend<br>
<br>
error:<br>
<br>
push 0<br>
push offset error1<br>
push offset error1<br>
push 0<br>
call MessageBoxA<br>
<br>
theend:<br>
<br>
push 0<br>
call ExitProcess<br>
<br>
end start<br>
<br>
;________________________CUT HERE_______________________<br>
<br>
<br>
---===== ERROR CODES =====---<br>
<br>
<br>
These error codes are very usefull when a function fail<br>
<br>
WSAEINTR 10004 Interrupted system call.<br>
WSAEBADF 10009 Bad file number.<br>
WSEACCES 10013 Permission denied.<br>
WSAEFAULT 10014 Bad address.<br>
WSAEINVAL 10022 Invalid argument.<br>
WSAEMFILE 10024 Too many open files.<br>
WSAEWOULDBLOCK 10035 Operation would block.<br>
WSAEINPROGRESS 10036 Operation now in progress. This error is<br>
returned if any Windows Sockets API<br>
function is called while a blocking<br>
function is in progress.<br>
WSAEALREADY 10037 Operation already in progress.<br>
WSAENOTSOCK 10038 Socket operation on nonsocket.<br>
WSAEDESTADDRREQ 10039 Destination address required.<br>
WSAEMSGSIZE 10040 Message too long.<br>
WSAEPROTOTYPE 10041 Protocol wrong type for socket.<br>
WSAENOPROTOOPT 10042 Protocol not available.<br>
WSAEPROTONOSUPPORT 10043 Protocol not supported.<br>
WSAESOCKTNOSUPPORT 10044 Socket type not supported.<br>
WSAEOPNOTSUPP 10045 Operation not supported on socket.<br>
WSAEPFNOSUPPORT 10046 Protocol family not supported.<br>
WSAEAFNOSUPPORT 10047 Address family not supported by protocol<br>
family.<br>
WSAEADDRINUSE 10048 Address already in use.<br>
WSAEADDRNOTAVAIL 10049 Cannot assign requested address.<br>
WSAENETDOWN 10050 Network is down. This error may be<br>
reported at any time if the Windows<br>
Sockets implementation detects an<br>
underlying failure.<br>
WSAENETUNREACH 10051 Network is unreachable.<br>
WSAENETRESET 10052 Network dropped connection on reset.<br>
WSAECONNABORTED 10053 Software caused connection abort.<br>
WSAECONNRESET 10054 Connection reset by peer.<br>
WSAENOBUFS 10055 No buffer space available.<br>
WSAEISCONN 10056 Socket is already connected.<br>
WSAENOTCONN 10057 Socket is not connected.<br>
WSAESHUTDOWN 10058 Cannot send after socket shutdown.<br>
WSAETOOMANYREFS 10059 Too many references: cannot splice.<br>
WSAETIMEDOUT 10060 Connection timed out.<br>
WSAECONNREFUSED 10061 Connection refused.<br>
WSAELOOP 10062 Too many levels of symbolic links.<br>
WSAENAMETOOLONG 10063 File name too long.<br>
WSAEHOSTDOWN 10064 Host is down.<br>
WSAEHOSTUNREACH 10065 No route to host.<br>
WSASYSNOTREADY 10091 Returned by WSAStartup(), indicating that<br>
the network subsystem is unusable.<br>
WSAVERNOTSUPPORTED 10092 Returned by WSAStartup(), indicating that<br>
the Windows Sockets DLL cannot support<br>
this application.<br>
WSANOTINITIALISED 10093 Winsock not initialized. This message is<br>
returned by any function except<br>
WSAStartup(), indicating that a<br>
successful WSAStartup() has not yet been<br>
performed.<br>
WSAEDISCON 10101 Disconnect.<br>
WSAHOST_NOT_FOUND 11001 Host not found. This message indicates<br>
that the key (name, address, and so on)<br>
was not found.<br>
WSATRY_AGAIN 11002 Nonauthoritative host not found. This<br>
error may suggest that the name service<br>
itself is not functioning.<br>
WSANO_RECOVERY 11003 Nonrecoverable error. This error may<br>
suggest that the name service itself is<br>
not functioning.<br>
WSANO_DATA&nbsp; 11004 Valid name, no data record of requested<br>
type. This error indicates that the key<br>
(name, address, and so on) was not found.<br>
</small></small></font></p>
</body>
</html>
