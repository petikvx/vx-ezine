<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<meta name="Author" content="ULTRAS">
<title>CMIX by Z0MBiE</title>
</head>

<body text="#000000">

<p><img SRC="Cmix.gif" width="225" height="28"> </p>

<p><font size="-2" face="Verdana">CODE MIXER is an utility (subroutine, library, engine,
include file, ...) to mix 2 code buffers.<br>
The destination buffer will contain all instructions of the source buffers mixed between
each other in random order.<br>
<br>
<pre>  src buf #1        src buf #2      dest buf
     ------------      ------------    -------------
     imul eax, ebx     add edi,1       add edi,1
  q: cdq               add edi,2       imul eax, ebx
     xor ecx, ecx      add edi,3     q:cdq
     jz  q             loop $-2        add edi,2
     nop                               xor ecx,ecx  ; next cmd is jxx
                                       jz q         ; jxx-expanded to near,fixed
                                       add edi,3
                                       nop
                                       loop $-2     ; loop/z/nz/jecxz-ignored</pre>
<br>
<br>
CODEMIXER uses two external subroutines, rnd() and disasm(), both should be written in C
calling convention (i.e. return control with RET).<br>
<br>
DWORD rnd(DWORD) returns random number,<br>
DWORD disasm(BYTE* cmd) returns length of the command and -1 if error.<br>
<br>
In the example used simple randomer and external disassembler (LDE32). But you are always
able to use your own randomer and/or disassembler.<br>
<br>
CALLING CODEMIXER<br>
<br>
include cmix.inc<br>
<br>
pusho offset disasm ; DWORD disasm(BYTE*)<br>
pusho offset rnd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; DWORD rnd(DWORD range)<br>
push offset srcbuf1&nbsp; ; source buffer #1 -- offset<br>
push size srcbuf1&nbsp;&nbsp;&nbsp;&nbsp; ; ... size<br>
push offset srcbuf2&nbsp; ; source buffer #2 -- offset<br>
push size srcbuf2&nbsp;&nbsp;&nbsp;&nbsp; ; ... size<br>
push offset destbuf&nbsp; ; destination buffer -- offset<br>
push size destbuf&nbsp;&nbsp;&nbsp;&nbsp; ; ... maximal size<br>
push offset destsize&nbsp; ; ... pointer to new size (DWORD PTR)<br>
push maxcmd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; max&nbsp; # of
commands (in both buffers)<br>
call codemixer<br>
<br>
Return values:<br>
EAX==0 if success, destsize=size of the destination buffer<br>
EAX!=0 if error, error codes (CM_ERR_xxx) see in the CMIX.INC<br>
<br>
FEATURES<br>
<br>
- code is offset-independent, so it can be displaced or permutated<br>
- no external data used, only own stack vars<br>
- jmps/calls (E8,E9,7x,0F 8x) are fixed<br>
(to point correctly to the new addresses)<br>
- external jmps/calls (i.e. out of the source buffers) are fixed correctly<br>
- short jmps (7x,EB) are expanded into near jmps<br>
- if next command is jxx (short or near), it will be stored after current<br>
command, without inserting other buffer commands before jxx<br>
- commands jecxz,loop,loopz,loopnz (E0/E1/E2/E3) are ignored<br>
<br>
WHERE CODEMIXER CAN BE USED<br>
<br>
- to create polymorphic decryptors<br>
1. generate simple decryptor (as in crypt-virus)<br>
2. generate some trash (easy with ETG engine)<br>
3. mix buffers<br>
<br>
- to mix some commands from host 's startup and from virus's startup<br>
<br>
- to generate some hash-alike functions<br>
for example:<br>
dst-reg-set = [REG_EAX],<br>
src-reg-set = [REG_EBX],<br>
so generated function will return EAX=f(EBX)</font></p>

<p><a href="Cmix.zip"><font size="-1" color="#FF0000" face="Verdana">Source</font></a> </p>
</body>
</html>
