			  ========================  
			    Review of the P/S Gý       
			  By The Attitude Adjuster                          
			  ========================
       
      NOTE: The word 'idiot' is used throughout this document to refer to
  people  who would  actually  assemble MPC  or  Gý code and use it as an 
  original  virus. Do not confuse this term with the 'idiot' which refers
  to users  of the 'Bad  Influence' BBS (who would probably  fit into the
  other category as well!)
     
     "Gý, Phalcon/Skism's  newest virus  creation tool, is designed to allow
 everyone easy  access to  computer virus  source code.   More than a simple
 Vienna hack  generator, it  creates viruses  "on-the-fly" as  per the  user
 specifications.   Gý is  designed to  be easily maintainable and extensible
 through the  use of  special data  files created  especially for use by the
 program."
       -=P/S=- Gý Documentation

	I  downloaded it  eagerly, with  the same  anticipation I  feel with 
 every P/S  creation... I  exited back  to the  famed 'C Prompt,'  and began
 unzipping the new find...  but wait... I expected a revised PS-MPC... and I
 was (happily) mistaken...

	Dark  Angel has  created another classic (though  sure to get listed
 under  PS-MPC  in VSUM,  'cuz hey,  she doesn't even know her own name, let 
 alone  what to  name anyone's  virus... [she  fucked me  over too, guys!]),
 even  more effective  than the PS-MPC (or prunes...), and even more elegant
 than the most IDE-Filled,  Icon Based  piece of Dynamic Link Library trash.

	'On- the-fly' virus  generation has come a long way from the VCS and
 VCL days.  The code  is excellent, and even  improved over MPC coding. I am
 amazed and thrilled by the size of the code, as it is most compact, a great
 learning tool for code optimization.

	The new 'debug resistance' is  also a feature to be commended. Using
 the Intel's  'one-byte-interrupt,' and the fact that this interrupt is used
 as a  breakpoint in debuggers makes  for havok in  most debuggers. Still, a
 hardened programmer  can slide  by it, but, the 'one-byte-interrupt' factor
 makes that a  bitch, as the interrupt is, as I said, only one byte, instead
 of the average 'CD XX' type configuration...


	As with any virus generator, there are cons to be discussed. 

	DecimatoR  makes this  point quite  clear in 40Hex-9...  allow me to 
 quote him...

 "The  authors of MPC and VCL are very talented programmers.  Unfortunately, 
 the users of their  programs are just the opposite.  REAL virus programmers
 have a desire  to LEARN assembler - it's a test of their skill and ability.
 The users  of MPC  and VCL don't have that desire.  They only have a desire
 for recognition - and seeing  their name  in a virus  is a massive ego trip
 for them.   Why?  They did  nothing that  any Joe  Blow couldn't  have done
 using  a code  generator.  If  they REALLY want to prove how cool they are,
 let THEM  write a damn virus generation program and release it.  THAT ALONE
 will show the world their  skill and  ability.  As  for  USING the program,
 well,  I'm  more  impressed  with  a  nicely  formatted  term  paper  using
 WordPerfect  than I am with  viruses created  using MPC and VCL.  If you're
 one of  the  lame idiots  who uses  MPC or  VCL for "writing" viruses, then
 listen  up - those  programs were  written for  2 reasons -  to  prove  the
 programmer  could write such a thing, and to be used as a LEARNING TOOL for
 future virus writers - NOT to be abused the way they currently are."
 
	Exactly the  point I want to make, barring that he is not as violent
 as I am... but I will stifle the CAPS LOCK here...

	There  WILL always  be the  idiots out  there that  refuse to learn,
 merely to 'Wr1tE GnU \/1/>uZeZ (0/> \/I/>11)!!!1!11' Alas,  they will NEVER
 learn, and, though we may try, points like ours offer little help.

	That's why my personal opinion of code generators is quite low. Yes,
 it is a VERY impressive  work, and,  I commend  DA for his, as I do Nowhere
 Man for his VCL, but, I am still not a supporter of code generators.

	It's the stigma I have with 'learning,' something that dates back to
 when I was H/P avid (yeah, I' m a hacker  turned programmer... yuk!). There
 was  a hush  about users,  you kept  your mouth shut, learned what you saw,
 read the t-files, and did slave work, like scanning, or simple hacking, and
 you picked it up.

	The  code generator  idea is  fine with me, but, it's release to the
 general public hits the  nerve in me that many H/P people balked about when
 SYS-75 information is released  into the  public... there  seems  to be too
 much power in the hands of blithering idiots.

	A  beautiful virus,  masterfully coded  and programmed,  with actual
 work  by a  good-intentioned  programmer is  fine with  me, but, like being
 harassed by  a company  that has  had it's INWATS fucked over, having my HD
 smashed  by a  virus coded  entirely in  MPC, VLC,  or Gý with a stupid FAT
 fucker  added in  will really  ruin my day. (On this note, this would never
 happen... only  the most  heavily armored  stealth will  get  thru my anti-
 virus software, which I wrote myself)

	Idiots will use  the generator, whether you try to stop them or not.
 The 'password'  on VCL (which was  shittily concealed anyway... I mean, the
 average joe could  tell the ZIP password was ARoseIsARose) did nothing, and
 as a result, there are malicious VCL viruses out there.

	This  is why  a listed future improvements bother me... let me quote 
 it directly...

   "o  Supports  multiple,  semi-polymorphic   encryption   routines   (full
      polymorphism coming soon)."

	Yep... that's  what  it says, ' full polymorphism.'  I have no doubt
 that DA can do it. I have dissassembled (partially to source level) the MtE
 and fucked  with the new (and seemingly fucked up first version of) TPE and
 have seen that  it is not as hard as plugged to be, merely a task that must
 be  planned and  charted from the  start, as it is, in itself, a huge task.
 Full polymorphism  is something  we would  all benifit from, but, not to be
 given in source form to idiots. I'd belive that text files on this subject,
 or something of that like would be more appropriate... but, hey...

	On  the note  of DA's  semi-polymorphic  routines, they are, indeed,
 semi-polymorphic.  In the  future, he  might try something like instruction
 flipping or selective BS addition, as an alternative to full polymorphism.
 I also fucked up in my original analysis, and I apologize. Assuming that DA
 uses all 4 indexable registers (SI,DI,BP,BX) for indirect addressing, and
 all other unused registers for counting purposes, coupled with INC/INC,
 ADD, and SUB incrementing, and add and xor encryption (I assembled a total
 of 100 different CFG files, and only found xor and add encryption) I'd have 
 to guess at 144 generic wildcard strings to suffice. This is, of course,
 too many. Now, assuming that we apply code frame tactics, we get the
 following:

	MOV (UNKNOWN REGISTER), WORD (COULD BE THE INDEXABLE, MAYBE NOT)
	MOV (UNKNOWN REGISTER), WORD (DITTO)
 CRYPTLOOP:
	002Eh   (ONLY IN EXE INFECTORS, CODESEG OVERRIDE)
	BYTE    (CORRESPONDS TO REGISTER USED FOR OPERATION (INDEXABLE))
	BYTE    (EITHER 7 OR 37)
	WORD    (XOR OR ADD VALUE)
	
	EITHER  INC/INC, SUB (INDEX REGISTER), -02
		OR ADD (INDEX REGISTER), 2

	LOOP    LOOPCRYPTLOOP (ONLY IF BYTE COUNTER IS CX)
	(OTHERWISE)
	
	EITHER  DEC/DEC, SUB (BYTE COUNT), 2
		OR ADD (BYTE COUNT), -2

	OR      (BYTE COUNT),(BYTE COUNT)
	JNZ     CRYPTLOOP

	Alogrythmically, this is a piece of cake, which is great, 'cuz the
 more alogrythmic scans that must be added to a scanner, the greater it's
 size and slowness grow... score one more for the virus writers.

	Indeed, with the addition  of Gý into the world,  this is one more
 big score for the virus writers... thaks DA!

