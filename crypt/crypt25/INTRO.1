You're about to take a look at Kohntark and
Crypt Newsletter's deconstruction of the Thunderbyte
anti-virus scanning software.

The software emphasizes heavy usage of scanning for
extremely short segments of code commonly found - or
used by - PC viruses.  Some people swear by it,
others find it of only academic interest.
Curiously, virus programmers - who never pay for the
software - are some of the heaviest users of 
Thunderbyte programs.

The opinion at the Crypt Newsletter is that Thunderbyte's
analysis functions merely makes anti-virus software - 
programs which average PC owners and businessmen 
dislike using - even thornier.  A quick look at some of 
the jargon used by Thunderbyte as keys to interpretation 
of its "heuristic" mode of operation makes it obvious 
why this should be so.

The Thunderbyte program is effective at detecting
many unknown viruses. Paradoxically, the very
technology which allows it to do this has motivated
virus programmers to begin coding viruses which are
not detected by this powerful feature.  There is
no real trick to this since virus programmers
have deduced that all that is required on their
part is to avoid using the common segments of
code which Thunderbyte looks for and flags so
effectively.  Kohntark's analysis has gone to great
lengths to show these lengths of suspicious code
empirically and give alternative examples which are
presently not seen by the software but well known to
many virus programmers.  Of course, the
option exists to co-opt these segments, too, thus
expanding the "heuristic" library of the Thunderbyte
program and starting another cycle of virus programming
alterations.

For people who are not interested in viruses but 
purchasers of Thunderbyte software, it means the
analysis of the scanner's results when it is operating
at its most sensitive level will become more time
consuming, difficult to interpret and more prone to
false alarms.

For this reason, it is suspected that some software
developers have stayed away from including similar 
features in their software. The cynical view is that
the same software developers aren't skilled enough at
research and development to program such features and
it's probably true for about 50 percent of the firms
involved.

To fire up Kohntark's analysis, exit this text and scroll 
down to the second entry in your pick list.  Press
<enter> and it will load.

Using the arrow and <enter> keys when inside the analysis
will expose the drop down menus.  The drop down menu of
greatest interest is the one called FLAGS.  By scrolling
through the large pick list and striking <enter> at 
points of interest the analysis will display explanations
of the code which trips this particular warning in the
Thunderbyte program. The arrow keys can be used to scroll
up and down through the text.

Also included is DONOTHIN, an dummy program which does
exactly nothing but carries every string of generic code
which Thunderbyte looks for when trying to detect unknown
viruses.  By assembling it and scanning with the software
you'll see every alarm the program can display light up.

Finally, the KALI virus source code is included.  It is
a simple direct action EXE/COMfile infector which
restricts itself to the directory it starts in.  It
also rather messily displays the name of one file it
has infected every time it executes.  It was written with
an eye to avoiding all the bits of generic virus 
code which Thunderbyte likes looking for.  As a result, 
it trips ZERO warnings when the software is examining 
infected files.
