                           |- Source of Kaos -|
              |- Anti-Heursitics/Optimization/More Milage -|
                      |- A Caveman Programmers View -|

  There are several views on what makes a virus effective in today's world of
anti-virus scanners.  Like encryption give an av company enough time and
enough samples and they will dissect your work and perhaps even come up with a
cure that works.  If this zine was only dedicated to coming up with a new
virus every time the av'rs detected an old one then a one man based zine would
be out of business.  Instead I took the view that you can build one virus that
works and then shape/mold it over time to keep its effectiveness.  To be
able to do that with a virus you can do three things.
  To start with, you have to have written a virus that works and does what it's
  supposed to do.  Test your product extensively on as many platforms as
possible (586,486,386/DOS/Win95/OS2/NT.)  Once you reach the point that your
product will do what it's supposed to, then it's ready for release.  It's up to
you the author to decide how loud or how quite/sneaky your virus is.  In all
reality even a stupid public will eventually install anti-virus software.  A
virus that doesn't include some sort of anti-heuristic programming won't even
make it out of box.
  What is anti-heuristics you ask?  To put it into plain terms, a virus to be
a virus has to do certain things.  Anti-Virus software these days looks for
these key events.  There is no real way for a beginner to tell what these key
events are, so just write your virus and worry about it later.  To beat this
you need a small toolkit:

        1.  ThunderByte Anti-Virus Software [www.thunderbyte.com]
        2.  A little patience :)

  TBAV is great since it gives a list of flags (key events) that your virus
is guilty of committing.  Just go back through your source code and sprinkle
a few semi-colons " ;"(ie. Comment out)  through the area of your code that you
suspect.  Recompile your code and run TBAV against it.  If the flag goes away
then that was the guilty section of code.  The trick is now to come up with a
way perform what the guilty section of code did with out being obvious.  There
are certain ideas that work well:

          1.    NOT - this command is a fun one .. you can use numbers so far
                 out that it can't be a virus ..
          2.    Use values that already exist in ax,bx,cx etc and just
                manipulate that data.
          3.    Make calls to interrupts that AV software can't emulate and
                then manipulate that data.
          4.    Use oddball registers to manipulate and store your data then
                move it around.
          5.    Confuse the opposition -| see antih-2.002 |-
          6.    Encrypt your virus and the encryption will hide things for
                you.

  The "more mileage" and "optimization" phases can usually be combined into a 
single phase, although optimization can be done before you do anti-heuristic 
work. If you do a little optimization you can make room for more 
anti-heuristic's and/or other goodies.  There have been articles on 
optimization done by coders far more skilled than I.  So it would be pointless 
to do an in depth discussion of optimization.  You can optimize in several 
ways.

          1.  Use code that takes up less space ie.  cwd vice xor dx,dx
          2.  Use code more wisely .. ie
              mov cx/2 rep mov sw vice
              mov cx,xxxx / @1: lodsb / stosb / loop @1

Take the time and the money and go out and buy a good book on assembly.
A good book will have a section on how much space most commands use and may 
even have a little on optimization.

  "More Mileage" is a good way to do the least amount of work on your end and 
maximize the amount of work on the AV end.  While the AV companies are busy
analyzing this supposed "new" virus you have time to do research and testing 
on an actual new virus.  If you take a look at the "Of Dumb and Dumber" 
article the 1/13th and ANTIH-2.002 are prime examples of this.
