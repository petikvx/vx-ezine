

                      °±    ±° ÜÜ           tm
                       °±  ±°     ÛÛßßß Ûßßß  Version
                        °±±°   ÛÛ ÛÛ    Ûßßß   0.4á
                         °±    ÛÛ ÛÛÜÜÜ ÛÜÜÜ
                   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                    ûirogen's Irregular Code Engine
                   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                         (c)1995 ûirogen [NuKE]

         "A Virus Is Only As Great As It's Polymorphic Engine"
                                         -ûirogen



  DISCLAIMER: ûirogen is completely responsible for all your mistakes,
   ignorance, and the pregnancy of your girlfriend. However, should this
   software fail you, I'm not responsible.



 Inroduction
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  Welcome to ûirogen's Irregular Code Engine v0.4á. This is a new polymorphic
 tool which can easily be included into any virus. It generates 100%
 polymorphic decryptors which are extremly variable in both code and action.
 You should find this engine quite effective.
  This engine is still in a beta test stage. The only reason I've released
 these beta versions is so that I won't lose interest in the engine and
 quit working on it (like has happened many times before). Version 1.0 will
 be the first OFFICIAL release. Engine power will be maximized and any and
 all bugs eliminated by that version. THE SOURCE CODE WILL BE RELEASED UPON
 REACHING VERSION 1.0.


 How Powerful Is it?
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  I conducted tests with several polymorphic engines using InVircible's
 hypercorrelation scanner. ûiCE v0.4á scored amung the best (lowest) in
 total correlation percentage. Overall, ûiCE is quite powerful, and currently
 the newest polymorphic engine available.


 How to Use
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  Add the following line to your latest super-virus:

    extrn _vice:near

  Then call the routine from your code with the following parameters:

     DS:SI = address of code to encrypt
     ES:DI = address to put decryptor+encrypted code. (Be sure to reserve
             an extra 250 bytes for the decryptor code)
        CX = total code size (don't forget to add in the size of ViCE,
             2009 bytes)
        DX = offset where decryption routine will be run from.
             (i.e. The offset where the decryptor will start on the infected
              file)
        AL = options byte, defined as follows:
             76543210
             ³³³³³³³ÀÄ 0=CS: Segment Override In Decryptor, 1=No CS: Override
             ³³³³³³ÀÄÄ 0=Garbage Code Off, 1=Garbage Code On
             ³³³³³ÀÄÄÄ 0=Anti-TBSCAN Garbage Off, 1=Anti-TBSCAN Garbage On
             ³³³³ÀÄÄÄÄ 0=JMPs not used in garbage, 1=JMPs used in garbage
             ³³³ÀÄÄÄÄÄ not used
             ³³ÀÄÄÄÄÄÄ not used
             ³ÀÄÄÄÄÄÄÄ not used
             ÀÄÄÄÄÄÄÄÄ not used

            bit 0=This bit specifies whether or not to force use of the CS
                  segment in the decryptor. Typically, this bit should
                  be set to 0 when infecting a COM file, and 1 when
                  infecting an EXE.
            bit 1=This bit turns garbage code on or off. Garbage code
                  greatly increses the size of the decyptor, but adds even
                  more variability to the code. Note that if this bit is
                  set to 0, then anti-tbscan garbage is also turned off.
            bit 2=This bit toggles the anti-tbscan code. When on, interrupt
                  calls are inserted into the decryptor which cause TBSCAN
                  to abort decryption of the virus. If there are any lockups
                  on your system, turn this option off.
            bit 3=This bit toggles the usage of JMPs in the garbage code.
                  ViCE has the capability of creating a seemingly endless
                  spiral of JMPs in the decryption loop. However, this can
                  slow down the decryptor alot. Note also that with JMPs
                  on, sometimes the anti-tbscan code gets nullified.

  Returns:
        CX = Total length (virus code+decryptor)


 Example Virus: One/Thirteenth {v0.4}
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  Included in the archive ONE-13.ZIP is a virus demonstrating the use of
  ViCE. This is a memory resident, parastic EXE and COM infector which uses
  ViCE for polymorphism. A notable feature of this virus is it's active
  search and delete of Invircible signature files.


 Specifications
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                                  ViCE

  Current Version: 0.4á 02-24-95
   Procedure Name: _VICE
        Code Size: 2009 bytes
   Regs Destroyed: None. CX=Code Length

                          Decryptors Generated

             Size: Approx. 13 - 250 bytes
  Encryption Type: ADD,SUB, and XOR - combinations of any. Direct, or load
                   into register and manipulate.
   Regs Destroyed: Everything except segment registers
     Garbage Code: Random number of bytes between each functional operand.
                   Consists of valid operands, invalid operands, JMPS,
                   and interrupt calls.
        Detection: None.


 Obtaining The Latest Version / Contacting ûirogen
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 The latest version of this engine can be downloaded from the West Coast
 Institute Of Virus Research. I can be reached via NuKENet.

 History
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 v0.1á  = 02-05-95: şStarted coding.
          02-09-95: şFirst Beta Release. Getting too anxious to release
                     this mother fucker.
 v0.2á  = 02-11-95: şFixed bug which rarely caused lockups when the decryptor
                     size became too large for the loop construct. As a
                     result, decryptor sizes have been reduced.
                    şRandom Number seed wasn't being initialized correctly,
                     fixed. No biggie, but things were predictable everytime
                     it started with a seed of 0.
                    şAdded capability of garbage code between a couple of
                     operands it didn't before.
                    şImproved Anti-TBSCAN code significantly
                    şOptimized code; this version ended up being only 15
                     bytes larger.
                    şThis version is released under [NuKE].
 v0.3á  = 02-21-95: şRewrote garbage code engine. Now much more diverse.
                    şFixed bug which occasional resulted in only partially
                     encrypted viruses.
                    şFixed bug in that the new total code size returned in
                     CX was accidently being added to the run offset of the
                     decryptor. This caused the virus size to be larger than
                     it really was in some cases.
 v0.4á  = 02-24-95: şImproved engine power.
                      -Added new technique of encryption which is very
                       variable.
                      -Added new possible operand combinations in some
                       functions.
                      -Decryptors may now be larger, be sure to reserve up
                       to 250 bytes.
                    şThis will probably be the last version for a while, I'm
                     taking a break from coding for a bit. The next version
                     will be a big jump. Probably v1.0 provided nothing new
                     happens ; this will be the final of this engine.

                    [615] 586.9515 - ûirogen [NuKE]
