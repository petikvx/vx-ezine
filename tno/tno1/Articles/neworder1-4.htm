<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #1</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><font color="#FF0000" size="5"><strong>Windows
CGI интерфейс.</strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p><font color="#FFFFFF"><strong>Большое
количество World Wide Web приложений
основано на использовании внешних
программ, управляемых Web сервером.
Использование данных программ
позволяет строить Web приложения с
динамически обновляемой
информацией, хранящейся в базах
данных или генерирующейся в
зависимости от бизнес-правил
решаемых задач. Для связи между Web
сервером и вызываемыми программами
широко используется Common Gateway Interface
(CGI), имеющий реализации как для
Windows-ориентированных программ, так
и для приложений, функционирующих в
среде Unix. Данный документ описывает
Windows-модификацию интерфейса CG,
иначе называемую Windows CGI
интерфейсом. <br>
</strong></font><font color="#00FFFF"><strong>Разбор
данных HTML-форм<br>
</strong></font><font color="#FFFFFF"><strong>Windows CGI
требует, чтобы Web сервер
декодировал данные из HTML форм, если
они переданы при помощи POST метода
запроса. Он не требует от сервера
декодирования параметров, если они
переданы в качестве строки запроса
(&quot;query string&quot;), являющейся частью
URL. <br>
Существует два способа, которыми
данные из форм могут быть переданы
серверу броузером: <br>
</strong></font><font color="#FFFF00"><strong>URL-Encoded <br>
</strong></font><font color="#FFFFFF"><strong>Это
наиболее используемый формат
данных, передаваемых из форм.
Содержимое полей формы выделяются
из формы и передаются согласно
спецификации HTML 1.0, а затем
собираются в одну строку, где
отделяются друг от друга символом
амперсанда. Тип содержания
сообщения устанавливается
броузером в application/x-www-form-urlencoded. <br>
</strong></font><font color="#FFFF00"><strong>Multipart Form Data
<br>
</strong></font><font color="#FFFFFF"><strong>Данный
формат разработан для эффективной
загрузки файлов на сервер с
использованием форм. Содержимое
полей формы передается как
многостраничное MIME сообщение.
Каждое поле содержится в одной
странице. Тип содержания,
устанавливается броузером в
multipart/form-data. <br>
&quot;Грамотные&quot; серверы должны
уметь обрабатывать оба типа данных
из форм. <br>
</strong></font><font color="#00FFFF"><strong>Вызов CGI
программ<br>
</strong></font><font color="#FFFFFF"><strong>Сервер
использует функцию CreateProcess() для
вызова CGI программ. Сервер
синхронизируется с CGI программой,
поскольку он должен определить
момент завершения CGI программы. Это
достигается использованием
функции Win32 WaitForSingleObject(), ожидающей
получения сигнала завершения CGI
программы. <br>
</strong></font><font color="#00FFFF"><strong>Командная
строка<br>
</strong></font><font color="#FFFFFF"><strong>Сервер
должен вызывать CGI программу
выполняя функцию CreateProcess() с
командной строкой следующего
формата: <br>
</strong><em>WinCGI-exe cgi-data-file<br>
WinCGI-exe<br>
</em><strong>Полный путь к исполняемой CGI
программе. Сервер не зависит от
&quot;текущего каталога&quot; или
переменной окружения PATH. Примите к
сведению, что &quot;исполняемая&quot; не
обязательно означает .EXE файл. Это
может быть документ,
ассоциирующийся с реально
исполняемой программой, описанной
в WIN.INI или System Registry. <br>
cgi-data-file<br>
<br>
</strong></font><font color="#00FFFF"><strong>Метод
вызова<br>
</strong></font><font color="#FFFFFF"><strong>Сервер
использует CreateProcess() для запуска
процесса, не имеющего главного
окна. Вызванный процесс не будет
отображаться каким либо образом на
мониторе сервера. <br>
Некоторые сервера поддерживают
режим отладки CGI программ и
скриптов, что позволяет серверу
запускать CGI программу как обычный
процесс с созданием главного окна и
отображением информации на
мониторе сервера. Данный способ
весьма удобен на стадии отладки CGI
программ. <br>
CGI файл данных<br>
Сервер передает данные CGI
программам через Windows &quot;private
profile&quot; afqk, в формате
&quot;параметр-значение&quot; (windows INI
файл). CGI программа может прочитать
данный файл и получит все данные,
передаваемые ей из формы, а также
автоматически генерируемые
броузером данные. <br>
CGI файл данных состоит из следующих
секций: <br>
</strong><em>· [CGI] <br>
· [Accept] <br>
· [System] <br>
· [Extra Headers] <br>
· [Form Literal] <br>
· [Form External] <br>
· [Form Huge] <br>
· [Form File] <br>
</em><strong><br>
</strong></font><font color="#FFFF00"><strong>Секция [CGI] <br>
</strong></font><font color="#FFFFFF"><strong>Данная
секция содержит большинство
специфических CGI параметров (тип
доступа, тип запроса,
дополнительные заголовки,
определенные в других секциях и
т.п.). Каждое значение представлено
в виде символьной строки. Если
значение является пустой строкой,
значит данный параметр был опущен.
Список параметров данной секции
представлен ниже: <br>
</strong><em>Request Protocol<br>
</em><strong>Название и модификация
информационного протокола,
использованного для передачи
данного запроса. Формат:
протокол/модификация. Пример:
&quot;HTTP/1.0&quot;. <br>
</strong><em><strong>Request Method<br>
</strong></em><strong>Метод, который
использовался для данного запроса.
Для HTTP это &quot;GET&quot;, &quot;HEAD&quot;,
&quot;POST&quot; и т.д. <br>
Executable Path<br>
Логический путь к исполняемой CGI
программе, необходимый для ссылки
CGI программе на саму себя. <br>
</strong><em>Logical Path<br>
</em><strong>Запрос также может
указывать к ресурсам, необходимым
для выполнения данного запроса.
Данный параметр содержит путь в том
виде, который был получен сервером
без мэпирования его на физический
путь на диске. <br>
</strong><em>Physical Path<br>
</em><strong>Если запрос содержит
информацию о логическом пути,
сервер преобразует его к
физическому пути (например, к пути к
файлу на диске) доступа согласно
синтаксическим правилам
операционной системы. <br>
</strong><em>Query String<br>
</em><strong>Информация, размещающаяся
после ? в URL вызываемой CGI программы.
Сервер оставляет эту информацию
без изменений в том виде, в котором
она была помещена в URL. <br>
</strong><em>Request Range<br>
</em><strong>Byte-range спецификация
получаемая вместе с запросом (если
есть). Смотри текущий Internet Draft (или
RFC), описывающий расширение HTTP для
получения более полной информации.
Сервер должен поддерживать работу
CGI программ в byte-ranging. <br>
</strong><em>Referer<br>
</em><strong>URL документа, содержащего
ссылку на данную CGI программу. Надо
заметить, что некоторые броузеры
закрывают данную возможность и не
дают ее использовать. <br>
</strong><em>From<br>
</em><strong>E-mail адрес пользователя
броузера. Надо заметить, что данный
параметр присутствует с
спецификации HTTP, но не используется
большинством броузером из
соображений секретности. <br>
</strong><em>User Agent<br>
</em><strong>Строка, описывающая
программное обеспечение броузера.
Не генерируется большинством
броузеров. <br>
</strong><em>Content Type<br>
</em><strong>Данный параметр содержит
MIME-тип данных, посланных клиентом
вместе с полями из формы, если эти
данные были посланы. Формат: type/subtype.
<br>
</strong><em>Content Length<br>
</em><strong>Для запросов, с которыми
посланы дополнительные данные в
это поле заносится длина посланных
данных в байтах. <br>
</strong><em>Content File<br>
</em><strong>Для запросов, содержащих
дополнительные данные, посланные
пользователем, этот параметр
содержит имя файла, в которое
WEB-сервер записывает эти данные. В
дальнейшем, пользовательская
программа может считать эти данные.
Параметр содержит полный путь к
файлу данных. <br>
</strong><em>Server Software<br>
</em><strong>Название и версия
серверного программного
обеспечения, обработавшего запрос
и вызвавшего CGI-программу. Формат:
name/version. <br>
</strong><em>Server Name<br>
</em><strong>Сетевое имя сервера или
псевдоним, необходимый для
ссылающихся на себя URL Этот
параметр (в комбинации с параметром
ServerPort) может быть использован для
вычисления полного URL к серверу. <br>
</strong><em>Server Port<br>
</em><strong>Номер порта, по которому
работает сервер. <br>
</strong><em>Server Admin<br>
</em><strong>E-mail адрес администратора
сервера. Данный параметр необходим
для генерации сообщений об ошибках
и отправки данных сообщений
администратору сервера или для
генерации форм с URL &quot;mailto:&quot;. <br>
</strong><em>CGI Version<br>
</em><strong>Версия спецификации CGI.
Формат: CGI/версия. Для данной версии,
&quot;CGI/1.2 (Win)&quot;. <br>
</strong><em>Remote Host<br>
</em><strong>Сетевое имя хоста клиента,
если доступно. Данный параметр
может быть использован для
опознавание клиента. <br>
</strong><em>Remote Address<br>
</em><strong>Сетевой (IP) адрес клиента.
Данный параметр может быть
использован для проверки
пользователя если отсутствует
сетевое имя. <br>
</strong><em>Authentication Method<br>
</em><strong>Если используется
защищенный вызов CGI программы, это
протокол-зависимый метод
аутентификации, используемый для
аутентификации пользователя. <br>
</strong><em>Authentication Realm<br>
</em><strong>Если используется
защищенный вызов CGI программы, это
протокол-зависимый сервис,
используемый для аутентификации
пользователя. Список пользователей
для полученного вида сервиса
проверяется для аутентификации
пользователя. <br>
</strong><em>Authenticated Username<br>
</em><strong>Если используется
защищенный вызов CGI программы, это
имя пользователя, которое клиент
использует для аутентификации при
доступе к CGI-программе. <br>
<br>
</strong></font><font color="#FFFF00"><strong>Секция
[Accept] <br>
</strong></font><font color="#FFFFFF"><strong>Данная
секция содержит типы данных,
посылаемых клиентом, найденные в
заголовке запроса в виде <br>
Accept: type/subtype {parameters}<br>
Если данные параметры присутствуют
(например, &quot;q=0.100&quot;) , они
передаются как значения параметра
Accept. Для каждого типа передаваемых
данных заводится свой параметр Accept.
<br>
</strong><em>Секция [System]<br>
</em><strong>Данная секция содержит
параметры, специфические для Windows
реализации CGI: <br>
</strong><em>GMT Offset<br>
</em><strong>Количество секунд, которое
необходимо добавить к времени по
Гринвичу для вычисления локального
времени клиента. <br>
</strong><em>Debug Mode<br>
</em><strong>Данный параметр имеет
значение &quot;Yes&quot; если включен
режим &quot;CGI/script tracing&quot; на сервере. <br>
</strong></font><font color="#FFFFFF" size="3"><em>Output File<br>
</em></font><font color="#FFFFFF"><strong>Полный путь
к файлу, в который необходимо
поместить данные, отсылаемые
сервером клиенту после завершения
работы программы. <br>
</strong><em>Content File<br>
</em><strong>Полный путь к файл у в
котором содержится дополнительная
информация, поступающая вместе с
запросом. <br>
<br>
</strong></font><font color="#FFFF00"><strong>Секция [Extra
Headers] <br>
</strong></font><font color="#FFFFFF"><strong>Данная
секция содержит
&quot;дополнительные&quot; заголовки,
которые включены в запрос в виде
&quot;параметр=значение&quot;. Сервер
должен раскодировать как параметр,
так и его значение прежде чем они
будут помещены в файл данных CGI. <br>
</strong></font><font color="#FFFF00"><strong>Секция [Form
Literal]<br>
</strong></font><font color="#FFFFFF"><strong>Если
запрос от клиента пришел в виде HTTP
POST из HTML формы (с типом содержимого
application/x-www-form-urlencoded или multipart/form-data),
то сервер раскодирует данные из
формы и поместит их в секцию [Form
Literal]. <br>
Для URL-кодированных данных формы,
строка передаваемых параметров
выглядит как
&quot;параметр=значение&amp;параметр=значение&amp;...&quot;,
где значения находятся в
url-кодированном формате. Сервер
разделяет &quot;параметр=значение&quot;
по символу '&amp;', затем разделяет
собственно &quot;параметр&quot; и
&quot;значение&quot;, декодирует
&quot;значение&quot; и помещает
результат в виде
&quot;параметр=раскодированное_значение&quot;
в секцию [Form Literal]. <br>
Для многостраничных данных строка
данных представляется в
многостраничном MIME формате, где
каждое поле представлено как
отдельная часть (файл). Сервер
декодирует имена и значение каждой
части и размещает их в формате
&quot;параметр=значение&quot; в секции
[Form Literal]. <br>
Если форма содержит какие-либо
элементы SELECT MULTIPLE, то будет создано
несколько строк с вида
&quot;параметр=значение&quot; с
одинаковым именем &quot;параметра&quot;.
В этом случае генерирует
нормальную строку
&quot;параметр=значение&quot; для
первого встречающегося элемента, а
каждый следующий представляет в
виде &quot;параметр_X=значение&quot;, где
&quot;X&quot; - увеличивающийся счетчик. <br>
</strong></font><font color="#FFFF00"><strong>Секция [Form
External]<br>
</strong></font><font color="#FFFFFF"><strong>Если
размер декодированной строки
превышает 254 символа или
декодированная строка содержит
управляющие символы, такие, как
перевод строки, возврат каретки,
двойные кавычки и т.д., то сервер
помещает данное значение в
отдельный временный файл, а в
секцию [Form External] помещает строку в
виде: <br>
параметр=путь длина <br>
где путь - это полный путь и имя
временного файла, содержащего
декодированное значение параметра,
а длина - длина в байтах этого файла.
<br>
</strong></font><font color="#FFFF00"><strong>Секция [Form
Huge] <br>
</strong></font><font color="#FFFFFF"><strong>Если общая
длина строки с кодированными
параметрами превышает 65,535 байт, то
сервер не выполняет декодирование,
а оставляет данный в Content File, а в
секцию [Form Huge] помещает строки в
виде: <br>
параметр=смещение длина<br>
где смещение - это смещение от
начала Content File по которому
находится требуемый параметр, а
длина - длина в байтах значения
выбранного параметра. Вы можете
использовать смещение для
выполнения поиска начала значения
выбранного вами параметра и
использовать длину для чтения
значения выбранного параметра. Не
забывайте, что если параметр
закодирован, то вам необходимо
раскодировать его перед
использованием. <br>
</strong></font><font color="#FFFF00"><strong>Секция [Form
File]<br>
</strong></font><font color="#FFFFFF"><strong>Если
запрос пришел в виде multipart/form-data, то
он может содержать один или
несколько загруженных с клиента
файлов. В этом случае каждый
загруженный файл размещается в
специальном временном файле, а в
секции [Form File] строки имеют тот же
формат, что и секции [Form External].
каждая строка параметра в этом
случае выглядит так: <br>
параметр=[полный_путь_к_файлу] длина
тип ссылка [имя_файла]<br>
где полный_путь_к_файлу - это путь к
временному файлу, содержащему
загруженный файл, длина - длина в
байтах загруженного файла, тип - тип
MIME загруженного файла, ссылка -
способ кодировки загруженного
файла и имя_файла - исходное
название загруженного файла.
Использование квадратных скобок
обязательно, поскольку имя файла и
путь могут содержать символы
пробела. <br>
<br>
</strong></font><font color="#00FFFF"><strong>Пример
декодированных значений формы<br>
</strong></font><font color="#FFFFFF"><strong>В данном
примере форма содержит небольшое
поле, SELECT MULTIPLE с 2-мя небольшими
секциями, поле длиной 300 символов,
поле, содержащее специальные
символы и поле длиной 230KB. <br>
</strong><em>[Form Literal] <br>
smallfield=123 Main St. #122 <br>
multiple=first selection <br>
multiple_1=second selection <br>
<br>
[Form External] <br>
field300chars=C:\TEMP\HS19AF6C.000 300 <br>
fieldwithlinebreaks=C:\TEMP\HS19AF6C.001 43 <br>
<br>
[Form Huge] <br>
field230K=C:\TEMP\HS19AF6C.002 276920 <br>
</em></font><font color="#00FFFF"><strong>Обработка
результата<br>
</strong></font><font color="#FFFFFF"><strong>CGI
программа возвращает результат
работы, отвечающий (явно или неявно)
целям запроса. Сервер кодирует
результат работы в соответствии со
стандартом HTTP и использует HTTP для
отправки результата клиенту. Это
означает, что сервер добавляет
необходимый HTTP заголовки в
сообщение, формируемое CGI
программой. <br>
Результат работы CGI программы
состоит из двух частей: заголовка и
тела сообщения. Заголовок состоит
из одной или более строк текста,
отделенных от тела пустой строкой.
Тело сообщения содержит данные,
представленные в MIME формате,
указанном в заголовке. <br>
Сервер не изменяет тело документа,
что означает, что сервер передает
сформированный CGI программой ответ
&quot;как он есть&quot;.T <br>
Специальные строки заголовка<br>
Сервер распознает следующие строки
заголовка в выходном потоке: <br>
</strong><em>Content-Type:<br>
</em><strong>Указывает на MIME тип тела
сообщения. Значение этого
параметра должно быть в формате
type/subtype. <br>
</strong><em>URI: &lt;value&gt; (value enclosed in angle
brackets)<br>
</em><strong>Данное значение указывает
на полный URL или ссылку на локальный
файл, сообщение из которого будет
возвращено клиенту в теле
сообщения. Если значение является
локальным файлом, сервер отсылает
его как результат запроса, как
будто клиент воспользовался
методом GET при генерации запроса.
Если значение является полным URL, то
сервер возвращает сообщение &quot;401
redirect&quot; для обеспечения прямой
загрузки указанного объекта. <br>
</strong><em>Location:<br>
</em><strong>То же самое, что и URI, но
данная форма сейчас не
используется. Параметр value НЕ
должен быть взят в угловые скобки. <br>
</strong></font><font color="#00FFFF"><strong>Другие
заголовки<br>
</strong></font><font color="#FFFFFF"><strong>Другие
заголовки передаются клиенту в том
виде, в котором они представлены. <br>
</strong></font><font color="#00FFFF"><strong>Прямой
возврат<br>
</strong></font><font color="#FFFFFF"><strong>Сервер
позволяет конечному приложению
осуществлять прямой возврат
результата запроса клиенту. Это
осуществляется посредством
включение в заголовок
возвращаемого сообщения его
информационного протокола. Это
позволяет CGI программам
формировать непосредственный
ответ клиенту с указанием HTTP
заголовка без предварительной
обработки его сервером.. <br>
Сервер анализирует результат
запроса, помещаемый CGI программой в
выходной файл (Output File), и, если
первая строка &quot;HTTP/1.0&quot;, он
предполагает, что сообщение
содержит полный HTTP ответ и отсылает
его клиенту без упаковки. </strong></font></p>

<p align="center"><a href="../TNO#1_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/Lurker2.jpg" border="0" width="212" height="119"></a></p>
</body>
</html>
