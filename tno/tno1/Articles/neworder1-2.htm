<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #1</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><font color="#FF0000" size="5"><strong>HTTP
запрос</strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p><font color="#00FF00" size="4"><strong>Общие
понятия<br>
</strong></font><font color="#FFFFFF"><strong>Запрос -
это сообщение, посылаемое клиентом
серверу.<br>
Первая строка этого сообщения
включает в себя метод, который
должен быть применен к
запрашиваемому ресурсу,
идентификатор ресурса и
используемую версию протокола. Для
совместимости с протоколом HTTP/0.9,
существует два формата HTTP запроса: <br>
<br>
</strong><em>Запрос = Простой-Запрос |
Полный-Запрос<br>
<br>
Простой-Запрос = &quot;GET&quot; SP
Запрашиваемый-URI CRLF<br>
<br>
Полный-Запрос = Строка-Статус<br>
<br>
*(Общий-Заголовок |
Заголовок-Запроса |
Заголовок-Содержания ) CRLF<br>
<br>
[ Содержание-Запроса ]<br>
</em><strong>Если HTTP/1.0 сервер получает
Простой-Запрос, он должен отвечать
Простым-Ответом HTTP/0.9. HTTP/1.0 клиент,
способный обрабатывать
Полный-Ответ, никогда не должен
посылать Простой-Запрос. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>Строка
Статус</strong></font></p>

<p><font color="#FFFFFF"><strong>Строка Статус
начинается со строки с названием
метода, за которым следует
URI-Запроса и использующаяся версия
протокола. Строка Статус
заканчивается символами CRLF.
Элементы строки разделяются
пробелами (SP). В Строке Статус не
допускаются символы LF и CR, за
исключением заключающей
последовательности CRLF. <br>
<br>
</strong><em>Строка-Статус = Метод SP
URI-Запроса SP Версия-HTTP CRLF<br>
</em><strong>Следует отметить, что
отличие Строки Статус
Полного-Запроса от Строки Статус
Простого- Запроса заключается в
присутствии поля Версия-HTTP. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>Метод</strong></font></p>

<p><font color="#FFFFFF"><strong>В поле Метод
указывается метод, который должен
быть применен к ресурсу,
идентифицируемому URI-Запроса.
Названия методов чувствительны к
регистру. Существующий список
методов может быть расширен. <br>
</strong><em>Метод = &quot;GET&quot; | &quot;HEAD&quot; |
&quot;PUT&quot; | &quot;POST&quot; | &quot;DELETE&quot; |
&quot;LINK&quot; | &quot;UNLINK&quot; |
дополнительный-метод <br>
</em><strong>Список методов, допускаемых
отдельным ресурсом, может быть
указан в поле Заголовок-Содержание
&quot;Баллов&quot;. Тем не менее, клиент
всегда оповещается сервером через
код статуса ответа, допускается ли
применение данного метода для
указанного ресурса, так как
допустимость применения различных
методов может динамически
изменяться. Если данный метод
известен серверу, но не допускается
для указанного ресурса, сервер
должен вернуть код статуса </strong><em>&quot;405
Method Not Allowed&quot;</em><strong>, и код статуса </strong><em>&quot;501
Not Implemented&quot;</em><strong>, если метод не
известен или не поддерживается
данным сервером. Общие методы HTTP/1.0
описываются ниже. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>GET </strong></font></p>

<p><font color="#FFFFFF"><strong>Метод GET служит
для получения любой информации,
идентифицированной URI-Запроса. Если
URI- Запроса ссылается на процесс,
выдающий данные, в качестве ответа
будут выступать данные,
сгенерированные данным процессом,
а не код самого процесса (если
только это не является выходными
данными процесса). <br>
Метод GET изменяется на &quot;условный
GET&quot;, если сообщение запроса
включает в себя поле заголовка </strong><em>&quot;If-Modified-Since&quot;</em><strong>.
В ответ на условный GET, тело
запрашиваемого ресурса передается
только, если он изменялся после
даты, указанной в заголовке </strong><em>&quot;If-Modified-Since&quot;</em><strong>.
Алгоритм определения этого
включает в себя следующие случаи: <br>
· Если код статуса ответа на запрос
будет отличаться от &quot;200 OK&quot;, или
дата, указанная в поле заголовка
&quot;If-Modified-Since&quot; некорректна, ответ
будет идентичен ответу на обычный
запрос GET. <br>
· Если после указанной даты ресурс
изменялся, ответ будет также
идентичен ответу на обычный запрос
GET. <br>
· Если ресурс не изменялся после
указанной даты, сервер вернет код
статуса </strong><em>&quot;304 Not Modified&quot;</em><strong>.
<br>
Использование метода условный GET
направлено на разгрузку сети, так
как он позволяет не передавать по
сети избыточную информацию. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>HEAD</strong></font></p>

<p><font color="#FFFFFF"><strong><br>
Метод HEAD аналогичен методу GET, за
исключением того, что в ответе
сервер не возвращает Тело- Ответа.
Метаинформация, содержащаяся в HTTP
заголовках ответа на запрос HEAD,
должна быть идентична информации
HTTP заголовков ответа на запрос GET.
Данный метод может использоваться
для получения метаинформации о
ресурсе без передачи по сети самого
ресурса. Метод &quot;Условный HEAD&quot;,
аналогичный условному GET, не
определен. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>POST</strong></font></p>

<p><font color="#FFFFFF"><strong>Метод POST
используется для запроса сервера,
чтобы тот принял информацию,
включенную в запрос, как
субординантную для ресурса,
указанного в Строке Статус в поле
URI-Запроса. Метод POST был разработан,
чтобы была возможность
использовать один общий метод для
следующих функций: <br>
· Аннотация существующих ресурсов <br>
· Добавление сообщений в группы
новостей, почтовые списки или
подобные группы статей <br>
· Доставка блоков данных процессам,
обрабатывающим данные <br>
· Расширение баз данных через
операцию добавления<br>
Реальная функция, выполняемая
методом POST, определяется сервером и
обычно зависит от URI- Запроса.
Добавляемая информация
рассматривается как субординатная
указанному URI в том же смысле, как
файл субординатен каталогу, в
котором он находится, новая статья
субординатна группе новостей, в
которую она добавляется, запись
субординатна базе данных. <br>
Клиент может предложить URI для
идентификации нового ресурса,
включив в запрос заголовок
&quot;URI&quot;. Тем не менее, сервер
должен рассматривать этот URI только
как совет и может сохранить тело
запроса под другим URI или вообще без
него. <br>
Если в результате обработки
запроса POST был создан новый ресурс,
ответ должен иметь код статуса,
равный </strong><em>&quot;201 Created&quot;</em><strong>,
и содержать URI нового ресурса. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>PUT</strong></font></p>

<p><font color="#FFFFFF"><strong>Метод PUT
запрашивает сервер о сохранении
Тело-Запроса под URI, равным
URI-Запроса. Если URI-Запроса
ссылается на уже существующий
ресурс, Тело-Запроса должно
рассматриваться как
модифицированная версия данного
ресурса. Если ресурс, на который
ссылается URI-Запроса не существует,
и данный URI может рассматриваться
как описание для нового ресурса,
сервер может создать ресурс с
данным URI. Если был создан новый
ресурс, сервер должен
информировать направившего запрос
клиента через ответ с кодом статуса
</strong><em>&quot;201 Created&quot;</em><strong>. Если
существующий ресурс был
модифицирован, должен быть послан
ответ &quot;200 OK&quot;, для
информирования клиента об успешном
завершении операции. Если ресурс с
указанным URI не может быть создан
или модифицирован, должно быть
послано соответствующее сообщение
об ошибке. <br>
Фундаментальное различие между
методами POST и PUT заключается в
различном значении поля URI-Запроса.
Для метода POST данный URI указывает
ресурс, который будет управлять
информацией, содержащейся в теле
запроса, как неким придатком.
Ресурс может быть обрабатывающим
данные процессом, шлюзом в
какой-нибудь другой протокол, или
отдельным ресурсом, допускающим
аннотации. В противоположность
этому, URI для запроса PUT
идентифицирует информацию,
содержащуюся в Содержание-Запроса.
Использующий запрос PUT точно знает
какой URI он собирается
использовать, и получатель запроса
не должен пытаться применить этот
запрос к какому-нибудь другому
ресурсу. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>DELETE</strong></font></p>

<p><font color="#FFFFFF"><strong>Метод DELETE
используется для удаления
ресурсов, идентифицированных с
помощью URI-Запроса. Результаты
работы данного метода на сервере
могут быть изменены с помощью
человеческого вмешательства (или
каким-нибудь другим способом). В
принципе, клиент никогда не может
быть уверен, что операция удаления
была выполнена, даже если код
статуса, переданный сервером,
информирует об успешном выполнении
действия. Тем не менее, сервер не
должен информировать об успехе до
тех пор, пока на момент ответа он не
будет собираться стереть данный
ресурс или переместить его в
некоторую недостижимую область.</strong></font></p>

<p align="center"><font color="#FFFF00"><strong>LINK</strong></font></p>

<p><font color="#FFFFFF"><strong>Метод LINK
устанавливает взаимосвязи между
существующим ресурсом, указанным в
URI-Запроса, и другими существующими
ресурсами. Отличие метода LINK от
остальных методов, допускающих
установление ссылок между
документами, заключается в том, что
метод LINK не позволяет передавать в
запросе Тело-Запроса, и в том, что в
результате работы данного метода
не создаются новые ресурсы. </strong></font></p>

<p align="center"><font color="#FFFF00"><strong>UNLINK</strong></font></p>

<p><font color="#FFFFFF"><strong>Метод UNLINK удаляет
одну или более ссылочных
взаимосвязей для ресурса,
указанного в URI- Запроса. Эти
взаимосвязи могут быть установлены
с помощью метода LINK или
какого-нибудь другого метода,
поддерживающего заголовок </strong><em>&quot;Link&quot;</em><strong>.
Удаление ссылки на ресурс не
означает, что ресурс прекращает
существование или становится
недоступным для будущих ссылок. <br>
Поля Заголовок-Запроса<br>
Поля Заголовок-Запроса позволяют
клиенту передавать серверу
дополнительную информацию о
запросе и о самом клиенте. <br>
</strong><em>Заголовок-Запроса = Accept |
Accept-Charset | Accept-Encoding | <br>
<br>
Accept-Language | Authorization | From | <br>
<br>
If-Modified-Since | <br>
<br>
Pragma | Referer | User-Agent | extension-header <br>
</em><strong>Кроме того через механизм
расширения могут быть определены
дополнительные заголовки;
приложения, которые их не
распознают, должны трактовать эти
заголовки, как
Заголовок-Содержание. <br>
Ниже будут рассмотрены некоторые
поля заголовка запроса. <br>
</strong></font><font color="#00FFFF"><strong>From<br>
</strong></font><font color="#FFFFFF"><strong>В случае
присутствия поля From, оно должно
содержать полный E-mail адрес
пользователя, который управляет
программой-агентом, осуществляющей
запросы. Этот адрес должен быть
задан в формате, определенном в </strong><em>RFC
822</em><strong>. Формат данного поля
следующий: From = &quot;From&quot; &quot;:&quot;
спецификация адреса. Например: <br>
</strong><em>From: webmaster@WWW.org <br>
</em><strong>Данное поле может быть
использовано для функций захода в
систему, а также для идентификации
источника некорректных или
нежелательных запросов. Оно не
должно использоваться, как
несекретная форма разграничения
прав доступа. Интерпретация этого
поля состоит в том, что
обрабатываемый запрос
производится от имени данного
пользователя, который принимает
ответственность за применяемый
метод. В частности, агенты-роботы
должны использовать этот заголовок
для того, чтобы можно было
связаться с тем человеком, который
отвечает за работу робота, в случае
возникновения проблем. Почтовый
Internet адрес, указывающийся в этом
поле, не обязан соответствовать
адресу того хоста, с которого был
послан данный запрос. По
возможности, адрес должен быть
доступным Internet адресом вне
зависимости от того, является ли он
в действительности Internet E-mail
адресом или Internet E-mail
представлением адреса других
почтовых систем. <br>
Замечание: Клиент не должен
использовать поле заголовка From без
позволения пользователя, так как
это может войти в конфликт с его
частными интересами или с местной,
используемой им, системой
безопасности. Настоятельно
рекомендуется предоставление
пользователю возможности
запретить, разрешить или
модифицировать это поле в любой
момент перед запросом. <br>
</strong></font><font color="#00FFFF"><strong>If-Modified-Since<br>
</strong></font><font color="#FFFFFF"><strong>Поле
заголовка If-Modified-Since используется с
методом GET для того, чтобы сделать
его условным: если запрашиваемый
ресурс не изменялся во времени,
указанного в этом поле, копия этого
ресурса не будет возвращена
сервером; вместо этого, будет
возвращен ответ </strong><em>&quot;304 Not
Modified&quot;</em><strong> без Тела- Ответа. <br>
</strong><em>If-Modified-Since = &quot;If-Modified-Since&quot;
&quot;:&quot; HTTP-дата <br>
</em><strong>Пример использования
заголовка: <br>
</strong><em>If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT <br>
</em><strong>Целью этой особенности
является предоставление
возможности эффективного
обновления информации локальных
кэшей с минимумом передаваемой
информации. Тот же результат может
быть достигнут применением метода
HEAD с последующим использованием GET,
если сервер указал, что содержимое
документа изменилось. <br>
</strong></font><font color="#00FFFF"><strong>User-Agent<br>
</strong></font><font color="#FFFFFF"><strong>Поле
заголовка User-Agent содержит
информацию о пользовательском
агенте, пославшем запрос. Данное
поле используется для статистики,
прослеживания ошибок протокола, и
автоматического распознавания
пользовательских агентов. Хотя это
не обязательно, пользовательские
агенты должны всегда включать это
поле в свои запросы. Поле может
содержать несколько строк,
представляющих собой название
программного продукта,
необязательную косую черту с
указанием версии продукта, а также
другие программные продукты,
составляющие важную часть
пользовательского агента. По
соглашению, продукты указываются в
списке в порядке убывания их
значимости для идентификации
приложения. <br>
<br>
</strong><em>User-Agent = &quot;User-Agent&quot; &quot;:&quot;
1*( продукт ) <br>
<br>
продукт = строка [&quot;/&quot;
версия-продукта]<br>
<br>
версия-продукта = строка <br>
</em><strong>Пример: <br>
</strong><em>User-Agent: CERN-LineMode/2.15 libwww/2.17b3 <br>
</em><strong>Строка, описывающая
название продукта, должна быть
короткой и давать информацию по
существу - использование данного
заголовка для рекламирования
какой-либо другой, не относящейся к
делу, информации не допускается и
рассматривается, как не
соответствующее протоколу. Хотя в
поле версии продукта может
присутствовать любая строка,
данная строка должна
использоваться только для указания
версии продукта. Поле User-Agent может
включать в себя дополнительную
информацию в комментариях, которые
не являются частью его значения. </strong></font></p>

<p align="center"><a href="../TNO#1_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/Lurker2.jpg" border="0" width="212" height="119"></a></p>
</body>
</html>
