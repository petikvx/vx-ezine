                                              |  |     PY.Lame.C
                                             (o  o)       (k) kefi 3176
                                              \__/
                                                |     <-- a python...
                                                ^                get it?


        PY.Lame.C  is (at  least  currently)  my favorite  Python virus.
    Aside from  prepending all Python  files in its directory, it uses a
    polymorphism  engine modeled after  BlueOwl and my JS.Untz [*].  For 
    some back  story, JS.Untz  was  BlueOwl and my first and only group-
    project.  We  wanted to  write a  virus in a  common language  which
    didn't  use any  common methods; we  re-thought how to find files to 
    infect and put a  huge twist on  the typical  JavaScript encryption/
    polymorphism  routines.  Though Lame.C doesn't  find files to infect 
    in an obscure fashion, its polymorphism engine is certainly unique.

        The polymorphism used in Lame.C is very simple to understand but 
    rather complex to code.  Instead of changing  pieces of its code, it
    changes  how its  code is viewed.  Its entire  code is  read  into a
    buffer and split into random lengths.  After the random  lengths are 
    created, it creates  random  strings to  be  used  as variables.  It
    assigns a piece of its code to a variable and stores the location of 
    both.  After  recursively walking through  its entire code with this
    method, it compiles it all back together.

        To better explain, I'll give you some example code:

 - - [ code ] - -
#!/usr/bin/python

message = "Hello VXers!"
print message
 - - [ code ] - -

        Lame.C will  now obfuscate  this code and  create something like
    this:

 - - [ code ] - -
AAA = "#!/u"
AAB = "sr"
AAC = "/bin/"
AAD = "pytho"
AAE = "n\n\nmess"
AAF = "age = \"H"
ABA = "ell"
ABB = "o VXers!\""
ABC = "pr"
ABD = "int m"
ABE = "essage"
xxx = str(AAA + AAB + AAC + AAD + AAE + AAF + ABA + ABB + ABC + ABD + ABE + ABF)
exec(xxx)
 - - [ code ] - -

        Had this been back in the JS.Untz days, the engine would be done 
    and all that was left was file infecting.  Though to this day, JS.Untz 
    cannot  be  detected  by  any  antivirus software  after its  second
    generation, I thought Lame.C needed a little more.

        Lame.C converts  all of the ASCII  values in  its code  to their
    ord() [**] representation.  Because of this, antivirus software will 
    not be able to search for specific strings -- ie "/.*?Hello.*?VXers.*?/si".
    With this  added to its  polymorphism engine, our example code would
    look something like this:

 - - [ code ] - -
AAA = chr(35) + chr(33) + chr(47)
AAB = chr(117) + chr(115) + chr(114) + chr(47) + chr(98)
AAC = chr(105) + chr(110)
 [...]
ACC = chr(110) + chr(116) + chr(32) + chr(109) + chr(101) + chr(115) + chr(115)
ACD = chr(97) + chr(103) + chr(101) + chr(10)
xxx = str(AAA + AAB + AAC + AAD + AAE + AAF + ABA + ABB + ABC + ABD + ABE + ABF + ACA + ACB + ACC + ACD)
exec(xxx)
 - - [ code ] - -

        After writing this, I realized  that I could still obfuscate the
    code a little more.  Rather than having one space between <variable>
    and '+', there is a random  number of spaces.  Basically, everywhere
    there could  be a space in the virus' code, there is a random number
    of them.  With this implemented, our code looks like this:

 - - [ code ] - -
AAA    =  chr( 35     )  +     chr(   33   )  +    chr(   47  )
 [...]
xxx     = str(     AAA    +  [...] +     ACD   )
exec(  xxx      )
 - - [ code ] - -

        And just  for the  Hell of it, I decided to add one more feature
    to Lame.C's engine.  The  engine randomly  decides whether or not to 
    start the code with a superfluous if-statement.  This makes the code
    look like this:

 - - [ code ] - -
if 33 == 33:
    AAA    =  chr( 35     )  +     chr(   33   )  +    chr(   47  )
     [...]
    xxx     = str(     AAA    +  [...] +     ACD   )
    exec(  xxx      )
 - - [ code ] - -

        With all  of these features, I  expect  that  like JS.Untz, this
    virus will go undeteteced for quite some time.

    Permanent links for your viewing pleasure:
        Obfuscated code
            text - http://www.kefivx.info/txt/plamec.txt
        Unobfuscated code
            text - http://www.kefivx.info/txt/plamec-u.txt
        This article
            html - http://kefivx.info/2010/py-lame-c/
            text - http://www.kefivx.info/txt/plamec-desc.txt

        Questions, comments, hatred and whatever else may  be emailed to
    kefi@kefivx.info.  Or just comment on my blog: http://kefivx.info/.

[*]     html - http://kefivx.info/2010/js-untz/
        text - http://www.kefivx.info/txt/untz.txt

[**]    ord(c) - Given  a  string  of  length  one,  return  an  integer
    representing  the  Unicode  code  point  of the  character  when the
    argument  is  a unicode object, or  the  value  of the byte when the
    argument is an 8-bit string.
        more - http://docs.python.org/library/functions.html


             (k) kefi - Setting Orange, the 55th Day of Chaos, 3165 YOLD

