  __________________________________________________________________________
 (__________________________________________________________________________)
 { __ }   { __ }        |                            |        { __ }   { __ }
  |\\|     |\\|    .----O----------------------------O----.    |//|     |//|
  |\\|     |\\|    |      Win32 Advanced Programming      |    |//|     |//|
  |\\|     |\\|    `--------------------------------------'    |//|     |//|
 {____}   {____}                                              {____}   {____}



      |----------------|
-----=ð Starting Words ð=----------------------------------------------------
      |----------------|

        Hello, this is Dics typing.

        This   file   is   a  small  Windows  9x  programming  tutorial.  The
 informations i'll present here are not official and neither are the examples
 listed in .\Examples. I am not taking any responsability for any damage done
 to  your  computer  or  any  other parts by the use of this text file or the
 examples. Use them at your own risk !

        Oh, and yeah...No animals were harmed during the developement of this
 tutorial (except for those damn mosquitos i had in my room !)

      |--------------|
-----=ð General info ð=----------------------------------------------------
      |--------------|

        There  are  a few "ASSEMBLER" type applications for PC. A lot of them
 are  comercials  but there are a few free ones. Until some months ago i used
 TASM  (Borland  Turbo  Assembler) because it seemed to be the most reliable,
 powerfull  and  flexible  assembler.  I could use it to make DOS and WINDOWS
 programs.  For  some  time  now  there  is  a  more atractive package on the
 Internet.  The  price is good (it's free :)) ) and the programs contained in
 it  are  very  functional  too.  I'll list here the programs from inside the
 package along with an URL you can use to download it.

        NASM  - The Netwide Assembler (free)
        ALINK - Anthony Linker (free)
        GoRC  - Resource Compiler (free)

        The   package   is  edited  by  Tamas  Kaproncai  aka  TomCat/Abaddon
 [tomcat@szif.hu] official location: http://rs1.szif.hu/~tomcat/win32

        You  all  know what's the purpose of a pair "assembler & linker". How
 about  the  resource compiler ? Read the next section and hopefully you will
 understand...

      |-----------|
-----=ð Resources ð=-------------------------------------------------------
      |-----------|

        Windows  uses  some  kind  of graphical engine to display windows and
 buttons and characters and all other stuff you see on the screen. The engine
 can  be  programed  to  display  the  above  controls during run-time or can
 configure the layout for the current program using some informations located
 in  the  executable file. Those informations are known as "resources". First
 you  generate  a  ".rc"  file  containing  all the info you need to corectly
 construct a window on your screen. The file is a text file. Just look at the
 following example :

#define DIALOG_1        100

DIALOG_1 DIALOG 19, 68, 166, 56
STYLE WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX
CAPTION "Cute this dialog box :)"
FONT 8, "MS Sans Serif"
{
}

        This    is    exactly   the   same   text   located   in   the   file
 ".\Examples\ex4.rc".  It  defines  a  dialog  box  which  has the upper-left
 coordonates (19, 68) and the dimensions X, Y (166, 56).

        The  identifier  of  the  dialog box is DIALOG_1 = 100. It can be any
 integer number between 0 and 65535; it is your choice. Just don't define two
 or  more  controls with the same id.The caption contains the text "Cute this
 dialog box :)" without quotes.

        Some  controls  require  identification just to make sure you receive
 the  messages they send. Example : when you push a button you will receive a
 "WM_COMMAND"  message  (see  later)  which will have as the second parameter
 (wparam)  the  control's  id.  This  way  you will know that your button was
 pressed.  Notice the brackets {}. They define a zone in which you should put
 some  other controls located inside the dialog box like buttons, text-input,
 pictures etc.

 Ex:

{
 PUSHBUTTON "Exit", IDC_P2, 104, 21, 59, 13
}

        You  can  edit  the  ".rc"  file manualy or you can use one of the so
 called "WYSIWYG" (What You See Is What You Get) resource editors.

        The  resource  compiler  is  the program that compiles the ".rc" file
 into  a  ".res" file. The ".res" format is the format understood by windows.
 It  will  be  inserted  by  the linker into the final form of the executable
 (take a look at some docs regarding the Portable Executable format; use this
 url to start your search: http://lordjulus.cjb.net )

      |--------------------|
-----=ð Source file format ð=----------------------------------------------
      |--------------------|

        The  .ASM  file  format  for  NASM  is  very simple. You just have to
 declare  the  two most important sections in a Win9x PE executable file. The
 "CODE" section and the "DATA" section.

Declare the code section like this : "SECTION CODE USE32 CLASS=CODE"
Declare the data section like this : "SECTION DATA USE32 CLASS=DATA"

        The next step is to declare the starting point for your program. This
 is  done  by  labeling the first instruction of your code with the "..start"
 label.

 Example

..start: clc

        After  this  you  may  want to call some internal W9x api. You can do
 this by declaring api procedures as externals :

EXTERN ExitProcess

        You can define constants using the "%define" directive like this :

%define messageid 0

        Now  i  think  it's  time  for  a  small example. Just cut&paste this
 example into a file or use the file "Ex1.asm" located in ".\Files\Samples"

EXTERN ExitProcess

SECTION CODE USE32 CLASS=CODE
..start:
        xor     eax,eax
        push    eax
        call    ExitProcess

SECTION DATA USE32 CLASS=DATA

        Now  you have done it. You have your first Win9x fully functional ASM
 program.  But hey, this program doesn't do anything, you'll say. Yes, you're
 right.  It  is  just  a small example of how you can use the free assembling
 package i mentioned above. Now comes the big part.

      |------------------------------------|
-----=ð More complex programming tehniques ð=------------------------------
      |------------------------------------|

        When  you are calling Windows9x APIs sometimes you need to push a few
 parameters  on  the  stack.  The  standard example (i mean most used) is the
 MessageBoxA api.

int MessageBox(
    HWND hWnd,  // handle of owner window
    LPCTSTR lpText,     // address of text in message box
    LPCTSTR lpCaption,  // address of title of message box
    UINT uType  // style of message box
   );

        The MessageBoxA description comes from Microsoft's SDK help files. As
 you  can  see  there  are  4  parameters.  You  can  call  the API like this
 (.\Files\Samples\Ex2.asm):

        push    UINT uType
        push    LPCTSTR lpCaption
        push    LPCTSTR lpText
        push    HWND hWnd
        call    MessageBoxA

        Sometimes  is  hard  for  a  reader  to  follow  the  whole  bunch of
 instructions  i  listed.  There  is  only one thing you can do about it. The
 parameters  are  stored  on  the  stack  in  reverse order. This is known as
 "Standard  Call"  or stdcall. The only problem is that NASM does not support
 standard  calls.  But  that't  not  such a big problem because it has a very
 powerfull  macro  definitions.  You  can  construct any macro you want using
 NASM's directives.

        Let's do that for stdcall:

%macro stdcall 0-*
%define _j %1
%rep %0-1
    %rotate -1
    push %1
%endrep
    call _j
%endmacro

        You  will  see  that  i  modified the original stdcall macro from the
 original NASM distribution to fit my needs. This macro even accept one or no
 parameter  at  all.  You  will  probably say that this is pretty dumb. For a
 minimum  stdcall you will need at least 2 parameters you can push in reverse
 order on the stack. There is no revers order for 1 parameter or no parameter
 at all :))

        Yes, you are right but i modified it to make the source programs look
 better.  Every  API  call  will  be made using "stdcall" macro so the "call"
 instruction  is used only for the local procedures. If you don't like it you
 can go and read the NASM .doc file and learn how to make your own macro :-P

        Now let's call MessageBoxA using stdcall macro (Ex3.asm):

stdcall MessageBoxA, HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType

        Easy  as that ! You can even put registers as parameters for stdcall.
 Just  remember  one  thing.  Do not put a macro call and a label on the same
 line or you will get a parser error from NASM.

label:  stdcall ExitProcess, eax        ;IS WRONG !!!!

label:
        stdcall ExitProcess, eax        ;This is the right way !

      |------------------------------|
-----=ð Windows 9x message procedure ð=------------------------------------
      |------------------------------|

        Windows  9x  is  an  advanced  32bit  operating system. It implements
 protected  mode  drivers  for  just  about any hardware you have inside your
 computer  and multitasking. Any program is loaded into W9x system like a new
 task.  After  it  receives control from the system, the program starts to be
 bombed  bye  a  large  number  of  messages (events) sent by the kernel. The
 messages  are  numeric codes of the events that are happening at that moment
 (like key press, mouse move or button press, window move or shutdown etc).

        When  i  press the left mouse button i get the WM_LBUTTONDOWN message
 (201h).  The  program has to handle only the messages that are important for
 its functionality. Ex : if i am using only the mouse for my task there is no
 need  for my program to monitor key presses too. I only have to handle mouse
 events. You will see and understand better what i mean in the next lines.

        The  messages  are received using the "GetMessageA" api call (see the
 parameters  below).  After  the  call you will get the messages into a "MSG"
 structure. If the message is WM_QUIT then the EAX register contains value 0.
 If the message is any other than WM_Quit then EAX contains a non-zero value.
 If  any  error  occured  then  EAX contains the value -1. If the message you
 received   is   not   interesting   you   have  to  dispatch  it  using  the
 "DispatchMessageA" api call.

        See  "GetMessageA.txt" and "DispatchMessageA.txt" in ".\Examples" for
 info on functions and parameters.

        In   short  words,  what  i  said above can be translated in ASM like
 this:

message_loop:
        stdcall GetMessageA, POINTER msg, UINT 0, UINT 0, UINT 0
        or eax,eax
        jz exit
        stdcall DispatchMessageA, POINTER msg
        jmp message_loop
exit:

        This  loop handles only the WM_QUIT message (when EAX = 0). Note that
 even  if  you  do  not  have a window on the screen, your program will still
 receive  messages. The only difference is that you will not receive messages
 related to window (like minimize or move).

      |-------------------|
-----=ð Your first window ð=-----------------------------------------------
      |-------------------|

        The  simplest way possible to show a window on the screen is to start
 your  program  with  a  Dialog_box  as  your main window. This way you avoid
 registering  a window class and some other things you will find out later in
 this  document.  You  can  do  this  by  calling  the  "DialogBoxParamA" api
 function.  Look  in  ".\Examples\DialogBoxParamA.txt" for details about this
 function.  The  first thing you must do is finding your instance handle. You
 can do this by calling another api function "GetModuleHandleA" with 0 as the
 only  parameter  (zero means the current process). The result will be in EAX
 register.

        stdcall GetModuleHandleA, UINT 0        ;=> instance handle in EAX
        stdcall DialogBoxParamA, eax, UINT 100, UINT 0, LPFN DlgProc, UINT 0

        DlgProc  is  a DialogBox message procedure which will receive control
 whenever  a  message is sent to your program. The messages will be stored on
 the stack on entry. The stack looks like this :

        4 bytes lParam
        4 bytes wParam
        4 bytes uMsg
        4 bytes hwnd
        4 bytes Return address = Current stack pointer (ESP)

hwnd    - Identifies the dialog box.
uMsg    - Specifies the message. (actual message id)
wParam  - Specifies additional message-specific information.
lParam  - Specifies additional message-specific information.

        The first message you should handle is WM_INITDIALOG. This message is
 sent  only  once  at  the startup. Use it to set up your work-space (arrange
 arrays, allocate memory or any other job).

        Another  important  message in WM_CLOSE. It is sent whenever the user
 press  the  "x"  located  on  the right side of caption bar. You can end the
 program and the DialogBox using the "EndDialog" api function.

        Probably  the  most  sent  message  is  the  WM_COMMAND message. This
 message  is  sent whenever you do something with the controls located inside
 your  window.  When you ush a button you will receive the message WM_COMMAND
 and  as  wparam  you will have the button's id as you set it in the resource
 file.

        You  can  implement  some  of  this  in  the  folowing procedure (see
 "Ex4.asm"):

DlgProc:push eax
        push ebp
        mov ebp,esp
        mov eax,UINT [ss:ebp+16]        ;In eax we have the message
        cmp eax,WM_COMMAND
        je ControlCommand
        cmp eax,WM_CLOSE
        jne Exit
GetOut: mov eax,UINT [ss:ebp+12]        ;Get handle
        stdcall EndDialog, eax, UINT 0
Exit:   pop ebp
        pop eax
        xor eax,eax                     ;Exit code (0 = OK)
        ret 16                          ;Clear the stack (4parameters * 4bytes)
ControlCommand:
        mov eax,UINT [ss:ebp+20]        ;Get wParam in EAX
        cmp eax,IDC_B1                  ;When our button is pressed we just exit
        je GetOut
        jmp short Exit

              DICS
-----=ð ----------------- ð=-----------------------------------------------
