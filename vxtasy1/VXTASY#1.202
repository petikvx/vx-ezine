  __________________________________________________________________________
 (__________________________________________________________________________)
 { __ }   { __ }        |                            |        { __ }   { __ }
  |\\|     |\\|    .----O----------------------------O----.    |//|     |//|
  |\\|     |\\|    |       Win32 basic programming        |    |//|     |//|
  |\\|     |\\|    `--------------------------------------'    |//|     |//|
 {____}   {____}                                              {____}   {____}



        Let's  talk  a  little  about  the  Win32  apis.  They  represent the
 strength,  and  basically the core of the entire OS. All actions that are to
 be  performed can, should and must be done via those APIs. The apis actually
 are  functions  which  your  code calls and, eventually, uses the parameters
 returned.  Microsoft claims that every Win32 api that they implemented exist
 in  each  and every Win32 platform. This is only half true. The true part is
 that  they exist *by name*. The false part is that they don't always do what
 one  might  expect to do. For example, Windows 95 has many Apis which can be
 called,  as  they  are  exported,  but the value returned is always 0 and no
 action is taken.

        The  idea,  maybe the main idea in the Win32 system is the import and
 export  methods.  This  allows  more  than  one application to call the same
 functions  without  them  being  forced  to  actually  hold the code of that
 function inside. Basically, a win32 application will only keep the addresses
 of  those  functions  and  will call  them  as it needs them. This makes the
 applications  smaller,  in  the  first  place, and it assures that all win32
 applications  use  the  same version of the functions. The export and import
 are  presented largerly in one of the next articles. What I want to show you
 here is how to make a simple win32 application.

        As  always,  I  will  only reffer to the TASM sintax, so what I write
 might not work with the MASM linker, or others.

        Whenever  one  wants to use a particular win32 Api, a refference must
 be  created,  so  the  linker  can know what does it need to import for that
 particular application. The refference is created like this:

        extrn <api name>:proc

        An example of an Api used in all win32 applications is this:

        extrn ExitProcess:proc

        Please,  be  sure  to  add  the ':proc' statement. If you don't, your
 program  will  compile  and  link  ok, but it will give a General Protection
 fault  everytime the Api is called. To understand why, try to compile a file
 in both ways and debug it with Turbo Debugger.

        So,  whenever  one  wants  to use an Api, he must import it using the
 "extrn"  statement. But, how do we know what Apis do we need? This is a good
 question.  The  best  answer  for  this  is the Microsoft Win32 Programmer's
 Refference,  which  can  be  downloaded  from  Microsoft's  site,  and which
 contains  a  full  description  of  all  win32 Apis. Basically, it is pretty
 intuitive  how  to search for a particular Api. Let's say you want to open a
 file,  but you don't know what is the needed Api. You simply type "open" and
 soon  you  will  reach  the OpenFile Api. Open the help for it and there you
 have it. But that is not all. As you look in the help for one or another api
 you  may  nottice  that certain parameters are needed in the calls and other
 parameters  are  returned. The win32 refference only calls them by name. But
 what  are their values? The answer lies in the Microsoft SDK. This is a huge
 file  that  can  be  downloaded from Microsoft's site and which contains the
 values for all those parameters. In order to ease up your life I took a time
 and  compiled  a  few .inc files which you can use in your code. The include
 files  are  also in this issue and you can use them freely. Now, as you have
 the  link  between  the win32 Refference name and the value, you can use the
 parameters by their name.

        Another  problem now... As you know, most of the Windows is done in C
 and  most of Windows programming is done in C. Therefore, most documentation
 is  built  for  C  programmers.  Sometimes  this  is  annoying  for  the ASM
 programmer. An example from the win32 refference is this:

        HANDLE CreateFileA{
               LPCTSTR      lpFileName
               DWORD        dwDesiredAccess
               DWORD        dwShareMode
               LPSECURITY_ATTRIBUTES lpSecurityAttributes
               DWORD        dwCreationDistribution
               DWORD        dwFlagsAttributes
               HANDLE       hTemplateFile
                           }

        In the C sintax, the above call gets compiled like this:

                push <templatefile>
                push <flags>
                push <creation>
                push <security_attribs>
                push <sharemode>
                push <access>
                push offset <filename>
                call CreateFileA

        So,  I  guess  this  is  clear.  If you look up the Apis in the win32
 refference,  when  you use the asm sintax, you must push the parameters from
 right  to  left. Whenever you have a LP or a P, it means a long pointer or a
 pointer  so  you  must  push  an offset to something. Check the C sintax for
 that.

        And little by little we came to the api calling way. This is done, as
 you  saw by pushing different parameters and then calling the api. If an api
 call  fails  and  error  is  returned,  usually  in EAX. If the actual error
 is  not returned in EAX it can be obtained by using the GetLastError api. It
 returns in EAX the last error that occured. A detailed list of errors can be
 found in the file w32er_lj.inc.

        If the linker reports and error that says:

        Unresolved external link: <api name>

        don't  get  frightened. It is probably a mistyped name. Open the file
 import32.lib  with  a  hex/ascii viewer and look for the name. There you can
 see  the  correct  spelling.  For example a common error I used to do was to
 type UnMapViewOfFile instead of the correct form: UnmapViewOfFile.

        So, now let's start coding our first win32 application:

        .386p
        .model flat, stdcall

        The  above  statements  assures  us  that we must at least have a 386
 machine  (Windows  NT  doesn't  support 386 or less machines). Then, we must
 also  tell  the  linker that our application runs in a flat memory model (no
 segments, just plain memory).

        After that we can put the externals:

        extrn <api1>:proc
        extrn <api2>:proc
        ...

        The data required by our program must be put in the data section:

        .data
           var1 dd ?
           var2 dd ?
           ...

        Then comes the code section:

        .code

        start:
           ...

        end start
        end

        Note  that  you  can  also  put data inside the code section, but, by
 default  you can only *read* that data (I will explain the access rights and
 their  use  later).  However  this  is very important for virus writing as a
 virus  cannot  afford to keep it's data in a different section. All the code
 and  data  must  reside  in the same section. For this, the first generation
 must be altered so it can work too. This is done with utilities that set the
 write  flag  in  the  code  section. This is done by several utilities, like
 PEWRSEC or PEENABLE, and you will have no problem running win32 applications
 with  data inside the code section. However, even if you have no useful data
 in  the  data section, you cannot leave it strip as TLINK32 will give you an
 error.  So,  here  we  come  to  the  first  skeleton  of the simplest win32
 application:

        .386p
        .model flat, stdcall
        extrn ...
              ...
        .data
         dd 0
        .code
        start:
             (code here)
             (exit code)
             (data here)
        end start
        end

        As  you are familiar with Windows programs, you might expect that one
 little  program like the above one would create a window and wait for you to
 hit exit... Nope... That's not it. This example will do nothing. In order to
 create  a  window  we  must do much, much more. But we will speak about that
 later.  That  is  called  a Graphical Interphace application. We have here a
 native Windows application.

        Ok,  after  some  basic  stuff  was  presented, let us see how can we
 display a message box and wait for the user to press a button:

        .386p                                       ; 386 machine
        .model flat, stdcall                        ; model flat
                                                    ;
        extrn MessageBoxA:proc                      ; import from user32
        extrn ExitProcess:proc                      ; import from kernel32
                                                    ;
        .data                                       ; dummy data section
         dd 0                                       ;
                                                    ;
        .code                                       ;
        start:                                      ;
             push 1000h                             ; ÄÂÄ> Parameters for
             push offset Window_Title               ; Ä´   MessageBoxA
             push offset Window_Text                ; Ä´
             push 0                                 ; ÄÙ
             call MessageBoxA                       ; call API
                                                    ;
             push 0                                 ; Exit code
             call ExitProcess                       ; call exit API
                                                    ;
        Window_Title db "Message box example.",0    ; data
        Window_Text  db "Hello World !!",0          ;
                                                    ;
        end start                                   ;
        end                                         ; end

        To compile this application we have the following commands:

        TASM32 -ml -mx program.asm
        TLINK32 -Tpe -aa -c program,,,import32.lib

        The  import32.lib  file  is  a  very important one. It ships together
 with  the TASM compiler and it contains the names of all Win32 apis you need
 to  use  in  your  programs.  You  can  make  your  own .LIB files using the
 importlib program which also comes with TASM.

        So,  you  made  your first win32 application which displays a message
 box. I think that it is more than clear how this is done.

        Check  the  following  articles for getting deeper in the win32 virus
 programming.

                                            ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                                            ³   Lord Julus - 1999    Û
                                            ÀÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÛ
