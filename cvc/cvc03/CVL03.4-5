
 Miny1 에 포함된 Anti-Heuristic 기법들                           CVL #03, 98/03

-----------------------------------------------------------------> Osiris / CVC

  이번에 개선된 Miny1 의 기능은 크게 다음과 같다.

  Anti-Heuristic 기법을 사용해서 알려지지 않는 바이러스에도 진단되지 않는것이다.

  바이러스 제작자 입장에서는 Heuristic 을 사용하는 AV 는 상당히 성가신 존재임에
틀림없다. 힘들게 바이러스를 제작해도 알려지지 않은 바이러스 라고 진단한다면 제
작의욕을 떨어 뜨릴 것이다. 하지만, Heuristic 에도 많은 약점들이 존재한다. 바이
러스를 제작하면서 경험한 각각의 AV 들의 Heuristic 방법을 정리하면 다음과 같다.

  AVP,DrWeb,Dr solomon,F-prot 는 프로그램 코드를 직접 실행 (에뮬레이션) 하는것
같다. 이런 프로그램들은 상당히 진단 피하기가 까다롭다.

  TBAV,TV 의 경우 프로그램상의 코드에서 바이러스에서 많이 사용하는 문자열을 찾
는것 같다. TV 의 경우 암호화 된 바이러스내부에서 코드를 찾아 내지는 못하지만,
TBAV 의 경우 암호화 코드 까지는 (아마 첫 loop 명령과 inc, dec 따위의 명령이 올
때까지 인것 같다.) 암호를 풀어준다.
  그외 타 AV 들은 에뮬레이터를 사용해서 바이러스의 암호를 해제 하고 진단을 하
였다.

  Miny1 을 개선하면서 이들 AV 들에 진단되지 않기 위해서 많은 기법을 사용하였고
여기에 그 내용을 공개 하려고 한다.

  우선 국내에서 많이 사용되는 TBAV 의 진단을 피하기 위해서 기존에는 *.c?m, *.e?
e 파일 찾기를 했으나 암호풀기 루틴 (# 플래그)의 발생으로 진단 피하기에는 힘들었
다. 하지만, SVS (Seoul Virus Society) 의 MOV (Master Of Virus) 가 제작한 바이러
를 분석하면서 TBAV 의 암호플래그가 발생하지 않는 코드를 알아 냈고 Miny1 제작에
응용하였다. 바이러스 시작부분에 다음과 같은 코드를 넣어 주면 TBAV 는 암호화 기
법을 사용한다는 것을 모르게 되고 바이러스 내부의 암호도 해제 하지 못한다. 가장
쉽게 TBAV 를 무력화 시킬 수 있었다. MOV 에게 감사 드린다.

 Anti_TBAV:
               cmp    al,100                    ; Thanx ! MOV !
               je     Decode                    ; TBAV 의 '#' 플래그가 발생하지
               inc    al                        ; 않는다.
               loop   Anti_TBAV                 ;


  그리고, 암호를 풀어서 내부를 검사하는 프로그램들을 위해서 AH 명령들을 AV 들이
많이 사용하는 진단에서 벗어 나게했다.

  즉, 파일 관련 평션들을 암호화 시킨 것이다.

  예 )
               Mov    ah, (4Eh xor 12h)
               Mov    ah, (4Fh xor 12h)         ; 다음 파일 검사

               mov    ax,0143h                  ; 속성을 읽기/쓰기로 만든다.
               xor    cx,cx                     ; DTA 가 0080h 부터 시작하므로
               mov    dx,0080h
               add    dl,1Eh                    ; DX=009Eh
               xchg   ah,al

               mov    ax,023Dh                  ; 오픈/쓰기로 오픈
               xchg   ah,al                     ; AX=3D02h

               mov    ax,(5700h xor 5700h)      ; 시간 얻기
               xor    ax,5700h

               mov    ax,0157h                  ; 시간 조정(원래 시간)
               xchg   ah,al                     ; AX=5701h

  암호 방법도 각기 다르게 하였다. 예를들어 모든 AX 값을 특정 키 값으로 진단하
는 방법을 사용할지도 모르기 때문이다.

  하지만, 위의 방법도 코드를 직접 추적하는 프로그램에는 진단이 되었다.

  가장 큰 골치는 Dr Web 프로그램이었다.
  계속 암호화,COM,EXE 감염 바이러스라고 진단이 되었고 Dr Web 의 Heuristic 기능
을 깨보기로 맘먹고 어떤 루틴에서 문제가 되는지 알아보았다.

  일단 암호키 값을 바꾸어 보니 전혀 진단을 못했다. 곧 프로그램 코드를 실행해서
암호를 해제하고 진단하는 것이었다. EXE 감염 루틴이 전혀 없는데 EXE 감염이라고
의심하는 점에서 *.e?e 를 의심하게 되었고 *.c?m, *,e?e 를 모두 0 으로 만들고 나
니 전혀 진단하지 못했다. 따라서, 프로그램에서 *.c?m, *.e?e 를 찾을 것 같아서
*.??m, *.??e 로 바꾸고 바이러스에서 이곳 버퍼에 'co' 와 'ex' 를 각각 넣는 명령
어를 집어 넣었는데 다시 바이러스로 진단되었다. 코드를 실행해서 *.com, *.exe 가
완성되는걸 보고 경고를 내는걸 확신하게 되어서 다음과 같은 트릭을 사용하게 되
었다. 일단 바이러스 시작해서 아무 파일이나 찾게 한후 에러가 발생하면 루틴으로
가서 상태값 (S_Find 가 FFh 이면 처음에 아무거나 찾았다. 00 이면 COM 파일을 찾
았다. 01 이면 EXE 파일을 찾았다. 이다.) 을 비교해서 COM,EXE 문자열을 집어 넣어
주는 루틴이다. 결국 이 방법을 사용해서 Dr Web 의 Heuristic 기법을 저지 시켰다.

  Heuristic 도 인간이 만든 프로그램이다. 이 방법을 피할 방법은 잠깐 연구하면
무수히 많다. 완벽한 Heuristic 기법은 없다.

  현재 각 AV 들의 Heuristic 기술은 상당한 수준까지 도달해 있다. 앞으로 VX 들과
AV들 간의 머리싸움은 계속 될 것이다.
