
  코드 최적화                                                    CVL #03, 98/03

----------------------------------------------------------------------> Red_Fox

 40Hex Number 9 Volume 2 Issue 5                                       File 008


                     *************************************
                          코드 최적화, 초보자 가이드
                     *************************************
                     CODE OPTIMISATION, A BEGINNER'S GUIDE
                     *************************************
                             Written by Dark Angel
                     *************************************
  
  바이러스를 제작할때 크기는 중요한 문제이다. 바이러스가 지나치게 클 경우 속
  도도 떨어지고 디스크 공간을 많이 차지 하게 된다.
  이 란에서는 자신의 바이러스 크기를 줄이는 방법에 대해서 설명하겠다.

  최적화에는 두가지 방법이 있다. 바이러스 구조를 고치는 것과 코드를 최적화하
  는 것이다.
  
  check_install:
    mov ax,1234h
    int 21h
    cmp bx,1234h
    ret
  
  install_virus:
    call check_install
    jz   exit_install
  
  위의 내용은 아래와 같이 최적화 할 수 있다.
  
  install_virus:
    mov ax,1234h
    int 21h
    cmp bx,1234h
    jz  exit_install
  
  예루살렘과 같은 바이러스가 다음과 같은 파일 접근을 통해서 바이러스 감염을
  시도 한다. 하지만, 이 방법은 바이러스 크기만 증가시킨다.
  
  파일 속성 얻기 (get attributes)
  읽기 전용 파일 오픈 (open file read/only)
  파일 읽기 (read file)
  파일 닫기 (close file)
  이미 감염되었으면 감염 제외 (exit if already infected)
  속성 없애기 (clear attributes)
  읽기/쓰기로 파일 오픈 (open file read/write)
  파일 작성 시간 구하기 (get file time/date)
  새 해더 쓰기 (write new header)
  파일 끝으로 포인터 이동 (move file pointer to end of file)
  바이러스 붙이기
  원래 파일 작성시간 복구 (restore file time/date)
  파일 닫기 (close file)
  속성 복구 (restore attributes)
  끝 (exit)
  
  위의 바이러스 감염 구조를 다음으로 바꿔 보자.
  
  속성 얻기 (get attributes)
  속성 없애기 (clear attributes)
  읽기/쓰기로 파일 오픈 (open file read/write)
  파일 읽기 (read file)
  파일이 감염되었으면 파일 닫기 (if infected, exit to close file)
  파일 작성 시간 얻기 (get file time/date)
  포인터를 끝으로 옮기긱 (move file pointer to end of file)
  바이러스 붙이기 concatenate virus
  처음으로 포인터 이동 (move file pointer to beginning)
  새 해더 쓰기 (write new header)
  원래 파일 작성시간 복구 (restore file time/date)
  파일 닫기 (close file)
  속성 복구(restore attributes)
  끝(exit)
  
  두번째 방법을 사용하면 시간과 길이를 줄일 수 있다.
  

  코드 최적화는 다음과 같다. 주로 같은 행동을 하지만 길이가 작은명령으로 바꾸
  는 것이다.
  
  아마 가장 많은 최적화는 다음과 같은 것일 꺼다.

    mov ax,0 ; 이 명령은 3 바이트 이다.
    mov bp,0 ;

    xor ax,ax ; 같은 일을 하지만 2 바이트 이다.
    xor bp,bp ;

  이나

    sub ax,ax ; 역시 2 바이트 이다.
    sub bp,bp

  로 바꿔 보자.

  또 가장 쉬운 최적화 방법은 레지스트의 값을 저장 할 때이다.
    mov bh,5h   ; 2 bytes
    mov bl,32h  ; 2 bytes
                ; 총:4 바이트
  -->
    mov bx,532h ; 3 바이트면 된다. 1 바이트를 줄일 수 있다.
  
  매우 유용한 압축은 파일을 오픈 했을때 AX 에서 BX 로 파일 핸들 값을 가져 올
  경우 이다.

    mov  bx,ax   ; 2 bytes
  -->
    xchg ax,bx   ; 1 byte
  
  또 다른 최적화는 포인터 이동할때 이다.

    mov ax,4202h  ; "mov ah,42h / mov al,2" 에서 1 바이트를 줄일 수 있다.
    xor dx,dx     ; "mov dx,0" 에서 1 바이트를 줄일 수 있다.
    xor cx,cx     ; 역시 같다.
    int 21h
  -->
    mov ax,4202h
    cwd           ; "xor dx,dx" when ax < 8000h 일때는 xor dx,dx 와 동일하다.
    xor cx,cx     ; cwd 는 1 바이트이다.
    int 21h
  
  간접 번지에서 값을 얻어 올때나 값을 입력할때 BP 대신 SI 를 사용하면 길이를 줄
  일수 있다. [si+1] 값은 조합은 사용하지 마라.
  
    mov  ax,[bp]                ; 3 bytes
    mov  word ptr cs:[bp],1234h ; 6 bytes
    add  ax,[bp+1]              ; 3 bytes
  
    mov  ax,[si]                ; 2 bytes
    mov  word ptr cs:[si],1234h ; 5 bytes
    add  ax,[si+1]              ; 3 bytes
  
  카운터 1 증가시 다음의 방법을 사용하라.

    inc al  ; 2 bytes
    inc bl  ; 2 bytes
  -->
    inc ax  ; 1 byte
    inc bx  ; 1 byte
  
  구조적 최적화는 불필요한 코드를 줄일 수 있다. 몇몇의 바이러스의 경우 파일억
세스때 매번 에러를 검사하는 경우가 있는데, 첫 디스크 쓰기 기능을 할때만 검사
하면 나머지는 대부분 성공한다. 에러검사 보다 치명적인 에러 핸들러를 사용하면된
다.

    mov  ax, 4300h   ; 파일 속성 얻기
    mov  dx, offset filename
    int  21h
  
    push dx          ; 파일 이름 저장
    push cx          ; 파일 속성 저장
  
    inc  ax          ; ax = 4301h = 파일 속성 변경
    push ax          ; 저장 AX=4301h
    xor  cx,cx       ; 읽기/쓰기로 바꿈
    int  21h
  
  ...감염 부분의 나머지 부분...
  
    pop  ax          ; ax = 4301h
    pop  cx          ; cx = 파일의 원래 속성
    pop  dx          ; dx-> 원래 파일 이름
    int  21h
  
  좋은 프로그래머는 짧은 크기로도 효육적인 바이러스를 만들 수 있다. 80x86 코
  드를 보면 이것 말고 코드를 줄일 수 있는 방법이 존재한다. 이상 멋대로 번역
  을 읽어 줘서 고맙다.

