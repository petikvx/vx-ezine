
 TBSCAN 진단 피하기                                              CVL #03  98/03

-----------------------------------------------------------------> Osiris / CVC

 TBSCAN 은 인공지능 AV 로 잘 알려져 있다.
 많은 사람들이 Tbscan 의 성능을 너무 믿고 있는것 같다.
 이글에서는 Tbscan 의 각종 플래그와 얼마나 Tbscan 속이기가 쉬운지 알아 보겠다.

 시간이 없어서 몇가지 flag 만 표시 하겠다.


 # - 암호화

 Tbscan 을 가장 칭찬하는 것은 암호푸는 능력이 뛰어 나다는 것이다.
 연속된 루프 속에 간접번지에 어떤 값을 집어 넣거나 연산을 수행하면 암호화 라고
한다. 긴 폴리모픽 방식이 아니라면 이 플래그를 벗어 날 수는 없다.
  이번호에 실린 Miny1 (Anti-Heuristic) 을 보면 어떻게 # 이 안나도록 하는지 알
수 있다.


 ! - 8088 명령어가 아니다.



 1 - 80186 이상의 명령어이다.


 h - hidden 이나 system 속성이다.


 p - 압축되어 있다.

     PKLITE 등의 실행파일 압축일때 위와 같은 플래그가 발생한다. 많은 VX 들이 이
     들 그들 바이러스에 마치 압축된것 처럼 속여서 플래그가 발생하지 않게 속이기
     도 한다.


 w - 윈도우 파일이다.


 C - ANTI-VIR.DAT 와 정보가 틀리다.

     파일 길이가 증가했다면 대부분 신종 바이러스이다. ANTI-VIR.DAT 를 삭제하자.


 D - 직접 디스크 쓰기 명령이 있다.

     인터럽트 13h 기능을 사용한 쓰기존재할때 발생한다. Int 13h 호출등을 뒤로
     돌려서 호출하면 된다.


 E - 시작점을 구하기 위해서 call 0000 따위의 명령이 사용되었다

          call next
     next:
          pop  si
          sub  si,0003

          이 같은 방법을 사용하면 금방 진단된다. 가능하면 바이러스 시작점은
          바이러스 내에서 계산을 하자.


 F - 의심스러운 파일 억세스

     파일 바이러스의 파일 접근 법의 거의 흡사하다. 이런 루틴들의 반복을 보는 것
     인데 파일 억세스 루틴을 암호화 등의 방법으로 속이자.


 G - 폴리모픽 바이러스에서 많이 사용되는 것으로 쓰레기 명령어 들이 많다.

     의미 없는 쓰레기 값이 연속 될때 발생한다. 약한 폴리모픽 바이러스가 걸린다.


 J - 이상한 점프


 K - CS 와 SS 가 같은 EXE 파일

     SS 를 바이러스와 일치 시킬 필요 없다. CS,IP 만 바꾸도록 된다.


 L - 프로그램 로드를 검사한다.

     실행을 검사하는 루틴이 존재할때 발생한다.
     가능하면 cmp ah,4bh 같은건 사용하지 않으면 된다.


 M - 메모리 상주 코드가 존재한다.

     MCB 를 사용해서 상주 하는 코드나 인터럽트 21h 를 사용해서 기억장소에 상주
     시도할때 발생한다.


 N - 확장자와 실제 프로그램이 다르다.

     확장자는 EXE 인데 COM 형식으로 되어 있는 경우 등에 사용된다. 이건 겹쳐쓰기
     바이러스나 산란형 바이러스 진단에 사용될 수 있다.


 S - 실행 파일을 찾고 있다.

     오직 *.COM,*.EXE 만 찾는다. 이것을 *.C?M 이나 *.E?E 등으로 바꾸어 주면
     진단 안된다.


 T - 잘못된 파일 작성 시간이다.
     파일 작성시간이 62 초나 2000 년대 일때 발생한다. 시간대를 바꾸면 된다.


 U - 표준 인터럽트 21h 서비스가 아니다.

     많은 바이러스들이 기억장소 상주 여부를 검사하기 위해서 특정값을 호출한다.
     이 값이 지나치게 틀리면 이 플래그가 발생한다.

     mov  ax,0fa00h                 xor  ax,ax
     int  21h             -->       add  ax,0fa00h
                                    int  21h

 여기서 중요한 것은 #,A,E,F,K,L,M,U 등이다.

 대부분의 명령을 xor 따위로 연산해 주면 쉽게 해결 된다.

 의심스러운 파일 억세스 값은 것도 파일 바이러스에서 많이 사용되는 명령어들인

 *******************************************
   오픈,속성,포인터,닫기,파일작성시간,쓰기
   3D   43    42    3E       57       40
 *******************************************

 따위의 명령어들이 존재할때 발생한다. 가능하면 이 명령어들은 xor 연산등을 사용
 해서 겉으로 들어나지 않게 해야 한다.

