
 김용님의 앤티 디버깅 프로그램 분석과 테크닉                     CVC #01 97/06

--------------------------------------------------------------------> kiminwoo

================================================================================
              
                    김용님의 앤티 디버깅 프로그램 분석과 테크닉          

                                                       
                           written by OILOT(EnC)

안녕하세요?
오늘은 저와 함께 예전의 김용님의 For lock(하이텔) 강좌에 나온 소스를 보아가면서
2가지의 테크닉을 익히기로 합니다.그러나 프리패치큐를 제외한 나머지 테크닉은 리얼
모드 디버거만 방지 할수 있습니다.프리 패치큐란 CPU가 기계어 명령어들을 실행하기
위해 프리패치큐라는 곳에 명령어를 미리 집어넣는것을 말합니다.예를 들면 386의 프
리 패치큐는 16바이트 입니다.그러나 팬티엄에서는 오동작을 한다고 합니다.아마도
팬티엄에서는 미리 명령어를 읽어들이지 않아도 스피드가 매우 빨라 한단계씩 실행하
나 봅니다.그러므로 이 프리패치큐를 쓸때는 미리 팬티엄인지 아닌지 구분해야겠죠.
또한 프리 패치큐의 최대 약점은 그 루틴이 있는곳을 트레이싱 하지 않고 쭉 실행하는
Here명령이나 G명령에는 걸려들지 않는다는 점이죠.두번째 방법은 제가 전에 쓴 인터
럽트 주소를 바꾸는 방법입니다.그러나 제가 쓴 간접 바꾸기와 다른 직접 바꾸기가 나
오기 때문에 참고하시면 좋을듯 합니다.바이러스에서는 대부분 직접 바꾸기를 하지요.

                .MODEL  SMALL
                .CODE
                .386
CODE_JMP        EQU     0EBh                    ;JMP명령의 기계어 코드
GenBeep         PROC    NEAR                    ;근거리 함수로 지정
                mov     ax,@DATA                ;이것은 함수라고 하여
                mov     Ds,ax                   ;필요할때마다 불러낼수
                mov     dx,OFFSET msg_checked   ;있습니다.실제 프로그램
                mov     ah,09h                  ;상에서는 대게 뒤에 오지요.
                int     21h                     ;이것은 삐 소리와 함께 디버깅
                ret                             ;당하고 있다는 메시지를 냅니다.
GenBeep         ENDP

PreventFunc     PROC    NEAR
                mov     ax,@DATA
                mov     Ds,ax
                cli
                stc
                jmp     addr_00
addr_00:        mov     Cs:prevent1,9090h       ;prevent1의 jc onepass대신
                                                ;nop nop를 넣는겁니다.
                                                ;프리패치큐가 없다면 nop nop가
                                                ;실행이 되겠지만 프리패치큐 덕택
                                                ;에 메모리에는 nop nop라고 표기 
                                                ;되지만 실제로는 jc onepass가 실
                                                ;행이 됩니다.
prevent1        LABEL   WORD                    ;그래서 디버깅을 하면 nop nop가 
                jc      OnePass                 ;실행이 되는거죠.(코드트레이싱
                                                ;이라면)

                call    GenBeep                 ;이부분은 프리패치큐가 작동을 하
                                                ;지 않으면 genbeep함수를 콜~
OnePass:

                call    EraseBPoint             
                nop                             ;이 부분은 나중에 TwoPass로 점핑
                nop                             ;하기 위한 명령이 들어옵니다.
addr_01:        call    GenBeep

TwoPass:
                mov     ax,4c00h                ;종료
                int     21h

EraseBPoint:
                pop     bp                      ;call명령후의 bp=call명령 주소
                sub     sp,2                    ;스택 포인터를 원래대로
                sti                             
                xor     ax,ax                   ;ax=0
                mov     Es,ax                   ;es=0
                mov    WORD PTR Es:[0003h*4],CODE_JMP OR (TwoPass-addr_01)*0100h

;Int03h를 파괴
                mov     ax,WORD PTR Es:[0003h*4]
;인터럽트 3h를 ax에 넣는다.
                mov     WORD PTR Cs:[bp],ax
;OnePass의 아까 call명령후의 bp로 주소를 구한것에 점핑 명령을 넣는역활.
;nop nop =jmp twopass
                ret
PreventFunc     ENDP

                .DATA
msg_checked     DB      0Ah,0Dh,"Check debugging now",0Ah,0Dh,07h,"$"
                .STACK  1000h
                END     PreventFunc

*참고

;디버깅을 하지 않을경우(프리패치큐 작동)코드 순서
 Preventfunc => addr_00 => prevent1 => onepass => erasebpoint => twopass
;디버깅을 할경우 (프리패치큐 일어나지 않음)코드 순서
 preventfunc => addr_00 => prevent1 => genbeep => erasebpoint => twopass

                                                                           oilot
================================================================================
