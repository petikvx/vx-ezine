
 중요한 인터럽트 함수                                           CVC #04  98/05

------------------------------------------------------------------> Red_Devils

 다음은 바이러스 제작에 도움이 되는 인터럽트 함수들과 기타 정보를 모아두었다.
 이 내용은 계속 고쳐질 것이다. 지금은 작성중이므로 많이 미흡할것이다.

 1. 도스용 파일 바이러스

  * 인터럽트 21h

     디스크 선택    (0Eh)
     파일 오픈      (3Dh)
     파일 클로즈    (3Eh)
     파일에 쓰기    (40h)
     포인터 이동    (42h)
     메모리 변경    (4Ah)
     프로그램 실행  (4Bh)
     파일 찾기      (4Eh)
     다음 파일 찾기 (4Fh)

 2. 부트 바이러스

  * 인터럽트 13h

     디스크 읽기 (2)
     디스크 쓰기 (3)


*******************************************************************************


>>> 인터럽트 13h



>>> 인터럽트 21h


* Function 0Eh 디스크 선택
  ------------------------

  디폴트 디스크 드라이브를 변경한다.
  호출 레지스터 : AH  0Eh
                  DL  드라이브 번호 (A=0 부터 Z=25)
  리턴 레지스터 : AL  논리적 드라이브의 번호


* Function 3Dh  파일 열기
  -----------------------

        ah      =       3dh
        al      =       0-2     접근 모드
                        000 =   읽기만 가능
                        001 =   쓰기만 가능
                        010 =   읽기 쓰기 가능
        DS:DX = 세그먼트:옵셋

        CF = 0 ;함수 성공
        AX = 파일핸들
        CF = 1 ;실책


* Function 3Eh  파일 닫기
  -----------------------

        ax      =       3eh
        bx      =       파일핸들

        CF = 0 ;함수가 성공했음
        AX = 파괴 되었음
        CF = 1 ;실책


* Function 3Fh   파일읽기
  -----------------------

        ah      =       3fh
        bx      =       파일핸들
        cx      =       읽을 바이트 수
        DS:DX   =       버퍼 세그먼트:옵셋

        CF = 0 : 함수 호출 성공
        AX = 읽을 바이트 수
        CF = 1 ;실책

* function 4Ah (Modify Memory Allocation)
  ---------------------------------------

        AH      =       4Ah
        BX      =       요구되는 paragraphs (16 byte) 블럭 크기
        ES      =       변경을 요구하는 세그먼트

  Return :
        성공 했을 때
                Carry flag = clear
        실패 했을 때
                Carry flag = set

                AX      = error code
                            7 (MCB (메모리 컨트롤 블록) 가 파괴되었을때)
                            8 (insufficient memory)
                            9 (incorrect segment in ES)
                BX      = 가능한 최대 블럭 크기





* Function 4Bh  프로그램 실행
  ---------------------------

        AH      =       4Bh
        AL      =       0 (로드와 실행)
                        3 (오버레이 로드)
        DS:DX   =       파일 이름의 세그먼트 : 오프셋
        ES:BX   =       Parater 의 세그먼트 : 오프셋

 Return :
        성공 했을때
                Carry flag = clear
        실패 했을때
                AX      = 에러 코드
                        1 (function invalid)
                        2 (file not found)
                        5 (access denied)
                        8 (insufficient memory)
                        A (environment invalid)
                        B (format invalid)

    * parameter

    1) 로드와 실행

        Byte 0 : 환경영역의 세기먼트 포인터
             2 : command tail 의 오프셋
             4 : command tail 의 세그먼트
             6 : 첫 FCB 의 오프셋
             8 : 첫 FCB 의 세그먼트
            10 : 다음 FCB 의 오프셋
            12 : 다음 FCB 의 세그먼트

    2) 오버레이 로드

        Byte 0 : segment address where overlay is to be loaded
             2 : fixed value to apply to loaded image


첫번째로 감염시킬 파일 찾기:
----------------------------

        ah      =       4eh
        cx      =       파일 속성
                        bit 0 = 1 읽기만 가능
                        bit 1 = 1 숨김
                        bit 2 = 1 시스템
                        bit 3 = 1 볼륨 레이블
                        bit 4 = 1 디렉토리
                        bit 5 = 1 보통
                        bit 6-15  보류  
        DS:DX = 아스키즈의 페스 이름 세그먼트:옵셋


        CF = 0 ;함수 호출 성공
        [DTA] 디스크 전송 영역= 첫번째 데이타 블럭


다음 찾기:
        mov     ah      =       4fh     ;나머지는 위와 똑 같다



THE DTA
~~~~~~~

0       21      보류
21      1       파일 속성
22      2       마지막 수정 시간
24      2       마지막 수정 날짜
26      4       파일크기 (바이트 단위)
30      13      파일이름 (아스키즈)



