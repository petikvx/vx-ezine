
  남벌.NEW 치료 백신                                             CVC #04, 98/08

-----------------------------------------------------------------------> 권오창

  바연모에 올라온 남벌.NEW 치료 백신 소스 이다.
  이 소스에는 버그가 있다고 한다. 남벌.NEW 바이러스가 없어서 테스트를 못해 봤는
데 아마 앞부분 복구 바이트가 6 바이트가 아니고 5 바이트 일 것이다.

 [3371] 제목 : [정보] 남벌.NEW 치료백신입니다.
 올린이 : 착한오창(권오창  )    98/05/11 13:20

-------------< 짜름 >----------------------------------------------------------
 /*
  ==== nam_kill.cpp ====
  남벌.NEW 치료백신 입니다.
  으..바이러스제작자가 엄청 복잡하게 만들었네요
  원래코드 알아내는 루틴이 3페이지나 됩니다....
  쩝.. 만들다 보니 크랙파일 제작하는 기분이더군요.

  메모리 치료에서 다른프로그램이 int 21 을 가로챘을경우
  치료안됩니다..메모리 전체검색으로 고쳐야 됩니다.

  감염루틴을 자세히 분석안해서 버그있을지도 모릅니다.-> 다형성은 아니겠지 ??

  특징: 램상주, com 감염,
        백신실행하면 시모스램파괴,
        쓰기금지,
        늘어나는 크기가 일정치 않다.
  램상주방법: mcb에 할당된 램크기 줄인다
             psp 의 최상위램위치 줄인다,
             바이러스 복사
  램상주확인:  ax=304b, int 21 => ax=0
 */

 #include <stdio.h>
 #include <dir.h>
 #include <bios.h>
 #include <string.h>
 #include <conio.h>
 #include <stdarg.h>
 #include <io.h>
 #include <dos.h>

 #define byte unsigned char
 #define word unsigned int
 #define dword unsigned long

 char NAMBUL_FILE_CODE[]="[Nambul Virus] Ver.NEW";
 char NAMBUL_MEM_CODE[]={ 0x2e,0xff,0x2e,0xcc,0x06 };

 int found_num=0;

 void k_printf(int x,int y,char *format,...){
      va_list argptr;
      char string[100];
      va_start(argptr,format);
      vsprintf(string,format,argptr);
      gotoxy(x,y);
      printf(string);
      va_end(argptr);
 }

 void err_msg(char *msg){
     k_printf(40,10,"error - %s",msg);
     bioskey(0);
 }


 int found_nambul(char *file_name,char *v_name) {
     found_num+=1;

     k_printf(1,10,"%80s"," ");
     k_printf(1,10,"%s => %s.. Repair ? (Y,N) ",file_name,v_name );
     int yn=1;
     while(1){
         int key=bioskey(0);
         key&=0x00df;
         if(key!='Y' && key!='N') continue;
         printf("%c",key);
         if( key=='N' ) yn=0;
         break;
     }
     return yn;
 }

 void test_nambul(char *name){
    FILE *fp;
    fp=fopen(name,"rb+");
    if(fp==NULL) return;

    byte HEAD[2350];
    fseek(fp,0L,SEEK_SET);
    fread(HEAD,1,3,fp);
    if(HEAD[0]!=0xe9) { fclose(fp); return; }

    int *start_ofs=(int *)&HEAD[1];
    long ofs=(long)start_ofs[0]+3;
    fseek(fp,ofs,SEEK_SET);
    fread(HEAD,1,sizeof(HEAD),fp);

    if( memcmp(&HEAD[0x6d3],NAMBUL_FILE_CODE,sizeof(NAMBUL_FILE_CODE)-1) == 0 ) {
       if( found_nambul(name,NAMBUL_FILE_CODE) ) {
         _AX=0x9cf;
          char key = HEAD[0x6b7];
          for(int i=0; i<0x2a; i++){
             char *p = HEAD;
             p+=0x08cf + (i+i);
             *p ^= key;
          }
          HEAD[0x8c7]+=12;                 //inc     ds:d_09C7[bp] -> 12번
          HEAD[0x8c7]^=0x13;               //xor     byte ptr ds:d_09C7[bp],13h
          byte c_al=HEAD[0x6bd];           //mov     al,ds:d_07BD[bp]
          c_al+=HEAD[0x6bc];               //add     al,ds:d_07BC[bp]
          c_al+=HEAD[0x6be];               //add     al,ds:d_07BE[bp]
          c_al+=HEAD[0x6C0];               //add     al,ds:d_07C0[bp]
          c_al+=HEAD[0x6BB];               //add     al,ds:d_07BB[bp]
          c_al+=HEAD[0x6BA];               //add     al,ds:d_07BA[bp]
          c_al+=HEAD[0x6B9];               //add     al,ds:d_07B9[bp]
          c_al+=HEAD[0x6B8];               //add     al,ds:d_07B8[bp]
          c_al+=HEAD[0x6C1];               //add     al,ds:d_07C1[bp]
          c_al+=HEAD[0x6C2];               //add     al,ds:d_07C2[bp]
          c_al+=HEAD[0x6C5];               //add     al,ds:d_07C5[bp]
          c_al+=HEAD[0x6C4];               //add     al,ds:d_07C4[bp]
          c_al+=HEAD[0x6C3];               //add     al,ds:d_07C3[bp]
          c_al+=HEAD[0x6C7];               //add     al,ds:d_07C7[bp]
          c_al+=HEAD[0x6C8];               //add     al,ds:d_07C8[bp]
          c_al+=HEAD[0x6BF];               //add     al,ds:d_07BF[bp]
          c_al+=HEAD[0x6C9];               //add     al,ds:d_07C9[bp]
          c_al+=HEAD[0x6CA];               //add     al,ds:d_07CA[bp]
          c_al+=HEAD[0x6CB];               //add     al,ds:d_07CB[bp]

          HEAD[0x8c7]-=c_al;               //sub     ds:d_09C7[bp],al
          HEAD[0x8c7]^=c_al;               //xor     ds:d_09C7[bp],al
                                           //mov     bx,3Bh
                                           //mov     cl,4
                                           //shl     bx,cl
          HEAD[0x8c7]-=0xb0;               //sub     ds:d_09C7[bp],bl
          HEAD[0x8c7]-=34;                 //dec     ds:d_09C7[bp] -> 34번
          HEAD[0x8c7]^=0x4e;               //xor     byte ptr ds:d_09C7[bp],4Eh
          HEAD[0x8c7]^=0x58;               //xor     byte ptr ds:d_09C7[bp],58h
          HEAD[0x8c7]^=0x62;               //xor     byte ptr ds:d_09C7[bp],62h

          c_al=HEAD[0x8c7];                //mov     al,ds:d_09C7[bp]
          byte c_dl=HEAD[0x6c8];           //mov     dl,ds:d_07C8[bp]

          c_dl+=HEAD[0x6bf];               //add     dl,ds:d_07BF[bp]
          c_dl+=HEAD[0x6c9];               //add     dl,ds:d_07C9[bp]
          c_dl+=HEAD[0x6ca];               //add     dl,ds:d_07CA[bp]
          c_dl+=HEAD[0x6cb];               //add     dl,ds:d_07CB[bp]
          c_dl+=HEAD[0x6c6];               //add     dl,ds:d_07C6[bp]

          c_al^=c_dl;                      //xor     al,dl
          c_dl=HEAD[0x6c2];                //mov     dl,ds:d_07C2[bp]
          c_dl+=HEAD[0x6c5];               //add     dl,ds:d_07C5[bp]
          c_dl+=HEAD[0x6c4];               //add     dl,ds:d_07C4[bp]

          c_dl-=HEAD[0x6c3];               //sub     dl,ds:d_07C3[bp]
          c_dl+=HEAD[0x6c7];               //add     dl,ds:d_07C7[bp]
          c_al^=c_dl;                      //xor     al,dl

          c_dl=HEAD[0x6bb];                //mov     dl,ds:d_07BB[bp]

          c_dl+=HEAD[0x6ba];               //add     dl,ds:d_07BA[bp]
          c_dl-=HEAD[0x6b9];               //sub     dl,ds:d_07B9[bp]
          c_dl^=HEAD[0x6b8];               //xor     dl,ds:d_07B8[bp]
          c_dl+=HEAD[0x6c1];               //add     dl,ds:d_07C1[bp]
          c_al^=c_dl;                      //xor     al,dl

          c_dl=HEAD[0x6be];                //mov     dl,ds:d_07BE[bp]
          c_dl+=HEAD[0x6c0];               //add     dl,ds:d_07C0[bp]
          c_al^=c_dl;                      //xor     al,dl

          c_dl=HEAD[0x6bc];                //mov     dl,ds:d_07BC[bp]
          c_al^=c_dl;                      //xor     al,dl
          c_dl=HEAD[0x6bd];                //mov     dl,ds:d_07BD[bp]
          c_al^=c_dl;                      //xor     al,dl
                                           //dec     al
          c_al-=2;                         //dec     al
          byte c_cl=HEAD[0x8c8];           //mov     cl,ds:d_09C8[bp]
          c_al+=c_cl;                      //add     al,cl
          c_cl=9;                          //mov     cl,9
          c_cl+=7;                         //add     cl,7
          c_al-=1;                         //dec     al
          c_al^=c_cl;                      //xor     al,cl
          c_al^=0x98;                      //xor     al,98h
          c_al+=2;                         //add     al,2
          c_al-=0x11;                      //sub     al,11h
          c_al^=0x10;                      //xor     al,10h
          c_al^=0x12;                      //xor     al,12h

          word juso[8]={ 0x8ed,0x8cf,0x8e1,0x8d5,0x8e7,0x8db,0x8f3,0x8cf };
          char *old_code;
          if(c_al>6) c_al=7;
          old_code=&HEAD[ juso[c_al] ];

          fseek(fp,0L,SEEK_SET);
          int num=fwrite(old_code,1,6,fp);
          if(num!=6) err_msg("Cannot write");
          else chsize(fileno(fp),ofs);
       }
    }
    fclose(fp);
 }

 void chk(char *name){
    char *po;
    po=strrchr(name,'.')+1;
    if( stricmp(po,"com") != 0 ) return;
    char tmp[MAXPATH];
    getcwd(tmp,MAXPATH);
    if(tmp[3])strcat(tmp,"\\");
    strcat(tmp,name);
    k_printf(1,9,"%-80s",tmp);
    test_nambul(name);
 }

 int stop=0;
 void scan() {
      if(stop==1){ chdir(".."); return; }
      struct ffblk blk;
      int go = findfirst("*.*",&blk,0xff);
      while(go==0){
         if(stop==1) break;
         if( bioskey(0x11) ){
            if(bioskey(0x10)==0x011b ) { stop=1; break; }
         }
         if(blk.ff_name[0]!='.') {
            if(blk.ff_attrib & 0x10) {
                chdir(blk.ff_name);
                scan();
            }
            else  chk(blk.ff_name);
         }
         go = findnext(&blk);
      }
      chdir("..");
}

void chk_mem(){
   asm mov ax,304bh
   asm int 21h
   if(_AX==0){
       word es_seg;
       printf("found %s =>",NAMBUL_FILE_CODE);
       asm mov ax,3521h
       asm int 21h
       es_seg=_ES;

       char far *mem_po=(char far *)MK_FP(es_seg,0x698);
       int err=_fmemcmp(mem_po,NAMBUL_MEM_CODE,5);
       if(err) printf("error..Cannot repair");
       else {
          char far *dest=(char far *)MK_FP(es_seg,0x321);
          asm cli;
          _fmemcpy(dest,mem_po,5);
          asm sti;
          printf("repaired");
       }
   }
   else printf("No virus");
}

void main(int argc,char *argv[]){
    clrscr();
    k_printf(1,2,"Vaccine for Nambul.new Made by kwon." );
    k_printf(1,3,"Checking memory.." );
    chk_mem();
    if(argc<2) k_printf(1,4,"Usage.. nam_kill [DIR] ");

    else {
        k_printf(1,7,"Checking %s",argv[1] );
        char save_path[MAXPATH];
        getcwd(save_path,MAXPATH);
        chdir(argv[1]);
        scan();
        chdir(save_path);
        k_printf(1,13,"Infected %d file(s)",found_num);
    }
    gotoxy(1,15);
}

