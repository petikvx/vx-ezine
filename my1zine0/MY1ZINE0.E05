                              (my first e-zine) BKNY0NNX // SBVC (c) 27.10.2001
-------------------------------------------------------------------------------

		The creation of demos
		~~~~~~~~~~~~~~~~~~~~~
 Heh :) You have solved to write the demo. The good desire :) Begin with
beginning. To write cool demo, is necessary to know, how to do the effects, from
which, as from cubes, will be created all new and new demos. I shall consider
only video-effects. Video-effects - transformation of scenes on some
mathematical formulas.
 One of the the most simplest effects - BLUR. Blur is the "washing" raster (the
picture). THERE IS AVERAGE OF ARITHMETICAL COLOURS OF NEARBY POINTS IN BLUR
POINT OF RASTER TO HER. I.E. YOU DRAW THE PICTURE AND FOR EACH POINT CONSIDER
THE AVERAGE OF ARITHMETICAL COLOURS OF NEARBY POINTS TO HER.
 And right here begins most interesting :) Well you have drawn picture and were
taken consider a.arthm..... Here one begin to write got points in additional
buffer, but other - straight in raster. In first event of change the raster
for blur is parallel - it their does not see since does not change the source
raster. In the second event a raster changes immediately, and algorithm much
even sees and uses change. The first event - CLASSICAL (TRUE) BLUR, he has one
defect - appearance "lattice". Beside the second, CHANGED BLUR, this defect no,
and scene is washed away "softly".
 А on скольки to points you consider a.arthm.?! On four you get triangles,
squares, on eight - lava :) Than more points you use for a.arthm., more so
"soft" scene you get.
 A little remember - got by a.arthm. possible to change - add to him anything,
subtract, multiply, divide, change on mathematical laws...
Restrictions - your fantasy and your IQ :)

 Hope, you have understood the theory. But now practice - coding.
 We'll be code in 0x13 mode --- 320 * 200 * 8 bits
 Yes, I do not use BGI - too slowly. Besides, for speedup of showing the raster
all change pass in virtual screen(the usual array), but then given from he is
copied stright in videomemory(for us - too usual array). But because of this
arrays, in coordinate of point first goes Y, but then - X.
 Using the virtual screen is called "DoubleBuffering".
 Besides, I use the assembler insertions(between ASM and END), do not understand
- nothing terrible, soon understand.

=====[CUT HERE]=====
(* Begin of source. *)
Program Blur1;
(* The description of constants. MaxX - maximum permit of raster on horizont,
MaxY - on vertical. FlameConst - the added to a.arthm number *)
Const
	MaxX		=	320;
	MaxY		=	200;
	FlameConst	=	1;

(* Description of variables. *)
Var
	(* S - area of videomemory *)
	S		: Array [1..MaxY, 1..MaxX] of Byte Absolute $A000:0000;
	(* VS - Virtual Screen [VS], is used for speedup of work *)
	VS		: Array [1..MaxY, 1..MaxX] of Byte;
	(* Variable-counters of cycles *)
	x, y		: Integer;

(* The procedure of check a keystroke. Analogue kept in unit CRT, but I has
written it to not to connect this unit. *)
Function KeyPressed : Boolean;
Var	rFlags	: Boolean;
Label	_Ok, _End;
begin
	asm
		mov	ah, 1
		int	16h
		jz	_Ok
		mov	rFlags, True
		jmp	_End
	_Ok:	mov	rFlags, False
	_End:
	end;
	KeyPressed := rFlags;
end;

(* Begin main *)
BEGIN
	(* We initialize generator of psuedo-randomic numbers *)
	Randomize;

	(* We switch monitor to 0x13 mode *)
	asm
		mov	ax, 13h
		int	10h
	end;

	(* Fill VS by randomic colours *)
	for x := 1 to MaxX do for y := 1 to MaxY do
		VS[y,x] := Random(255);

	(* We repeat the cycle... *)
	Repeat

		(* We pass all POSSIBLE for change the point. So such initial
		and final importances of counters *)
		for y := 2 to MaxY-1 do for x := 2 to MaxX-1 do

		(* The most important moment - BLUR. So simply, but... *)
			VS[y,x] := (VS[y-1,x-1] + VS[y-1,x-0] + VS[y-1,x+1] +
				VS[y-0,x-1] + VS[y-0,x+1] +
				VS[y+1,x-1] + VS[y+1,x-0] + VS[y+1,x+1])
				div 8 + FlameConst;

		(* Above we, for speedup of work, work with VS, but now from he
		copies the raster to videomemory *)
		for y := 1 to MaxY do for x := 1 to MaxX do S[y,x] := VS[y,x];

	(* We Repeat cycle until will press key *)
	Until KeyPressed;

	(* We switch monitor to text mode *)
	asm
		mov	ax, 3
		int	10h
	end;

	(* The End *)
END.
=====[END CUT]======

					Good luck!
