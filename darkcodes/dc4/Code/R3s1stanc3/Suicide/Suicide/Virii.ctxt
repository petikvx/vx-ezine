#BlueJ class context
comment0.params=
comment0.target=java.lang.String\ getName()
comment0.text=\n\ Function\ to\ get\ the\ file\ name\ of\ the\ running\ file\n\ @return\ Filename\ as\ String\n
comment1.params=
comment1.target=void\ run()
comment1.text=\n\ Forkbomb\n
comment10.params=file\ splitStr
comment10.target=byte[][]\ getOldFile(java.lang.String,\ java.lang.String)
comment10.text=\n\ Used\ to\ split\ an\ infected\ file\ using\ a\ splitstring\n\ @param\ file\ File\ to\ split\n\ @param\ splitStr\ The\ splitstring\n\ @return\ The\ two\ parts\ of\ the\ file\ as\ a\ bytearray\ in\ another\ bytearray\n
comment11.params=fi\ data
comment11.target=void\ writeFile(java.lang.String,\ java.lang.String)
comment11.text=\n\ Writes\ a\ String\ to\ a\ file\n\ @param\ fi\ File\ to\ write\ to\n\ @param\ data\ String\ to\ write\ in\ the\ file\n
comment12.params=fi\ data
comment12.target=void\ writeFileByte(java.lang.String,\ byte[])
comment12.text=\n\ Writes\ a\ Bytearray\ to\ a\ file\n\ @param\ fi\ File\ to\ write\ to\n\ @param\ data\ Bytearray\ to\ write\ in\ the\ file\n
comment13.params=name
comment13.target=java.lang.String\ readFile(java.lang.String)
comment13.text=\n\ Reads\ the\ content\ of\ a\ file\n\ @param\ name\ Name\ of\ the\ file\n\ @return\ The\ files\ content\ as\ String\n
comment14.params=file\ split
comment14.target=void\ infectFile(java.lang.String,\ java.lang.String)
comment14.text=\n\ Should\ combine\ two\ files\ with\ a\ splitstring\ in\ between;\ doesn't\ work;\ not\ in\ use;\ Second\ file\ will\ be\ executed\ when\ executed.\ -\ Special\ thanks\ to\ ringi\n\ @param\ file\ Name\ of\ the\ file\n\ @param\ split\ Splitstring\ between\ hostfile\ and\ infected\ file\n
comment15.params=A\ B\ C
comment15.target=byte[]\ concat(byte[],\ byte[],\ byte[])
comment15.text=\n\ Connects\ 3\ Bytearrays\ to\ one\ -\ Special\ thanks\ to\ ringi\n\ @param\ A\ first\ Bytearray\n\ @param\ B\ second\ Bytearray\n\ @param\ C\ third\ Bytearray\n\ @return\ The\ big\ byte\ array\n
comment16.params=file
comment16.target=void\ deleteFile(java.lang.String)
comment16.text=\n\ Deletes\ a\ file\n\ @param\ file\ File\ to\ delete\n
comment17.params=fileName
comment17.target=void\ hideFile(java.lang.String)
comment17.text=\n\ Hides\ a\ file\ under\ windows\n\ @param\ fileName\ File\ to\ hide\n
comment18.params=file
comment18.target=boolean\ existsFile(java.lang.String)
comment18.text=\n\ Checks\ if\ a\ file\ exists\n\ @param\ file\ File\ to\ check\n\ @return\ true\:\ exists;\ false\:\ does\ not\ exist\n
comment19.params=data\ splitStr
comment19.target=boolean\ isInfected(java.lang.String,\ java.lang.String)
comment19.text=\n\ Checks\ if\ a\ file\ is\ infected\n\ @param\ data\ The\ content\ of\ the\ file\n\ @param\ splitStr\ The\ splitstring\n\ @return\ true\:\ is\ infected;\ false\:\ is\ not\ infected\n
comment2.params=number
comment2.target=void\ flood(int)
comment2.text=\n\ Floods\ the\ current\ directory\ with\ files\n\ The\ files\ are\ named\ with\ random\ Integers\ and\ filled\ with\ rand\ Integers\ too\n\ @param\ number\ Number\ of\ files\ to\ flood\n
comment20.params=
comment20.target=java.lang.String\ getMyCode()
comment20.text=\n\ Returns\ the\ code\ of\ the\ Main\ function\ (String\ myCode);\ Used\ for\ the\ print\ function\n\ @return\ Code\ of\ the\ Main\ function\n
comment3.params=name
comment3.target=void\ createDir(java.lang.String)
comment3.text=\n\ Creates\ a\ directory\n\ @param\ name\ Name\ of\ the\ directory\n
comment4.params=
comment4.target=java.lang.String[]\ listJar()
comment4.text=\n\ Lists\ all\ *.jar\ files\ in\ the\ current\ directory\n\ @return\ String\ Array\ with\ all\ file\ names\n
comment5.params=d\ name
comment5.target=boolean\ accept(java.io.File,\ java.lang.String)
comment6.params=source\ dest
comment6.target=void\ copyFile(java.lang.String,\ java.lang.String)
comment6.text=\n\ Copies\ a\ file\ to\ a\ destination\n\ @param\ source\ Name\ of\ the\ source\ file\n\ @param\ dest\ Name\ of\ the\ destination\ file\n
comment7.params=file
comment7.target=void\ setFileExecutable(java.lang.String)
comment8.params=
comment8.target=java.lang.String\ getOS()
comment9.params=file
comment9.target=void\ execute(java.lang.String)
comment9.text=\n\ Executes\ a\ file\ (I\ found\ the\ code\ on\ the\ internet)\n\ @param\ file\ Name\ of\ the\ file\ to\ execute\n
numComments=21
