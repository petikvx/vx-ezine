<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Top Device</title>
</head>

<body bgcolor="#B1B1B1" text="#000000" topmargin="0"
leftmargin="3">

<p><STYLE> </p>

<p>INPUT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}</p>

<p>SELECT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>OPTION { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>FORM { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
} <br>
BODY { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } <br>
P { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt }
TABLE { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}TR { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } TD
{ FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 10pt
}TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } A { COLOR: #005500; TEXT-DECORATION: none }A:hover {
TEXT-DECORATION: underline } A:link { TEXT-DECORATION: none
}A:visited { }text:unknown { FONT-SIZE: 8pt } } </STYLE> </p>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td>&nbsp;</td>
        <td valign="top"><div align="center"><center><table
        border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="../-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#808080"><strong>05.03.2000</strong>
                Деструкция <strong>[mongoose]</strong></td>
            </tr>
            <tr>
                <td bgcolor="#000000"><img src="../-.gif"
                width="1" height="1"></td>
            </tr>
            <tr>
                <td><br>
            <pre>
   <b>вступление</b>

   Дисскусия  на  эту  тему  происходила  в  вирмейкерской сети Evolution
Network.

   <b>где деструкция уместна? (теория)</b>

   Вирмейкеры-пацифисты  конечно  скажут, что деструкция и вирусы вещи не
совместимые,  я  тоже  не деструктор и никогда [!] не занимался подобными
вещами  (и  не собираюсь). Но хочется дать совет деструкторам, потому что
большинство применяет деструкцию неправильно (тут уместна фраза: неумеешь
ненадо)  и  в  результате  страдают  невинные люди. Что лично для меня не
очень приятно.

   Видимо   деструкция   сильно   повлияла  на  появления  в  конституции
Российской  Федерации  статьи  о  судьбе  пойманых  вирмейкеров.  Немного
поразмышляв  на  тему  "где  уместна  деструкция"  я пришел к выводу, что
правильное    применение    деструкции   сводится   к   применению   ее в
антиотладочных  триках  и  при  обнаружении  антивирусов способных лечить
вирус.

   <b>деструкция в антиотладочных триках</b>

   Для  чего нужны антиотладочные трики? Для того чтобы защитить вирус от
изучения  различными  кодерами  (ламера остановит простенькая шифровка, а
вот  кодера  пишущего  на  асме  и  имеющего  стаж год или чуть больше не
остановит  навороченный  полиморфик),  но  как  и  все люди даже хорошему
кодеру  свойственно  ошибаться.  Если кодер во время не заметит трик и не
занопит его, то его компьютер в лучшем случае повиснет ;). Повиснет, ну и
что...  reset  нажать  не  тяжело  и  заново  загрузить зараженный файл в
отладчит  ему  особых проблем не доставит, но при дальнейшем исследовании
вируса он учтет наличие этого трика и я уверен на 99% что он его во время
занопит.  А  что  если  стирать  файл  который  этот крендель разбирает и
повесить  тачку?  Это  причинит немного больше проблем ;), потому что ему
прийдется  найти  резервную копию файла и снова загрузить его в отладчик.
Но чем больше ему прийдется по потеть и чем больше времени удастся вирусу
добыть  тем  лучше ;). Поэтому нужно наносить больший вред его винту, для
того  чтобы  уничтожить все резервные копии файлов с вирусами и чтобы ему
пришлось  потеть приводя тачку в чувства, вам решать что вы будете делать
с  его  тачкой  (сносить  фат,  пороть  сектора или просто вешать тачку).
Возможно  своей  деструкцией  вам удастся отбить желание дизасемблировать
вирус  у  простого смерного (не у антивирусника, вирмейкера или кодера со
стажем)  или  же  выиграть время. В результате невинные чайники и простые
юзеры  страдать  небудут,  а  "любопытной  варваре,  нос  оторвали"  хотя
деструкторам глубоко начихать кто пострадает, а кто нет...


   <b>антиотладочные трики</b>

   Итак,  в  продолжение  темы антиотладочных триков. В помощь начинающим
здесь  приведена подборка триков. Они позволяют определить, отлаживают ли
вас, дальнейшая реакция виря целиком зависит от вас. Должен заметить, что
завесить машину гораздо проще, чем отфоматировать винт (в том смысле, что
подобные действия легче просечь и пресечь).

   <b>1.</b>  Противодействие отладчикам реального режима (к ним относятся такие
дебагеры, как TurboDebugger, Debug).

   Противодействовать можно двумя способами:
    - затруднение работы отладчика
    - определение самого факта трассировки.

   Первый  способ  основан  на  том факте, что отладчики реального режима
используют  в  своих  целях  прерывания  int  1,  int  3,  им  необходимо
работать  с клавиатурой, работа программы под отладчиком занимает гораздо
больше времени, чем без него. По-порядку:

   <b>1.1</b> Забивание нулями адресов прерываний int 1, int 3
<font color="#0000A0">  
    xor ax,ax
    mov ds,ax
    mov ds:[0004],ax
    mov ds:[0006],ax
</font>

    Действует хорошо, но также легко и снимается

   <b>1.2</b> Перенаправление векторов
<font color="#0000A0">  
    xor ax,ax
    mov ds,ax
    mov ax,ds:[0084h]
    mov ds:[0004],ax
    mov ax,ds:[0086h]
    mov ds:[0006],ax
</font>

    И далее во всей программе заменять вызовы int 21h на int 1

   <b>1.3</b> Отрубание клавиатуры
<font color="#0000A0">  
    in al,21h
    or al,02
    out 21h,al
</font>

    Опять-таки хороший способ, но только если его не просекли :)

   <b>1.4</b> Проверка времени работы процедуры.
<font color="#0000A0">  
    call start_timer
    call test_proc
    call stop_timer
</font>

   Теперь  пусть в dx:ax - время работы процедуры test_proc, в сх - время
работы процедуры на вашем компе.
<font color="#0000A0">  
    div cx
    cmp ax,1000 ;для работы на всех компах
    jae debugger
</font>

   <b>1.5</b> Существует множество триков, связанных с использованием конвейера.
Hо  насколько  мне  известно,  они  не  работают  на  586  и выше компах.
Поэтому здесь не рассматриваются.

   <b>1.6</b> Определение факта трассировки
<font color="#0000A0">  
    pushf
    pop ax
    test ah,1
    jz traced
</font>

   Это  в  примитиве. Hа само деле отладчики при выполнении команды pushf
сбрасывают   этот   бит,   так  что  вы  обломитесь. Hо не все так плохо.
Существует  баг процов, связанный с тем, что после выполнения команд типа
pop   ss,   mov  ss,reg  пропускается  следующая  за  ним  команда.  Т.о.
последовательность команд
<font color="#0000A0">  
    push ss
    pop ss
    pushf
    pop ax
    test ah,1
    jz traced
</font>

   позволит вам определить факт трассировки

   <b>1.7</b> Переход по динмаически изменяемым адресам

   Устанавливаем  обработчик  int  1  на  себя.  Далее устанавливаем флаг
трассиров- ки, и обрабатываем команды:
<font color="#0000A0">  
int_1 proc
      mov bp,sp
      add byte ptr [bp+3],offset bbb - offset aaa ;изменяем команду, на
                                     ;которую указывает ip
      iret
int_1 endp
; код программы
jmp short aaa        ;db 0ebh,xxh
....
aaa:
....
bbb:
</font>

   Таким  образом произойдет переход не на метку ааа а на метку bbb Кроме
этого можно в теле обработчика int 1 производить расшифровку кода и сразу
же после выполнения команд призводить обратную зашифровку.

   <b>1.8</b>  Для  противодействия Soft-Ice можно использовать тот факт, что им
можно  управлять  через  int  3  (более  полную  информацию см. Interrupt
List)


   <b>2.</b> Противодействие отладчикам защищенного режима.

   Здесь наши возможности ограничены более сильно в силу того, что данный
тип  отладчиков  эмулит  прерывания,  так  что  ... Hо все равно бороться
можно.

   <b>2.1</b> Забивание отладочных регистров
<font color="#0000A0">  
    xor eax,eax
    mov dr0,eax
    mov dr1,eax
    mov dr2,eax
    mov dr3,eax
    mov dr7,eax
</font>
   Хороший  метод,  но  ...  и  отладочные регистры также эмулятся... Мне
кажется  (пока  что  я  это  еще  не  проверял)  что тут как раз подойдут
проверки на эмуляцию, давно уже применяющиеся против антивирусов.

   <b>2.2</b>  Данный  код  работает  против DeGlucker'a v0.04 (взято из Cr0cK'z
AntiDEBUGING FAQ)
<font color="#0000A0">  
    db 66h,0fah,0fbh
</font>
   <b>2.3</b> Использование функций Win32 (если вирь под win32)

   функция   IsDebuggerPresent(VOID)   возвращает   0,  если  мы  не  под
дебугером, иначе возвращает ненулевое значение.

   <b>2.4</b>  Обнаружению  отладчика  Soft-Ice  посвящены  две статьи в Xine #4
(xine-4.103,  xine-4.106).  Hе  считаю необходимым заниматься переводом и
переписыванием.

   P.S.  Hо  imho  лучший  способ  найти хороший трик - попытаться пройти
какую-нибудь из защит типа PCrypt и взять что-то оттуда...

   P.P.S.   Просьба   опытных   кракеров   не   пинать   меня  ногами  за
представленные  здесь  простенькие  трики  -  у  статьи  несколько другое
предназначение.

 Список "литературы", в которой можно посмотреть все это и еще больше :)
  - Cr0cK'z AntiDEBUGGING FAQ
  - Anti Debugging Tricks by Inbar Raz
  - Xine #4 (.103, .106)
  - Расторгуев С. "Программные методы защиты информации в компьютерах и
    сетях"
  - да еще много где...


   <b>деструкция как метод борьбы с антивирусами</b>

   Антивирусы  всегда являлись главными "врагами" вирусов. Рано или позно
продукт  будет  детектиться антивирусами и главное не стирать сектора при
обнаружении на машине антивируса. Нужно сначала определить в состоянии ли
он  детектить  (и  лечить)  продукт,  для этого наиболее приемлемо чтение
различных  документаций  (хотя  бы документации к дополнению(ям) и списка
всех  вирусов  определяемых  антивирусом) прилагаемых к антивирусу, и при
обнаружении  в  списке  вирусов вирус с названием похожим на наше гробить
тачку.  Главное  чтобы  вирус  содержал  в  своем  теле свое имя, которым
антивирусники должны будут назвать его.

                  article by UazZ & mongoose, both from misdirected youth
                     </pre>
                </td>
            </tr>
           
            
       
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
        </table>
        </center></div></td>
        <td>&nbsp;</td>
    </tr>
</table>

<p>&nbsp;</p>
</body>
</html>
