<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Top Device</title>
</head>

<body bgcolor="#B1B1B1" text="#000000" topmargin="0"
leftmargin="3">

<p><STYLE> </p>

<p>INPUT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}</p>

<p>SELECT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>OPTION { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>FORM { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
} <br>
BODY { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } <br>
P { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt }
TABLE { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}TR { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } TD
{ FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 10pt
}TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } A { COLOR: #005500; TEXT-DECORATION: none }A:hover {
TEXT-DECORATION: underline } A:link { TEXT-DECORATION: none
}A:visited { }text:unknown { FONT-SIZE: 8pt } } </STYLE> </p>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td>&nbsp;</td>
        <td valign="top"><div align="center"><center><table
        border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="../-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#808080"><strong>05.03.2000</strong>
                Язык C-- <strong>[Deviator]</strong></td>
            </tr>
            <tr>
                <td bgcolor="#000000"><img src="../-.gif"
                width="1" height="1"></td>
            </tr>
            <tr>
                <td><pre>

 Привет.
 Вот и наступила пора C--...

 Вступление.
  Сидел я как-то в iRC и болтал с Мез'ой. Он утверждал (и утверждает) ,
 что ЯВУ имеет будущее, а АСМ, увы, оного не имеет. В принципе так то и
 оно,но скорее появится симбиоз АСМ'а и ЯВУ ,чем исчезнет что-то. Первым 
 (а может и нет) шагом в данном направлении является C--. Он был придуман
 одним человеком, и этот один человек его собственно и развивал. У языка 
 появляются свои последователи. Но вот автор оставляет язык на произвол
 судьбы,и его продолжает разрабатывать российский программист Михаил Шекер.
 Кстати он добавил поддержку компиляцию в PE-EXE файлы,тип float и прочее.
 Сам язык (компилятор в том числе) свободно распространяемый с исходниками.
 В общем компилятор сделан довольно качественно.
  Скачать компилятор ,его исходники (!) , доки и примеры можно на сайте 
  <a href="http://www.chat.ru/sheker/">http://www.chat.ru/sheker/</a>  </pre>
                <pre> 
 Итак. Преимущества языка над всеми остальными:
	- Сильная интеграция с ассемблером
	- Размер и быстродействие не сопоставимы с любым другим ЯВУ
	- Есть такие комманды,которые нигде не встретишь,но тем не менее
		при написании чего-то экономится масса времени

	Недостатки: (Ухх...Начнем.. :)
	- Только недавно добавили тип float,в следствии чего есть глюки
 	при работе с оным
	- Обьектов нет (размечтались!)
	- Массивы только одномерные (настоящие программеры смогут обойти
	данное ограничение)
	- Совсем убитая арифметика
	- и тд, и тд,и тд...

 И так подробнее.

	Синтаксис C-- в принципе одинаков с Си,но процедуры делятся
	на 4 вида:
		1. PASCAL   - с паскалевской конвенцией вызова
		2. CDECL    - с Си'шной конвенцией
		3. STDCALL  - Виндовой
		4. FASTCALL - Регистровой (параметры передаются через
		регистры)

	Асмовые вставки делаются так:
		asm { ... }
		или
		$ASMCODE (пример:	$mov	AX,0x1234)

	К регистрам можно обращатся как к простым переменным:
		(внимание - все регистры должны быть напечатаны
		заглавными буквами !)
		SI = AX;	
		SI -= 2;

	Для обращения к памяти используется следующая конструкция:
		?SBYTE[MEM]
		?SWORD[MEM]
		?SDWORD[MEM]
		и так далее...Пример:
		AX = DSWORD[0x2C];
		ES = ES + DSWORD[3] + 1;		// :)
		BX = DSWORD[SI];

	В блоке asm {..} обращения к памяти делаются так:
		mov	AX,DSWORD[0x1234]
	
	Если процедура опеределена как fastcall и перед ее именем
	поставить ':', то ее можно использовать как макро-комманду.
	Если fastcall явно не указан,то все-равно процедура является
	регистровой.
		
	:void	test()
		{
		AX = 5;
		}

		test();		// Это скомпилируется в Call Test
		@test();	// А вместо этого просто вставится код
				// процедуры

	Структуры.
	
	struct	suxx
		{
		byte	suxx1;
		byte	suxx2;
		} somevar;	// Опеределит переменную somevar как
				// структуру suxx

	Преобразовании типа при присваивании:
		byte	c;
		char	b;

		b = char c;	// Простое преобразование

	Циклы:
		do {...} while (??);

		loop (??) {...}	// Аналогично Асму,но можно 
				// использовать не только CX

		while (???) {  }

		for (??;??;??) { }	// Си'шный for

	Импорт бинарных данных:
		FROM - при компиляции компилятор загрузит файл 
		указанный как параметр в указанный массив/переменную
		Пример:

		byte	pic[128] = FROM &quot;icon.pic&quot;;

		EXTRACT - аналогично FROM,но еще и указывается начальное 
		смещение от начала файла,а также размер считываемых данных.

		byte	picpart[16*16] = FROM &quot;some.pic&quot;,256,16*16

	Индексация
	Если надо конкретно указать компилятору,что нужно в переменную
	положить не содержание переменной,а ее смещение,то используется
	префикс '#' 
	Пример:
		AX = #dta;			// mov ax,offset dta
		DX = #dta+0x1E;			// lea dx,[Di][0x1E]

 Если все еще интерестно - читайте документацию к компилятору.

 Что я обнаружил после некоторого &quot;общения&quot; с компилятором...

 Первое - код можно компилировать по разным смещениям (аналог org 
 для АСМ'a)
 Второе - Из компилируемых файлов можно (и нужно :) убрать 
 (c) компилятора 
 Вот и все...А вирусы писать на Си-- проще простого. Если понимать ,
 как работает компилятор и знать немного АСМ - то и проблем не будет.

 P.S. Смотрите <a href="../files/dev_cmm.zip"
target="main">исходники C-- тривиалов</a>

Deviator/HAZARD.

</pre>
                </td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
        </table>
        </center></div></td>
        <td>&nbsp;</td>
    </tr>
</table>

<p>&nbsp;</p>
</body>
</html>
