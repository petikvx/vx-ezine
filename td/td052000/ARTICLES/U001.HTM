<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>-=U=-</title>
</head>

<body bgcolor="#B1B1B1" text="#000000" topmargin="0"
leftmargin="3">

<p><STYLE> </p>

<p>INPUT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}</p>

<p>SELECT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>OPTION { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>FORM { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
} <br>
BODY { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } <br>
P { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt }
TABLE { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}TR { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } TD
{ FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 10pt
}TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } A { COLOR: #005500; TEXT-DECORATION: none }A:hover {
TEXT-DECORATION: underline } A:link { TE  XT-DECORATION: none
}A:visited { }text:unknown { FONT-SIZE: 8pt } } </STYLE> </p>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="100%"><div align="center"><center><table
        border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td width="100%" bgcolor="#000000"img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                   <td width="100%" bgcolor="#808080"><strong>01.05.2000</strong>
                   Недокументированные функции WindozeNT <strong>[ULTRAS/MATRiX]</strong></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><img src="-.gif" width="1"
                height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><pre>

 -=( Функции ntoskrnl.exe )=-

 <a href="#1" target="main">PsCreateSystemProcess.</a>
 <a href="#2" target="main">PsCreateWin32Process.</a>
 <a href="#3" target="main">PsLookupProcessByProcessId.</a>
 <a href="#4" target="main">KeAddSystemServiceTable.</a>
 <a href="#5" target="main">ZwQueryObject.</a>
 <a href="#6" target="main">ObReferenceObjectByName.</a>
 <a href="#7" target="main">ObQueryNameString.</a>
 <a href="#8" target="main">ZwDisplayString.</a>
 <a href="#9" target="main">ZwLoadDriver.</a>
 <a href="#10" target="main">ZwUnloadDriver.</a>
 <a href="#11" target="main">IoRegisterFileSystem.</a>
 <a href="#12" target="main">IoUnregisterFileSystem.</a>
 <a href="#13" target="main">KeI386AllocateGdtSelectors.</a>
 <a href="#14" target="main">KeI386ReleaseGdtSelectors.</a>
 <a href="#15" target="main">IoGetRequestorProcess.</a>
 <a href="#16" target="main">ZwCreateSection.</a>
 <a href="#17" target="main">ZwOpenProcess.</a>
 <a href="#18" target="main">ZwOpenThread.</a>
 <a href="#19" target="main">KeInitializeApc.</a>
 <a href="#20" target="main">KeInsertQueueApc.</a>
 <a href="#21" target="main">KeGetPreviousMode.</a>
 <a href="#22" target="main">ProbeForWrite.</a>
 <a href="#23" target="main">ZwFsControlFile.</a>
 

 <b><a name="1">PsCreateSystemProcess</a></b>

 <strong>PsCreateSystemProcess фактически создает поток в контексте ядра.</strong>

  NTSYSAPI

  NTSTATUS

  NTAPI

  PsCreateSystemProcess(

      OUT PHANDLE ProcessHandle,

      IN ACCESS_MASK AccessMask,

      IN OPTIONAL POBJECT_ATTRIBUTES ObjectAttributes

      );
  
 
  <strong>ProcessHandle</strong> - указатель на переменную типа HANDLE принимающюю 
                               хэндл созданного процесса. 
  <strong>AccessMask</strong> - тип доступа к объекту.
  <strong>ObjectAttributes</strong> - указатель на аттрибуты объекта. 

  <b><a name="2">PsCreateWin32Process</a></b>

  <strong>PsCreateWin32Process не делает практически ничего. Он выделяет память 
  через ExAllocatePoolWithQuotaTag со специальным тэгом 'Wprs' и типом 9 
  (не описан), затем копирует в этот блок содержимое Process, который был 
  передан в качестве параметра. Т.е. процесс к этому времени уже должен 
  быть создан как "нейтральный" и у него уже должен быть правильный 
  КPEB.</strong>

       
  NTSYSAPI

  NTSTATUS

  NTAPI

  PsCreateWin32Process(

      IN PEPROCESS Process

      );


  <strong>Process</strong> - указатель на структуру PEPROCESS.


  <b><a name="3">PsLookupProcessByProcessId</a></b>

  <strong>PsLookupProcessByProcessId возвращает указатель на 
         структуру _EPROCESS по заданному ID процесса.</strong>

  NTSYSAPI

  NTSTATUS

  NTAPI

  PsLookupProcessByProcessId(

      IN ULONG ulProcId,

      OUT struct _EPROCESS ** pEProcess

      );


  <strong>ulProcId</strong> - ID процесса. 
  <strong>pEProcess</strong> - адрес указателя на структуру _EPROCESS. 

  <b><a name="4">KeAddSystemServiceTable</a></b>

  <strong>KeAddSystemServiceTable - добавляет новую таблицу сервисов в ядро. </strong>


  NTSYSAPI

  BOOLEAN

  NTAPI

  KeAddSystemServiceTable(          

      LPSSTAT  lpAddressTable,

      BOOLEAN  bUnknown,

      ULONG    dwNumEntries,   

      LPSSTPT  lpParameterTable,

      ULONG    dwTableID

      );

  <strong>lpAddressTable</strong> - указатель на SSTAT.
  <strong>bUnknown</strong> - неизвестно: всегда 0. 
  <strong>dwNumEntries</strong> - количество структур SSTAT. 
  <strong>lpParameterTable</strong> - указатель на SSTPT. 
  <strong>dwTableID</strong> - индекс SSD. 

  <b><a name="5">ZwQueryObject</a></b>

  <strong>ZwQueryObject - позволяет получить различную информацию об объектах ядра.</strong>

  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwQueryObject(

      IN HANDLE ObjectHandle,

      IN OBJECTINFOCLASS ObjectInformationClass,

      OUT PVOID ObjectInformation,

      IN ULONG ObjectInformationLength,

      OUT PULONG LengthReturned OPTIONAL

      );

    
  <strong>ObjectHandle</strong> - хэндл объекта. 
  <strong>ObjectInformationClass</strong> - класс информации. 
  <strong>ObjectInformation</strong> - буфер куда кладется пилученная информация. 
  <strong>ObjectInformationLength</strong> - размер буфера. 
  <strong>LengthReturned</strong> - указатель на переменную принимающую реальное 
         количество байт, скопированных в буфер. 

  <b><a name="6">ObReferenceObjectByName</a></b>

  <strong>ObReferenceObjectByName - позволяет получить указатель на 
                       объект по его имени.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ObReferenceObjectByName(

      IN PUNICODE_STRING ObjectPath,

      IN ULONG Attributes,

      IN PACCESS_STATE PassedAccessState OPTIONAL,

      IN ACCESS_MASK DesiredAccess OPTIONAL,

      IN POBJECT_TYPE ObjectType,

      IN KPROCESSOR_MODE AccessMode,

      IN OUT PVOID ParseContext OPTIONAL,

      OUT PVOID *ObjectPtr

      );
 

  <strong>ObjectPath</strong> - путь до объекта (например: \Device\PhysicalMemory). 
  <strong>Attributes</strong> - могут быть или 0 или OBJ_CASE_INSENSITIVE. 
  <strong>PassedAccessState</strong> - . 
  <strong>DesiredAccess</strong> - указывает требуемый тип доступа к объекту. 
  <strong>ObjectType</strong> - указатель на структуру OBJECT_TYPE. 
  <strong>AccessMode</strong> - указывае режим доступа. Может быть UserMode или KernelMode 
  <strong>ParseContext</strong> - is an optional pointer that is passed uninterpreted
  to any parse procedure that is called during the course of performing 
  the name lookup.
  <strong>ObjectPtr</strong> - адрес переменной принимающей указатель на объект. 

  <b><a name="7">ObQueryNameString</a></b>

  <strong>ObQueryNameString - позволяет по указателю на объект получить
                      его имя.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ObQueryNameString(

      POBJECT Object,

      PUNICODE_STRING Name,

      ULONG MaximumLength,

      PULONG ActualLength

      );


  <strong>Object</strong> - указатель на объект. 
  <strong>Name</strong> - указатель на UNICODE_STRING принимающей имя объекта. 
  <strong>MaximumLength</strong> - максимальный размер имени в байтах. 
  <strong>ActualLength</strong> - адрес переменной принимающей реальное 
              количество байт скопированных в буфер. 

  <b><a name="8">ZwDisplayString</a></b>

  <strong>ZwDisplayString - печатает строку на Blue Screen.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwDisplayString(

      PUNICODE_STRING Text

      );

  
  <strong>Text - указатель на UNICODE_STRING.</strong>


  <b><a name="9">ZwLoadDriver</a></b>

  <strong>ZwLoadDriver - загружает драйвер.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwLoadDriver(

      IN PUNICODE_STRING DriverServiceName

      );


  <strong>DriverServiceName</strong> - имя загружаемого драйвера 
  (например: "\\Registry\\Machine\\System\\CurrentControlSet\\Services\\MyService"). 


  <b><a name="10">ZwUnloadDriver</a></b>

  <strong>ZwUnloadDriver - выгружает драйвер.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwUnloadDriver(

      IN PUNICODE_STRING DriverServiceName

      );


  <strong>DriverServiceName</strong> - имя выгружаемого 
  драйвера (например: "\\Registry\\Machine\\System\\CurrentControlSet\\Services\\MyService"). 


  <b><a name="11">IoRegisterFileSystem</a></b>

  <strong>IoRegisterFileSystem - регистрирует DeviceObject как файловую систему. 
  DeviceObject должен быть создан как FILE_DEVICE_DISK_FILE_SYSTEM, 
  FILE_DEVICE_CD_ROM_FILE_SYSTEM и т.п.. </strong>


  NTSYSAPI

  VOID

  NTAPI

  IoRegisterFileSystem(

      IN OUT PDEVICE_OBJECT DeviceObject

      );

  
  <strong>DeviceObject</strong> - указатель на DEVICE_OBJECT.. 


  <b><a name="12">IoUnregisterFileSystem</a></b>

  <strong>IoUnregisterFileSystem - отменяет регистрирацию DeviceObject 
  как файловую систему.</strong>


  NTSYSAPI

  VOID

  NTAPI

  IoUnregisterFileSystem(

      IN OUT PDEVICE_OBJECT DeviceObject

      );


  <strong>DeviceObject</strong> - указатель на DEVICE_OBJECT. 

  <b><a name="13">KeI386AllocateGdtSelectors</a></b>

  <strong>KeI386AllocateGdtSelectors - резервирует необходимое количество 
  селекторов в GDT.?!?</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  KeI386AllocateGdtSelectors(

      OUT PWORD SelArray,

      IN int NumOfSelectors

      );


  <strong>SelArray</strong> - указатель на память куда будут скопированы селекторы. 
  <strong>NumOfSelectors</strong> - количество селекторов. 


  <b><a name="14">KeI386ReleaseGdtSelectors</a></b>

  <strong>KeI386AllocateGdtSelectors - освобождает ранее зарезервированные 
  селекторы в GDT.?!?</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  KeI386ReleaseGdtSelectors(

      IN OUT PWORD SelArray,

      IN int NumOfSelectors

      );

  <strong>SelArray</strong> - массив селекторов для освобождения. 
  <strong>NumOfSelectors</strong> - количество селекторов. 

  <b><a name="15">IoGetRequestorProcess</a></b>

  <strong>IoGetRequestorProcess - возвращает указатель на владельца IRP.</strong>

  NTSYSAPI

  PEPROCESS

  NTAPI

  IoGetRequestorProcess(

      PIRP Irp

      );


  <strong>Irp</strong> - указатель на IRP.

  <b><a name="16">ZwCreateSection</a></b>

  <strong>ZwCreateSection - создает файл проецируемый в память.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwCreateSection(

      OUT PHANDLE SectionHandle, 

      IN ACCESS_MASK DesiredAccess,

      IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,

      IN PLARGE_INTEGER MaximumSize OPTIONAL,

      IN ULONG SectionPageProtection,

      IN ULONG AllocationAttributes,

      IN HANDLE FileHandle OPTIONAL

      );


  <strong>SectionHandle</strong> - адрес переменной принимающей хэндл созданной секции. 
  <strong>DesiredAccess</strong> - указывает требуемый тип доступа к объекту. 
  <strong>ObjectAttributes</strong> - указатеть на OBJECT_ATTRIBUTES. Если создается 
  неименованная секция то этот параметр равен 0. 
  <strong>MaximumSize</strong> - максимальный размер создаваемой секции. 
  <strong>SectionPageProtection</strong> - атрибуты защиты страниц. 
  <strong>AllocationAttributes</strong> - атрибуты создаваемой секции. 
  <strong>FileHandle</strong> - хэндл файла. Если создается секция на основе 
  системного страничного файла, то параметр равен 0. 

  <b><a name="17">ZwOpenProcess</a></b>

  <strong>ZwOpenProcess - получает хэндл процесса.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwOpenProcess(

      OUT PHANDLE ProcessHandle,

      IN ACCESS_MASK DesiredAccess,

      IN POBJECT_ATTRIBUTES ObjectAttributes,

      IN PCLIENT_ID ClientId OPTIONAL

      ); 


  <strong>ProcessHandle</strong> - адрес переменной принимающей хэндл процесса. 
  <strong>DesiredAccess</strong> - указывает требуемый тип доступа к объекту. 
  <strong>ObjectAttributes</strong> - указатель на OBJECT_ATTRIBUTES 
   проинициализированной 0, кроме поля Length=sizeof(OBJECT_ATTRIBUTES). 
  <strong>ClientId</strong> - указатель на CLIENT_ID, в которой UniqueProcess 
   равен ID процесса или 0 (текущий процесс), а UniqueThread - ID потока 
   или 0 (текущий поток). 


  <b><a name="18">ZwOpenThread</a></b>

  <strong>ZwOpenThread - получает хэндл потока.</strong>


  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwOpenThread(

      OUT PHANDLE ThreadHandle,

      IN ACCESS_MASK DesiredAccess,

      IN POBJECT_ATTRIBUTES ObjectAttributes,

      IN PCLIENT_ID ClientId OPTIONAL

      ); 


  <strong>ThreadHandle</strong> - адрес переменной принимающей хэндл потока. 
  <strong>DesiredAccess</strong> - указывает требуемый тип доступа к объекту. 
  <strong>ObjectAttributes</strong> - указатель на OBJECT_ATTRIBUTES 
  проинициализированной 0, кроме поля Length=sizeof(OBJECT_ATTRIBUTES). 
  <strong>ClientId</strong> - указатель на CLIENT_ID, в которой UniqueProcess 
   равен ID процесса или 0 (текущий процесс), а UniqueThread - ID потока 
   или 0 (текущий поток). 

  <b><a name="19">KeInitializeApc</a></b>

  <strong>KeInitializeApc - инициализирует структуру KAPC.</strong>


  NTSYSAPI

  VOID              // ???? NTSTATUS

  NTAPI

  KeInitializeApc(

      OUT PKAPC Apc,

      IN PKTHREAD Thread,

      IN UCHAR StateIndex,

      IN PKKERNEL_ROUTINE KernelRoutine,

      IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL,

      IN PKNORMAL_ROUTINE NormalRoutine,

      IN UCHAR Mode,

      PVOID Context

      ); 


  <strong>Apc</strong> - указатель на структуру KAPC. 
  <strong>Thread</strong> - указатель на структуру KTHREAD. 
  <strong>StateIndex</strong> - ???. 
  <strong>KernelRoutine</strong> - адрес KernelMode функции вызываемой после выполнения APC. 
  <strong>RundownRoutine</strong> - ???. 
  <strong>NormalRoutine</strong> - адрес UserMode функции для APC. 
  <strong>Mode</strong> - ???. 
  <strong>Context</strong> - ???. 

  <b><a name="20">KeInsertQueueApc</a></b>

  <strong>KeInsertQueueApc - ставит APC в очередь на исполнение.</strong>


  NTSYSAPI

  VOID              // ???? NTSTATUS

  NTAPI

  KeInsertQueueApc(

      IN PKAPC Apc,

      IN PVOID SysArg1,

      IN PVOID SysArg2,

      IN UCHAR Unknown

      ); 

  <strong>Apc</strong> - указатель на структуру KAPC. 
  <strong>SysArg1</strong> - адрес переменной содержащий параметр для передачи 
   в KernelRoutine (см. ф-ю KeInitializeApc). 
  <strong>SysArg2</strong> - адрес переменной содержащий параметр для передачи 
   в KernelRoutine (см. ф-ю KeInitializeApc). 
  <strong>Unknown</strong> - ???. 

  <b><a name="21">KeGetPreviousMode</a></b>

  <strong>KeGetPreviousMode - возвращает предидущий режим процессора???. </strong>

  NTSYSAPI

  KPROCESSOR_MODE

  NTAPI

  KeGetPreviousMode(

      ); 


  <b><a name="22">ProbeForWrite</a></b>

  <strong>ProbeForWrite - проверяет доступность участка памяти из UserMode 
  на возможность записи в него.</strong>


  NTSYSAPI

  VOID

  NTAPI

  ProbeForWrite(

      IN PVOID Address, 

      IN ULONG Length,  

      IN ULONG Alignment

      ); 


  <strong>Address</strong> - адрес для проверки. 
  <strong>Length</strong> - длина проверяемой области. 
  <strong>Alignment</strong> - выравнивание. 

  <strong>ПРИМЕР</strong>  

  try {                 

       ProbeForWrite( OutputBuffer,

                      OutputBufferLength,

                      sizeof( UCHAR ));

      }

   except( EXCEPTION_EXECUTE_HANDLER )

      {

       IoStatus->Status = STATUS_INVALID_PARAMETER;

       return FALSE;

      }    


  <b><a name="23">ZwFsControlFile</a></b>

  <strong>ZwFsControlFile - используется для посылки FSCTL (File System Control) 
  комманд драйверу файловой системы.</strong>

  NTSYSAPI

  NTSTATUS

  NTAPI

  ZwFsControlFile(

      IN HANDLE FileHandle,             

      IN HANDLE Event OPTIONAL,                  

      IN PIO_APC_ROUTINE ApcRoutine OPTIONAL,    

      IN PVOID ApcContext OPTIONAL,              

      IN PIO_STATUS_BLOCK IoStatusBlock,

      IN ULONG FsControlCode,           

      IN PVOID InputBuffer,             

      IN ULONG InputBufferLength,       

      IN PVOID OutputBuffer,            

      IN ULONG OutputBufferLength       

      ); 


  <strong>FileHandle</strong> - хэндл файла. 
  <strong>Event</strong> - хэндл события "со сбросом вручную" для асинхронного ввода-вывода. 
  <strong>ApcRoutine</strong> - адрес функции завершения. 
  <strong>ApcContext</strong> - аргумент передаваемый в функцию завершения. 
  <strong>IoStatusBlock</strong> - указатель на структуру IO_STATUS_BLOCK. 
  <strong>FsControlCode</strong> - комманда драйверу файловой системы. 
  <strong>InputBuffer</strong> - указатель на буфер содержащий входные параметры для 
   данной комманды. 
  <strong>InputBufferLength</strong> - размер входного буфера. 
  <strong>OutputBuffer</strong> - указатель на буфер принимающий выходные данные для 
   данной комманды. 
  <strong>OutputBufferLength</strong> - размер выходного буфера. 
        
 
 <a>  ULTRAS[MATRiX]</a>
 <a>What`s my age again</a>

 <a href="mailto:ultras2@hotmail.com"> ultras2@hotmail.com</a> 
 <a href="http://www.coderz.net/ultras">www.coderz.net/ultras</a> 
 <a href="http://www.coderz.net/matrix">www.coderz.net/matrix</a>

<a href="http://topdev.tsx.org"> Статья для журнала Top Device</a>   
                </pre>
                 </td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><img src="-.gif" width="1"
                height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
        </table>
        </center></div></td>
        <td>&nbsp;</td>
    </tr>
</table>

<p>&nbsp;</p>
</body>
</html>
