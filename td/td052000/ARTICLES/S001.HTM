<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
</head>

<body bgcolor="#B1B1B1" text="#000000" topmargin="0"
leftmargin="3">

<p><STYLE> </p>

<p>INPUT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}</p>

<p>SELECT { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>OPTION { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } </p>

<p>FORM { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
} <br>
BODY { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } <br>
P { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt }
TABLE { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt
}TR { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 8pt } TD
{ FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE: 10pt
}TEXTAREA { FONT-FAMILY: Tahoma, sans-serif, arial; FONT-SIZE:
8pt } A { COLOR: #005500; TEXT-DECORATION: none }A:hover {
TEXT-DECORATION: underline } A:link { TE  XT-DECORATION: none
}A:visited { }text:unknown { FONT-SIZE: 8pt } } </STYLE> </p>

<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="100%"><div align="center"><center><table
        border="0" cellpadding="0" cellspacing="0" width="100%">
            <tr>
                <td width="100%" bgcolor="#000000"img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                   <td width="100%" bgcolor="#808080"><strong>13.05.2000</strong>
                    	LZCE32 - LEMPEL-ZIV 32BIT COMPRESSION ENGINE
 <strong>[Sexy]</strong></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><img src="-.gif" width="1"
                height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><pre>
        Я пpосмотpел большинство 32 битных аpхивационнных
        движков и знаете, что я понял? Они - говно. Итак, я pешил
        сделать что-нибудь на эту тему. Результат недельных исследований
        пpедставлен ниже. И это...

                LZCE32 - LEMPEL-ZIV 32BIT COMPRESSION ENGINE

        Содеpжит две подпpогpаммы:

        lz_compress  (344 bytes) и
        lz_decompress (362 bytes)

        Возможности:

        + весь код и данные не зависят от дельта смещения
        + лучшая степень сжатия, чем в алгоpитмах Хаффмана или RLE
        + не помещает в выходной буфеp сигнатуp, копиpайтов и
          пpочего патетического деpьма.  буфеp содеpжит только данные
          и ничего более
        + готова к использованию

        Обе пpоцедуpы имеет идентичные паpаметpы, котоpые должны быть
        помещены в стек.

        push    pointer_to_the_temporary_data
        push    input_buffer_size
        push    pointer_to_the_output_buffer
        push    pointer_to_the_input_buffer
        call    lz_compress

        (или в TaSm pасшиpенном синтаксисе:
        Call    lz_compress,in_buffer,out_buffer,inbuffer_size,temp_data
        if you are the accuracy freak).

        Hа выходе:

        EAX солдеpжит количество байт помещенных в выходной буфеp,
        содеpжимое pегистpов  EBX,ECX,EDX,ESI,EDI и EBP не
        сохpаняется
       
        Примечание: Отсутствует проверка на ошибки. Ваша программа должна
        это делать самостоятельно. Если входные данные уже запакованы или
        сильно различны, то размер выходных данных превысит размер буфера.

        Размеp вpеменных данных должен быть 5000h для подпpогpаммы
        компеpссии и 3000h для подпpогpаммы декомпpессии.

        демо (большую часть кода котоpого я, ленивая скотина,
        спеp из Лоpд Джулиусовского ljhce32) включает 2 маленькие
        пpогpаммки:

        lz32comp.exe will сжимает INPUT.DAT в COMPRESS.DAT
        lz32dcmp.exe will pаспаковывает COMPRESS.DAT в OUTPUT.DAT

        Сделал SexyDufus (c) 2000 эксклюзивно для жуpнала TopDevice

        Это все pебята. пошел спать...

<font color=#000080>
rem =make.bat start==========================================================
@echo off
set ASMLIBS=\asm\lib
set ASMBIN=\asm\bin
if not exist %AMSLIBS%\msvcrt.lib %ASMBIN%\implib %ASMLIBS%\msvcrt.lib c:\windows\system\msvcrt.dll
%ASMBIN%\tasm32  /ml /m /la /dCOMPRESS lzce32.asm,lz32comp
%ASMBIN%\tlink32 /Tpe /aa /c /L%ASMLIBS% lz32comp,lz32comp,,import32 msvcrt,,,,,,
%ASMBIN%\tasm32  /ml /m /la /dDECOMPRESS lzce32.asm,lz32dcmp
%ASMBIN%\tlink32 /Tpe /aa /c /L%ASMLIBS% lz32dcmp,lz32dcmp,,import32 msvcrt,,,,,,
rem =make.bat end============================================================

;=lzce32.asm start===========================================================

.486p                                       ;
.model flat                                 ;
locals                                      ;
                                            ;
extrn ExitProcess:proc                      ;
extrn CreateFileA:proc                      ;
extrn CloseHandle:proc                      ;
extrn MapViewOfFile:proc                    ;
extrn CreateFileMappingA:proc               ;
extrn FlushViewOfFile:proc                  ;
extrn GetFileSize:proc                      ;
extrn SetFilePointer:proc                   ;
extrn SetEndOfFile:proc                     ;
extrn UnmapViewOfFile:proc                  ;
extrn malloc:proc			    ;
extrn free:proc                             ;
                                            ;
.data                                       ;
					    ;
output_handle     dd 0                      ;
output_maphandle  dd 0                      ;
output_mapaddress dd 0                      ;
input_handle      dd 0                      ;
input_maphandle   dd 0                      ;
input_mapaddress  dd 0                      ;
input_size        dd 0                      ;
compressed_size	  dd 0                      ;
                                            ;
IFDEF COMPRESS                              ;
 output_file       db 'compress.dat', 0     ;
 input_file        db 'input.dat', 0        ;
ELSE                                        ;
 output_file       db 'output.dat', 0       ;
 input_file        db 'compress.dat', 0     ;
ENDIF                                       ;
                                            ;
                                            ;
.code                                       ;
;----------------------------------------------------------------------------
IFDEF COMPRESS                                            
	include lzc1.inc
ELSE
	include lzd1.inc
ENDIF

main:                                       ;
       push 0                               ; file attributes
       push 0                               ; ""
       push 3                               ; Open existing
       push 0                               ; Security option = default
       push 0                               ; File share
       push 80000000h or 40000000h          ; General write and read
       push offset input_file               ; pointer to filename
       call CreateFileA                     ;
                                            ;
       cmp eax, -1                          ;
       je quit                              ;
       mov input_handle, eax                ;
                                            ;
       push offset input_size               ; get the input data size
       push input_handle                    ;
       call GetFileSize                     ;
       mov input_size, eax                  ;
                                            ;
       push 0                               ; filename handle = NULL
       mov eax, input_size                  ;
       add eax, 1000h                       ;
       push eax                             ; max size
       push 0                               ; min size (no need)
       push 4                               ; Page read & write
       push 0                               ; security attributes
       push input_handle                    ;
       Call CreateFileMappingA              ; create mapping
                                            ;
       or eax, eax                          ;
       jz quit                              ;
       mov input_maphandle, eax             ;
                                            ;
       push input_size                      ; bytes to map
       push 0                               ; blah, blah, blah...
       push 0                               ;
       push 2                               ; File Map Write Mode
       push eax                             ; File Map Handle
       Call MapViewOfFile                   ; map the file
                                            ;
       or eax, eax                          ;
       jz quit                              ;
       mov input_mapaddress, eax            ; and save buffer address
;----------------------------------------------------------------------------
       push 0                               ; file attributes
       push 0                               ; ""
       push 2                               ; Create New File
       push 0                               ; Security option = default
       push 0                               ; File share
       push 80000000h or 40000000h          ; General write and read
       push offset output_file              ; pointer to filename
       Call CreateFileA                     ;
                                            ;
       cmp eax, -1                          ;
       je quit                              ;
       mov output_handle, eax               ;
                                            ;
       push 0                               ; filename handle = NULL
IFDEF COMPRESS
       mov eax, input_size                  ;
       add eax, 1000h                       ;
ELSE
       mov eax,64000d
ENDIF
       push eax                             ; max size
       push 0                               ; min size (no need)
       push 4                               ; Page read & write
       push 0                               ; security attributes
       push output_handle                   ;
       Call CreateFileMappingA              ; create it's mapping
                                            ;
       or eax, eax                          ;
       jz quit                              ;
       mov output_maphandle, eax            ;
IFDEF COMPRESS                              ;
       push input_size                      ; bytes to map
ELSE
       push 64000d
ENDIF
       push 0                               ; blah, blah, blah...
       push 0                               ;
       push 2                               ; File Map Write Mode
       push eax                             ; File Map Handle
       Call MapViewOfFile                   ; map the file!
                                            ;
       or eax, eax                          ;
       jz quit                              ;
       mov output_mapaddress, eax           ;
                                            ;
       mov edi, eax                         ; be sure that the output
       mov eax, 0                           ; buffer is zeroed...
       mov ecx, input_size                  ;
       rep stosb                            ;
                                            ;
;----------------------------------------------------------------------------
IFDEF COMPRESS                              ;
       push 	5000h                       ; allocate 5000h bytes using
ELSE                                        ;
       push	3000h		            ;
ENDIF                                       ;
       call 	malloc			    ; C/C++ "malloc" function
       push 	eax			    ; for "free"
                                            ;
       push 	eax			    ; buffer address
       push 	input_size                  ; input data length
       push 	output_mapaddress           ; output data address
       push 	input_mapaddress            ; input data address
IFDEF COMPRESS                              ;
       call 	lz_compress                 ; compress
ELSE                                        ;
       call	lz_decompress               ; decompress
ENDIF                                       ;
       mov	compressed_size,eax         ;
       call	free			    ; parameter is in the stack already

;----------------------------------------------------------------------------
                                            ;
       push output_mapaddress               ; close map
       call UnmapViewOfFile                 ;
                                            ;
       push output_maphandle                ; close mapping object
       call CloseHandle                     ;
                                            ;
       push 0                               ;
       push 0                               ;
       push compressed_size                 ;
       push output_handle                   ;
       call SetFilePointer                  ;
                                            ;
       push output_handle                   ;
       call SetEndOfFile                    ;
                                            ;
       push output_handle                   ; close file
       call CloseHandle                     ;
                                            ;
       push input_mapaddress                ; close map
       call UnmapViewOfFile                 ;
                                            ;
       push input_maphandle                 ; close mapping object
       call CloseHandle                     ;
                                            ;
       push 0                               ;
       push 0                               ;
       push input_size                      ;
       push input_handle                    ;
       call SetFilePointer                  ;
                                            ;
       push input_handle                    ;
       call SetEndOfFile                    ;
                                            ;
       push input_handle                    ; close file
       call CloseHandle                     ;
                                            ;
	                                    ;
quit:                                       ;
                                            ;
       push 0                               ; exit
       call ExitProcess                     ;
;----------------------------------------------------------------------------
end main
;=lzce32.asm end=============================================================

;=lzc1.inc start=============================================================

lz_compress:
 db 02bh,0c0h,050h,050h,050h,050h,050h,08bh,0ech,0e8h,083h,000h,000h,000h,02bh,0c0h
 db 0feh,0c4h,0e8h,09dh,000h,000h,000h,0e8h,0c1h,000h,000h,000h,02ah,0e4h,066h,089h
 db 045h,000h,0e8h,0b6h,000h,000h,000h,072h,04bh,088h,045h,008h,00fh,0b7h,05dh,000h
 db 0e8h,0bdh,000h,000h,000h,073h,0e7h,0e8h,0ech,000h,000h,000h,053h,00fh,0b7h,045h
 db 000h,0e8h,06eh,000h,000h,000h,05bh,08ah,045h,008h,066h,03bh,05dh,004h,07ch,0cch
 db 066h,083h,07dh,006h,00ch,07ch,013h,02bh,0c0h,0feh,0c4h,0e8h,054h,000h,000h,000h
 db 0e8h,02ch,000h,000h,000h,08ah,045h,008h,0ebh,0b2h,066h,0ffh,045h,006h,066h,0d1h
 db 065h,004h,0ebh,0a8h,00fh,0b7h,045h,000h,0e8h,037h,000h,000h,000h,0b8h,001h,001h
 db 000h,000h,0e8h,02dh,000h,000h,000h,097h,02bh,045h,01ch,083h,0c4h,014h,0c2h,010h
 db 000h,060h,066h,0c7h,045h,006h,009h,000h,066h,0c7h,045h,004h,000h,002h,02bh,0c0h
 db 048h,0b9h,080h,002h,000h,000h,08bh,07dh,024h,0f3h,066h,0abh,066h,0c7h,045h,002h
 db 002h,001h,061h,0c3h,050h,08bh,045h,00ch,00fh,0b7h,04dh,006h,001h,04dh,00ch,06ah
 db 008h,059h,02bh,0d2h,0f7h,0f1h,003h,045h,01ch,097h,058h,08bh,0cah,02bh,0d2h,067h
 db 0e3h,004h,0d3h,0e0h,00ah,007h,066h,0abh,0c1h,0e8h,010h,0aah,0c3h,08bh,075h,018h
 db 08bh,07dh,010h,03bh,07dh,020h,073h,008h,08ah,004h,03eh,0ffh,045h,010h,0f8h,0c3h
 db 0f9h,0c3h,0e8h,02ah,000h,000h,000h,02bh,0ffh,066h,083h,03eh,0ffh,074h,020h,047h
 db 00fh,0b7h,01eh,0e8h,019h,000h,000h,000h,038h,046h,004h,075h,005h,0f8h,00fh,0b7h
 db 0c3h,0c3h,066h,083h,07eh,002h,0ffh,074h,006h,00fh,0b7h,05eh,002h,0ebh,0e4h,0f9h
 db 0c3h,08dh,034h,09bh,003h,075h,024h,0c3h,00fh,0b7h,05dh,002h,00bh,0ffh,074h,006h
 db 066h,089h,05eh,002h,0ebh,003h,066h,089h,01eh,066h,081h,0fbh,000h,010h,074h,017h
 db 0e8h,0dch,0ffh,0ffh,0ffh,066h,0c7h,006h,0ffh,0ffh,066h,0c7h,046h,002h,0ffh,0ffh
 db 088h,046h,004h,066h,0ffh,045h,002h,0c3h

;=lzc1.inc end===============================================================

;=lzd1.inc start=============================================================
lz_decompress:
 db 02bh,0c0h,050h,050h,06ah,009h,068h,000h,000h,000h,002h,068h,000h,000h,002h,001h
 db 050h,068h,0ffh,007h,0ffh,00fh,068h,0ffh,001h,0ffh,003h,08bh,0ech,0e8h,0d6h,000h
 db 000h,000h,066h,03dh,001h,001h,00fh,084h,0bbh,000h,000h,000h,066h,03dh,000h,001h
 db 075h,01fh,0e8h,0f9h,000h,000h,000h,0e8h,0bch,000h,000h,000h,066h,089h,045h,008h
 db 066h,089h,045h,00ah,088h,045h,017h,088h,045h,016h,0e8h,0f4h,000h,000h,000h,0ebh
 db 0cch,066h,089h,045h,008h,066h,089h,045h,00ch,066h,03bh,045h,00eh,07ch,011h,00fh
 db 0b7h,045h,00ah,066h,089h,045h,008h,00fh,0b6h,045h,016h,050h,066h,0ffh,045h,010h
 db 066h,081h,07dh,008h,0ffh,000h,07eh,01ah,00fh,0b7h,05dh,008h,0e8h,070h,000h,000h
 db 000h,08ah,043h,002h,050h,066h,0ffh,045h,010h,00fh,0b7h,003h,066h,089h,045h,008h
 db 0ebh,0deh,00fh,0b7h,045h,008h,088h,045h,016h,088h,045h,017h,050h,066h,0ffh,045h
 db 010h,00fh,0b7h,04dh,010h,067h,0e3h,008h,058h,0e8h,095h,000h,000h,000h,0e2h,0f8h
 db 066h,089h,04dh,010h,0e8h,095h,000h,000h,000h,00fh,0b7h,045h,00ch,066h,089h,045h
 db 00ah,00fh,0b7h,05dh,00eh,066h,03bh,05dh,012h,00fh,08ch,04eh,0ffh,0ffh,0ffh,066h
 db 083h,07dh,014h,00ch,00fh,084h,043h,0ffh,0ffh,0ffh,066h,0ffh,045h,014h,066h,0d1h
 db 065h,012h,0e9h,036h,0ffh,0ffh,0ffh,097h,02bh,045h,028h,083h,0c4h,020h,0c2h,010h
 db 000h,08dh,01ch,05bh,003h,05dh,030h,0c3h,00fh,0b7h,045h,014h,003h,045h,018h,087h
 db 045h,018h,06ah,008h,059h,02bh,0d2h,0f7h,0f1h,003h,045h,024h,096h,066h,0adh,00fh
 db 0b7h,0d8h,0ach,00fh,0b7h,0cah,067h,0e3h,007h,0d0h,0e8h,066h,0d1h,0dbh,0e2h,0f9h
 db 00fh,0b7h,0c3h,00fh,0b7h,05dh,014h,083h,0ebh,009h,066h,023h,044h,05dh,000h,0c3h
 db 066h,0c7h,045h,014h,009h,000h,066h,0c7h,045h,012h,000h,002h,066h,0c7h,045h,00eh
 db 002h,001h,0c3h,08bh,07dh,01ch,003h,07dh,028h,0aah,0ffh,045h,01ch,0c3h,00fh,0b7h
 db 05dh,00eh,0e8h,09ah,0ffh,0ffh,0ffh,00fh,0b6h,045h,017h,088h,043h,002h,00fh,0b7h
 db 045h,00ah,066h,089h,003h,066h,0ffh,045h,00eh,0c3h

;=lzd1.inc end===============================================================

</font>

<a href="http://topdev.tsx.org"> Статья для журнала Top Device</a>     
                </pre>
                 </td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td width="100%"><img src="-.gif" width="1"
                height="1"></td>
            </tr>
            <tr>
                <td width="100%" bgcolor="#000000"><img
                src="-.gif" width="1" height="1"></td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
        </table>
        </center></div></td>
        <td>&nbsp;</td>
    </tr>
</table>

<p>&nbsp;</p>
</body>
</html>
