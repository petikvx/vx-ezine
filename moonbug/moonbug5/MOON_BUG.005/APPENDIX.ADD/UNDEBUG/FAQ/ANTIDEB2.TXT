
─ Area: RU.HACKER: Тонкие вопросы программирования ───────────────────────────
  Msg#: 194                                          Date: 02 Feb 96  20:48:04
  From: Anton Kuznetsov                              Read: Yes    Replied: No 
    To: Dima Ben                                     Mark:                     
  Subj: Анти-дебугин...
──────────────────────────────────────────────────────────────────────────────
                          Hello Dima!

31 Jan 96 13:56, Dima Ben бредил в адрес All:

DB>  Hyжен subj, точнее какие-нить пpостые и действенные методы пpотив отладки
DB>  и дебyгиpования пpоги; так чтоб отладчики висли или пpиводили к досpочномy
DB>  завеpшению этой пpоги с соответствyющим сообщением.
DB>  Pls, нy очень надо...

 Hу раз тебе простые, то вот некоторые махонькие, из какой-то книжки по
безопасности в свое время набил:

;*******************************************
Пример обнаружения отладчика основанный на сравнении указателей стека
Hе работает в пошаговом режиме.

=== Cut ===
  .model tiny
  .code
  .startup
  locals
  jumps

  mov ax,ss
  cmp ax,es:[30h]
  je Exit

  mov dx,offset $$001   ; Debug!!!
  mov ah,09h
  int 21h

  jmp exit

$$001  db 'Debugger!',0dh,0ah,'$'

exit:
  mov ah,4ch
  int 21h
  end
=== Cut ===

;*******************************************
Команда pop ss заствляет отладчик пропустить следующую за ней команду pushf
из-за потери трассировочного прерывания.

=== Cut ===
  .model tiny
  .code
  .startup
  locals
  jumps

  push cs
  push cs
  pop ds
  pop ss
  pushf
  pop ax

  test ah,1
  jz exit

  mov dx,offset $$001   ; Copyright
  mov ah,09h
  int 21h

  jmp exit

$$001  db 'Debugger!',0dh,0ah,'$'

exit:
  mov ah,4ch
  int 21h
  end
=== Cut ===

;*******************************************
Эта фигня не будет работать в пошаговом режиме - портит собственный код.

=== Cut ===
  .model tiny
  .code
  .startup
  locals
  jumps

start:
  jmp real

del:  pushf
  cld
  mov ax,cs
  mov es,ax
  rep stosw
  popf
  ret

real:
  push cs
  pop ds
  mov cx,12
  mov di,offset start
  call del

  mov dx,offset $$001
  mov ah,09h
  int 21h

  jmp exit

$$001  db 'Debugger!',0dh,0ah,'$'

exit:
  mov ah,4ch
  int 21h
  end
=== Cut ===

 Это именно простенькие примеры, для защиты от ламера с отладчиком и знанием
ассемблера. Hедавно крутили одну прогу - она сравнивала куда смотрят int1 &
int3 (не в одно и то же место? :-E) Все это конечно ерунда, сломать можно все,
было б только время и желание.

ЗЫ Кстати кто тут крут? Мож подбросит еще пару примеров для коллекции?

                           I love ARJ2.50 and girls.
                                              Antony.

-!- GoldED/386 2.50+
 ! Origin: No pity. No mercy. No remorse. (2:5011/26.1)

