<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<TITLE>Int 21h Function 440Dh Minor Code 6Dh (FAT32)</TITLE>
<META NAME="MS-HKWD" CONTENT="Int 21h Function 440Dh Minor Code 6Dh (FAT32)">
<META NAME="MS-HAID" CONTENT="funcs_0000000101001300">
</HEAD>
<BODY BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF">
<FORM name=x>
<OBJECT name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</OBJECT>
</FORM>
<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="funcs_0000000101001300"></A>Int 21h Function 440Dh Minor Code 6Dh (FAT32) </H2>
<P>
[Windows 95 only.]
<P>
Enumerates open files on the specified drive. 
<PRE><FONT FACE="Courier" SIZE="2">mov ax, 440Dh           ; generic IOCTL
mov bx, DriveNum        ; see below
mov ch, DeviceCat       ; see below
mov cl, 6Dh             ; Enumerate Open Files  
mov dx, seg PathBuf     ; see below
mov ds, dx
mov dx, offset PathBuf
mov si, FileIndex       ; see below
mov di, EnumType        ; see below
int 21h

jc  error
mov [OpenMode], ax      ; mode file was opened in
mov [FileType], cx      ; normal file or memory-mapped file
</FONT></PRE>
<H4>Parameters</H4>
<P>
<I>DriveNum</I> 
<P>
Drive on which to enumerate the files. This parameter can be 0 for the default
drive, 1 for A, 2 for B, and so on. 
<P>
<I>DeviceCat</I> 
<P>
Specifies a FAT16, FAT12 or FAT32 drive. 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
08h 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FAT32, FAT16, or FAT12 drive. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
48h 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FAT32, FAT16, or FAT12 drive. This value is supported on Windows 95 OEM
Service Release 2 and later. 
</FONT></TABLE>
<P>
<B>Note:</B> Because this call may be implemented in the device driver, the
48h form of this call may fail on FAT16 or FAT12 media. Therefore,
applications making the 48h form of this call must fall back on the 08h form
if the 48h call fails. 
<P>
<I>PathBuf</I> 
<P>
Address of a buffer that receives the path of the open file. The length of the
buffer varies depending on the volume. Get Volume Information (<B>Interrupt
21h Function 71A0h</B>) is used to determine the maximum allowed length of a
path for the volume. 
<P>
<I>FileIndex</I> 
<P>
Index of the file to retrieve the path for. 
<P>
<I>EnumType</I> 
<P>
Kind of file to enumerate. This parameter can be 0 to enumerate all open files
or 1 to enumerate only open unmovable files, including open memory-mapped
files and other open unmovable files (32-bit Windows-based DLLs and
executables). 
<H4>Return Values</H4>
<P>
Clears the carry flag, copies the path of an open file to the given buffer,
and sets the AX and CX registers to the following values if successful: 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
AX 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mode that the file was opened in, which is a combination of access mode,
sharing mode, and open flags. It can be one value each from the access and
sharing modes and any combination of open flags. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Access modes</B> 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_READONLY (0000h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_WRITEONLY (0001h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_READWRITE (0002h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_RO_NOMODLASTACCESS (0004h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Share modes</B> 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_SHARE_COMPATIBLE (0000h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_SHARE_DENYREADWRITE (0010h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_SHARE_DENYWRITE (0020h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_SHARE_DENYREAD (0030h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_SHARE_DENYNONE (0040h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Open flags</B> 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_NOINHERIT (0080h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_NO_BUFFERING (0100h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_NO_COMPRESS (0200h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_ALIAS_HINT (0400h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_NOCRITERR (2000h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_FLAGS_COMMIT (4000h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
CX 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
File type. It can be one of the following values: 
</FONT></TABLE>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For normal files 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For a memory-mapped files (memory-mapped files are unmovable) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For any other unmovable files (32-bit Windows-based DLLs and executables) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For the swap file 
</FONT></TABLE>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
Note that if a memory-mapped file is returned (CX = 1), the value returned in
the AX register is limited to the following values: 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_READONLY (0000h) 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OPEN_ACCESS_READWRITE (0002h) 
</FONT></TABLE>
<P>
Otherwise, the function sets the carry flag and sets the AX register to the
following error value: 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_ACCESS_DENIED 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The value of FileIndex exceeds the number of open files on the drive. 
</FONT></TABLE>
<H4>Remarks</H4>
<P>
This function returns information about one file at a time. To enumerate all
open files, the function must be called repeatedly with FileIndex set to a new
value for each call. FileIndex should be set to zero initially and then
incremented by one for each subsequent call. The function returns the
ERROR_NO_MORE_FILES error value when all open files on the volume have been
enumerated. 
<P>
This function may return inconsistent results when used to enumerate files on
an active volume 3/4 that is, on a volume where other processes may be opening
and closing files. Applications should use Lock Logical Volume (Interrupt 21h
Function 440Dh Minor Code 4Ah) to take a level 3 lock before enumerating open
files. 
<P></FONT>
</BODY>
</HTML>
