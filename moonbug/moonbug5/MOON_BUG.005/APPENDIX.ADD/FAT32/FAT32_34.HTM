<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<TITLE>Int 21h Function 7305h Ext_ABSDiskReadWrite (FAT32)</TITLE>
<META NAME="MS-HKWD" CONTENT="Int 21h Function 7305h Ext_ABSDiskReadWrite (FAT32)">
<META NAME="MS-HAID" CONTENT="funcs_0000000101002100">
</HEAD>
<BODY BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF">
<FORM name=x>
<OBJECT name=iv classid="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016">
</OBJECT>
</FORM>
<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="funcs_0000000101002100"></A>Int 21h Function 7305h Ext_ABSDiskReadWrite (FAT32) </H2>
<P>
[Windows 95 only.]
<P>
Allows absolute disk read/write to FAT32, FAT16, and FAT12 drives. This call
replaces Int 25h/26h.
<PRE><FONT FACE="Courier" SIZE="2">mov  si, 6001h          ;write normal file data. SI=0 for read
                        ;see &quot;In Write Mode&quot; below for more write values

mov  cx, -1             ;cx must be -1
mov  dx, seg Buffer     
mov  ds, dx
mov  bx, offset Buffer  ;See below
mov  dl, DriveNum       ;See below

mov  ax, 7305h          ;Ext_ABSDiskReadWrite
int 21h

jc  error_handler       ;carry set means error
</FONT></PRE>
<H4>Parameters</H4>
<P>
<I>Buffer</I> 
<P>
Points to a DISKIO structure that contains the starting sector, the sector
count and an address of the buffer to receive the data. The structure must be
initialized according to Int 25h/26h documentation. The DISKIO structure has
the following form: 
<PRE><FONT FACE="Courier" SIZE="2">DISKIO  STRUC
    diStartSector   dd  ?   ;sector number to start
    diSectors       dw  ?   ;number of sectors
    diBuffer        dd  ?   ;address of buffer
DISKIO  ENDS
</FONT></PRE>
<P>
<I>DriveNum</I> 
<P>
The 1-based drive number (0=default; 1=A, 2=B, and so on). 
<P>
<B>This function operates the same as Int 25h/26h, with the following
exceptions:</B> 
<P>
CX must equal -1 (only the 32-bit starting sector number form is allowed). 
<P>
The drive number is 1-based (0 = default drive) and is specified in DL instead
of AL. 
<P>
This call does not leave a flag word on the stack like Interrupts 25h and 26h.
<P>
This call modifies only the AX register and the flags. 
<P>
Bit 0 of SI specifies whether the call is to do a READ (INT 0x25) or a WRITE
(INT 0x26): 
<P>
<B>Read and Write Modes:</B> 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SI bit 0 clear
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
READ 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SI bit 0 set
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WRITE 
</FONT></TABLE>
<P>
<B>In Write Mode:</B>
<P>
When bit 0 of SI is set (that is, WRITE mode), bits 13, 14 and 15 of SI
categorize what type of data is being written: 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
15
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
14
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
13
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Description<B> </B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Other/Unknown. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FAT data. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Directory data. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Normal File data. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
x
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
x
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Reserved. Bit 15 must be 0. 
</FONT></TABLE>
<P>
All other bits of SI (1 through 12) are reserved and must be 0. 
<P>
This provides information to apps (like compression drivers) so that they can
write the data properly based upon the data type specified by the above bits. 
<P>
<B>Warnings:</B> 
<P>
Do not set these flags in an attempt to make a compression driver write
uncompressed data onto a compressed drive. Compression drivers are not the
only applications use these flags. 
<P>
Do not set the flags improperly, this information is to be used only to
indicate what &quot;type&quot; the data is. 
<H4>Return Values</H4>
<P>
If the function is successful, clears the carry flag. Otherwise, sets the
carry flag, and sets the AX register with the error code as it is documented
for Int 25h/26h. 
<H4>Remarks</H4>
<P>
When calling this function with <B>DeviceIoControl</B>, it is recommended to
set the <I>dwloControlCode</I> parameter to VWIN32_DIOC_DOS_IOCTL (defined as
6 in VWIN32.H). For more information on this, see <B>Using VWIN32 to Carry Out
MS-DOS Functions</B>. 
<P></FONT>
</BODY>
</HTML>
