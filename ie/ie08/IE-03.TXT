
                      -=POWER HEAP RESEARCH=-
          =>независимая оpганизация наyчных исследований<=

 ▀▀▀▀▀▀ ▀▀▀   ▀▀ ▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀   ▀▀▀▀▀  ▀▀▀▀▀▀▀▀ ▀▀▀▀▀▀▀ ▀▀▀▀▀▀
   ▀▀   ▀▀▀▀  ▀▀ ▀▀      ▀▀       ▀▀   ▀▀    ▀▀    ▀▀      ▀▀   ▀▀
   ▀▀   ▀▀ ▀▀ ▀▀ ▀▀▀▀▀   ▀▀▀▀▀   ▀▀▀         ▀▀    ▀▀▀▀▀   ▀▀   ▀▀▀
   ▀▀   ▀▀  ▀▀▀▀ ▀▀      ▀▀       ▀▀   ▀▀    ▀▀    ▀▀      ▀▀   ▀▀
 ▀▀▀▀▀▀ ▀▀   ▀▀▀ ▀▀      ▀▀▀▀▀▀▀   ▀▀▀▀▀     ▀▀    ▀▀▀▀▀▀▀ ▀▀▀▀▀▀

           ▀▀▀▀▀▀▀       ▀▀▀▀▀▀  ▀▀   ▀▀ ▀▀▀▀▀▀    ▀▀▀▀▀
           ▀▀            ▀▀   ▀▀ ▀▀   ▀▀ ▀▀   ▀▀  ▀▀
           ▀▀▀▀▀   ▀▀▀▀▀ ▀▀▀▀▀▀  ▀▀   ▀▀ ▀▀▀▀▀▀  ▀▀▀  ▀▀▀▀
           ▀▀            ▀▀   ▀▀ ▀▀   ▀▀ ▀▀  ▀▀   ▀▀   ▀▀
           ▀▀▀▀▀▀▀       ▀▀▀▀▀▀   ▀▀▀▀▀  ▀▀   ▀▀   ▀▀▀▀▀
                       http://www.rezus.boom.ru
                       Helloween.virus@mail.ru

                        [ЖУРHАЛ  ВИРМЕЙКЕРОВ]

                    ┌───────────────────────────┐
                    │ Hомеp 3 за 2002 (номеp 8) │
                    └───────────────────────────┘


                         ЧЕРВЬ РОБЕРТА МОРРИСА
                            (пpодолжение)

     Вторая причина популярности компьютерных вирусов менее  очевидна,
но  от  этого  ничуть  не  становится  менее  истинным  тот  факт, что
наблюдаемое в последнее годы глобальное распространение  вирусов  -  и
сопутствующих  им проблем - во многом определяется массовым выпуском и
распространением микрокомпьютеров,  которые  наиболее  беззащитны  для
вирусов   в   силу   стандарности   своей  архитектуры  и  архитектуры
математического обеспечения.
     Большие системы практически не имеют проблем с  вирусами  в  силу
своей уникальности, обеспечиваемой тем, что, во-первых, каждая большая
система проходит стадию генерации,  во  время  которой  многочисленные
системные  параметры образуют уникальное сочетание; во-вторых, большие
системы имеют хорошо развитые подсистемы разделения доступа и  защиты,
что  является  серьезным  препятствием  для  вирусов и позволяет легко
обнаруживать источник заражения.
     Легко заметить,  что  микросистемы  в  большинстве  своем  лишены
уникальности.    Именно   стандартность   является   и   преимуществом
микросистем, обусловившим их широкое распространение, и их проклятием,
поскольку  вирус,  возникший  в  одной  системе,  без  труда  поражает
соседнюю, так как по архитектуре обе  системы  похожи  как  две  капли
воды.
     Теперь  понимаете  какое  значение   для   усугубления   проблемы
компьютерных  вирусов  имело  начатое  в  августе 1981 года фирмой IBM
серийное производство персональных компьютеров  -  знаменитых  IBM PC!
Ведь   легкость   серйиного  производства  и  относительная  дешевизна
персоналок  -  прямое  следствие  их  стандартности!   Хотя  с  другой
стороны,      доступность      и     понятность     персоналок     для
пользователей-непрофессионалов - тоже следствие стандартности.

     Но этого мало.   Непонятно  почему,  но  люди  всегда  стремились
облегчить  вирусам  - и естественным, и компьютерным - их черное дело.
Например, обычная  чума:   не  тем  ли  объясняется  ее  массовость  и
скорость  распространения,  что люди издавна стремились жить как можно
ближе друг к другу, вследствие  чего  появлялись  стоянки,  поселения,
деревни,  города и т.д.О СПИДе я уже не говорю:  попробуйте, уговорите
людей воздержаться от общеизвестного способа его распространения!
     Аналогично и с "электронной чумой", как называют вирусы.
     Итак извечное стремление человеческое пообщаться с себе подобными
привело  к появлению многомашинных систем - компьютерных сетей.  Кроме
того, люди во многом схожи, поэтому ничего нет  удивительного  в  том,
что  в  разных  концах  света пользователи работают с одними и теми же
удачно созданными  программами  и  системами.   Примером  этому  может
служить  победоносное  шествие по миру операционной системы UNIX (и ее
аналогов) и компиляторов языка C.

     Операционная система UNIX,  появившаяся  на  свет  в  1969  году,
является детищем двух талантливых - судя по самой UNIX - программистов
К.Томпсона и Д.Ричи  [A6], работавших в Bell  Laboratories  -  филиале
всемогущей  American  Telephon & Telegraph (AT&T), кстати долгое время
державшей  монополию  на  сети  связи  в  США.  UNIX  замышлялась  как
операционная  система  для  внутренних  нужд, которая должна была быть
достаточно  проста  в  использовании,  дружественна  по  отношению   к
пользователям  и  как можно меньше зависящей от типа машин, на которых
она  будет   работать.    Кроме   того,   UNIX   разрабатывалась   как
многопользовательская   система   и   потому  имела  неплохую  систему
разделения доступа, базирующуюся на парольной защите.
     Успех системы превзошел все ожидания.  UNIX  мгновенно  завоевала
симпатии  пользователей,  что  позволило AT&T значительно усилить свои
позиции  на  рынке.   UNIX  для  AT&T   стал   настоящим   Клондайком,
компьютерным  Эльдорадо.   Быстро стали появляться усовершенствованные
версии системы:  1975 год - UNIX  V6,  1976  год  -  UNIX  V7  (первая
"базовая"  версия),  1982  год  -  UNIX System III, 1984-85 год - UNIX
System V.  Появляются аналоги UNIXа - GENIX,  XENIX,  Ultrics,  VENIX,
PC-IX.   Лавры разработчика пожинал также и калифорнийский университет
в Беркли, разработавший UNIX 4.0, 4.1, 4.2 и т.д.   Ах,  если  бы  они
знали, какую шутку уготовил им 1988 год!

     Таким образом,  тенденция  к  объединению  разнотипных  систем  в
сочетании  с  появлением  на  рынке и широким распространением системы
UNIX  и  компиляторов  языка  C  (в  силу  их  комфортабельности   для
пользователя)  еще  более  усложнили "эпидемиологическую" обстановку в
компьютерном мире, создав буквально питательную среду для вирусов всех
мастей.   Как   обычно,   всю   опасность   положения  сознавала  лишь
незначительная часть специалистов,  во  всеуслышание  предупреждавших,
что   пренебрежение   пользователей   вопросами  обеспечения  хотя  бы
собственной безопасности даром не пройдет.   Но,  как  известно,  пока
гром не грянет...

     ...Да!  Чуть не забыл:  летом 1988 года в  AT&T Bell Laboratories
работал студент последнего курса одного из американских университетов.
И  занимался  он  не  чем  иным  как  "перепиской   программ   системы
безопасности  для  большинства компьютеров, работающих под управлением
операционной системы  UNIX".   В  принципе  ничего  особенного  -  для
Америки  и  вообще  цивилизованных  стран  -  в этом не было:  мало ли
студентов работают в солидных корпорациях, лабораториях и учреждениях,
приобретая  практический  опыт и обеспечивая себе рабочие места в этих
организациях, - если бы этот  факт  не  был  через  несколько  месяцев
упомянут  в  "Нью-Йорк Таймс"  в  связи  с  событиями,  потрясшими всю
Америку (по крайней мере, ту  ее  часть,  которая  имеет  отношение  к
компьютерам). [A8]



______________________________
     [A6]  Кен Томпсон возглавлял группу  разработчиков,  создавших  в
1969 году  ассемблерный  вариант  UNIX.   При этом преследовалась цель
создания    удобной    операционной    обстановки    для    проведения
исследовательских  работ  в  области  программирования; а сама система
предназначалась для машины PDP-7 фирмы DEC -  представителя  семейства
машин,  широко  распространенных в научных и исследовательских центрах
страны, что подготовило почву для победного шествия UNIXа по Штатам.
     Деннис Ричи подключился к проекту позже,  однако  во  многом  ему
обязана  рождением в 1972 году коммерческая версия системы, написанная
на высокоуровневом языке C.
     Кстати, язык C тоже появился в AT&T и  тоже  как  разработка  для
внутренних нужд.  Ядро системы UNIX состоит примерно из 10000 строк на
C и еще 1000 строк на языке ассемблера.

                          B  Как это было.

                              "Сейчас 3:45 AM, среда  (sic)  3  ноября
                         1988  года.   Мне  все  надоело,  я  не  могу
                         поверить в то, что произошло..."
                                        Из  сообщения  Клиффа  Столла,
                                   переданного  по  электронной  почте
                                   Dockmaster.ARPA.


     ...Гром -  вирусная  атака,  названная  компьютерными  экспертами
величайшим   нападением   на  национальные  компьютеры  из  когда-либо
случавшихся - грянул 2 ноября 1988 года.

     Абсолютно точную последовательность  событий  в  настоящее  время
восстановить  практически  невозможно,  поскольку, во-первых, во время
самой атаки все были заинтересованы прежде всего в быстрой локализации
и  удалении вируса, а никак не в подробной регистрации фактов [B1]; и,
во-вторых,   потому,   что   вирус   быстро   заблокировал   атакуемые
вычислительные   сети,   в  результате  чего  прервалась  связь  между
пользователями.

                        /пpодолжение следyет/


 И как всегда еще исходники этого чеpвя. Файл test.c :

/* dover */

/*  The version of crypt() used in the worm program has the same tables as
 * Berkeley's 4.3 crypt(), but uses different code.  Since I don't know where
 * we put our 4.2 tape I can't check it against that code to find the exact
 * source.  I assume that it just a regualar crypt() routine with several
 * interior functions declared static, perhaps tuned somewhat for speed on the
 * VAX and Sun.
 */
crypt()
{ }
    
/* These might not be copyrighted, but I'm not taking the chance.  They are
   obvious. */
h_addr2host()
{}
h_name2host()
{}

/*
 * Local variables:
 * compile-command: "make test"
 * comment-column: 48
 * End:
 */
[Worm] 201)

 А тепеpь stubs.c :

/* Magic numbers the program uses to identify other copies of itself. */

#define REPORT_PORT 0x2c5d
#define MAGIC_1 0x00148898
#define MAGIC_2 0x00874697
extern int pleasequit;/* This stops the program after one
 * complete pass if set.  It is incremented
 * inside of checkother if contact with another
 * happens. */

/* There are pieces of "stub" code, presumably from something like this to
   get rid of error messages */
#define error()

/* This appears to be a structure unique to this program.  It doesn't seem that
 * the blank slots are really an array of characters for the hostname, but
 * maybe they are.
 */
struct hst {
    char *hostname;
    int l4, l8, l12, l16, l20, l24, o28, o32, o36, o40, o44;
    int o48[6];/* used */
    int flag;/* used */
#define HST_HOSTEQUIV8
#define HST_HOSTFOUR4
#define HST_HOSTTWO2
    struct hst *next;/* o76 */
};

typedef struct {
    char *name;
    unsigned long size;
    char *buf;
} object;

extern struct ifses {
    int if_l0, if_l4, if_l8, if_l12; /* unused */
    int if_l16;/* used */
    int if_l20;/* unused */
    int if_l24;/* used */
    short if_l28;/* unused */
} ifs[];
extern nifs;

extern int ngateways;

extern object objects[], *getobjectbyname();
extern int nobjects;

/* Only used for a2in().  Why?  I don't know. */
struct bar {int baz;};
extern struct bar *a2in();

[Worm] 205)

   Скоpо Вы yвидите и дpyгие файлы...