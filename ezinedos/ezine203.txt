<-------------------------//LineZer0 Network 99\\------------------------->
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

                       How 2 crack Password Thief 95 

  <----------/\---------------------------------------------/\---------->


hejos folks....
feb. 99

_________________________________________________________________________
first of all... what should you learn out of this?
how to remove an evil nag screen!! and don't forget, this is for learning
purpose only... ok.. and not forget! modifying an .exe is forbitten ;)
--------------------------------------------------------------------------

target:		password thief 95
prot:			only a nag screen
level:		beginner - should understand a bit assembly
__________________________________________________________________________


today, on my search for a tool to monitor the passwords of my teachers in
school, i found a prog called 'password thief'. but when i started it,
an awful nag screen appeared in the middle of my monitor and said 'This
computer is being monitored by the password thief!'...

hm... i didn't like this and thought to me... how beautiful would it be
without this nag!

so i fired up the w32dasm and while it was disassembling the thief.exe 
i thought about the architecture of this protection... i was sure it
had to look somethink like
__________________________________________________________________________

cmp something, something
je no nag

NAG 'your computer is being blah bla blah'

no nag:
steal the passwords
__________________________________________________________________________

ok.. when w32dasm finished loading it, i looked the string references up
for the nag... and there it was 'This computer is being...'
a fast doubleclick and i found myself again in a strange code... hm.. well
not really strange... but just for the sound of it ;)
_______________________________________________________________________________

* Referenced by a CALL at Addresses:
|:004018DE   , :00401A43   
|
:00401A60 56                      push esi
:00401A61 8BF1                    mov esi, ecx
:00401A63 83B9CC00000000          cmp dword ptr [ecx+000000CC], 00000000
:00401A6A 7425000000              je 00401A94   ; go to the beautiful place 
:00401A6F 000000                  BYTE  3 DUP(0)
:00401A72 0100                    add dword ptr [eax], eax
:00401A74 0000                    add byte ptr [eax], al
:00401A76 6A00                    push 00000000

* Possible StringData Ref from Data Obj ->"The Password Thief" ;welcome in false-land
:00401A78 688C224200              push 0042228C

* Possible StringData Ref from Data Obj ->"This computer is being monitored "
                                        ->"using the demonstration version "
                                        ->"of the Password Thief.  NOTE: "
                                        ->"The release version of the Password "
                                        ->"Thief does not display this message."
                                  |
:00401A7D 68E4214200              push 004221E4
:00401A82 6A00                    push 00000000

* Reference To: USER32.MessageBoxA, Ord:0188h
                                  |
:00401A84 FF15E4894200            Call dword ptr [004289E4]
:00401A8A C786CC00000000000000    mov dword ptr [esi+000000CC], 00000000

* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:00401A6A(U)
|
:00401A94 5E                      pop esi
:00401A95 C3                      ret
____________________________________________________________________________________

now i could have nooped the calls or i could concentrate on 2 little instructions

:00401A63 83B9CC00000000          cmp dword ptr [ecx+000000CC], 00000000
:00401A6A 7425000000              je 00401A94   ;if equal it would jump to a 
     place where no nags are allowed ;)


this was what i was looking for!
can you guess now what to do??? yup..sure!  we only have to make a jmp out of
the je and the prog would always jump to a place where no nags are!!!! easy 
isn't it?
________________________________________________________________________________

i only moved my little blue bar in w32dasm on the place where the je was... wrote
down its offset (on the bottom where all the infos are), loaded the thief.exe
in my hiew, hit F4 ->decode, then F5 ->entered 0E6A ... this was the offset 
and finally F3 -> EB  to make a jmp out of the je ....  
you could also hit F2 and enter jmp instead of je... ok.. that was it.. 
not so difficult... was it?

ok.. i hope you succeeded!  .. ähm... you will find some differences in your
code dump... cause i am not quite sure if it was je or jne... and so the hex
code is a bit weird... ok.. but don't care!   if you have any questions or 
whatever.. or you know a better way to crack this, or you know another way..
plz contact me at iarragon_lzo@yahoo.com

--heXcrasher--

_________________________________________________________________________________

thanks to  my crew !
thanks to everyone who writes tutorials!
thanks to stefan who sent me the assembly-tutorial.
thanks to my family!
thanks to 'acme'
________________________________________________________________________________

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
<-------------------------//LineZer0 Network 99\\------------------------->                                                          