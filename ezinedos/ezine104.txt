<-------------------------//LineZer0 Network 99\\------------------------->
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

                         key-hacking and cracking
                    on the shareware 'INTERNET MANIAC'

  <----------/\---------------------------------------------/\---------->

july 99 -heXc--


hello folks....

I am heXcrasher from the LineZerO Networks and warez-n-crackz. I am a 
newbie in cracking, but I want to share my little knowledge with all the 
others that want to have it. By the way I want your response to my articles.
So it would be great, if you find any errors or if you have any questions, 
if you contacted me. 

At the beginning I want to thank my friend nostradamus for helping me with
this article. He was the one who did the key-hack first. THANKS.


TOOLS you will need for this tutorial

- Soft Ice
- W32Dasm
- a HexEditor
- a little knowledge about SoftIce and W32Dasm
- maybe a little practise in crackting... but thats not so important
- you will also need the code-window and data-window in SICE.
to get them enter 'wc' [enter] and 'wd' [enter] in SICE.

You can get these things in the net by simply searching it... or on our page
at http://beam.to/lzo 


                >-----------------------------------------<
		         Keyhacking with SoftIce
                >-----------------------------------------<

Hacking a key means, that you don't have to patch the programme so that it
takes every key. Key-hacking means, that you enter your name, and look the
running code up for the correct key. Then you register yourself with your 
own name.

Most of the time when I am reading a tutorial about cracking I read, that 
it is much better to hack a key, than to patch the programme. I am not quite
sure why, but I think because it is better not to change the programme, or
maybe because patching is forbidden... or whatever.

In the following lines I will show you how to hack the key for 'Internet 
Maniac' using SoftIce. But first some ...

...theoretical stuff about this. 


Normally the key-check is made with an API-function or with some other 
function as you know them from C or Pascal or whatever. In win32 assembly 
this should normally look like this:

push STRING 1
push STRING 2
call the compare function (returns smth. in EAX)
test EAX, EAX
jz 666 (this jump jumps to right or false key... it could also be another 
         jump like je or whatever.)

To hook the programme you should try to set a breakpoint on 6 API-functions.

getdlgitemtext		getwindowtext
getdlgitemtexta		getwindowtexta
getdlgitemtextw		getwindowtextw

to hook one of this APIs you enter in Softice   :bpx getdlgitemtexta
the APIs with an 'a' or 'w' at the and are the 32bit ones.
Normally I try to set the ones with the 'a' at the end.. those are the most
often used ones I think.

If you set a breakpoint for example on getdlgitemtexta and it hooks after 
you entered your name and key and pressed OK you have to know where you are.
Let's think about this before we start with our key-hack.


The programme wants you to enter your name and key. You enter your name 
(eg. heXcrasher) and your key (eg. 66623666). Then you press CTRL-D to enter
softice. Then you set a breakpoint on getdlgitemtexta and one on 
getwindowtexta because you don't know which of these is used. 

(:bpx getwindowtexta  [enter]   :bpx getdlgitemtexta [enter]). 

Then you press CTRL-D again to leave Softice again. Then you click on the
OK button. 

Softice (SICE) hooks and you are in it now. You landed in one of the two 
functions you set a breakpoint on. You can read which which one is 
responsible for the break in the input-window of SICE. 

Breake due to USER32!Getdlgitemtexta ...   now you know that the breakpoint
on getdlgitemtexta was the right one. Now you can clear the other one. Type
CTRL-D to enter SICE and type bl to get a list of your breakpoints. Then 
watch at the number before the one you want to clear eg. 01 . then enter 
bc 1. then the wrong breakpoint is cleared.

What now....? The complete schemes looks something like:

call getdlgitemtexta-function (this gets your name)
some code
some code
call getdlgitemtexta-function (this gets your key)
some code
some-code
call the routine that makes a key out of the name and checks the key.
some code
some code
test eax, eax
je (or jz or whatever... jumps to OK or false)

ok... you landed in the getdlgitemtexta-function that gets your name. So 
you have to press CTRL-D again and you will break again at this function,
because the 2nd one gets your key. Now you have to get back to the program
that called the function, because thats the prog you want to crack or the 
one that you want the key for. So press F12 to get back there. 

Now you are in the prog (you can read its name at the bottom of SICEs code-
window). Now trace on with F10 till you reach a CALL that looks like a call
that compares your key and the right one. ;) . Thats not so easy.... +ORC 
writes in his tutorials that this is the tricky part of cracking... because
you have to feel that this is the right call or whatever.... . Then trace 
through this call and check the pushed registers and segments and this stuff
. (eg. d esp   or  ? eax). Normally you will find the right key just before
the RETurn.

Then write down the key on a paper and enter bd * in SICE... this will 
disable the breakpoints. 

THEN THE SHOWDOWN waites for you. Is the key you found the right one?
If yes... be happy! If no... don't give up and try again...


WELL.. now here is the example:

1. make a copy of the internetmaniac.exe
2. enter your name and a dummy serial (eg. 666666 or 123456...)
3. press CTRL-D to enter SICE
4. enter 'bpx getdlgitemtexta' (thats the right one.. normally you have to
   find out which the right one is first)
5. PRESS CTRL-D to get back to internetmaniac
6. click on OK
7. SICE will pop-up; you are in getdlgitemtexta now (gets your name).
8. press CTRL-D again; you are in the 2nd getdlgitemtexta (gets your serial).
9. press F12 to get back from where getdlgitemtexta was called... 
   internetmaniac. The code here looks like:

:0040509B FFD7                    call edi  ;(getdlgitemtexta [key])
:0040509D 8D542448                lea edx, dword ptr [esp+48]
:004050A1 8D442408                lea eax, dword ptr [esp+08]
:004050A5 52                      push edx ;(save name)
:004050A6 50                      push eax ;(save key)
:004050A7 E8642D0000              call 00407E10; (calculates a key out of 
;your name and compares it with the ;one you entered. It saves the key to 
;esp.
:004050AC 83C408                  add esp, 00000008
:004050AF 85C0                    test eax, eax ; (is eax = 0  ?)
:004050B1 744A                    jz 004050FD; (if yes the jump to wrong)

10. trace with F10 till you reach 'call 00407E10'.
11. press 't' and '[enter]' to trace the call.
12. check the registers etc. to find the real key. you will find it right 
    before the ret (= return to main-prog.) in 'esp'. 
    (to check eg. eax out type 'd eax'.
13. type 'd esp' suddenly you will see (in the data-window) the right key.
14. write it down on a paper... it contains a '-' write down this one too!
15. enter 'bd *' to disable all the breakpoints
16. leave SICE by pressing 'CTRL-D'
17. enter your KEY in internetmaniac....
18. NOW YOU ARE A REGISTERED USER!


QUITE EASY.... isn't it? For example the key for 'LineZerO Networks 99' is 
4100558144-440210 . Ok.. now go on and try to hack your own key! Thanks for
reading this tutor!

THE END?


NO...  lets go on and crack the internetmaniac.... so that we can enter 
every key we want!


                >-----------------------------------------<
			  CRACKING INTERNETMANIAC
			  using W32Dasm and SoftIce.
                >-----------------------------------------<

with SOFTICE and W32Dasm:

first of all you have to make a breakpoint on getdlgitemtexta and then return
to the main programme just like you did it before. (2*ctrl-d , F12). Then 
have a look at the code:

:0040509B FFD7                    call edi  ;(getdlgitemtexta [key])
:0040509D 8D542448                lea edx, dword ptr [esp+48]
:004050A1 8D442408                lea eax, dword ptr [esp+08]
:004050A5 52                      push edx ;(save name)
:004050A6 50                      push eax ;(save key)
:004050A7 E8642D0000              call 00407E10; (calculates a key out of 
;your name and compares it with the ;one you entered. It saves the key to 
;esp.
:004050AC 83C408                  add esp, 00000008
:004050AF 85C0                    test eax, eax ; (is eax = 0  ?)
:004050B1 744A                    jz 004050FD; (if yes the jump to wrong)

Now have a look at the last 2 lines of this code. 'Test eax, eax' looks if
eax = 0 and 'jz xxx' jumps to false key if eax = 0. Hm... there are now 
several ways to change this.... .One would be to nop (= do nothing) the 
'jz'. another one would be to change the 'test eax, eax' into a 'inc eax'
and to nop out the one byte that is left.... there are many other possible 
ones... but here are two ways... change the code to     a)

:004050AF    inc eax   (increments eax from 0 to 1)
:004050B0    nop
:004050B1    jz 004050FD

why this?   'test eax, eax' needs 2 bytes; 85C0. 'inc eax' only needs one 
byte (I think it is AF .. but we don't care now..). So 1 byte is left now.
... if we let it stay there in the middle of the code.... and noone needs
it... it could cause an error... and so we have to nop it (nop = do nothing)!
Nop needs 1 byte too....  but what do we do if there are 2 bytes left?  we
make two nops ;) !

or into     b)

:004050AF     test eax, eax
:00405B1       nop
:00405B2       nop

you see... 'jz xxx' needs 2 bytes... but we don't want the programme to 
jumps.. and so we replace the jz (2 bytes) with 2 nops....  


how to do this changes?
trace with softice till you reach at the code-location that you want to 
change and enter 'a' [enter]. then you can see the address that you are up 
to change. Simply enter the new code and press [enter] and you are at the 
next code location... if you want to change this too just enter the new 
command or press 'esc' to get back to SICE.

k... this should be done now... hm... maybe. Press CTRL-D to get back to 
internetmaniac...   and... MSG:  THANK YOU FOR REGISTERING.... ok.. looks
good. A fast restart to look if it is still ok.. and? Yep... or... NOO???

It still says that it isn't registered... in its caption... ;(  hm... how 
could this be? 

It is like this, because the program checks the key in a lets say 5 seconds
rhythm. But if you look in the about-box you can read that it is still
registered to you with your wrong serial... so it would be enough to catch 
it, where it sets the mode to UNREGISTERED... but how? (normally you would
try to change the code there, where it reads from the registry, but here it
is not important).

1. Just load it into w32dasm
2. look for the UNREGISTERED-Internet maniac message in the string/refs
3. doubleclick on it. then you get warped to the location in the code, 
   where this message is probably located. You are then there, where the 
   bad msg is located... so you have to get back to where the decision is 
   made whether the prog is registered or not. So scroll up till you find:

       'referenced by a call at : 00404B11' or what the adress is.

4. scroll up to the location from where this is called.
5. the architecture must look something like this:

good code
good code
cmp original key with entered key
je good caption
bad code
bad caption

good caption

Here is how it looks in this case:

:00404B05 FF1554104100            Call dword ptr [00411054]
:00404B0B 85C0                    test eax, eax
:00404B0D 89442410                mov dword ptr [esp+10], eax
:00404B11 7405                    je 00404B18
:00404B13 83F832                  cmp eax, 00000032
:00404B16 7E17                    jle 00404B2F

the bad caption is called from 00404B11... so what will we do with this.. 
right.. we gonna noop it out.  'jle would jump to the good caption if eax 
was 32.... so here we will make a jmp out of the jle.... 

ok.. but how can we do this???  just load the program in your heXeditor and
look for the hexadecimal code of the command you want to patch....

eg. we have to noop the 'je' so  I write down  89442410 7405 83F832 and 
look for this code with the hexeditr... why so much code..? because so we 
will sure find the right code...   then I replace the 7405 with 9090  why
with 9090? because   90 hexadecimal means nop (= do nothing). Make now the 
same with the jle.... but don't nop it... make a  'jmp' out of it.

EB = jmp  replace 7E17 with EB17....  that's it!


I only wanted to write a short tutor for this... . but it grew and grew... 
now I was sitting over 2 hours here writing this tutor...  but who cares?

THANKS for reading it.... I hope you understood it. If you find any errors 
or if you have questions... just contact me at iarragon_lzo@yahoo.com .

--heXcrasher--

=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
<-------------------------\\LineZer0 Network 99//------------------------->