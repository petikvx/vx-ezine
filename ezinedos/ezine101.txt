<-------------------------//LineZer0 Network 99\\------------------------->
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

                        removing a crack-protection
                            (cracking checksum)

  <----------/\---------------------------------------------/\---------->


hello folks
july 99

this is heXcrasher from LineZerO and wnc. i am a newby in cracking, though 
i am writing this tutorial in order to teach others that want to crack and 
in order to learn more about this materia...  so if you know a better way 
to crack this programme or even know another way to crack this programme 
or if you find any errors or whatever, please write me to 

iarragon_lzo@yahoo.com.... thanks...

target:		AS-UTIL95 V2.49
protection:	more then I can count on 1 hand...



what is as-util95
why did i choose it?

it is a programme to control many functions of your computer. when i tried
to crack it the first time I met my first checksum-protection (if this is 
the correct name for it... but lets call it like this for now). what is 
this? if you change the .exe in some way, it gives you the message, that 
someone tried to change it. how could this work? I am not 100% sure. the 
programme calculates some number out of its code on every start. if its 
code gets changed the programme recognizes, that the calculated code, and 
the code, that the programmer put somewhere as 'the right length of the 
code' aren't the same. then it gives you a msg and says something.


now lets start with an example now.
for this, would be great if you knew a bit assembly and knew how to use 
w32dasm and your heXeditor. If you don't know these things, read another 
one of my tutorials first. you can get the tools and the tutorials at
http://beam.to/lzo

if you change the code of AS-UTIL9532 on just one position with an 
heXeditor you get the message: 'This programme has been changed, either 
by a virus or by a transfer problem. It will terminate now.' hm. then it 
closes. 


ok. our tactic now is:

1. write down the error msg.
2. make some copies of the .exe
3. disassemble the util9532.exe
4. look for the bad message.
5. look for the place where the calculated number and the original number 
   get compared
6. change the optional jump into a sure jump (je or jne etc.. to jmp)

note. there are always many ways to do a crack... this here is the way I 
did it, but there are a lot of other ways!


now here are step 1 to 7 like I did it.

1. write down the error msg.
I think this wont make you too much problems.

2. make some copies of the .exe .
I always make a dasm.exe and an orig.exe, so that I can restore the 
programme if I make any mistakes... and believe me... most of us newbies
make those mistakes. But if you keep trying, you will succeed for sure!

3. disassemble the util9532.exe
load it in your disassembler. I used w32dasm. then save the listing and 
load it as a project file again before you begin your work.  if you use 
w32dasm--> saving: DISASSEMBLER / SAVE DIS. TEXTFILE AND CREATE PROJECT 
FILE. then click PROJECT / OPEN PROJECT FILE...

4. look for the bad message
click on REFS/STRING REFERENCES to have a look at all the messages, the 
programme gives you. then look the list up for the msg  you wrote down 
before. it's name in the REFS is 'This program has been modified'.
then doubleclick it, to get warped to its location in the listing. and 
double click it a second time, to make sure that there is only one 
location.

I landed on location :00449288. where are we now? my thinking model looks 
like this:

good code
good code
compare calculated number with original number
if equal jump to next good code
                                         |
bad code                            |
bad code      here we are  |
bad code                            |
                                         |
next good code    <_______|
good code
good code


how do I get to this perception?

well.... lets have a look at the listing... below i will describe how i 
get to my thinking-model. the important locations are collored red... some 
not so important are marked fat.

* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0044924A(C)
|
:00449261 8BC3                    mov eax, ebx
:00449263 E80C010000              call 00449374
:00449268 3B051CFD4500            cmp eax, dword ptr [0045FD1C]
:0044926E 742E                    je 0044929E
:00449270 66837B2A00              cmp word ptr [ebx+2A], 0000
:00449275 740A                    je 00449281
:00449277 8BD3                    mov edx, ebx
:00449279 8B432C                  mov eax, dword ptr [ebx+2C]
:0044927C FF5328                  call [ebx+28]
:0044927F EB1D                    jmp 0044929E

* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:00449275(C)
|
:00449281 6A10                    push 00000010

* Possible StringData Ref from Code Obj ->"Program error"
                                  |
:00449283 6800934400              push 00449300

* Possible StringData Ref from Code Obj ->"This program has been modified "
                                        ->"either by a virus or by a transfer "
                                        ->"problem. It will terminate now."
                                  |
:00449288 6810934400              push 00449310  ;here we landed
:0044928D 6A00                    push 00000000

* Reference To: user32.MessageBoxA, Ord:0000h
                                  |
:0044928F E8ECC0FBFF              Call 00405380
:00449294 A170054600              mov eax, dword ptr [00460570]
:00449299 E86ABEFCFF              call 00415108


well... on doubleclicking the error message in the REFS I get warped to 
:00449288. Now I know, that I should be in the code that makes the error 
message, and this is only called, if there's an error.  Now I make sure, 
from where the error-code is called. 

* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:00449275(C)
so I know, that if theres an error.... from location :00449275 the 
error-code is called. then I look up to this location.

:00449263 E80C010000              call 00449374
:00449268 3B051CFD4500            cmp eax, dword ptr [0045FD1C]
:0044926E 742E                    je 0044929E
:00449270 66837B2A00              cmp word ptr [ebx+2A], 0000
:00449275 740A                    je 00449281
:00449277 8BD3                    mov edx, ebx
:xxx 				some code
:0044927F EB1D                    jmp 0044929E

then here continues the error-code

as I see that the error code begins at :00449281 and ends at :00449299 I
can figure out some things. 

:00449275 740A                    je 00449281 
this jumps into the error-code

:0044927F EB1D                    jmp 0044929E
and this jumps behind the error-code

so I only have to noop the je 00449281, so that the programme reaches the 
jump behind the error-code. The first question is now answered. How do I
get to this perception.... 



5. look for the place where the calculated number and the original number
get compared.

we already found this place... this is the place:
(I removed the commands in heXadecimal, to make a better overview)

:00449263             call 00449374
:00449268             cmp eax, dword ptr [0045FD1C]
:0044926E             je 0044929E
:00449270              cmp word ptr [ebx+2A], 0000
:00449275              je 00449281
:00449277              mov edx, ebx
:00449279              mov eax, dword ptr [ebx+2C]
:0044927C              call [ebx+28]
:0044927F              jmp 0044929E

:00449263 ... here the function that calculates the number is called.
:00449268 ... compare the number with the orig. number in [0045fd1c]
:0044926E ... jump behind the error-code if they are the same
:00449270 .... check out if ebx+2a is 0
:00449275.... if it is, go to the error-code
:0044927C ... call another function
:0044927F ... jump behind the error-code

6. change the optional jump into a jump
my first try was, to nop out the je 00449281 that brings me to the error-
code. (to nop = make a 'do nothing' out of a command). then the programme
should have compared the calculated number with the original number, then
it would have done nothing instead of a jump to the error-code and finally
it would have jumped behind the error-code and the programme wouldn't have 
terminated. But it wasn't like this. Instead of this I got another msg that
 said something like ACCESS-VIOLATION or something like that.

so i had another look at the code... and I got attentive to another optional
jump.      

    :0044926E             je 0044929E

this jump would also jump behind the error-code if something was true. but 
why don't change it to... jump always... even if there isn't something true 
;)  .

so I wrote down the heXcode of the command and the heXcode of the command 
before and behind of the je  (this was : 3B051CFD4500 742E 66837B2A00) then
I loaded the util9532.exe into a heXeditor, searched for the commands in 
heXadecimal and finally changed the 742E into a EB2E   

    (74 = je       EB = jmp).

if you start the programme now.... the bad message is gone!!!!  well done!
now you can go on and crack the rest of it.



if you don't want to go through the jumps and try what happens if you 
change them, there's another way (many other ways of course) you can look
 the jump you have to change up. another possible way is:

press CTRL-L to load the programme that is not changed in any way. (you 
have to load the project file first!). then look for the bad-msg in the 
STRING REFS. double click it, and go up to the jumps. set a breakpoint 
(F2) before the jumps. eg. on  

     :00449261 8BC3           mov eax, ebx

then run the program (F9).  it will stop at the breakpoint. then 'single 
step' through the jumps... you will recognise that you jump at   

     :0044926E 742E                    je 0044929E

then load the project file of a changed util9532.exe (the one that shows 
the bad message). set a breakpoint (F2) at the same location and run it. 
when the programme breaks at your breakpoint single step through it and 
look for the difference.... you recognise that you don't jump at 

     :0044926E 742E                    je 0044929E.  

so now you know what you have to do... don't you?   you only have to edit
the je ... change it to jmp like before.


so...  this should have been all the magic... :)
i hope you succeeded. but if you found any mistakes or if you have questions
... or better if you could tell me how these check-sums really work and how
to program them in C or asm ... please contact me at iarragon_lzo@yahoo.com
or on undernet  in #warez-n-crackz or #lzo 
/query heXc  thats me.


finally i would like to thank some people...
first of all my mother and my gal
then my mentor alphaVTx and nostradamus
lateron stoned_mo and the LineZerO - Crew

greez go to warez-n-crackz

							heXcrasher
=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=
<-------------------------\\LineZer0 Network 99//------------------------->