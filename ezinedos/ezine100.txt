   <-------------------------//<LzO> Network 99\\----------------------->
   crashercrashercrashercrashercrashercrashercrashercrashercrashercrasher
   c                             °°± ±²²                                c
   r                             °°±±±²²                                r
   a                 _____       °°± ±²²       _____                    a
   s                /   _ \___             ___/_    \                   s
   h          ____/    (_\|___|  °°±±±²²  |__|/_)    \____              h
   e                  (________| °°--    |_______) _.                   e
   r          ____ `   (______|  °°±±±²²  |_____)   ` ____              r
   c              \____(_____|             |____)____/                  c
   r                             °°  ²²                                 r
   a                               ±±                                   a
   s                             °°  ²²                                 s
   crashercrashercrashercrashercrashercrashercrashercrashercrashercrasher 
   <------------------------//<LzO> Network 99\\------------------------>

cracking a simple key check

hello folks....


i am iarragon<LzO> aka heXcrasher
i am a member of the LineZerO crew, an austrian crack and virii crew.
this here is the first article i write for our e-zine.
as i am a newbie in cracking, i' m writing this tutorial in order to
teach others that do absolutely not know how to crack a program and in
order to find someone that can teach me a better way of cracking this
program... so if you read this and think you know a better or just 
another way to crack this program, it would be cool if you sent me
a tutorial to  iarragon_lzo@yahoo.com    or to  lzo.crew@gmx.net  .
________________________________________________________________________

...ok... so let the games begin!!!

what are we going to crack is..

application:  	Hex Workshop V 2.00   -   32 Bit Version
by:   		BreakPoint Software



Hm... why did i choose this program???  because it is a nice hex-editor
that i often use to crack a programme.... and it is really easy to crack!
by the way... i learned how to find another entrance to a programme, even
if i don' t have a string reference.. (more to what this is later) :).



what are we going to need?
-> the programme itself!! you can find it on shareware CDs or on
   the web.
-> W32Dasm or any other disassembler. you can get it somewhere on the
   web.. but i suggest  http://beam.to/lzo   (its our page)  :)
-> then you will need a hex-editor... ups.. we alreade have one...
   but we will need another one too... get one from our page!!!
   hiew is really good!!!
-> hm.. if you want to crack, knowing the assembler language is really
   important. the better your knowledge is, the better you can crack.
   to learn the basics of the assembler language you should read the
   tutor of nostradamus<LzO>. you can get it on our page (beam.to/lzo)
   or somewhere on the web.
-> some kind of cool music.. i'd suggest tito&tarantula for relaxing..
   if you don' t succeed in cracking... you should later choose a faster
   and more aggressive kind of music.. NY hardcore will do i think... ;)

ok.. if you have everything we need, we can start now!
________________________________________________________________________


the first step i always make is to make two coppies of the file i want
to crack. in our case i would make a  orig_hworks32.exe and a hworks32.das
if i make a mistake in the programme i am cracking.. and i am making
a lot of mistakes when i am cracking i kill the wrong-patched file and
restore the orig_file.exe. and i use the file.das to load it in the
disassembler.

ok... my 2nd step would be to examine the programme. so start the 
hworks32.exe and click on help/registration.. you can read the how 2 
register form.. hm.. 20$.. this programme is 20$ worth i think... but
i just have enough money for a pack of lucky strikes... so... i won't
pay... hm.. what can we learn from the online help.. nothing i think
because it doesn' t say if the reg-key is calculated from a name or
something else... so let's go to the next step!

click on help/about hex workshop...
a dialog box pops up and wants to get a serial number...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SHORT GENERAL INFORMATION!!!

there are quite a lot of different kinds of reg-keys...
the most common type i think is that you have to enter your name
and a reg-key... then if you click OK the program calculates a
reg-key from your name and compares the original one with the one
you entered. another one is that there is a reg-key saved in the
programme itself.. you only have to enter the right key and the 
program is registered... there are some other methods of checking
the key.. but these are the most used ones i think...  if you crack
one kind of protections once.. you will be able to crack nearly all
other programmes that use the same protection, because most of the
programmers don' t really program new routines because they work
for money and not for the fact that something is done.. and so they 
use already made routines to check the validation of the key... so let's
use this..  (+ORC s tutorials teached me this..and this is the truth).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

in our case the programme wants to have a general key.. that means the
key isn' t calculated from our name.... ok... then go on and enter
a serial number....  i entered: sdjaljsdkl  .... if this was the right
key, i would be registered after pressing 'register'.. :( oh.. it wasn't.
instead of being registered i get a msg that says: You have entered an
invalid registration number. blah blah... registration.. blah blah...

so, now you should take down a note. write down the text you can see
in the box (eg. You have entered an invalid...) and the text in the
caption (eg. Registration Unsuccessful).

ok... now we load the programme in our w32dasm... i hope i don' t have
to explain how to do this... :)  disassembling your hexworks32.das file 
will take a few minutes... time to have a cigarette...

if it is loaded in your disassembler you should save it before you 
begin your work.... (you can read my w32dasm introduction if you want
to learn more about its debugger mode a.s.o...)

ok.. now go on..
remember the message you got, when you entered the wrong reg-key, and
click on the left button beside the printer button (or click on
refs/string data referenzes). here you can see (most of the time!) all
the messages of a programme. now look for the message we got!

:)...hm...:|...hm... :( .... but where is it.. i can' t find 'You
have entered an invalid...' and i even can' t find the caption 
'Registration Unsuccessfull'.... hm.. thinking... normally i can
find the 'wrong reg-key' message here and double click it to find
the function in the code... but now... hm ...

now we got some more different possibillities... we could look for
a string ref that says...unregistered or smth. else... but thers still
another way that sometimes works... click on search/find text and
enter 'Registration Unsuccsessful'. Then you will end up here.

006 - ControlID:FFFF, Control Class:"" Control Text:"Please enter 
     your name and organization to complete the registration process."
007 - ControlID:FFFF, Control Class:"" Control Text:"Organization:" 
Name: DialogID_0075, # of Controls=003, Caption:"Registration Unsuccessful"
     001 - ControlID:0001, Control Class:"" Control Text:"&OK" 

if you can' t read the line, on which you see the blue bar, just copy
it into a text editor... then you can see it.. i dunno why..maybe a bug?

here are stored the control ids of our programme... you don' t really
need to know what this is, to crack this... cause i also don' t know
exactly what it is.. i just know that here i can find nearly every
name of a function of hexworks32. ok... for us only the line that says:
Name: DialogID_0075, # of Controls=003, Caption:"Registration Unsuccessful"
is important. To find the location of this function in our dead listing
(= the things you see on the screen right now) you have to make a 2nd
search... but now for the dialog id.  ok.. we click on search/find text,
and enter 'DialogID_0075' and press enter....
_______________________________________________________________________

aaaaaannd  YEPPP we found it!!!   here lies the secret treasure!!!
but before we can continue... you should have a cigarette....

...ok..right.. you should see now something like:

* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:00412FCE(C)
|
:0041304D 6A00                    push 00000000
:0041304F 6A00                    push 00000000

* Possible Reference to String Resource ID=00001: "Hex Workshop..."
                                  |
:00413051 6A01                    push 00000001

* Possible Reference to Dialog: DialogID_0075  //YOU WILL END UP HERE
                                  |
:00413053 6A75                    push 00000075
:00413055 8D8D30FFFFFF            lea ecx, dword ptr [ebp+FFFFFF30]
:0041305B E8006E0000              call 00419E60 //CALL THE BAD MSG


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SHORT GENERAL INFORMATION!!!

now i will try to explain how easy protection schemes look like.
---------------------------------------------------------------
GOOD CODE
GOOD CODE
GOOD CODE
CALL A FUNCTION THAT COMPARES THE REAL KEY WITH MINE
IF MY KEY IS RIGHT THEN GO ON... ELSE JUMP TO BAD MESSAGE
GOOD CODE
GOOD CODE
GOOD CODE

BAD MESSAGE:
'YOUR KEY IS WRONG... PAY 100000$ TO GET THE RIGHT ONE.'
----------------------------------------------------------------
if you find this kind of protection it will be enough to noop it, or
to invert the jump. nooping is to do instead of a jump to bad message
doing nothing. inverting the jump means that if you have e.g. a 'je'
you make a 'jne' out of it. then the programme will jump to the bad 
message only if you enter the real key. 'fuck you' is very seldom a
real key, so we don' t care.

another possible simple protection scheme would be:
--------------------------------------------------------------
GOOD CODE
GOOD CODE
GOOD CODE
CALL A FUNKTION THAT COMPARES THE REAL KEY WITH MINE
IF THEY ARE EQUAL JUMP TO NEXT GOOD CODE ELSE GO ON
BAD CODE 
BAD CODE
BAD CODE
NEXT GOOD CODE
NEXT GOOD CODE
NEXT GOOD CODE
---------------------------------------------------------------
if the programme is protected by this kinda protection, it would
normally be enough to do instead of the e.g. 'je' a jmp.

but there are many many other protection schemes out there e.g. time
protection or smth. like this. i will explain other kinds of protection
in my next articles.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

in the case of hexworks32 we have the first type of schemes i tried to
describe above...  so how are we going to crack this??

as we know how the protection scheme generally works, we only have to
find the jump to the BAD MESSAGE...   and we are now in the bad message
function.

now we have to move up untill we find:
* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:00412FCE(C)

we have to move to 00412FCE now... you could scroll up to this location
or you could click on Goto/Goto Code Location   or press F12 and enter
the adress we found (00412FCE).

now you should be reached at
:00412FCA 837DF000                cmp dword ptr [ebp-10], 00000000
:00412FCE 0F8479000000            je 0041304D
:00412FD4 8B8D2CFFFFFF            mov ecx, dword ptr [ebp+FFFFFF2C]

what does this mean?
cmp dword ptr [ebp-10], 00000000000  //compare [ebp-10] with 0.
je 0041304D    //if [ebp-10] is 0  then jump to the 'bad message'.
mov ecx, dword ptr ...   //here continues the 'good code'.

what we have to do now is to kill the 'je' that brings us to the
'bad message'. we could make a 'jne' out of it, or we could make
some nops (nop = No OPeration) out of it....  nooping is not really
beautiful, but it will work here... (i will explain you some other
ways in another tutorial...but i am too tired today..).
______________________________________________________________________

ok let' s go and patch the programme  :)
but what you have to know first...

:00412FCE 0F8479000000            je 0041304D

:00412FCE is the address of the code you are at...
0F8479000000  is the je 0041304D command in hexadecimal...
je 0041304D  is the command in decimal (i think this is decimal)

so write down the command in hexadecimal... but not only of the command
you want to patch... also from the command before and after the one
you wanna kill...  i would write down

837DF000
0F8479000000
8B8D2CFFFFFF

why? because i have to get sure that this command is unique...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SOMETHING IN BETWEEN!!!
if you are using HIEW hex-editor it would be enough if you double-
clicked on the line you want to patch, then look on the lower end of
the W32DASM window, where you can read some infos... one of them is:
@Offset 000123CEh    so you would write down  123CE, load the 
hexworks32.exe in hiew... press F4 (if you aren' t in code-mode),
press F5.. enter 123CE  and see the  command you want to patch...
then you would press F3 to edit the file (but first close all running
copies of hexworks32.exe because if you did not you would get an error)
and then type 90 for every byte (=for every two digits) of the command.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

then we are going to load the hexworks32.exe in a hex-editor. (don't 
forget that you can't edit a running programme!!! ;) ) now we press
on search or something else and type in the hexcode of the funktion
we are looking for...  i type in 0F8479000008B8. when the editor
finds a location i press on find a second time... if it doesn't find 
another location i am sure that i am right.. else i compare the other
digits around my location...

ok...let's say you found it...  now you can see in the hexcode
83 7D F0 00 0F 84 79 00 00 00 8B 8D 2C FF FF FF ... what now???

you know that the command you want to noop is 048479000000...so noop it!
the hexadecimal number for the nop (=do nothing) operator is 90..
so you have to type in for every byte 90

04 84 79 00 00 00       this is 6 bytes....so 6 times 90
90 90 90 90 90 90	this now is 6 bytes of pure doing nothing ;)

so you now can enter every reg-key you want to and it should work,
because the jump to 'bad message' is no more...   ;)
________________________________________________________________________

ok... let' s go on and try!!!

start the hexworkshop32... press help/about hex...  and enter 
what you want to..  you could enter 'thank you heXcrasher that you
teached me how to crack' .. but you can enter everything you want :)!

press enter...  aaaaannnd???           <---IT WORKS---> !!!
yep!!  that's it...   you saved 20$ for a registration of the hexworks!!
and you got a new kewl tool too....

hm... wanna program a patch too???  you don' t really need one..why?
because if you look in the path where your hexworkds32.exe is, you
will now find a hexworks32.reg...  if you give this file to a friend
and he copies it into the path of his hexworks32.exe he will have a 
registered one too.   ;)
_________________________________________________________________________

ok.. that' s it for this lesson in cracking... look out for the other
<LzO> tutorials on the web... you will get them on our page at

http://beam.to/lzo    or  http://listen.to/lzo

and once again.. if you know a better way to crack this proggy... contact
me please...
_________________________________________________________________________
-------------------------------------------------------------------------

i want to thank some people here...

-  my mom...  thank you for the computer :)
-  <LzO>..  kewl crew... 
-  jack twoflower<LzO>..  i hope you like this tutor 
-  flashKid<LzO>...  finish our homepage please!!!!
-  nostradamus<LzO>..  i am looking forward to our 2men sub-crew ;) ;)
-  all the other <LzO>memberz and trial memberz.
-  all the people that write tutorials... thanks for teaching me!!!

some greez to

-  the U.D.E .. i hope we can work together in future...
   
_________________________________________________________________________

visit the following links.. they are really kewl...!!!

http://surf.to/ude            ;my favourite german hackerz
http://astalavista.box.sk   ;search engine for hack crack virii 'n stuff
http://www.crackstore.com    ;THE cracking page...

search on the web for the 'kings library' this is really cool!!  i want
to thank the creator of this page too!!!  good work!!!
_________________________________________________________________________

OK  I THINK THAT'S ENOUGH FOR THE FIRST TUTOR... I HOPE YOU ENJOYED IT
AND I DIDN'T EXPLAIN THE THINGS TOO COMPLICATED ;) ....

IF YOU HAVE ANY QUESTIONS OR IF YOU WANT TO GET A MEMBER OR 
WHATEVER .... just contact me or someone from our crew at

iarragon_lzo@yahoo.com       or     lzo.crew@gmx.net   !!!!!