-----BEGIN PGP SIGNED MESSAGE-----


             NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_N
             uK                                               Nu
             KE     "The SSAVI Complete Descrambling Guide"   uK
             E_                                               KE
             _N                     by                        E_
             Nu                Rock Steady                    _N
             uK                                               Nu
             KE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuKE_NuK

NuKE Info-Journal #8
April 1994

[FeedBack]

[This article was somewhat rushed for this info-journal. For the first half
 of this article I did have access to a friend's (Peter) scope, to get the
 first half this circuit working. Unfortunately the second half is only on
 theory, with no circuit design, as I didn't have access to a scope. Though
 I will soon have access to a scope, thanks to Silent Shadow, and the
 company we resently formed. Though rather than delaying this Info-Journal
 and having everyone in NuKE 'kill' me. (Right Screaming?) I have released
 this as is. You do have the info to continue it, though knowledge of 
 electronics is required. But I will publish a COMPLETE Descrambling system
 for Cable & Satelite next IJ. Sorry about this. -RS]

The SSAVI System

An Introduction to Cable Descrambling

This article before you has been in the making by myself, Rock Steady, for
the last 6 months. The amount of research and time spent on this topic of
cable descrambling has taken up a great deal of my time. It has resulted in
a tremendous collection of documents and articles, and a better understanding
of the topic. Due to the Copyright Protection Act, where excerpts have been
used, I did limit myself not to use more than 10% of any one publication.
This article should depict NuKE's everlasting thirst for the limitless sky
of self-knowledge, and for freedom of press, along with freedom of
information.

Right out, I should thank the unknown person I know as "Peter". Whom I 
promised to mention for his generous helping hand on this subject, and for 
letting me use his amazing 100Mhz dual-channel scope. (Boy what I'd kill for 
one of those.) Also for this project you will need to have access to an EPROM
burner, and an EPROM chip, any of the 27XX should do fine, but  don't forget
to ground any unused lines from the EPROM you choose to use.

BOOKS

If this is your first circuit on cable descrambling, I suggest two very good 
books, which I found to be a very advantageous source of knowledge.  The 
book from SAMS that is mentioned on the bottom, was published in 1986, 
but don't get it wrong, it is by far the best book I've seen, and the same
is echoed by many others whom have read it.

Phase-Locked Loops     Video Scrambling & Descrambling for Satellite & Cable
TV
by Signetics                        by SAMS   (ISBN:0-672-22499-2) 
(408) 991-2000                     can be found in any electronic store.

Satellite & Cable TV Scrambling & Descrambling - 2nd Edition
by Brent Gale and Frank Baylin    (ISBN:0-917-89307-7)
Baylin Publications, 1905 Mariposa, Boulder Colorado 80302

NOTE

A little tip for those living in my area, Montreal, if you subscribe to 
Videotron Inc. as your cable company you will be pleased to know that they 
are using this method of SSAVI scrambling. Those subscribing to CF-Cable 
should also be please to know that CF-Cable is not using this advanced 
method of scrambling, they are still using a very old technique of gated 
pulse decoding, and can be decoded using old convectional equipment. And 
for the rest of you, it is _very_ likely that your cable company uses SSAVI, 
right now the method of scrambling for cable is SSAVI for almost all parts 
of USA & Canada. Also, this circuit is limited to those that use the NTSC 
standard of televisions, amongst them are Argentina (some), Brazil, Canada, 
Chile, Columbia, Cuba, Japan, Mexico, Netherlands Antilles, Panama, Peru,
Philippines, USA, Uruguay.

FEEDBACK

This article actually started on a 'double-dare' encounter with some of my 
remote family relatives during the christmas of 1992, after I helped some of 
these 'family-men' make a few free long distance calls to some family in 
Italy, they inquired me about my anarchist personality. Being the very 
"modest" type :-), I somehow blurted out, that no pile of microchips can stop
me, and thus I was confronted with their problem of how they recently loss 
their premium cable channels, as their old decoders no longer functioned. 
Until six months did I embark on my intellectual challenge against cable 
descrambling.

To begin with, cable companies up here tend to have these outrages charges, 
if you own two TVs and wish cable on both, you need to subscribe to, TWO 
cable feeds. Many of us today have more than one TV in our home, heck it's 
wise to say that there is a television set for every member of the family!
The phone company used to do the same thing some years ago, in fact anyone
who added an extension phone on his own risked life imprisonment or even 
worse, being regarded as a not-nice person in the eyes of MaBell. That went
all out the window years ago, and perhaps with people like us outsmarting 
the cable people, it will be a matter of time for the same to happen here. 

One of the most annoying part of the cable system is the whole business of 
sending me scrambled signals, and then telling me I can't do anything with 
them! If the cable companies don't want me to get a particular channel (cuz 
I'm not paying for it), then don't send it to me. Tap it out of the line
before the cable comes into my home.

I Agree that the signal coming into my home is the property of the cable 
company, but at a certain time the real ownership of the signal becomes less 
clear. When the signal enters my TV and is reduced to a baseband of video 
and has spend lots of milliseconds running around the inside of my TV set,
I think the ownership is alot weaker. Personally once my TV set reduces the 
RF and disassembles it to where it no longer is the same state that the cable
company sent me, ownership ties should die completely. And what if I were 
to record that new signal, and later decided to descramble it? 

What if I built a scrambler box to scramble some of the channels currently 
sent to me in the clear? What do you think the cable company would say? 
Frankly I doubt they would care. Therefore if they wouldn't care if I were
to scramble it, why should they care if I descrambled it? I think I have a
right to electronic components, I also am buying that signal being sent to
me. Scrambled or not I should be able to do what I wish. The cable company 
doesn't regulate how I use the cable line, so why should they care if I 
descramble it? Anyhow  you pretty much get the deal on what I think about 
this, now on to the main attraction.

SSAVI Signal

Compared to old systems of scrambling like the sinewave or gated pulse 
systems, these were concrete, signals that never changed scrambling method, 
and recovery was quite simple too. Unlike the SSAVI which stands for 
Synch Suppression And Video Inversion, uses a more sophisticated system 
which uses a dynamic scrambling algorithm. This system has four modes of 
operations, which are;
     1. Suppressed synch and inverted video
     2. Suppressed synch and normal video
     3. Normal synch and inverted video
     4. Unscrambled operation.
Don't expect to see #4 too often, that is only when the cable company 
advertise their weekend free-bees, to con you into subscribing to the
channel. But normally a SSAVI system will use the first 3 methods randomly,
and tend to change every so many frames. So the signal is dynamic and tend
to give bootlegged scramblers a very tough time. 

SUBSCRIBER CODING & SECURITY

A normal frame of NTSC consists of 263 horizontal lines of video. The first 
10 lines (0-9) fit into the normal vertical blanking intervals. Lines 10, 11 
and 12 are used to transmit subscriber code numbers. The SSAVI decoder 
contains logic for the prevention of unauthorized use of the decoder in 
another area or another service. The subscriber code number is matched 
by the logic in the decoder with a code stored in a PROM. or EPROM. Line
13 is used for checking the incoming market code with the code stored in the 
E/PROM.  Basically this coding feature prevents a decoder stolen in New 
York, for instance, from working in another area. Also it permits the 
subscriber to be 'shut off'. Every month or so, the cable company does a 
'count-down' of their subscribers, basically every box has its own unique ID,
and the company counts you down, they'll send signals telling decoder with ID
000001 to decode only channel  33,  decoder ID 000002 to decoder only 
channel 43, ..., and at the end they request all other decoders not mentioned
to turn themselves off! So if you don't pay that cable bill expect to be
'turn-off' immediately, not as before whereby you had to return the box. 

Well this is what makes the SSAVI system so attractive to all cable 
companies. Its something I've learned to expect from up-tight business guys 
going only for that buck in your pocket, rather than spending more time in 
improving quality on picture or sound.

BASIC OPERATION OF SSAVI

All lines from 27-260 are scrambled. The 261 and 262 lines and 0 to 26 are 
not scrambled. But there are a few things that need to be known about the 
SSAVI system, as its important to outline what we will be doing. 

First thing, is that the horizontal sync is never inverted, (ref:
SSAVI-1.GIF) even if the picture is. This means that any circuit designed
needed to descramble it has to separate the two basic parts of the video
line, (control and picture). The SSAVI system seems even more complex when
you realize that the job of separating control and picture has to be done on
lines that might very well have no horizontal sync pulse that can be used as
a reference mark. 

The key to regenerating the video is based on mathematics, whereby all 
aspects of the video are tied together with. Meaning if you can locate one 
part of the signal you can determine the locations where everything else has 
to be. 

Now, remember that the first 27 lines are sent unscrambled, well with PLL 
(Phase Locked Loop) we can identify and lock onto a known point in the 
signal, which we'll use counters and other digital logic to keep track of 
where everything is supposed to be. 

HORIZONTAL SYNC

Suppression of the horizontal sync is a simple, inexpensive, and relatively 
safe way to keep "unauthorized" viewers from receiving a coherent signal. 
The first thing we have to do is isolate the sync from the rest of the
signal. That actually isn't hard, every TV in the world can do that! But many
TV makers tend to use a discreet sync separator chip or have that circuit
buried in another custom made chip, it naturally makes cost cheaper for the
TV makers, but its murder for people like us who have a hard time buying the 
chip in single quantities. 

But there's a simple solution to this problem that many engineers have 
missed, but Robert Grossblatt suggested using TTL logic. In fact TTL logic 
is a brilliant solution to separate the H-sync. (Refer to SSAVI-1.GIF) Now 
Standard video has a very strict voltage divisions; basically everything 
above 0.3 volts is picture related information and everything below 0.3 volts
has to be control signal.

Now we have a 5-volt supply and a signal voltage with a 0.3-volt knee, now 
with standard TTL logic everything below 0.8-volts is low, which is 
somewhat what we are looking for. 

A video signal is 1-volt peak-to-peak, but by buffering it, the relative 
voltage level of the signal is raised by 0.5 volts. So instead of ranging
from 0-1 volt, the signal ranges from 0.5-1.5 volts. And the 0.3 volt knee
is now 0.8 volts! (Bingo) 

The bottom line is that we can build a sync separator from a standard TTL 
gate, in this case we used a 7486 eXclusive-OR (XOR) gate. Looking at  
SSAVI-2.GIF the video is inputted to a transistor (2N2222) which acts as a 
video buffer to pull the video up 0.5 volts, and then that goes into the TTL 
XOR gate which removes the H-sync from the composite video signal! 
(Well actually the output is an inverted version of the H-sync, nevertheless 
the sync has been separated)

VIDEO INVERSION

There's also a piece of information I forgot to mention concerning Video 
Inversion. Remember that the picture can be messed up in any of three ways, 
and the instructions for the descrambler are transmitted somewhere in the 
vertical interval. (lines 0-26) Since the video can be transmitted with
either normal or inverted picture information, one of the tasks that has to
be done by the descrambler is to tell the rest of the circuit what has been
done to the picture. The place to find that information was originally in
line 20, but it has been moved around since the system became popular. Rumour
has it that they sometimes use line 21 or 22, but in my area I have still
noticed it to be on line 20. That can change of course, and you can find out
by putting the signal through a scope. And reset the line 20 detector and
sampler circuit, which isn't too hard. A trial and error method can be used,
as you only have a few possibilities, but at the moment this bit of
information is constant. (Thank god) If it were to move between lines every
so many frames, it would make our job _extremely_ difficult. But that so far
hasn't happened.

Chances are its still on line 20, so we'll continue the circuit with that 
assumption. If the field of line number 20 is normal, whereby the last
half of the line will be black, then the picture will not have the colours 
inverted. However if the whole field was white, then the picture will have
its colours inverted. So one of the things our decoder will need is some way
to detect the line and store the data it contains. The stored data will be
used as a switch by the circuit to route the video through an inverter if the
picture is being transmitted upside down. (Inverted)

This is pretty much pretty straight forward, all we need know is some sort
of way to identify the line. Remember the PLL circuit locked onto the line(s)
being transmitted, but it does not go any further to identify the line number
we are at. Which will need to do. You might be wondering what can we count?
But remember that I said that line numbers 0 to 9 were the VERTICAL sync
pulses, this is exactly what we will use.

VERTICAL SYNC

In every frame of video you have a vertical and horizontal sync, these syncs 
help a line the frame of video correctly on your set. If your horizontal sync
were missing you'd get a tearing up of the video, this is because your TV set
knows that the horizontal sync is the black line of video in each frame, when
that blank indicator is gone, it chooses the lowest point in the picture
signal, and thinks that it _must_ be the horizontal sync as its always the
lowest or black colour indicator, and resets that to the beginning of the
left side of the screen, and continues onward with a 63.5 microsecond
interval per line of frame. Naturally the colour burst is not found and
colours are distorted as well. 

But the vertical sync is what helps frame not roll away. You know that 'V-
HOLD' adjustor on old TV sets, that let the frame roll? Well that's what 
happens when the vertical sync is not present. 

But the FCC ruled that the cable companies cannot mess with the first 10 
lines, which hold the vertical sync, so therefore we will use the vertical
sync pulses to adjust our binary counters to, so we can correctly identify
line number 20, and test for video inversion. 

The way to do that should be obvious when you look at the composite sync
waveform, just as it's supposed to be, vertical sync is the most negative
part of the composite sync. To isolate the vertical sync, we need a simple
low-pass filter. The two gates after the filter clean up the sloppy waveform
produced by the R-C circuit. You'll notice that CMOS 4049 inverters square up
the shoulders of the waveform.

PLL LENDS A HAND

Once upon a time, when gated sync was the last word in video signal
scrambling, it was relatively easy to descramble the system, as there were
two constants you could count on. The first was that the missing horizontal
sync pulses were recoverable from information that was buried elsewhere in
the RF signal. The second, more subtle, constant was that the horizontal sync
pulses were always missing from each line of video.

The SSAVI system makes this part of the  descrambling process a bit more
difficult. Our job is to come up with some way to generate horizontal pulses
only when they're needed. Not only that, but we have to be sure that the
pulses we create are placed correctly on each line, and are produced at the
exact same rate as the horizontal frequency of the incoming scrambled video
signal. This sounds like an insurmountable design problem, but in fact, it's
not really that difficult. The key to the design is the use of phase locked
loop, or PLL.

The phases-locked loop we'll be using is the old 4046. The frequency of the
VCO is determined by the RC constant of the resistors at pins 11 and 12,
and the capacitor between pins 6 and 7. A second factor affecting the VCO
(Voltage Controlled Oscillator) is the control, or error voltage on pin 9.
The VCO will stay in sync with the input frequency that's applied to pin 14.
If you put a divider circuit between the VCO output on pin 4 and the
comparator input on pin 3, the VCO frequency will be the input frequency
multiplied by whatever value you're using for the division.

The VCO base frequency is set at 504kHz. That frequency is an even multiple
of the standard horizontal scan rate (15,750Hz x 32). Also a 504kHz signal
has a period of 1.98 microseconds. By using five consecutive count states
of a divide by 32 counter, a 9.92 microsecond pulse can be produced. This is
very close to the 10.7 microsecond blanking pulse. During the vertical
interval, we get 26 usable horizontal sync pulses from the broadcast signal.
When line 27 comes along, the picture starts and the horizontal sync is
missing. But because the VCO is still running, the divider produces a
horizontal sync signal. The pulse is fed back to the input video amplifier
and injected into the video signal so that line 27 is displayed correctly
on the TV.

The next thing we need is a divide-by-32 counter to complete the phase-locked
loop section of the circuit. The divide by 32 circuit, will be kept as
simple as possible with the use of a binary counter, the 4040 binary counter.
It's a ripple counter, so don't use it for applications where super accuracy
is required. Remember that a ripple counter is a bunch of sequential
counters, and each internal stage uses the output of the preceding stage as
an input. This means that the outputs change in sequential order, and an
incorrect count will be present briefly on the pins. Since the problem is
caused by the propagation delay of each counter stage, the duration of the
incorrect count on the outputs is, by and large, a function of the clock
speed.

The 4040's clock input is fed with the 504kHz signal generated by the 4046,
and we're using a series of gates to decode the count and provide horizontal
blanking and some other timing signals needed for the descrambler.

The remaining problem to deal with is turning off the generated sync pulses
during the vertical interval when real transmitted sync is present. To do
that, we have to count the lines of video as they're received and make sure
that transmitted sync is processed for the first 26 lines of each frame. The
starting point for the count is the vertical sync signal and, as you recall,
we've already isolated the signal. The sync separator we built earlier
produces a positive-going version of vertical sync. If we use the rising edge
of that signal as the zero point for the counter, we have to count a number
of lines to reach the point where the lines of video are carrying picture
infomation and are therefore scrambled.

The two lines in the frame that mark the beginning and end of the
transmitted horizontal sync are 260 and 27. We need a circuit that can count
the received lines and let the rest of the descrambler know when to use
received horizontal sync and when to use the artificial sync generated by the
phase-locked loop. The zero point for the counter will be the rising edge of
our vertical sync signal. Since that occurs at line 3, we have to decode a
count of 24 and 257.

We can use a 4040 to do that job as well. When the counter reaches 24 we have
to enable a gate that will send the phony horizontal sync pulses to the video
amplifier at the circuit's input. When we get to a count of 257, the gate has
to be disabled to let the real horizontal pulses through to re-sync the
phase-locked loop circuit. Decoding those two numbers is a pain in the neck
since it involves watching nine counter lines. The tricky part of the design
is that the decimal 257 is 100000001 in binary code. That means we need a
counter/decoder that can handle nine lines. The 4040 can output the correct
count, and for the decoder, the EPROM's extra available address lines have
to be tied to either power or ground.

         EPROM CHARACTER GENERATOR CHART

 Line    EPROM    D   D   D   D   D   D   D   D    Hex
Numbers Address   7   6   5   4   3   2   1   0   Byte

  001     000     0   0   0   0   0   0   0   1     1
  002     001     0   0   0   0   0   0   0   1     1
  003     002     0   0   0   0   0   0   0   1     1
  004     003     0   0   0   0   0   0   0   1     1
  005     004     0   0   0   0   0   0   0   1     1
  006     005     0   0   0   0   0   0   0   1     1
   .       .      .   .   .   .   .   .   .   .     .
   .       .      .   .   .   .   .   .   .   .     .
  024     017     0   0   0   0   0   0   1   0     2
  025     018     0   0   0   0   0   0   1   0     2
  026     019     0   0   0   0   0   0   1   0     2
  027     01A     0   0   0   0   0   0   1   0     2
  028     01B     0   0   0   0   0   0   1   0     2
  029     01C     0   0   0   0   0   0   1   0     2
   .       .      .   .   .   .   .   .   .   .     .
   .       .      .   .   .   .   .   .   .   .     .
  257     080     0   0   0   0   0   0   0   1     1
  258     081     0   0   0   0   0   0   0   1     1
  259     082     0   0   0   0   0   0   0   1     1
  260     083     0   0   0   0   0   0   0   1     1
  261     084     0   0   0   0   0   0   0   1     1
  262     085     0   0   0   0   0   0   0   1     1
=========================================================

After the EPROM we need a sync switcher, to switch from the fake generated
sync from the transmitted horizontal sync, in lines 261 and 262 and 1-26.
The sync switcher we need is really just an electronic version of a
single-pole double-throw switch, and the easiest way to put one of them
together is to use a 4066.

BACK TO MORE THEORY

Let's go over the general SSAVI theory for a minute. In the SSAVI system,
there are two parts of the video signal that gets messed up: the first is
the horizontal sync pulse and the second is the polarity of the picture
portion of each individual line of video. All the circuitry we've been
developing so far has been aimed at taking care of horizontal sync. The
circuitry has become a bit complicated, but we now have a new way to generate
sync even if it has been left out.

Now let's address the problem of inverted video. When we first started this
project, we mentioned about how the SSAVI system encodes information about
the polarity of the next frame of video. The original SSAVI system buried
this information on line 20. Now that we have circuitry to count the lines
of video, it's a piece of cake to signal the arrival of line 20 and examine
it.

When we built the divide-by-32 circuit, we added some gates to the output of
the counter to create a pulse that was approximately equal to the transmitted
horizontal blanking pulse in both polarity and width.

Since we can identify the beginning of the horizontal blanking pulse, we
can use the 504kHz clock pulses to sample the video at any 1.98 microsecond
multiple along the line. All we have to do is use the arrival of the
horizontal blanking pulse (its falling edge) as a starting point, count the
desired number of 504kHz pulses, and sample that video to get the DC levels
we want. Picking the points to sample for black and white DC levels is
critical because they're needed to keep the picture brightness from changing
when the signal switches between normal and inverted video.

The best line to use for this sampling is the same one that tells us whether
the video is going to be inverted or not (line 20). The black level can be
read from the back porch, and the correct white level can be gotten from the
first half or so of the picture portion of the line (immediately after the
rising edge of the horizontal blanking pulse).

Because the clock pulses from the phase-locked loop are slightly less that
2 microseconds (1.98) wide a single pulse sample can be taken four clock 
pulses after the leading (falling) edge of the horizontal blanking pulse to
lock in the black level. The clock pulses after the end of the horizontal
blanking interval (the rising edge of the pulse); it can be as much as four
clock pulses wide. 

After using line 20 to establish the correct DC levels for the following
frame, we have to sample a portion of the last part of the line to see
whether the picture will be inverted or not. A reasonable location to pick
is about 50 microseconds into the line, which would be some 25 clock pulses
after the leading edge of the horizontal blanking pulse. If the sample taken
is high, we know that the next frame is going to be inverted, if the sample
is low, the frame will be normal.

All this may sound complex but, if you think for a moment, you'll realize
that most of the needed circuitry has already been designed. The low-order
output (pin 9) of the 4040 that's counting the 504kHz pulses from the
phase-locked loop is giving you a series of 2-microsecond pulses, and the
gates hanging off the 4040 outputs are producing a synchronous analog of the
horizontal blanking pulse. To sample the line as I just described, all you
have to do is detect the leading or trailing edge of the blanking pulse
(whichever one you need), count up to the appropriate number of 
2-microseconds pulses, and sample the video line.

All the signals you need to determine the DC levels and polarity of the 
following frame can be obtained by decoding the outputs of the 4040. That can
be done using the same techniques we used earlier to recreate the horizontal 
blanking pulse. Since the period of a line of video is about 64 microseconds,
and we have a clock pulse with a period of 2 microseconds, we can think of 
each video line as being divided into 32 segments. By counting and decoding 
properly, we can examine any segment of the line in any 2 microsecond 
multiple width. The polarity sample, for example, would be a 4-microsecond 
(2 clock pulse) segment taken 25 clock pulses after the 4040 has been reset 
to zero. That will also mark the beginning of the decoding horizontal
blanking interval.

Once the polarity sample has been taken, the same technique used to switch 
between generated and transmitted sync can be used to correct the video 
polarity if we find that it's been inverted. The two unused switched in the
4066 have to be configured, once again, as a single pole, double-throw
switch. The output of the gate that reflects the state of the polarity sample
triggers a set/rest flip-flop that, in turn, toggles the SPDT switch. 

The output of the amplifier at the front of the circuit contains both the 
received video and, except during the vertical interval, the generated
horizontal sync signals created to stabilize each line of video. If the
polarity wasn't a problem, we could send the signal off to the output stage
of the descrambler and then directly to the back of  a TV set.

Since the "VI" part of SSAVI stands for "video inversion," we have to have 
available an inverted version of the video as well. The received video with
the corrected horizontal sync pulses is sent through an inverter that's built
in exactly the same manner as the single-transistor buffer at the front of
the decoder. This inverted version of the video is sent to one side of a
polarity switch, and the plain video is sent to the other side of the switch.
Each signal has its horizontal interval corrected by the circuitry that was
designed to restore the sync signals.

The flip-flop built to indicate the presence of either normal or inverted
video controls whether the normal or inverted video is routed to the
descrambler's output. 

Even though the descrambler's circuity seems to have grown at an alarming 
rate, its overall operations is not hard to understand. If you've been
following this from the beginning, you should have a pretty good handle on
what's going on. We've regenerated horizontal sync and created a signal to
tell us if the picture has been inverted. At the descrambler's output, we're
using an electronic switch to make sure the video sent to the back of your
TV set always has the correct polarity. This has been by decoding the state
of the transmitted video from line 20, and using that information to channel
either a straight or an inverted version of the sync-restored video to the
output of the descrambler. 

The last piece of hardware business comes up because the horizontal sync is 
_never_ inverted in the SSAVI system. Since the first thing we did to 
unscramble the video was to restore the horizontal sync pulses, the video 
coming out of our inverter (the video being sent to the invert side of the
4066 switch) will have the entire horizontal interval inverted as well.
Fortunately, this is pretty easy to correct. We have to make sure that during
the horizontal interval, only the non-inverted video is routed to the
descrambler output. 

The way to accomplish this is to gate the output of the polarity indicator
(the flip-flop) with the horizontal blanking pulse. We want the normal video
signal sent to the descrambler output during the horizontal blanking
interval, regardless of the polarity of the video signal.

When you've building a SSAVI descrambler like this, there are a few rules to 
keep in mind as you work your way through the design. We've gone over all of 
them, but listing them out will make it much clearer:
        1. Since the vertical is always sent in the clear, the descrambler
           has to be disabled for this period of time.
        2. During the horizontal interval, the transmitted video signal 
           must be sent to the descrambler output.
        3. If you don't have a scope, you won't be able to build a SSAVI, 
           or any other video descrambler.

Anyhow good-luck, and do bug me if you encounter any problems, I'm not a genuis
in electronics (yet), but your input is _greatly_ accepted.

-----BEGIN PGP SIGNATURE-----
Version: 2.2

iQCVAgUBLfmmdE0EOTLgG0HDAQGXsQP7B1l2QGdz3mhwJz7AW263WcKy97mFUx0C
KK1V/a9Rqmv1YxnORAEpbiEWLyrtYy+sv0kL5ptemBA8absumR/ZRxOirmvgT924
9LzEXldbfAjvTPhPPADwqIzC3XSaogn4Wz9UOe7UoFxAHFKHxyMq4ZHKA0WDU2uK
OBosvDAL0So=
=EEOx
-----END PGP SIGNATURE-----
