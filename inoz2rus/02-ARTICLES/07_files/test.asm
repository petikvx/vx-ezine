include	sbvclib/sbvclib.mac

.386
.model flat

extrn  ExitProcess:proc		; нужно что б импорты из кернеля были

.data
	dd	?
.code

;---------------------------------------------------------------------------
; -- Начало --
;---------------------------------------------------------------------------
start:

;---------------------------------------------------------------------------
; -- Выделяем память под временные переменные --
;---------------------------------------------------------------------------
    push	size BelmaGlobalVars
	push	MemMallocFlags
	callK32	GlobalAlloc
	mov		EBP, EAX

;---------------------------------------------------------------------------
; -- Надо найти адреса некоторых фенкций для работы с памятью --
; -- и заполнить структуру BelmaGlobalVars в EBP --
;---------------------------------------------------------------------------
	GetProcAdres GlobalAlloc
	mov		[EBP.MAproc], EAX	
	GetProcAdres GlobalFree
	mov		[EBP.MFproc], EAX	

	mov		[EBP.CStart], offset start
	mov		[EBP.CLen], endstart-start

;---------------------------------------------------------------------------
; -- Дизассемблируем код и составляем список --
;---------------------------------------------------------------------------
	call	Belma_Dizasm
	cmp		[EBP.Head], 0
	jz		Error_Fuck

;---------------------------------------------------------------------------
; -- Мутация --
;---------------------------------------------------------------------------
; 
; Если бы это был вирус, то тут надо было бы вставить сложный кусок
; кода, который бы извратил список до неузнаваемости!
; Но в данном случае тут после каждой команды вставляется два NOPа
;
;---------------------------------------------------------------------------
	; Выделяем немного памяти
	push	16
	push	MemMallocFlags
	call	[EBP.MAproc]
	push	EAX

	; Перезаполняем временные переменные
	mov		[EBP.CStart], EAX	
	mov		[EBP.CLen], 2

	; Строим в памяти код, который будем вставлять после каждой команды
	mov		1 ptr [EAX], 90h
	mov		1 ptr [EAX+1], 90h

	; Делаем пробег по списку
    mov		EBX, [EBP.Head]
CiklPoKomandam:    
    mov		EDX, [EBX.INext]
    or		EDX, EDX
    jz		CiklPoKomandam_End
	mov		[EBP.TempVar], EBX

	; Делаем вызов процедуры вставки...
	call	Belma_Insert
    mov		EBX, EDX
    jmp		CiklPoKomandam
CiklPoKomandam_End:
	; Освобождаем память
	call	[EBP.MFproc]

;---------------------------------------------------------------------------
; -- Выделем временную память под код --
;---------------------------------------------------------------------------
	mov		ECX, [EBP.ComNum]
	shl		ECX, 4
	push	ECX
	push	MemMallocFlags
	call	[EBP.MAproc]
	mov		[EBP.CStart], EAX	

;---------------------------------------------------------------------------
; -- Асемблирование списка, т.е. полность собираем рабочий, --
; -- отпермутированный код --
;---------------------------------------------------------------------------
	call	Belma_Asm


;---------------------------------------------------------------------------
; -- Итак, на данном этапе мы имеем в [EBP.CStart] смещение на код, --
; -- который является полным нашим аналогом, но уже изменённый, и --
; -- в [EBP.CLen] его новая длина. Т.е. если бы это был вирус, то --
; -- мы этот код записали бы во все найденные нами жертвы....... --
;---------------------------------------------------------------------------	

	
;---------------------------------------------------------------------------
; -- Освобождаем временную память из под кода --
;---------------------------------------------------------------------------
	mov		EAX, [EBP.CStart]
	call	[EBP.MFproc]
	
;---------------------------------------------------------------------------
; -- Освобождение памяти из-под списка --
;---------------------------------------------------------------------------
	call	Belma_FreeList
 
;---------------------------------------------------------------------------
; -- Освободим память из под временных переменных --
;---------------------------------------------------------------------------
	push	EBP
	call	[EBP.MFproc]
	
;---------------------------------------------------------------------------
; -- Конец --
;---------------------------------------------------------------------------

	; Бипнем весело на последок! :)
    push	13
    push	1760
	callK32	Beep

Exit:
    push	0
    callK32	ExitProcess

Error_Fuck:
	; Бипнем грустно, если нам не удалось таки отдизасмить наш код
    push	100
    push	55
	callK32	Beep
	jmp		Exit
    

include	sbvclib/sbvclib.inc
include belma.inc
endstart:
end start