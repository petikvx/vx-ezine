; Набор функций для релизации пермутации Belma v1.0  by SBVC (20.08.2002)

include alma.inc

MemMallocFlags	=	40h

Item	struc
    INext	dd	?	; Next
	IFlags	db	?	; Flags
					; 1-Jmp
					; 2-Labels
					; 
					; else- nothing = 0
	ICmdAdr	dd	?	;
	ITo		dd	?	; only for jumps!
	ICI		ComandInfo ?
Item	ends

BelmaGlobalVars	struc
	MAproc	dd ?	; Адрес процедуры выделения памяти
	MFproc	dd ?	; Адрес процедуры освобождения памяти
	CStart	dd ?	; Начало кода
	CLen	dd ?	; Длина кода
	Head	dd ?	; Голова списка
	ComNum	dd ?	; Количество команд в списке
	TempVar dd ?	; Переменная, использующаяся в различных целях
	TempVar2 dd ?	; Переменная, использующаяся в различных целях
BelmaGlobalVars	ends

access_edi	equ	(dword ptr 0*4)
access_esi	equ	(dword ptr 1*4)
access_ebp	equ	(dword ptr 2*4)
access_esp	equ	(dword ptr 3*4)
access_ebx	equ	(dword ptr 4*4)
access_edx	equ	(dword ptr 5*4)
access_ecx	equ	(dword ptr 6*4)
access_eax	equ	(dword ptr 7*4)

;---------------------------------------------------------------------------
; -- Выделяет один элемент списка --
;---------------------------------------------------------------------------
Belma_AllocOneElement:
;OUT:
;	EAX = адрес выделенного элемента
	pusha
    push	size Item
	push	MemMallocFlags
	call	[EBP.MAproc]
	mov		[ESP].access_eax, EAX
	or		EAX, EAX	
	popa
	ret
;---------------------------------------------------------------------------
	
;---------------------------------------------------------------------------
; -- Выделяет память --
;---------------------------------------------------------------------------
Belma_AllocMem:
;IN:
;	ECX = колличество необходимой памяти
;OUT:
;	EAX = адрес выделенного элемента
	pusha
    push	ECX
	push	MemMallocFlags
	call	[EBP.MAproc]
	mov		[ESP].access_eax, EAX
	or		EAX, EAX
	popa
	ret
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; -- Освобождает один элемент списка или просто память --
;---------------------------------------------------------------------------
Belma_FreeMem:
FreeOneElement:
;OUT:
;	EAX = адрес выделенного элемента
	pusha
	push	EAX
	call	[EBP.MFproc]
	popa
	ret
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; -- Дизассемблируем код и составляем список --
;---------------------------------------------------------------------------
Belma_Dizasm:
Belma_Step1:
;IN:
; EBP -> Заполненая структура BelmaGlobalVars:
;			MAproc	dd ? - адрес процедуры выделения памяти
;			MFproc	dd ? - адрес процедуры освобождения памяти
;			CStart	dd ? - начало кода
;			CLen	dd ? - длина кода
;
;OUT:
; В структуре BelmaGlobalVars в поле Head указатель на начало списка, или 0,
; если ошибка, а так же в поле ComNum количество команд в списке.
;---------------------------------------------------------------------------
 db 060h, 0E8h, 0D4h, 0FFh, 0FFh, 0FFh, 00Fh, 084h, 086h, 000h, 000h, 000h
 db 089h, 045h, 010h, 08Bh, 04Dh, 00Ch, 08Bh, 075h, 008h, 051h, 029h, 00Ch
 db 024h, 092h, 08Dh, 07Ah, 00Dh, 0E8h, 092h, 0E9h, 0FFh, 0FFh, 072h, 077h
 db 0E8h, 0B1h, 0FFh, 0FFh, 0FFh, 074h, 070h, 089h, 002h, 089h, 072h, 005h
 db 050h, 08Ah, 047h, 025h, 03Ch, 0C1h, 075h, 002h, 0EBh, 016h, 03Ch, 026h
 db 075h, 002h, 0EBh, 010h, 03Ch, 028h, 075h, 008h, 080h, 07Fh, 012h, 006h
 db 074h, 00Ch, 0EBh, 004h, 03Ch, 029h, 075h, 006h, 0C6h, 042h, 004h, 001h
 db 0EBh, 004h, 0C6h, 042h, 004h, 000h, 058h, 0FFh, 004h, 024h, 057h, 052h
 db 051h, 08Bh, 0DFh, 0E8h, 01Fh, 005h, 000h, 000h, 08Bh, 0D9h, 059h, 05Ah
 db 05Fh, 003h, 0F3h, 02Bh, 0CBh, 077h, 0A6h, 0C7h, 002h, 000h, 000h, 000h
 db 000h, 0E8h, 07Bh, 0FFh, 0FFh, 0FFh, 08Fh, 045h, 014h, 061h, 0E8h, 01Eh
 db 000h, 000h, 000h, 072h, 001h, 0C3h, 0C7h, 045h, 010h, 000h, 000h, 000h
 db 000h, 0C3h, 0C7h, 045h, 010h, 000h, 000h, 000h, 000h, 0EBh, 0E6h, 059h
 db 0C7h, 045h, 010h, 000h, 000h, 000h, 000h, 0EBh, 0DCh, 060h, 08Bh, 05Dh
 db 010h, 08Bh, 04Dh, 014h, 0C1h, 0E1h, 002h, 051h, 0E8h, 035h, 0FFh, 0FFh
 db 0FFh, 00Fh, 084h, 01Fh, 001h, 000h, 000h, 08Bh, 0D0h, 0C7h, 002h, 000h
 db 000h, 000h, 000h, 0F6h, 043h, 004h, 001h, 074h, 04Ah, 050h, 033h, 0C0h
 db 08Bh, 04Bh, 017h, 080h, 07Bh, 01Fh, 004h, 074h, 022h, 081h, 0E1h, 0FFh
 db 0FFh, 000h, 000h, 050h, 08Bh, 0C1h, 098h, 08Bh, 0C8h, 058h, 080h, 07Bh
 db 01Fh, 001h, 075h, 00Fh, 081h, 0E1h, 0FFh, 000h, 000h, 000h, 050h, 08Bh
 db 0C1h, 066h, 098h, 098h, 08Bh, 0C8h, 058h, 051h, 053h, 08Dh, 05Bh, 00Dh
 db 0E8h, 086h, 004h, 000h, 000h, 08Bh, 0C1h, 05Bh, 059h, 003h, 0C8h, 058h
 db 003h, 04Bh, 005h, 089h, 00Ah, 089h, 04Bh, 009h, 083h, 0C2h, 004h, 08Bh
 db 01Bh, 00Bh, 0DBh, 075h, 0A4h, 08Bh, 0D8h, 03Bh, 0D0h, 074h, 02Ah, 052h
 db 083h, 0EAh, 004h, 03Bh, 0DAh, 05Ah, 074h, 021h, 08Bh, 0CBh, 083h, 0C1h
 db 004h, 03Bh, 0C8h, 074h, 013h, 08Bh, 071h, 0FCh, 03Bh, 031h, 07Ch, 00Ch
 db 08Bh, 039h, 089h, 079h, 0FCh, 089h, 031h, 083h, 0E9h, 004h, 0EBh, 0E9h
 db 083h, 0C3h, 004h, 0EBh, 0D6h, 08Bh, 0C8h, 08Bh, 05Dh, 010h, 08Bh, 031h
 db 039h, 073h, 005h, 075h, 00Bh, 080h, 04Bh, 004h, 002h, 083h, 0C1h, 004h
 db 03Bh, 031h, 074h, 0F9h, 08Bh, 01Bh, 00Bh, 0DBh, 075h, 0E8h, 059h, 050h
 db 0E8h, 07Dh, 0FEh, 0FFh, 0FFh, 05Bh, 08Bh, 04Dh, 010h, 08Bh, 0F3h, 08Bh
 db 03Eh, 03Bh, 079h, 005h, 075h, 00Ah, 089h, 008h, 083h, 0C0h, 004h, 083h
 db 0C6h, 004h, 0EBh, 0EFh, 08Bh, 009h, 00Bh, 0C9h, 075h, 0E9h, 02Bh, 0D3h
 db 02Bh, 0C2h, 003h, 0D3h, 08Bh, 04Dh, 010h, 0F6h, 041h, 004h, 001h, 074h
 db 02Ch, 053h, 052h, 08Bh, 071h, 009h, 08Bh, 0FAh, 02Bh, 0FBh, 0C1h, 0EFh
 db 003h, 0C1h, 0E7h, 002h, 003h, 0FBh, 039h, 037h, 076h, 004h, 08Bh, 0D7h
 db 0EBh, 002h, 08Bh, 0DFh, 03Bh, 033h, 075h, 0E6h, 08Bh, 0FBh, 05Ah, 05Bh
 db 02Bh, 0FBh, 003h, 0F8h, 08Bh, 03Fh, 089h, 079h, 009h, 08Bh, 009h, 00Bh
 db 0C9h, 075h, 0C8h, 0E8h, 029h, 0FEh, 0FFh, 0FFh, 08Bh, 0C3h, 0E8h, 022h
 db 0FEh, 0FFh, 0FFh, 0F8h, 061h, 0C3h, 0F9h, 0EBh, 0FBh, 05Bh, 0F9h, 0EBh
 db 0F7h, 060h, 033h, 0C9h, 08Bh, 05Dh, 010h, 089h, 04Bh, 005h, 051h, 053h
 db 08Dh, 05Bh, 00Dh, 0E8h, 093h, 003h, 000h, 000h, 08Bh, 0C1h, 05Bh, 059h
 db 003h, 0C8h, 08Bh, 01Bh, 00Bh, 0DBh, 075h, 0E7h, 02Bh, 0F6h, 08Bh, 05Dh
 db 010h, 08Dh, 07Dh, 010h, 0F6h, 043h, 004h, 001h, 00Fh, 084h, 0CFh, 001h
 db 000h, 000h, 08Bh, 04Bh, 009h, 08Bh, 049h, 005h, 02Bh, 04Bh, 005h, 053h
 db 051h, 08Dh, 05Bh, 00Dh, 0E8h, 062h, 003h, 000h, 000h, 08Bh, 0C1h, 059h
 db 05Bh, 02Bh, 0C8h, 08Bh, 0D1h, 079h, 002h, 0F7h, 0D9h, 080h, 07Bh, 01Fh
 db 004h, 00Fh, 084h, 0A3h, 001h, 000h, 000h, 080h, 07Bh, 01Fh, 001h, 00Fh
 db 085h, 09Ch, 001h, 000h, 000h, 0F7h, 0C1h, 080h, 0FFh, 0FFh, 0FFh, 00Fh
 db 084h, 088h, 001h, 000h, 000h, 080h, 07Bh, 032h, 029h, 074h, 031h, 080h
 db 07Bh, 032h, 026h, 075h, 006h, 080h, 073h, 00Dh, 002h, 0EBh, 011h, 08Ah
 db 043h, 00Dh, 034h, 0F0h, 086h, 0C4h, 0B0h, 00Fh, 066h, 089h, 043h, 00Dh
 db 0C6h, 043h, 01Dh, 002h, 0C6h, 043h, 029h, 000h, 0C6h, 043h, 02Ah, 000h
 db 0C6h, 043h, 01Fh, 004h, 089h, 053h, 017h, 0E9h, 04Eh, 001h, 000h, 000h
 db 052h, 0B2h, 090h, 080h, 07Bh, 02Ah, 001h, 075h, 002h, 0B2h, 066h, 08Ah
 db 043h, 00Dh, 024h, 003h, 075h, 04Fh, 060h, 0B9h, 011h, 000h, 000h, 000h
 db 0E8h, 045h, 0FDh, 0FFh, 0FFh, 050h, 089h, 045h, 008h, 0C7h, 045h, 00Ch
 db 011h, 000h, 000h, 000h, 0C7h, 000h, 074h, 00Bh, 09Ch, 000h, 088h, 050h
 db 003h, 0C7h, 040h, 004h, 049h, 074h, 009h, 09Dh, 0C6h, 040h, 008h, 0E9h
 db 0C7h, 040h, 009h, 01Dh, 000h, 000h, 000h, 0C7h, 040h, 00Dh, 09Ch, 050h
 db 049h, 09Dh, 088h, 050h, 00Eh, 089h, 07Dh, 018h, 0E8h, 05Dh, 002h, 000h
 db 000h, 058h, 0E8h, 016h, 0FDh, 0FFh, 0FFh, 061h, 0E9h, 0E6h, 000h, 000h
 db 000h, 03Ch, 001h, 075h, 04Fh, 060h, 0B9h, 011h, 000h, 000h, 000h, 0E8h
 db 0F2h, 0FCh, 0FFh, 0FFh, 050h, 089h, 045h, 008h, 0C7h, 045h, 00Ch, 011h
 db 000h, 000h, 000h, 0C7h, 000h, 075h, 00Bh, 09Ch, 000h, 088h, 050h, 003h
 db 0C7h, 040h, 004h, 049h, 074h, 009h, 09Dh, 0C6h, 040h, 008h, 0E9h, 0C7h
 db 040h, 009h, 01Dh, 000h, 000h, 000h, 0C7h, 040h, 00Dh, 09Ch, 050h, 049h
 db 09Dh, 088h, 050h, 00Eh, 089h, 07Dh, 018h, 0E8h, 00Ah, 002h, 000h, 000h
 db 058h, 0E8h, 0C3h, 0FCh, 0FFh, 0FFh, 061h, 0E9h, 093h, 000h, 000h, 000h
 db 03Ch, 002h, 075h, 042h, 060h, 0B9h, 00Ch, 000h, 000h, 000h, 0E8h, 09Fh
 db 0FCh, 0FFh, 0FFh, 050h, 089h, 045h, 008h, 0C7h, 045h, 00Ch, 00Ch, 000h
 db 000h, 000h, 0C7h, 000h, 09Ch, 05Ah, 049h, 074h, 088h, 050h, 001h, 0C7h
 db 040h, 004h, 006h, 09Dh, 0E9h, 077h, 0C7h, 040h, 007h, 023h, 054h, 089h
 db 007h, 0C6h, 040h, 00Bh, 09Dh, 089h, 07Dh, 018h, 0E8h, 0C1h, 001h, 000h
 db 000h, 058h, 0E8h, 07Ah, 0FCh, 0FFh, 0FFh, 061h, 0EBh, 04Dh, 060h, 0B9h
 db 010h, 000h, 000h, 000h, 0E8h, 05Dh, 0FCh, 0FFh, 0FFh, 050h, 089h, 045h
 db 008h, 0C7h, 045h, 00Ch, 010h, 000h, 000h, 000h, 0C6h, 000h, 09Ch, 088h
 db 050h, 001h, 066h, 0C7h, 040h, 002h, 00Bh, 0C9h, 066h, 0C7h, 040h, 004h
 db 074h, 003h, 0C7h, 040h, 006h, 09Dh, 0EBh, 006h, 09Dh, 0C6h, 040h, 00Ah
 db 0E9h, 0C7h, 040h, 00Bh, 018h, 000h, 000h, 000h, 0C6h, 040h, 00Fh, 090h
 db 089h, 07Dh, 018h, 0E8h, 072h, 001h, 000h, 000h, 058h, 0E8h, 02Bh, 0FCh
 db 0FFh, 0FFh, 061h, 05Ah, 08Bh, 07Dh, 01Ch, 08Bh, 05Dh, 018h, 046h, 0EBh
 db 008h, 088h, 053h, 017h, 0EBh, 003h, 089h, 053h, 017h, 08Bh, 03Fh, 08Bh
 db 01Bh, 00Bh, 0DBh, 00Fh, 085h, 01Bh, 0FEh, 0FFh, 0FFh, 0F7h, 0C6h, 0FFh
 db 0FFh, 0FFh, 0FFh, 00Fh, 085h, 0E9h, 0FDh, 0FFh, 0FFh, 0F8h, 061h, 0C3h
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; -- Ассемблирование списка --
;---------------------------------------------------------------------------
Belma_Asm:
;IN:
; EBP -> Заполненая структура BelmaGlobalVars:
;			CStart	dd ? - Адрес памяти куда будет происходить асемблирование
;			Head	dd ? - Голова списка
;
;OUT:
;	В память, указанную в CStart - востановленный из списка код
;   [EBP.CLen] = новая длина кода
;   Или CF=1 при ошибке
;---------------------------------------------------------------------------
 db 0E8h, 0E0h, 0FDh, 0FFh, 0FFh, 072h, 027h, 060h, 0C7h, 045h, 00Ch, 000h
 db 000h, 000h, 000h, 08Bh, 07Dh, 008h, 08Bh, 055h, 010h, 08Dh, 05Ah, 00Dh
 db 0E8h, 04Ch, 0FBh, 0FFh, 0FFh, 0E8h, 069h, 001h, 000h, 000h, 001h, 04Dh
 db 00Ch, 003h, 0F9h, 08Bh, 012h, 00Bh, 0D2h, 075h, 0E8h, 061h, 0C3h
;---------------------------------------------------------------------------
; -- /Belma_Asm --
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; -- Освобождение памяти из-под списка --
;---------------------------------------------------------------------------
Belma_FreeList:
;IN:
; EBP -> Заполненая структура BelmaGlobalVars:
;			MAproc	dd ? - адрес процедуры выделения памяти
;			MFproc	dd ? - адрес процедуры освобождения памяти
;			Head	dd ? - голова списка
;
;OUT:
;	CF = 1 при ошибке
;---------------------------------------------------------------------------
 db 060h, 08Bh, 05Dh, 010h, 08Bh, 013h, 00Bh, 0D2h, 074h, 00Bh, 08Bh, 0C3h
 db 0E8h, 0BDh, 0FBh, 0FFh, 0FFh, 08Bh, 0DAh, 0EBh, 0EFh, 08Bh, 0C3h, 0E8h
 db 0B2h, 0FBh, 0FFh, 0FFh, 0F8h, 061h, 0C3h
;---------------------------------------------------------------------------
; -- /Belma_FreeList --
;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
; -- Процедура, в которой происходит вставка куска кода в заданное --
; -- место списка, с предварительым дизассемблированием и последующим --
; -- проставлением флагов --
;---------------------------------------------------------------------------
Belma_Insert:
;IN:
; EBP -> Заполненая структура BelmaGlobalVars:
;			MAproc	dd ? - Адрес процедуры выделения памяти
;			MFproc	dd ? - Адрес процедуры освобождения памяти
;			CStart	dd ? - Адрес памяти где лежит код, который надо вставлять
;			CLen	dd ? - Длина кода
;			Head	dd ? - Голова списка
;			TempVar dd ? - Адрес элемента списка, после которого вставлять
;
;OUT:
;	CF = 1 при ошибке
;---------------------------------------------------------------------------
 db 060h, 0B9h, 020h, 000h, 000h, 000h, 0E8h, 095h, 0FBh, 0FFh, 0FFh, 00Fh
 db 084h, 0DCh, 000h, 000h, 000h, 050h, 08Bh, 0F5h, 08Bh, 0F8h, 0F3h, 0A4h
 db 055h, 08Bh, 0E8h, 0E8h, 096h, 0FBh, 0FFh, 0FFh, 083h, 07Dh, 010h, 000h
 db 00Fh, 084h, 0BFh, 000h, 000h, 000h, 08Bh, 045h, 010h, 08Bh, 04Dh, 014h
 db 060h, 093h, 0F6h, 043h, 004h, 001h, 074h, 068h, 050h, 033h, 0C0h, 08Bh
 db 04Bh, 017h, 080h, 07Bh, 01Fh, 004h, 074h, 022h, 081h, 0E1h, 0FFh, 0FFh
 db 000h, 000h, 050h, 08Bh, 0C1h, 098h, 08Bh, 0C8h, 058h, 080h, 07Bh, 01Fh
 db 001h, 075h, 00Fh, 081h, 0E1h, 0FFh, 000h, 000h, 000h, 050h, 08Bh, 0C1h
 db 066h, 098h, 098h, 08Bh, 0C8h, 058h, 053h, 051h, 08Dh, 05Bh, 00Dh, 0E8h
 db 0CDh, 000h, 000h, 000h, 08Bh, 0C1h, 059h, 05Bh, 003h, 0C8h, 058h, 003h
 db 04Bh, 005h, 03Bh, 04Dh, 008h, 072h, 029h, 051h, 02Bh, 04Dh, 00Ch, 03Bh
 db 04Dh, 008h, 059h, 077h, 01Fh, 074h, 02Ah, 08Bh, 055h, 010h, 039h, 04Ah
 db 005h, 075h, 007h, 080h, 04Ah, 004h, 002h, 089h, 053h, 009h, 08Bh, 012h
 db 085h, 0D2h, 075h, 0EEh, 08Bh, 01Bh, 00Bh, 0DBh, 075h, 08Ch, 0EBh, 01Bh
 db 08Bh, 055h, 018h, 08Bh, 012h, 08Bh, 052h, 009h, 089h, 053h, 009h, 0EBh
 db 0EBh, 08Bh, 055h, 018h, 08Bh, 012h, 080h, 04Ah, 004h, 002h, 089h, 053h
 db 009h, 0EBh, 0DDh, 061h, 05Dh, 001h, 04Dh, 014h, 08Bh, 04Dh, 018h, 08Bh
 db 009h, 050h, 08Bh, 010h, 00Bh, 0D2h, 074h, 004h, 08Bh, 0C2h, 0EBh, 0F6h
 db 089h, 008h, 08Bh, 04Dh, 018h, 058h, 089h, 001h, 0F8h, 058h, 0E8h, 0C8h
 db 0FAh, 0FFh, 0FFh, 061h, 0C3h, 05Dh, 0F9h, 0EBh, 0F4h, 0F9h, 0EBh, 0F7h
;---------------------------------------------------------------------------
; -- /Belma_Insert --
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; -- Процедура, в которой происходит замещение куска кода в заданном --
; -- месте списка, с предварительным дизассемблированием и последующим --
; -- проставлением флагов --
;---------------------------------------------------------------------------
Belma_Replace:
;IN:
; EBP -> Заполненая структура BelmaGlobalVars:
;			MAproc	dd ? - Адрес процедуры выделения памяти
;			MFproc	dd ? - Адрес процедуры освобождения памяти
;			CStart	dd ? - Адрес памяти где лежит код, которым надо замещать
;			CLen	dd ? - Длина кода
;			Head	dd ? - Голова списка
;			TempVar dd ? - Адрес элемента списка, после которого замещать
;
;OUT:
;	CF = 1 при ошибке
;	TempVar = Адрес последнего элемента, вставленного списка
;---------------------------------------------------------------------------
 db 060h, 08Bh, 07Dh, 018h, 08Bh, 03Fh, 0E8h, 005h, 0FFh, 0FFh, 0FFh, 072h
 db 03Dh, 0FFh, 04Dh, 014h, 08Bh, 075h, 018h, 089h, 075h, 01Ch, 08Bh, 036h
 db 039h, 03Eh, 074h, 007h, 089h, 075h, 01Ch, 08Bh, 036h, 0EBh, 0F5h, 08Bh
 db 017h, 089h, 016h, 056h, 057h, 08Bh, 075h, 018h, 08Bh, 036h, 08Bh, 0C6h
 db 0B9h, 03Ch, 000h, 000h, 000h, 0FCh, 0F3h, 0A4h, 05Fh, 05Eh, 08Bh, 055h
 db 018h, 089h, 03Ah, 0E8h, 07Bh, 0FAh, 0FFh, 0FFh, 089h, 075h, 018h, 0F8h
 db 061h, 0C3h, 0F9h, 0EBh, 0FBh
;---------------------------------------------------------------------------
; -- /Belma_Replace --
;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
; -- GetCommandLen - Вычисление длины команды --
;---------------------------------------------------------------------------
GetCommandLen:
;IN:
;   EBX -> указатель на структуру описания команды
;OUT:
;	ECX = Длина
;
;---------------------------------------------------------------------------
 db 050h, 052h, 033h, 0C9h, 080h, 07Bh, 01Eh, 000h, 074h, 001h, 041h, 080h
 db 07Bh, 01Dh, 000h, 074h, 001h, 041h, 080h, 07Bh, 01Ch, 000h, 074h, 001h
 db 041h, 080h, 07Bh, 01Fh, 000h, 074h, 001h, 041h, 080h, 07Bh, 020h, 000h
 db 074h, 001h, 041h, 08Bh, 0D1h, 051h, 033h, 0C9h, 08Ah, 04Bh, 010h, 042h
 db 0E2h, 0FDh, 059h, 08Bh, 0CAh, 080h, 07Bh, 017h, 001h, 075h, 001h, 041h
 db 080h, 07Bh, 011h, 000h, 074h, 006h, 002h, 04Bh, 011h, 080h, 0D5h, 000h
 db 080h, 07Bh, 012h, 000h, 074h, 006h, 002h, 04Bh, 012h, 080h, 0D5h, 000h
 db 05Ah, 058h, 0C3h
;---------------------------------------------------------------------------
; -- /GetCommandLen --
;---------------------------------------------------------------------------

; 20.08.2002