
	  ‹‹                  €
	 ﬂﬂﬂ Monthly Magazine € For VirMakers.                  FEB '95
	 ﬂ€€ ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ € ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ ﬂ ﬂﬂﬂﬂﬁﬂﬂﬂ  €€ﬂﬂﬂ€€
	  ﬁ€ €ﬂ‹ €ﬂﬂ ‹ﬂﬂ ‹ﬂﬂ ‹€‹ ‹ﬂﬂ €ﬂ€    › € ‹ﬂ€ € ‹ﬂﬂ €‹‹   €€ ﬂﬂ€€
	   € € € €ﬂ  €ﬂ  €    €  €ﬂ  € €    € € € € € €   €     €€€€ €€
	   € ﬁ ﬁ ﬁ   ﬁ‹‹ ﬁ‹‹  ﬁ  ﬁ‹‹ ﬁ‹ﬂ     ﬂ€ ﬂ‹€ ﬁ ﬁ‹‹ ﬁ‹‹‹  €€‹‹‹€€
	   ﬁ ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹ ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹  ‹‹‹‹‹‹‹
	     Copyright , (C),1994-95, by STEALTH group, unLtd.
	     (M)ail: BOX 10, KIEV 148, The CUNTry of fUcKRAINE

		
			  80386 DEBUG REGISTERS
			-------------------------
			Contents:       - Intro and overview
					- INT 13 intercepting (.ASM)
					- Literature

	The 80386 is famous not only for its Protected Mode which allows us
 to create more stable virii but in Real Mode we can play some tricks using
 the 80386's special abilities. Intel remind the system programmer they built
 powerful debugging tools inside the chip.
 Since the 80286 you can move the Interrupt Table from its throne 0000:0000
 into deep RAMpages by changing IDTR register. Cool !
	I just explored the 80386+ Debug Registers. A bulk of literature I
 have read contains a lot of info, but it appears with uncomprehensible
 material and has mistakes, so working code cannot be written. But I did it!

	I didn't see anybody using this powerful shield for virus' defense
 or offence,- using of it for interrupt interception will make virii
 unreachable for all known antiviruses. I'm giving you information on how to 
 get 100 percent insurance in your security for today.

	Some difficulties I've met during my experiments:

	The first. 
	Some types of EMM386, QEMM etc. may cause an Exception Error -
 Protection Violation. DR available for PL=0 only, Virtual Machine has PL=3,
 so Error occurrs. Use the VCPI or DPMI service to change the Debug Registers
 in this case.

	The second. RESUME FLAG.
	16-th bit of EFLAGS register contains the Resume Flag. It sets when
 Exception_1 (namely the breakpoint by code execution) appears. 
 Exception executing before the code where breakpoint was set.
 When Exception done, we're back to the same address. What will happen?
 Exception_1. To avoid eternal cycle, Exception must be ignored until the
 next instruction, so ResumeFlag cause Exception ignorance for one instruc-
 tion. Then RF automatically clears. Real Mode doesn't use IRETD command so
 RF is unusable for this mode.
 I suggest to clear hardware breakpoint, set ordinal trace, then set hardware
 breapoint back.

	The fourth. INT_01 vector cannot be protected.

	Imagine you want to protect INT_01 vector, using hardware breakpoint.
 You can set the breakpoint on Read/Write_Data or Write_Data at address
 0000:0004. What will happen when something will change this vector ?
 Exception will be called right after vector changing. By which address ?

	The last. Breakpoint Defense Flag (BD)
	It appears before the command, trying to change one of debug 
	registers. It's a mess. Nothing happened. Lets test it : 

	Insert this code into INT_1 handler (see below) :

		cmp eax,00002000h       ; Breakpoint Defense Bit
		jz  NothingImpossible           
		int 19h                 ; you will see if it works
		NothingImpossible:

	Run program.

	And now try to change DR7, for example.

				xor eax,eax
				mov dr7,eax
				retn

	Run it after.
	As result all breakpoints will be switched off because BD doesn't work.
  Maybe it works in PM. Who knows ...

  Nevertheless, Debug Registers may serve for virmakers good. Unfortunatelly,
  I didn't create a virus using DR yet, maybe somebody of you will do it.
  Here's materials of my investigations.

  What to do if processor is not 386 ? The simplest way to avoid disaster -
  Int 06 handling - Invalid Opcode. If it appears, direct your virus code to
  8086 routines.
			I wish you success!
   
  DEBUGGING.
	
	CPU provides three types od Debugging:

1. Single Step Interrupt  (INT 1).
----------------------------------------------------
   Activation condition: "Trace Flag" in EFLAGS is ON.
   Setting TF:   1)   pushf / pop  ax / or ax,0100H / push ax / POPF
		 2)   IRET with bit 8 set in ss:[sp+4]

     INT 01 appears right after the next executed command.
     INT 01            - places FLAGS register to stack (with TF=1)
		       - clears TF
		       - jumps far to address, stored in 0000:0004 (IP,CS)  
		       - IRET
		       - next command executing
		       - INT 01 appears again and so on until TF not cleared.

   Application in viriis:- locating the true INT 21h or INT 13h addresses
			   (tracing till DOS or BIOS area)
			 - dynamic crypting/decrypting
			 - tracing the beginning of loaded program to
			   place virus' "JMP VIRUS" since 2nd or N-th command
			   (see Emmie virus, which invades since 2nd program
			    instruction)
		
2. The Breakpoint Interrupt (INT 3).
-------------------------------------
   It's ordinal program interrupt.
   The single difference is an one-byte opcode (0CCh).
   One byte size allows to replace any instruction to 0CCh for setting the
   breakpoint
   Technology is following:
	      - save one byte of required instruction
	      - place 0CCh here - INT 3 will appear at reaching it
	Algorithm description:
	      - handler itself
	      - place back the saved byte
	      - CS:IP in stack points to byte after 0CCh
		change IP in stack to address or replaced command (IP-1)
	      - IRET (to loose this Breakpoint) or...
	     If you want to use breakpoint at this place again,
	      - handle the INT 1 and make one tracing step;
		Your INT 1 handler must place back 0CCh and clear themself

   
   Application in viriis: - splicing
			  - placing INT 3 many times in your virus body to
			    annoy debugger 

3.  Debug Registers
-----------------------
	 In processors 80386 and higher appeared new, more slim debuuging
    tools. These are additional 32-bit registers DR0..DR7 , which allows 
    to handle such Exceptions, as:

	at reaching CS:IP(EIP) certain values
or      data read/write
or      data read 

	Debug registers allows to set to 4 different breakpoints.
These are HARDWARE breakpoints in difference from usual INT 1 and INT 3.        

	Debug Registers available as in Protected Mode for PL=0, as in Real
mode.

DR0-3 contains linear address of breakpont:   (CS*10H+IP)
      (Linear address can differs from physical if Memory Page'ing enabled.)
DR4-5 reserved. ( For example, TASM cause a compilation error if you try to 
      use command "MOV DR4,EAX
DR6   status register 

				      15 14 13                   3  2  1  0
				      ≥  ≥  ≥                    ≥  ≥  ≥  ≥
      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BT BS BD 0 0 0 0 0 0 0 0 0 B3 B2 B1 B0
				      ≥  ≥  ≥                    æ  ≥  ≥  ≥
	      BreakPoint Task Switch Õæ  ≥  ≥                    ÕÕÕæ  ≥  ≥  
	      BreakPoint Single Step ÕÕÕÕæ  ≥                    ÕÕÕÕÕÕæ  ≥
	      BreakPoint Defence ÕÕÕÕÕÕÕÕÕÕÕæ                    ÕÕÕÕÕÕÕÕÕæ

     All described debugging resources are operates with INT 01 
     ( Exception 01 ), because that, INT 1 handler must know, by what reason
     it was called. We can find this reason in DR6 register.
     DR6 doesn't clears by Processor, so you must clean it after every 
     call, or we will not know what was the reason of Exception.

     There are only 7 bits used in DR6.
     When Exception occures, processor sets the reason of it in DR6:

		BT  -   switching to task, which TSS contains Trap Flag
		BS  -   old good single step tracing - has highest 
			priority: whebn BS set, other reasons may presents too
		BD  -   Breakpoint defense - next instruction will read or 
			write from/to one of DR's
		B0,B1,B2,B3 -
			Exception by one of 4 breakpoints
			
DR7  Control Register
     Contains info about breakpoints:

    30  28   26  24   22  20   18  16      12       8           4           0
    ≥   ≥    ≥   ≥    ≥   ≥    ≥   ≥       ≥        ≥           ≥           ≥ 
 LEN3 RW3 LEN2 RW2 LEN1 RW1 LEN0 RW0 0 0 0 0 0 0 GE LE G3 L3 G2 L2 G1 L1 G0 L0
  
   Gi - Global Breakpoint: allowed for all tasks
   Li - Local Breakpoint : for this task only
   LE,GE (Local Exact, Global Exact)
		 Used when breakpoints to data has been set.
		 Doesn't influent on Code Breakpoints.
		 Influent on all Data Breakpoints in whole.

		 Convaiering allows processor to take more than one command
		 to execute.
		 That's a reason why Data Breakpoint Exception calls later
		 than data operating command has been executed. 

		 GE or LE setting (for Global or Local Breacpoint in accord)
		 slows internal processor's operations and calls Exception
		 right in time.
   LENi ® RWi  - 2-bit fields for data breakpoints.
	  LENi - size of data (1,2 or 4 bytes)
	  RWi  - 00 = by Code              10 = undefined
		 01 = by Data Write        11 = by Data Read/Write

;========================== Cut here (start) =============================

;       This program enables the Code Breakpoint at INT 13 entrance.
;       (INT 13 vector is taken from Vector Table) It uses DR0 register.
;       Exception handler BEEPs when reached.
;
;       For 386 and higher only.

.MODEL TINY
.386p
.CODE
 ORG 100h
 START:
;--------------------
      Copyright:                
	mov ah,09
	mov dx,offset CMsg
	int 21h
	jmp short OverCop
	CMsg db '80386 DEBUG REGISTERS AUDIO-DEMO GLUE.',0dh,0ah
	     db 'Copyright (C) 1995, by LovinGOD, STEALTH group',0dh,0ah
	     db 'Beeps when Int 13 entry point reached','$'
      OverCop:
;--------------------   
	mov ax,3513h            ; Get INT 13 address
	int 21h
				; Converting ES:BX to a physical address 
				; ES*10h+BX, store it to EAX 
	xor eax,eax             
	mov ax,es
	mov cl,4
	shl eax,cl
	
	and ebx,0000FFFFh
	add eax,ebx             
	
	mov dr0,eax             ; DR0 contains address of breakpoint

	xor eax,eax             ; DR6 - status register
	mov dr6,eax             ; Clear it

				; DR7 - control register

	xor eax,eax             ; Disabling all Debug Breakpoints, and
				; clearing LEN0 and RW0 (our Breakpoint is 
				; a Code Breakpoint)
	or  al,2                ; G0 - it's global breakpoint
	mov dr7,eax             

	pushf                   ; Clear TraceFlag
	pop ax
	and ah,0FEh
	push ax
	popf

	mov dx,offset Tracer    ; Set our Exception handler
	mov ax,2501h            
	int 21h
	
	mov dx,offset theend    ; TSR
	int 27h

‹‹‹  TRACER :‹‹‹‹‹              ; Exception handler

	push bp eax             

	mov bp,sp               
	mov eax,dr6             ; status register
	;* here you can include test of BD flag 
	test eax,00004000h      ; single step tracing ?
	jz  HardBreak           ; 

		; single step tracing occured, it was used by us to 
		; restore our hardware breakpoint (see further)
		; DR0 is a Hardware breakpoint again

	xor eax,eax             
	mov dr6,eax
	or  eax, 00000002h      ; Setting Exception by DR0
	and eax,0FFF0FFFFh      ; Code Exception 
	mov dr7,eax             

	and word ptr [bp+0Ah],0FEFFh    ; Clearing trace flag in stack
	jmp short exitrace

HardBreak:                      ; DR0 Exception handler

	mov eax,dr6             ; Clear status register
	xor eax,eax
	mov dr6,eax

	mov eax,dr7
	and eax,0FFFFFFFDh
	mov dr7,eax             ; Disable DR0 Hardware Breakpont, or else
				; recycling when return (ResumeFlag doesn't
				; resumes... making it by the handle)

				; The purpose of our hardware breakpoint
	mov ax,0E07h            ; Say "What's a nice fuckin hell! "
	int 10h                 ; (censored to "BEEP")

;       ....                    ; Insert everything what you need.

  SetTF:                        ; Setting usual tracing for further 
				; DR0 resuming
	or word ptr [bp+0Ah],0100h      ; Walkin thru the condemned place,
					; carry your flag high !
  ExiTrace:                     
	pop eax bp      
	iret 

 TheEnd:
 End Start
;============================ cut here ==================================

Literature:    1. Some original Russian issue.
	       2. K.Pappas, U. Marri "80386", Moscow, Radio & Communic-s, 1993
