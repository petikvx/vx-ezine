
      ÜÜ                  Û
     ßßß  Virus Magazine  Û Box 176, Kiev 210, Ukraine      IV  1997
     ßÛÛ ßßßßßßßßßßßßßßßß Û ßßßßßßßßßßßßßßßßßßß ß ßßßßŞßßß  ÛßßßßßßÛ
      ŞÛ ÛßÜ Ûßß Üßß Üßß ÜÛÜ Üßß ÛßÛ    İ Û ÜßÛ Û Üßß ÛÜÜ   Û ßßßÛ Û
       Û Û Û Ûß  Ûß  Û    Û  Ûß  Û Û    Û Û Û Û Û Û   Û     Û ÜÜÜÛ Û
       Û Ş Ş Ş   ŞÜÜ ŞÜÜ  Ş  ŞÜÜ ŞÜß     ßÛ ßÜÛ Ş ŞÜÜ ŞÜÜÜ  Û ÛÜÜÜ Û
       Ş ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ  ÛÜÜÜÜÜÜÛ
          (C) Copyright, 1994-97, by STEALTH group WorldWide, unLtd.
                              sgww@hotmail.com
            Digest of IV 8 - 11 russian, including Moscow issues


                 Record format.
                 ÍÍÍÍÍÍÍÍÍÍÍÍÍ

        Object file is a sequence of records. Maximum record length is
1024 bytes. Every record looks like this:

        ÚÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄ¿
        ³  1  ³    2    ³        ????        ³  1  ³
        ÀÄÄÂÄÄÁÄÄÄÄÂÄÄÄÄÁÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÁÄÄÂÄÄÙ
           ³       ³              ³             ÀÄ Checksum
           ³       ³              ³                (Linker usually
           ³       ³              ³                 does not check it)
           ³       ³              ³
           ³       ³              ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Data
           ³       ³                               (depends on record
           ³       ³                                type).
           ³       ³
           ³       ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Record length
           ³                                       (Data+Checksum).
           ³
           ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Record type



      Example.
      ÍÍÍÍÍÍ

         (the last record in segment)
         ÚÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄ¿
         ³ 8A ³ 0700 ³ C11001010001 ³ 9B ³
         ÀÄÄÄÄÁÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄ´
                     ÀÄÄÄÄÄÄ7 bytesÄÄÄÄÄÄÙ



                 Some of record types.
                 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

 > Type=80h or 82h   HEADER RECORD

   Every object module starts with a record of this type. It contains
   only a module name.

 > Type=98h          SEGMENT DEFINITION

   Contains segment attributes (Public/Stack/Common etc.), alignment type
   and size of segment, which must be corrected during infection (Look for
   more information in virus source).

 > Type=A0h          Data For Segment

   Data to be moved into segment at defined offset by linker. A record of
   this type with virus body will be added to a file.

 > Type=9‘h          Link Record

   Defines an address in segment and a name, pointed by this address
   after linking. It is possible to make a part of code to change
   directly during linking process. This feature is used when calling
   to external procedures and variables.
   During infection virus checks if this address points to the start
   of segment. If so adjustment is to be done.

 > Type=8AH          The Last Record of module

   Defines module type (virus infects only main modules with entry
   point). It makes sure that there is a single virus copy in a
   compiled programm. Also here is an entry point address where jump
   to virus body must be set.
   Usually it is 100h(COM), ¨«¨ 0h(EXE). Given virus infects only
   modules with entry offset 0h.


                   Object file example
                   ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

   00000000 ³ 80 0D 00 0B  73 68 61 62  6C 6F 6E 2E  61 73 6D 12
            ³ ^^ Header record
            ³
   00000010 ³ 88 20 00 00  00 1C 54 75  72 62 6F 20  41 73 73 65
            ³ ^^ Comments
   00000020 ³ 6D 62 6C 65  72 20 20 56  65 72 73 69  6F 6E 20 34
   00000030 ³ 2E 30 9A 88  13 00 40 E9  45 6C 0E 1D  0B 73 68 61
   00000040 ³ 62 6C 6F 6E  2E 61 73 6D  FF 88 03 00  40 E9 4C 96
   00000050 ³ 02 00 00 68  88 03 00 40  A1 94 96 0C  00 05 5F 54
            ³                                 ^^ Name definition
   00000060 ³ 45 58 54 04  43 4F 44 45  96 98 07 00  48 05 01 02
            ³                              ^^ Segment definition
   00000070 ³ 03 01 0D 96  0C 00 05 5F  44 41 54 41  04 44 41 54
   00000080 ³ 41 C2 98 07  00 48 00 00  04 05 01 0F  96 08 00 06
   00000090 ³ 44 47 52 4F  55 50 8B 9A  06 00 06 FF  02 FF 01 59
            ³                       ^^  Group definition
   000000A0 ³ 88 04 00 40  A2 01 91 A0  09 00 01 00  01 EB 01 90
            ³                       ^^  Data for linkage
   000000B0 ³ CD 20 EC 8A  07 00 C1 10  01 01 00 01  9B
                       ^^  Last record in module(!)


                 Possible algorithm of OBJ infector
                 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        (1) - Open OBJ file and to find the Last record in module
              (8AH). Check if it is a main module with an entry
              point. If not then exit. Save entry point segment and
              offset.

        (2) - Find Segment definition record (98h) with entry
              point. Add virus length.

        (3) - Find Data for segment record (A0h), where the entry
              point located and to place jump to virus on entry point
              (Computations are based on segment size).

        (4) - Analyse Link Record (9Ch) [to check is there a pointer
              to jump (see (3)). If so - set it to buffer in virus body.

        (5) - Insert Data for Segment (A0h) record with virus before
              the Last record (8Ah).
              During linking virus will be placed at the end of segment.


                 Another OBJ infector algorithm.
                ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        There is only one known OBJ infector besides this. It is called
Shifter. Shifter tries to infect only OBJ files that must be linked to COM.
It is absolutely different. The description of Shifter may be found in
AVP documentation.



                 References
                 ÍÍÍÍÍÍÍÍÍÍ

         1. Microsoft Product Support Services Application Note.
            SS0288: RELOCATABLE OBJECT MODULE FORMAT.

         2. Loading object modul format.
            (Unknown athour).

         3. AVP documentation.

                                        (á) Intmaster, Stealth Group, 1996
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ