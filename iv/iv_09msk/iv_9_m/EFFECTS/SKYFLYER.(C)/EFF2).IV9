‹‹                   ‹
ﬂﬂﬂ STEALTH GROUP WW € Mail:   BOX 15, 125080 MOSCOW   €€€€€€€€ €€€€€€€€€ €ﬂﬂ€
ﬂ€€ ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ € ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ ﬂ ﬂﬂﬂﬂﬁﬂﬂﬂ   ⁄ƒø¬ ¬⁄ƒ¥¬ ¬ “ ¬ø⁄ €‹‹€
 ﬁ€ €ﬂ‹ €ﬂﬂ ‹ﬂﬂ ‹ﬂﬂ ‹€‹ ‹ﬂﬂ €ﬂ€   › € ‹ﬂ€ € ‹ﬂﬂ €‹‹    √¬Ÿ≥ ≥¿ƒø√ƒ¥   ≥¿¥ ‹  €
  € € € €ﬂ  €ﬂ  €    €  €ﬂ  € €   € € € € € €   €      ¡¿ƒ¿ƒŸ¿ƒŸ¡ ¡   ¡ ¡ ﬂﬂﬂﬂ
  € ﬁ ﬁ ﬁ   ﬁ‹‹ ﬁ‹‹  ﬁ  ﬁ‹‹ ﬁ‹ﬂ    ﬂ€ ﬂ‹€ ﬁ ﬁ‹‹ ﬁ‹‹‹   €€€€  WINTER ' 96  €€€€
  ﬁ ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹ ‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹   €€€€€€€€€€€€€€€€€€€€€€€

    €€€€€€€€€€€€€ SKYFLYER PRESENTS : €€€€€€€€€€€€€€ 


; Å•£„È†Ô ·‚‡Æ™† 

.model tiny
.code
C	SEGMENT	;(c) Skyflyer I.1996,prog for masm assembler.
assume cs:c,ds:c	;for link enter "link p.asm /tiny"
org 100h
begin:	nop;adr=address
	jmp beg;beg=begin,len=lenght,num=numbers,scr=screen
i8a:	dw 0,0;adr of old 8h and
i10a:	dw 0,0;10h int
ttab:	db 20h dup('%',0fh)	;current text
stab:	db 20h dup('#',0fh)	;saved info of scr
ctaba:	dw ctab		;adr of ctab
ctab2a:	dw ctab2	;adr of ctab2
delay:	db 18	;delay between beg of right moving and left moving for color
delyc:	db 0	;current delay for color
dcnt:	db 0	;counter for right moving
bgclr:	db 10h	;color of background (0=black,10h=blue...)
ssb:	dw 8	;beg of scr out(8=4th position)
ssl:	dw 0	;len of scr out 1char=1
ssx:	dw 0	;current x coord in scr (1 symb=2 bytes)
ssm:	db 0	;bits:0=0/1-right/left edge is moving
ttbb:	dw text	;beg of text
ttl:	dw 0	;len of text 1 char=1
ttb:	dw text	;current beg of text to out
tspeed:	db 1
mousx:	dw 0ffffh
gss:	dw 0;num of current image
ginum:	db 0;current num of animation images (g1,g2...)
giall:	db 3;num of all an. images
gbit:	db 0;bits:0b=1-"\"effect on
ctab:	db 8,15,11,10,7,3,2,9,8	;colors table, 1st byte=num of colors
ctab2:	db 4,11,3,9,8		;2nd colors table, --//--
ctb3:	db 4,12,13,5,8
ctb4:	db 3,13,5,8
gnn:	dw g1;adr of num image table
g0:	db 0
g1:	db 8,0,1,2,3,4,5,6,7
	db 32,0,1,2,3,4,5,6,7,7,0,0,0,7,7,6,5,4,3,2,1,0,7,6,5,5,4,4,4,5,5,6,7
	db 41,0,0,0,1,1,1,2,2,3,4,5,6,7,1,3,5,7,2,5,1,5,2,7,4,1,7,5,3,1,0,7,6,5,4,3,2,2,1,1,1,0
gtab:	db 10000000b,11000000b,11100000b,01110000b,00111000b
	db 00011100b,00001110b,00000111b,00000011b,00000001b
	db 01100000b,01110000b,00110000b,00111000b,00011000b
	db 00011000b,00011100b,00001100b,00001110b,00000110b
	db 24,24,24,24,24,24,24,24,24,24
	db 00000110b,00001110b,00001100b,00011100b,00011000b
	db 00011000b,00111000b,00110000b,01110000b,01100000b
	db 00000001b,00000011b,00000111b,00001110b,00011100b
	db 00111000b,01110000b,11100000b,11000000b,10000000b
	db 0,0,00000011b,00001111b,00011100b,00111000b,11110000b,11000000b,0,0
	db 0,0,0,0,255,255,0,0,0,0
	db 0,0,11000000b,11110000b,00111000b,00011100b,00001111b,00000011b,0,0
gtab9:	db 0
eff10:	db 10
eff:	test 1 ptr gbit,1
	jz short eff1
	mov bx,2 ptr gss
	mov si,2 ptr gnn
	inc bx
	cmp bl,[si]
	jb eff3
	xor bx,bx
eff3:	mov 2 ptr gss,bx
	mov al,[bx+si+1]
	mul 1 ptr eff10
	add ax,offset gtab
	mov si,ax
	push ds
	xor ax,ax
	mov ds,ax
	mov ax,2 ptr 44ch
	cmp ax,4001
	jbe eff2
	add si,2
eff2:	pop ds
	call gg
eff1:	ret
;si=adr of symb.replace '\' symbol to storing in this program
gg:	mov dx,3c4h
	mov al,2
	cli
	out dx,al
	mov dx,3c5h
	mov al,4
	out dx,al
	mov dx,3c4h
	mov al,4
	out dx,al
	mov dx,3c5h
	mov al,4
	out dx,al
	mov dx,3ceh
	mov al,6
	out dx,al
	mov dx,3cfh
	mov al,0ch
	out dx,al
	sti;		end out
	mov di,0b82h
	xor ax,ax
	mov es:[di-2],ax
	mov es:[di+10],ax
	mov es:[di+12],al
	mov cx,10
gg1:	movsb
	loop gg1
	mov dx,3ceh
	mov al,6
	cli
	out dx,al
	mov dx,3cfh
	mov al,0deh
	out dx,al
	mov dx,3c4h
	mov al,4
	out dx,al
	mov dx,3c5h
	mov al,3
	out dx,al
	mov dx,3c4h
	mov al,2
	out dx,al
	mov dx,3c5h
	mov al,3
	out dx,al
	sti
	ret
clr:	mov bx,offset ttab
	mov ax,2 ptr ssx
	shr ax,1
	add ax,2 ptr ssl
	dec ax
	mov cx,ax
	shl ax,1
	add bx,ax
	cmp cx,20h
	jae clrt
	jcxz clrt
clr1:	mov al,[bx-1]
	mov [bx+1],al
	sub bx,2
	loop clr1
clrt:	mov si,2 ptr ctaba
	mov bl,1 ptr [si]
	sub bl,1 ptr dcnt
	jbe clr2
	xor bh,bh
	mov al,[bx+si]
	or al,1 ptr bgclr
	mov 1 ptr ttab+1,al
clr2:	mov si,2 ptr ctab2a
	mov bl,1 ptr dcnt
	add bl,[si]
	sub bl,1 ptr delay
	jb clr2q
	inc bl
	xor bh,bh
	mov al,[bx+si]
	or al,1 ptr bgclr
	mov 1 ptr ttab+1,al
clr2q:	ret
bbb:	test 1 ptr tspeed,80h
	jz short bb01
	and 1 ptr tspeed,7fh
bb02:	dec 1 ptr tspeed
	jz bb0
	call bb0b
	jmp short bb02
bb01:	dec 1 ptr tspeed
	jz bb0
	ret
bb0:	push ds
	xor ax,ax
	mov ds,ax
	mov al,1
	test 1 ptr ds:417h,1
	jz bb0a
	mov al,2
	test 1 ptr ds:417h,4
	jz short bb0a
	mov al,82h
	test 1 ptr ds:417h,8
	jz short bb0a
	mov al,84h
bb0a:	pop ds
	mov 1 ptr tspeed,al
bb0b:	cmp 2 ptr ssl,0
	jnz bb1
	call ttt
	and 1 ptr ssm,0feh
	inc 2 ptr ssl
	mov 2 ptr ssx,0
	mov 1 ptr dcnt,0
bb1:	call ccc
	call clr
	inc 1 ptr dcnt
bb12:	call sss
	mov ax,2 ptr ssx
	shr ax,1
	add ax,2 ptr ssl
	cmp ax,2 ptr ttl
	jae bb2
	inc 2 ptr ssl
bb2:	mov al,1 ptr dcnt
	cmp al,1 ptr delay
	jbe bb21
	mov bx,2 ptr ssx
	mov di,2 ptr ssb
	lea si,[bx+di]
	cmp si,2 ptr mousx
	je bb22
	mov ax,[bx+offset stab]
	mov es:[bx+di],ax
bb22:	add 2 ptr ssx,2
	dec 2 ptr ssl
bb21:	ret
;copy ttab to scr
sss:	mov bx,2 ptr ssx
	mov cx,2 ptr ssl
	mov di,2 ptr ssb
	mov dx,2 ptr mousx
ss1:	mov ax,[bx+offset ttab]
	cmp al,'_'
	jz short ss2
	lea si,[bx+di]
	cmp si,dx
	jne ss21
mov al,'‹'
;	mov es:[si],al
	jmp short ss2
ss21:	mov es:[si],ax
ss2:	add bx,2
	loop ss1
	ret
;copy [ttb] to ttab			***
ttt:	mov bx,2 ptr ttb
	cmp 1 ptr [bx],'$'
	jnz tt01
	mov bx,2 ptr ttbb
	mov 2 ptr ttb,bx
tt01:	cmp 1 ptr [bx],255
	jnz tt02
	add bx,2
	mov ch,[bx-1]
	cmp ch,16
	jae tt05
	mov si,offset ctab
	mov ah,0
tt03:	dec ch
	jz tt04
	call tt0si
	call tt0si
	jmp short tt03
tt05:	mov al,128
	sub ch,15
tt05a:	rol al,1
	dec ch
	jnz short tt05a
	or 1 ptr gbit,al
	cmp al,1
	jnz short tt02
	mov cl,1 ptr ginum
	inc cl
	cmp cl,1 ptr giall
	jbe short tt05b 
	mov cl,1
tt05b:	mov 1 ptr ginum,cl
	mov ch,0
	mov ah,ch
	mov si,offset g0
tt05c:	call tt0si
	loop tt05c
	mov 2 ptr gnn,si
	jmp short tt02
tt0si:	mov al,[si]
	inc al
	add si,ax
	ret
tt04:	mov 2 ptr ctaba,si
	call tt0si
	mov 2 ptr ctab2a,si
tt02:	mov di,offset ttab
	mov cx,0
tt1:	cmp cx,20h
	ja tt2
	mov al,[bx]
	inc bx
	cmp al,255
	jz tt2
	mov [di],al
	inc di
	mov 1 ptr [di],2fh
	inc di
	inc cx
	jmp tt1
tt2:	mov 2 ptr ttb,bx
	mov 2 ptr ttl,cx
	ret
;compare scr with ttab and change stab if scr was changed
ccc:	mov ax,3
	int 33h
	cmp dx,0
	jne short cc11
	mov di,cx
	mov cl,2
	shr di,cl
	mov ax,2 ptr ssb
	add ax,2 ptr ssx
	cmp di,ax
	jb short cc11
	add ax,2 ptr ssl
	add ax,2 ptr ssl
inc ax
	cmp di,ax
	ja short cc11
	cmp di,2 ptr mousx
	je short cc12
	mov 2 ptr mousx,di
	mov ax,2
	int 33h
	mov si,di
	sub si,2 ptr ssb
	mov ax,[si+offset stab]
	mov es:[di],ax
	mov ax,1
	int 33h
	jmp short cc12
cc11:	mov 2 ptr mousx,0ffffh
cc12:	mov bx,2 ptr ssx
	mov di,2 ptr ssb
	mov cx,2 ptr ssl
	jcxz short cc3
cc1:	lea si,[bx+di]
	cmp si,2 ptr mousx
	je short cc4
	mov ax,es:[bx+di]
	cmp ax,[bx+offset ttab]
	jz cc2
	mov [bx+offset stab],ax
cc2:	add bx,2
	loop cc1
cc3:	ret
cc4:	mov ax,2
	int 33h
	mov ax,es:[bx+di]
	cmp ax,[bx+offset ttab]
	jz cc24
	mov [bx+offset stab],ax
cc24:	mov ax,1
	int 33h
	jmp cc2
i8b:	pushf
	push ax
	push bx
	push cx
	push dx
	push bp
	push si
	push di
	push ds
	push es
	push cs
	pop ds
	mov ax,0b800h
	mov es,ax
	call eff
	call bbb
	pop es
	pop ds
	pop di
	pop si
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax
	popf
	jmp dword ptr cs:[i8a]
i10b:	cmp ax,0bb22h
	jne i101
	push cs
	pop es
	mov ax,1234h
	iret
i101:	jmp dword ptr cs:[i10a]
;	  ≥0   1    90   2    90   3   8 32≥
text:	db'Beware! Virus in memory!ˇ'
	db'Start destroying code:ˇ'
	db' 3 ˇ 2 ˇ 1 ˇ 0 ˇ'
	db'Joke!ˇ'
	db'Hello everybody! Open your eyes!ˇ'
	db'Skyflyer present for youˇ'
	db'new real-time MEGADEMO !!!ˇ'
	db'(for not understanding:megagemo-ˇ'
	db'program with great effects!)ˇ'
	db' see _______ and _______ enjoy! ˇ'
	db'So have a nice time while youˇ'
	db'see on your wondeful screen!ˇ'
	db'(especially on upperˇ'
	db'and left side)ˇ'
	db'Now see carefully, what happen!ˇ'
	db'Look at whese symbols:\\\\\ˇ'
db 255,16,'\\\\\And now:\\\\\ˇ'
	db' ---===<<<((( *** )))>>>===--- ˇ'
	db'Greetings to CodeBusters group,ˇ'
	db'the best megademo makers onˇ'
	db'ZX-SPECTRUM 128K 8-bit computer.ˇ'
;	  ≥	32 bytes for text	   ≥
	db'Read this scroll again.ˇ'
	db'_ˇ$'
beg:	push cs
	pop ds
	push ds
	mov ax,0bb22h
	int 10h
	pop ds
	cmp ax,1234h
	jne beg2
	push ds				;set old int vectors
	lds dx,es:dword ptr i8a
	mov ax,2508h
	int 21h
	lds dx,es:dword ptr i10a
	mov ax,2510h
	int 21h
	pop ds				;***

	mov ah,49h
	int 21h
	mov dx,offset tx2
	jnc beg21
	mov dx,offset tx3
beg21:	mov ah,9
	int 21h
	mov ax,4c00h
	int 21h
beg2:	mov ax,3508h
	int 21h
	mov 2 ptr i8a,bx
	mov 2 ptr i8a+2,es
	mov ax,3510h
	int 21h
	mov 2 ptr i10a,bx
	mov 2 ptr i10a+2,es
	mov ax,2510h
	mov dx,offset i10b
	int 21h
	mov ax,2508h
	mov dx,offset i8b
	int 21h
	mov ah,9
	mov dx,offset tx1
	int 21h
	mov dx,offset beg2
	int 27h
	mov ax,4c00h
	int 21h
;print bytes di=adr es=0b800h ch=clr al=ascii
pb:	mov es:[di],al
	inc di
	mov es:[di],ch
	inc di
	ret
fff:	ret
	mov ax,0b800h
	mov es,ax
	mov di,160*7
	mov si,81h
	mov ch,14
	mov cl,1 ptr 80h
ff1:	mov al,[si]
	call pb
	inc si
	dec cl
	jnz ff1
	ret
tx1:
db'Resident demonstration program by Skyflyer (C) 22.I.1996 (not full version)',13,10
db'Run it once more and it will removed from memory.',13,10
db'Usage keys: RightShift - slow speed, RightShift+Ctrl - fast speed,',13,10
db'            RightShift+Ctrl+Alt - super fast speed.$'
tx2:db'Ok! Program removed! Have a mice, sorry, a nice time!$'
tx3:db'Can''t remove program from memory!$'
C	ENDS
	END begin