▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
▓▓▓┌──────────────────────────────────────────────────────────────────────┐▓▓▓▓
▓▓▓│                                       ▄ ▄                            │░░▓▓
▓▓▓│ ▄██▄ ▄██▄  █ █  ▄▀▀▄ █  █ █  █ █▐▌█  ▄▄█▄▄ ▄██▄ █▀▀▄ █ █ █ ▄▀▀█ ▄▀▀█ │░░▓▓
▓▓▓│ ▄▄▄█ █▄▄▄ █ █ █ █    █  █ █  █ █  █  █ █ █ █▄▄▄ █  █ █ █ █ █  █ █  █ │░░▓▓
▓▓▓│ ▄▄▄█ █▄▄▄ █ █ █ █  ▄ █▄▀  █  █ █  █  █▄█▄█ █▄▄▄ █▀▀  ▀▄▀▄▀ █▄▄█ █  █ │░░▓▓
▓▓▓│  ▀▀   ▀▀  ▀ ▀ ▀  ▀▀  ▀ ▀▀  ▀▀▀  ▀▀▀    ▀    ▀▀  ▀     ▀ ▀  ▀  ▀ ▀  ▀ │░░▓▓
▓▓▓├──────────────────────────────────────────────────────────────────────┤░░▓▓
▓▓▓│                            В ы п у с к ∙4∙                           │░░▓▓
▓▓▓└──────────────────────────────────────────────────────────────────────┘░░▓▓
▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

    1. Как правильно разобрать и вылечить файл, инфицированный
сразу несколькими вирусами?

F>     Допустим, что файл инфицирован тремя  различными вирусами.
F> Вирус1 (V1). Ищет сигнатуру "0CD21h" в первом килобайте жертвы
F> и записывает туда переход на свое тело.  Тело  дописывается  в
F> конец. После тела дописывается до килобайта случайных байт.

Q>    Теорема без доказательства:  если это "корректно  работаю-
Q> щий" вирус, то он восстановит CD 21 хх в позицию, которая ссы-
Q> лается на начало сигнатуры sig1. это смысл операции, которую и
Q> нужно  искать.  этим занимается эвристика.  по большому счету,
Q> надежнее всего писать лечилку для каждого вируса отдельно. по-
Q> пытки  обобщать методы лечения приводят именно к таким упорам,
Q> как здесь:  "а КАК его лечить?" а почему этот вирус должен ле-
Q> читься с помощью _простого_ сигнатурного поиска? давай напишем
Q> язык,  который всунем в вирусную базу, и пусть этот язык опре-
Q> деляет начало сигнатуры. поскольку вирус1 генерирует случайный
Q> массив байт,  то это неизлечимый вирус, поскольку случайно мо-
Q> жет  выйти сигнатура вируса2 (с некоторой отличной от ноля ве-
Q> роятностью ;-). и тогда исцеление от вируса2 произойдет некор-
Q> ректно.

F>     Вирус2 (V2).  Записывает  переход  на  свое  тело в первых
F> байтах жертвы.  Свое тело пишет в область одинаковых  байт  (в
F> середину кода жертвы).

Q>     Тут поиск начала сигнатуры довольно простой. то есть, даже
Q> трассировать особенно не придется.

F>     Вирус3 (V3).  Раскидывает свой код по всему  телу  жертвы.
F> Переход  на первый свой блок вставляет в точку выхода из подп-
F> рограммы (RETF).

Q>    Поскольку RETF короче,  чем JMP куда-то, то вирус, который
Q> можно исцелить,  должен восстанавливать эти байты.  если он их
Q> не восстанавливает,  то он их может и не запоминать (как и ви-
Q> рус1),  и  поэтому файл будет классифицирован как неизлечимый.
Q> если же излечим в принципе,  то ищем переход на  sig1.  а  это
Q> снова трассировщик (эмулятор) с эвристиком. ну, хотя, может, и
Q> просто сканирование сигнатуры операции перехода.  но  снова  -
Q> это  не простой сигнатурный поиск.  хотя,  нужно определиться,
Q> насколько прост простой сигнатурный поиск ;-)

F> Примеры:
F> GOAT1.COM = GOAT.COM + V1 + V2 + V3
F> GOAT2.COM = GOAT.COM + V2 + V1 + V3
F> GOAT3.COM = GOAT.COM + V2 + V3 + V1
F> GOAT4.COM = GOAT.COM + V3 + V2 + V1
F> GOAT5.COM = GOAT.COM + V3 + V1 + V2
F> GOAT6.COM = GOAT.COM + V1 + V3 + V2

Q>     Проблема состоит только с вирусами, которые изменяют длину
Q> файла. скажем, вирус2 проблемы не несет. потому что корректное
Q> лечение заключается в восстановлении начальных байт,  и,  воз-
Q> можно,  массива одинаковых байт в теле. поэтому лечение должно
Q> начинаться с таких вирусов. утверждение, кажущееся умным: кор-
Q> ректировать  длину  файла некорректно до конца излечения.  еще
Q> одна теорема без доказательства:  если вирусы  не  затрагивают
Q> код друг друга,  то файл излечим всегда.  в противном случае -
Q> если последовательность запуска вирусов выделить  удается,  то
Q> лечим их в этой последовательности;  если не удается - то файл
Q> неизлечим. важное следствие: трассируем файл, пока не наткнем-
Q> ся на вирус. это будет либо излечимый случай1, когда вирусы не
Q> затрагивают друг друга, или это будет излечимый случай2, когда
Q> мы  отыскали  вирус в правильной последовательности.  конечно,
Q> нужно придумать еще детектор случая3, когда мы отыскали затра-
Q> гивающие друг друга вирусы,  но начали не с того. чтобы сигна-
Q> лизировать о неизлечимости.  поскольку раз _мы_  дотрассирова-
Q> лись  до  неправильного  вируса,  то и процессор может до него
Q> добраться именно в этой последовательности,  и кто знает,  мо-
Q> жет,  это  случается  всегда.  вирус3 должен куда-то сохранить
Q> байты из-под пятен.  это обязательно произойдет в конец файла.
Q> если эти байты находятся _после_ начала вирус1, значит, снача-
Q> ла был вирус1.  если _до_ - то вирус3. хотя, из важного следс-
Q> твия можно сказать, что последнее предложение не важно.
