EXE Infection
RandomKiller
-------------|Jedi Master RandoMKilleR's InDepth Tutorials #1|-------------
\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/
/-\-/-\-/-\-/-\-/-\-The Process of infecting DOS EXEs-\-/-\-/-\-/-\-/-\-/-\
\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/
/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\
\-/-\-/-\-/-\-/-\-/-\-/-\-/-By RandomKiller-\-/-\-/-\-/-\-/-\-/-\-/-\-/-\-/
---------------------------------------------------------------------------
Hello and welcome To RandoMKilleR's First Installment of InDepth Tutorials
on beyond basic COM infection. Now get comfortable cause you ain't leaving
till you understand!

Okay here's the low down...
First off EXE files, unlike COM files, have a header this is how the header
is setup:

offset		    Description
  00h  | -If this is a real exe it should be 'MZ' or 'ZM' so if you want to
       | to be smart you can check this to make sure you're infecting the
       | the right shit.
  02h  | -EXEs are made up of pages. A page has 512 bytes in it. Most EXEs
       | won't have exactly X number of pages, usually there's some excess
       | code that doesn't fill up a whole page. The size of this excess
       | code goes here. For all you freakin' mathematicians this is the MOD
       | of the filesize divided by 512 for you preschoolers that's the
       | remainder of the filesize when divided by 512.
  04h  | -this is the quotient of the filesize rounded up. We round this
       | shit up because we want to include the excess code in our little
       | game of infection and mayhem and all that good stuff.
  06h  | -this is the number of entries in the relocation table. What?
       | You don't know what a relocation table is? Well... in many of
       | non-tiny (above 64k) EXEs there's a table of pointers all pointing
       | to addressing commands that help correct the segment so the right
       | things in the program are loaded. like there might be a part in the
       | EXE that is written like this:
       |     JMP 0000:1234
       | but the file doesn't actually want to jump to 0000:1234 it wants to
       | jump to the predefined segment which is kept in the relocation
       | table. Still don't understand? Then Fuck it, this shit just isn't
       | important anyway. Not needed if you keep your code within the
       | segment with no far calls out of it (unless its a location that you
       | can rely on not fucking up [static locations]).... But! I've been
       | told some pretty tricky things that you can do to use this table to
       | your advantage. Maybe in a future installment?
  08h  | -Size of the Header in paragraphs. The header is this fuckin' pain
       | in the ass table. A paragraph is a fancy word for a unit of 16
       | bytes. Just like the filesize round this shit up too. Often because
       | the header is rounded up there's a bit of unused space in the
       | header so you can use that place to store info and be pretty
       | confident that it'll be safe.
  0Ah  | -Minimum Paragraphs of memory Allocated. Self explanatory.
       | Even if it isn't I'm not gonna waste my time telling you after
       | all this is _basic_ DOS EXE infection.
  0Ch  | -Maximum Paragraphs of memory Allocated. Self explanatory.
       | blah blah blah blah blah blah blah blah blah blah blah blah
  0Eh  | -Starting Stack Segment Relative to Start of File. This is the
       | segment of where the stack goes. This Segment should be the same
       | one that the virus uses as its entry point (unless the offset of
       | the entry point is pretty high into the segment).
  10h  | -Stack Pointer, this should be a pointer for where in the Stack
       | segment will the stack begin at. Odd numbered Stack Pointers make
       | good infection markers. Keep em up high away from your code. Stacks
       | grow downwards not upwards so they can pose a threat to overwriting
       | virulent code if placed to close to our code.
  12h  | -Negative Checksum... Doesn't really matter what's here. Yet
       | another good place to put infection markers. Wait I got a little
       | technical info on it: "one's complement of sum of all words in
       | executable" Hmmmmm... ok doesn't sound too important go ahead and
       | use it for an infection marker... eventhough this method is way
       | overused.
  14h  | -Instruction Pointer relative to start of EXE's code. In other
       | words edit this to point to the entry point of our virus.
  16h  | -Starting Code Segment relative to what segment the EXE's code
       | starts. Edit this to point to our virus' segment.
  18h  | -Relocation Table offset. Remember, don't play with it unless you
       | really know what you're doing. If you want to make sure that you
       | don't infect all those non-DOS and oh so technical types of EXEs
       | you can make sure the word stored here is less than 40h.
  1Ah  | -Overlay Number. If no overlay this is 0.

Parts of the header which contain information needed :
Word @ 00h (smart but still just optional
Word @ 02h (optional. can you say full stealth?)
Word @ 04h (optional. Used for full stealth reasons)
Word @ 08h (you need this so you can subtract it from the dx:ax value that
your moving pointers to eof will give you. After all the header shouldn't be
included.)
Double Word @ 0Eh (Essential for returning control to the EXE. If you use
the stack pointer for an infection marker you might also need the info at
10h. Also dandy for full stealth)
Word @ 12h (optional. Depends what you use for an infection marker)
Double Word @ 14h (this contains the original entry point for the EXE and is
 vital for returning control to the host. Also dandy for full stealth)
Word @ 18h (smart but still optional. Remember if this value is 40h or
greater you're probably dealing with NE or PE EXEs! ACK!)

Additional Note:
With all this talk about values for full stealth lemme just add: If you're
gonna Full Stealth why not just keep a copy of the original header?
To infect DOS EXEs you should edit these offsets in the header:
       02h, 04h, 0Eh, 10h, 14h, 16h (this doesn't include offsets for                                            potential infection marker storage)

Additional Note:
Remember, because the header is measured in 16 byte units (paragraphs) if
it has 28 bytes of actual header in it the header will have to give itself
32 bytes because 28 isn't a multiple of 16 (so in the header it would write
2 paras (32/16 = 2)) so that means there's 4 free bytes in that particular
case. Hmmmm... perhaps could be used for infection marker, but on the other
hand it would be a lot of trouble searching for free header room in each
infection and what about those poor EXEs which headers add up to a multiple
of 16? They would miss out on all the fun... Guess you could enlarge the
header but don't think as I once thought _The header is NOT loaded into
memory so don't even try putting some code there_

Okay here's the Step By Step and basic theory:

1: -Find a File Via Runtime 4e/4f or Ressident Open/Close/Exec/etc
2: -Open it and read the header (20h bytes should do) put it in a buffer.
3: -Check offset 00h and see if it's a 'MZ' or 'ZM'
*If true then go to 4 else go to 11*
4: -Check infection marker location to make sure the mark isn't there. I
   gave you ideas of where to put it (checksum,SP,seconds field of last
   edit, etc).
*If true then go to 5 else go to 11*
---- Smart Optional Step - Smart Optional Step - Smart Optional Step ----
-Check the word at 18h in the header and make sure it's below 40h... If it
 isn't go to 11 unless you have a few PE and NE routines up your sleeve :)
---- Smart Optional Step - Smart Optional Step - Smart Optional Step ----
5: -Put all the old values into variables. These values are SS at 0eh, SP at
   10h, IP at 14h, and CS at 16h. Save em so we can use them to regain
   control of exe after the dirty work.
6: -Move pointer to end of host file and calculate New IP and CS and put
   results where they should go in the copy of the header you copied. Note:
   subtract header size from the value and if you want your virus' entry
   point not to be directly at eof add the number of bytes from eof where
   you want it to start.
   (More on calculating at the end)
7: -Append Virulent code to newly made entry point.
8: -Move pointers to end and Adjust 04h and 02h in the header for new
   infected size. Remember to Divide by 512 and add 1 for 04h and take the
   remainder for 02h.
   (More on calculating at the end)
9: -Adjust SS and SP so Stack is relocated to a place past the end of our
   code (We don't want to push information over our code so make sure
   there's a good 100 or so bytes between the end of our code and the
   stack.) Put these values in there place in your copy of the header.
10:-Overwrite old Header with your copy.
11:-Close the File or Restore control to interrupt.
12:-Restore Stack to Original Value and set CS:IP (original entry point) up
   just before a 'db 0ea' (jmp far (immediate) ????:????) So the original
   EXE can regain Control. Also set ES and DS to point to the Program
   Segment Prefix ([CS-10h]:0000). Note: You can push these values on entry
   and pop em on your way out the door.
13:-Once everything is setup let your code hit the jmp to the original entry
   point...
14:-Buy and smoke some bud :) (***essential for proper infection***)

The Calculation Area! Okay this is a hard thing for many people to
understand so i'll try to make using all these odd calculation methods
more comfortable for all of you to use. WARNING! SUPER INDEPTH!

1st Calculation ***Calculating the New CS:IP***
Here's a piece of code i stole. I'll explain everything don't worry.

Alright this is right after we do a int 21h 4202h to the end with dx:ax now
pointing to the end of the uninfected host file.
push ax 	;save the location offset for later usage
mov ax, word ptr [header+bp+8h] ;bp = our delta offset
				;header+8h = size of header in paras
				;result = size of header in paras is in AX
mov cl,4			;cl = 4
shl ax,cl			;okay here's some explaination on shl:
;this takes a number as a binary number and pushes each number left for the
;amount of times that's in the count register. In this case its cl or 4.
;So let's say the size of the header was 28 bytes that would translate in
;the header as 2 paragraphs. So the binary number for 2 is:
;	0000 0000 0000 0010  CF=not set (always remember 4 sets of 4!)
;Now if we shift it to the left 4 times...
;	0000 0000 0010 0000  CF=not set
;And that in decimal is 32!
;so 2 becomes 32 when shifted left 4 times.
;When any number is shl by 4 it is in reality being multiplied by 16
;here's a little table explaining what multiplication it is depending
;on the value of CL
;_____________________________________________________________________
;|cl = 1 = X2	 |cl = 2 = X4	  |cl = 3 = X8	   |cl = 4 = X16     |
;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
;Additional note:
;For certain values (high ones) the multiplication will fuck up. Fear not
;Header sizes are never too big. For example if our header were bigger than
;4095 and we'd do a shl 4 it'd fuck up. Why does it fuck up? Because in
;Binary 4095 is 0000 1111 1111 1111b anything more would give the # no more
;space to shift left so it'd wrap around and pop up into the carry and then
;into to binary place farthest right! OH THE HORROR =)
;
;Get the pattern? Back to the code!
;So why did we multiply the size in paras by 16? Cause a para is 16 bytes
;and we need the value in bytes.
mov cx,ax		;We move the length of the header in bytes into cx
pop ax			;now that the register is free we get our offset of
			;the pointer back (end of file)
sub ax,cx		;ax is also the size so we subtract the header from
			;the size.
sbb dx,0		;subtracts 0 from the segment unless the carry flag
			;is set in which it subtracts 1. It does this just
			;in case we subtract more from the offset than we
			;can. So dx:ax = file size in seg:off form minus
			;the header.
mov cx,10h		;cx = 10h
div cx			;divide ax (size subtract header) by 10h to convert
			;into segment:offset form. AX = quotient
			;DX = MOD (remainder)
			;because its allconverted into segment the remainder
			;is in actuallity the offset pointer!

mov word ptr [bp+my_exe_header+14h],dx ;put the offset in the header
mov word ptr [bp+my_exe_header+16h],ax ;put the segment in the header

That's all there is to it! I'm sure most of you when writing you're first
EXE infector might only be familiar with this method (because this is the
one i taught you) well don't feel like a code stealer for using this method
or any methods i've presented, you have my permission... I don't know if you
have the permission from the prson i stole it from tho :) There are many
other methods of calculating the CS:IP and i'm sure there's some much better
optimized, but i find this code easiest to understand and this is the one
i've been using for so long...

Now onto the second calculation:

2nd calculation ***Calculating Size of file in Pages and MOD (remainder)***

This one is much easier. Let's walk into this assuming that DX:AX points
to the file size that came from the old header converted into bytes or taken
from the DTA or from the pointers pointing to it.

add ax,virus_length	;add the virus' size to the before size
adc dx,0		;If a carry add one if not don't add anything to
			;the segment (round it up).
mov cx,512
div cx			;Divide by 512 to put it in pages
cmp dx,0		;is there a remainder?
je no_remainder
inc ax			;if there is round up
no_remainder:
mov word ptr [bp+my_exe_header+4h],ax	;Put in the quotient which is the
					;number of pages
mov word ptr [bp+my_exe_header+2h],dx	;And put in the size of the excess
					;code!

If this one is buggy it's because I made it up with little thinking :P I
don't see why it shouldn't work...

3rd calculation ***Calculating New SS:SP***

SS:SP adjustment: To adjust this put in SS the last segment in the exe
and for SP make it a high offset where you know it won't interfere with
your code OR increase the segment up one. For offset you can use a
predictable (not necessarily just make sure its common in each infection)
offset and use it as an infection marker (this trick is a bit overused).

There, wasn't that easy? Well that's it for this installment take a look
at my agentexe virus (included in this issue of LT) for a look at everything
in action! In my next installment i'll take an indepth look at post
Executing Exe infectors! And guess what? that's in this very issue of LT!
Oh Joy!

Jedi Master RandoMKilleR of Living Turmoil

Still Replicating...
