---------------
* Epidemic #1 *
---------------


      Methods of installing a virus on Amiga system, part 1

At the beginning I want to say that I will not write anything about things
which are obsolete and those who are well known by antivirus programs.
Temporarily nothing about packets will be introduced; unfortunately I am not
a master of Amiga assembly language, but I will do my best to introduce some
new ideas. Well, ladies, let's begin.

At the beginning - a little bit of theory..
Most of the Amiga linkviruses take control over this library vectors
to infect files, most often it's the LoadSeg() vector. In this case
virus infects all programs launched on a given machine. By patching an
Open() vector in other hand allows a virus to infect files while these are
being opened by i.e. an antivirus program. It's important that a programmer
should have a concept of how should a virus work before he starts writing it.
For example by taking over an ExNext() vector virus can infect entire system
much quicker, but in other hand it gives some restrictions. Virus based
on this vector has to minimize the infection time of a single file as much
as possible, or else user may notice disk reaction slowdown and in result
- discover a virus. Therefore if a virus is to be quick or very quick
infector, it won't have too much time for crypting its code in memory,
generation of polymorphic decrypting procedures, using retro-techniques and
so on. Such virus has to have a simple construction and limited size, i.e. to
1000 bytes, should infect rather small files, since these have to be read
completely to memory and later written back to disk again. There's only one
exception from this rule: virus may use a method which doesn't force it to
rewrite entire file on disk. On the other side virus which infect opened via
LoadSeg() etc. or infecting seldomly can have a bit wider work area: it can
use entire polymorphism both in memory and in files, may adapt
retro-techniques, code modification during its work etc. In case of executing
a file user won't notice any slowdown even if it is close to 30%, or at
least the chances he does are very low. We may spend this time on generating
a polymorphic decoder and let the generator choose instructions equivalents,
scan for a numbers in some area or make a set of random numbers for its needs.
Slowly infecting virus, which doesn't affect system stability can be even
6kB big.

After this small doze of theory we can get to real part of this article.

1. dos.library.
As I already said, a good thing is installing a virus on LoadSeg() vector,
however most of antivirus programs use system monitors, which check the most
critical parts of the system. What should we do, then? We have some methods
to prevent such program from discovering a virus and some more to fight with
an antiviruses. The easiest way is to check for existence of any known
antivirus in system before installing virus code. It can be done by searching
for a task structure of this program, and when the result is positive - simply
resign installing virus. When the result is negative, however, virus installs
itself in memory and controls programs execution, and when it finds a "VIR"
sequence in file name it restores original vector addresses and uninstalls
itself from memory. It's just one of the methods. The other one is based on
installation of virus in system even when an antivirus program is running.
Even in this case we can hide using various tricks:

a. We found a task of antivirus program. Virus checks if a vector which is
to be overtaken has an original value and if so - it simply doesn't install
itself. However if an original address wasn't found, virus picks from
'dos.library' offset table an address of procedure which took over the vector
earlier and scans it to fine a place to put a jump to viruses code, and when
it finds such place - modifies the procedure that way, that it calls viruses
code while it is executed. An antivirus program would raise an allarm, when
the patch is nonstandard or when it doesn't exist in the antivirus' database.
The patch would be removed immediately, However, when an antivirus finds the
changed procedure address a safe one, i.e. explode.library
it will just write down in a window that such a patch was found and nothing
else. This way we can install a virus in a system, but it has to be really
really careful.

b. As in previous example we have an active antivirus program in memory.
Virus however doesn't perform any checking if any program took over a given
function earlier, but using a retro techniques it modifies an antivirus code
in memory this way that it doesn't check the vector controlled by a virus,
or to make the result of memory scan always negative meaning no
virus presence.

Open().
Actually almost useless for viruses. There are not more than a few viruses
which take control over this vector. The difference between this and LoadSeg()
function is that there are much fewer number of procedues working on this
vector, so the chance of taking over it the same way as LoadSeg() is smaller.
Besides user may notice that Open() function executes slower, so the best for
us would be to infect file during disk operations - most of computer users
won't give a sh.. for it ;)

Write().
This vector may be useful for a virus to make a file infection during a file
copy or creation. Quite often we may find a PPatcher installed on system.
This tool is used to compress and decompress files on-the-fly. This idea was
used in Cryptic Essence virus, which compresses some part of file in order
to keep an original file size even after infection.

2. Other methods.
Recently I have been thinking about new methods of installing a virus in the
system. Quite easy (and effective) method is to add a new process to the
system (processes may call dos.library procedures and vice versa) and a new
procedure on VBlank interrupt. Process contains procedures for file infection, 
while interrupt picks from ramlib structure lock to actual directory and
compares it with previous one. If these are not equal, it means to us that
the directory has been changed and we can keep infecting files. It can be
done by setting an appropriate byte in memory obtained/controlled by
a process. Our process starts infecting one or few files in a given directory
and clears the byte.

Another method I would like to introduce is installation of procedure
searching for "infectable" files using pr_ExitCode field. The code stored in
pr_ExitCode is executed right AFTER the code ends. How it works? Let's see:
when given process ends, it must be removed from task queue and things like
seglist and allocated memory must be freed. If you look at tc_SPUpper, you
see there name of the process (offset 0), size of stack (offset -4) and...
pointer to ROMCleanUpCode (offset -8). This pointer calls routine from
pr_ExitCode if this entry is not NULL.

There is one more method, but it's rather difficult to say if it will ever be
used. It's associated with scanning a Seglist of infected process, but it may
be quite... time consuming. This method bases on installing our own procedure
on ts_TrapCode, of course only in processes. Later, we scan following process
segments to find i.e. JSR -36(A6) instruction. If we find a dosbase in A6 reg,
we just call Close() function. This function closes a given file. In place of
found instruction we put TRAP #15. When such a modified instruction is called,
an exception would be raised and we would be the one to handle this exception.
So, we check if we have a dosbase address in A6 register, and if not - we just
exit the handler and call JSR -36(A6) instruction. However, if so - we infect
a file before it is closed and then we go return.

More informations next time...

MaD roGEr
