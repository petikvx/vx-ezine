---------------
* Epidemic #1 *
---------------

MASS INFECTORS

It's more story than article, but should be interesting.

Mass infectors are viruses which's mainly aim is to spread as fast
as possible. Mass infector needs to get access to large amount of files.
This can be done i.e. by patching system directory listing routines.

The first mass infector was MegaLink virus,
which just scanned directories for commands to infect.
It was long time ago, so let's speak about something newer.

There were very long breaks becuase scanning directories does
much noise, but when virus programmers leant to use
packets wellknown SMEG appeared (1996).

SMEG was the first packet-based virus which was also mass-infector
(it used examine packets for infection).
Packet based infection was faster than dos.library one,
and the virus did less noise than others since it was infecting files
bigger than 8 kB. The system infection was based on stealing
packets from devices. It was done by changing device task's message
port to send messages to the fake process first.
I think our member Aginor will write something about his
virus (which source is available from our homepage).
Smeg was state of the art infector and the last one
until VRU! formed (2000).

The first virus I have coded was BASTARD - the big
one with my own polymorphic engine. The virus was
infecting files found in TaskWait list, so it was
quite slow, and when someone had started
VirusCheckerII the hell began - every checked file
was infected! How?
By retro-analysis of VirusChecker I have found Lock()
call performed for every checked file.
The virus used complicated way to modify VC in memory,
because (as some of You may have noticed) VC pops up its nasty
message saying that it was modified. The VC selftest
is done once at start, so the best solution was to add to
system a patch that would find loaded VC and hack it.

My Bastard used asl.library, because it is in RAM. Why?
The times of classic library viruses are gone,
so the best idea was to install the patch in
the function code instead of poking jumptables that are
snooped by every good antivirus.
I found a routine that is executed when VC's filerequester
appears and that's it! When VC opens requester the tests
are surely finished, so virus can dig in it!
As I said BASTARD was 'big' virus that only partially became a
mass infector, but it inspired me to write a real mass infector.

The BOBEK! was 460 bytes long and patched library function
ExNext(). As I said the times of the library viruses are
gone, but I have noticed Alex van Niel and Jan Erik Olausen
don't know assembler! Moreover, the third programmer - Zbigniew
Trzcionkowski - doesn't develope any file cleaning program...
Such AV scene is not scene. It's a joke.
As I said Bobek was very small and has spread quite fast.
I saw that infected files appeared as new releases and that
explained me the power and quite good way to spread virus!
Of course library based virus can't live forever.
Memory removal took about ten lines of code and could be done by even
unexperienced assembler coder... Why BOBEK succeeded in infecting
so many systems? BOBEK was fast and quiet due to rewritten infection
routine. I think it was the fastest one based on dos.library.
As You may see in the sourcecode, I managed to add some
moderating routines that made BOBEK keep clear files whose size is
not dividible by four (as You can see executables are build
of LONGS) and to skip some files by using random value. This made BOBEK
infect only about half of files during one scan.

After some time MadRoger had taken over VRU! group (2001),
and we started to make the first friendship fast infector.
It was BOBEK2. As You may guess it was another library-based
virus, but this time it was different than all the others...
what would You say about library patch that cannot be removed?
Bobek2 was almost equal to BOBEK1, but had patch protection
routine. The protection was based on timer.device and was invented
by Spray. For unexperienced user it might have looked like MMU based
protection, but of course there was just small interrupt which controlled
the ExNext() address and patch memory. If someone (for example)
had tried to overwrite virus with NOPs he would see that it doesn't work!
It took longer time to write memory removal so the virus
could spread. We thought there WAS NO cure for timer.device,
but Zbigniew has released something strange.
I have analised this code, and found it very strange.

We have noticed that for some reason it works (or falls in busy-loop),
but the system crashes when the virus reenters memory.
I don't know what is worse: bugs in BOBEK or bugs in this routine.
I am writing about that because reverse analysis explained that
new xvs.library uses the SAME code.
I think MadRoger was right when he said that Olausen even
don't know what he had assembled. We are sure that it won't change
in future, at least until Olausen learns to code.
This means there is no memory removal that works properly,
and this is the main goal of timer.device technology.
We still believe that it is good and should be used in new viri.

The second interesting thing was the poly-engine.
MadRoger has created one of the smallest engines in his life especially
for BOBEK2. Some people say poly engines are too slow and too big for
fast infectors, but that one was so fast and small that I didn't
notice any difference. The other reason was that experimentlly
BOBEK2 was written as BINARY virus. I will write text about it later,
- now it should be enough if is said that virus was splitted into two halves
and kept in two files, therefore both parts were needed to install virus in memory.
Life taught us that we were wrong and the smaller size gained
by using binary technology wasn't worth the cost we paid for it.
More important thing is that there was a bug in the virus and it's
technology got indirectly wasted.
In other words the virus became one of the strangest things
in the history of Amiga viruses. Well armoured fast infector has bug
that made it refuse to work on many configs. We are working
on the reasons of this failure, but it isn't important because
fast infectors are not dead. We keep working on such viruses,
and probably some people will follow us after downloading sources
from our page.

Recently PENETRATOR has appeared. It's a SMEG clone
coded by lamer, who took our source code. It spreads fast,
but crashes the system. Coder of the virus has made decryption routine
without CacheClearU. There is no point to talk about this
crap. Engine of best fast infector was wasted to carry
loads of LAMEST TEXT WE HAVE EVER READ IN OUR SHORT LIVES!
If this guy is as lame as his texts, he should begin with buying PC.

I think Aginor will write text about Smeg2, but now it'd be better to wait
until the AV community deals with the virus itself.
The memory infection routine is rewritten and uses new way to
steal the packets.
For end-user virus looks rather like first SMEG. The only problem may
be with removal of tricky patches.
The virus isn't polymorphic, so it can be seen as wasted technology.
We will talk with Aginor about wasting new technologies for non-armoured
viruses....

What in future?
Fast infectors will surely appear.
There is one idea left for dos.library based infector and it will be used
in BOBEK3 but this is secret at the moment.

Good mass infectors would need new technologies,
such as:
 - memory protection (MMU or timer.device)
 - slow polymorphism based on configuration
   I mean on each machine a new variant of decoder appears, and evolves each day.
 - retro technics to make antiviruses infect :-)
 - new ways of file infection
 - new ways of installing in memory

What will be next?
SMEG3?, BOBEK3?

Sweet dreams...

PANDAMEN
