                   Allenware.com Batch Library
                    StudyPack 6 (study06.zip)
                    Self-deleting Batch files
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 6 files in study06.zip

 README.TXT     Common README file contained in all StudyPacks
 SELFDEL.TXT    This file
 SELFDEL1.BAT   Simple Self-deleting Batch file. This file is specially
                 edited to have no final CarriageReturn LineFeed line end.
                 The deletion command must be on this special last line.
 SELFDEL2.BAT   Demonstration of START method to determine full
                 path to current Batch file. This example is not
                 Self-deleting, but merely illustrates START method.
 SELFDEL3.BAT   The standard Self-deleting method, using the MidExit
                 technique to avoid need for specially edited file.
 SELFDELR.BAT   This recreates the SELFDEL1.BAT and SELFDEL3.BAT to
                 avoid need to save copies of the Self-deleting files
                 while you are testing them.


===Introduction to StudyPack 6 on Self-deletion

Sometimes it's useful for a Batch file to be able to delete itself
when it's task is done. The examples included in this StudyPack show
several approaches to this. The problems of Self-deletion, and the
solutions, are discussed below.


===Instructions for using StudyPack 6

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Place the files (listed above) in a working folder on your hard
    drive (preferably one that doesn't contain any other files).

(c) Open your custom MS-DOS window with that working folder as its
    current folder.

(d) Print up SELFDEL1.BAT, SELFDEL2.BAT, and SELFDEL3.BAT and have
    them by you as you study the discussion on Self-deletion below.


===Simple Self-deletion

A batch file can delete itself by simply using a DEL command, thus:

  DEL MYBATCH.BAT

However, there are two problems:

(1) How does the Batch file "know" what it is called?

(2) COMMAND.COM will attempt to continue execution of the now deleted
    file, and you will see an error message:

============Screen capture
C:\WORK>type demo.bat
@ECHO OFF
DEL DEMO.BAT

C:\WORK>demo.bat
Batch file missing

C:\WORK>
============End screen capture


A simple solution to problem (2) is to make the DEL command the last
line, and to create the Batch file specially so that this last line
has no final CarriageReturn LineFeed termination:

============Screen capture
C:\WORK>type demo.bat
@ECHO OFF
:: The next line has no final CarriageReturn LineFeed termination
DEL DEMO.BAT
C:\WORK>REM Now we run DEMO.BAT and it deletes itself

C:\WORK>demo.bat

C:\WORK>REM Now we try to TYPE DEMO.BAT again (to show there's no file left)

C:\WORK>type demo.bat
File not found - demo.bat

C:\WORK>
============End screen capture


A simple solution to problem (1) is to use the name retrieved from %0

============Screen capture
C:\WORK>type demo.bat
@ECHO OFF
:: The next line has no final CarriageReturn LineFeed termination
DEL %0
C:\WORK>REM Now we run DEMO.BAT and it deletes itself

C:\WORK>demo.bat

C:\WORK>REM Now we try to TYPE DEMO.BAT again (to show there's no file left)

C:\WORK>type demo.bat
File not found - demo.bat

C:\WORK>
============End screen capture


There are, however, a number of problems with this %0 approach. For
example, a Batch file can be run without specifying the .BAT extension.
In the case above, this would mean that %0 did not hold the filename
needed for the DEL command, and the file won't delete itself, thus:

============Screen capture
C:\WORK>type demo.bat
@ECHO OFF
:: The next line has no final CarriageReturn LineFeed termination
DEL %0
C:\WORK>REM We run DEMO.BAT with "demo", and the DEL command fails

C:\WORK>demo
File not found

C:\WORK>REM The file is still there

C:\WORK>type demo.bat
@ECHO OFF
:: The next line has no final CarriageReturn LineFeed termination
DEL %0
C:\WORK>
============End screen capture


The example SELFDEL1.BAT solves this problem by testing the %0 parameter
to see whether or not a .BAT extension was supplied, and adding one if
needed. You should now study the SELFDEL1.BAT example.


===How a Batch file can "locate itself"

The simple approach in SELFDEL1.BAT, namely adding .BAT to %0 if it's
missing, won't work in all cases. The Batch file may be in the system
PATH and have been run by using its name without the full path to itself,
and without its being in the current folder. In that case, SELFDEL1.BAT
would fail to locate itself properly for the DEL command, and so fail to
delete itself.

The START command can be used to overcome this problem. When a Batch file
in Windows 95/98/ME is run with the START command, Windows loads the full
short-form alias path to the Batch file in the %0 parameter.

SELFDEL2.BAT (which doesn't delete itself) shows how this feature of the
START command can be used to allow a Batch file to locate itself properly.

A Subroutine in the SELFDEL2.BAT is called with START. This Subroutine
runs momentarily in a minimized window. The Subroutine loads the contents
of the %0 parameter into a SET command, and stores it in workfile. When
the Subroutine returns, the main code executes the workfile and retrieves
the contents of the Subroutine's %0 parameter in the variable SELF (the
workfile is then deleted).

This START technique is useful in many cases where a Batch file needs to
locate its own file specification reliably (no matter what it may have
been renamed to, nor what folder it may have been placed in).


===Problems with the DEL+noCRLF (DEL + noCarriageReturn LineFeed) approach

Although the START technique solves the problem of reliably locating
"self", the simple DEL+noCRLF approach to avoiding the "Batch file
missing" error is unsatisfactory for several reasons.

Firstly, it requires special editing of the Batch file (ensuring there
is no final CarriageReturn LineFeed)

Secondly, when the DEL+noCRLF is used, it must be the last line of the
Batch file. This means that the Batch file can't use Subroutines (since
Subroutines return to their parent code by jumping to the :EOF label,
which itself must come at the end of the file). If you added the DEL
command after the :EOF label, the Batch file would try to delete itself
instead of returning from the Subroutine.


===MidExit technique

To overcome this problem, we devised the MidExit technique. This allows
a Batch file to terminate (and delete itself, if wished) from a point in
the Middle of the code. The MidExit technique doesn't require any special
last line termination, and allows a Batch file to use Subroutines in the
normal way.

The MidExit technique works as follows:

(a) The START method is used (with a STARTed Subroutine) to determine
    the full path of the current Batch file in a variable (such as SELF).
(b) A tiny temporary Batch file (called _X.BAT and located in your TEMP
    folder) is created consisting of the three lines:

    DEL %1
    SET %2=
    DEL %3

    The last line of this file is created without a final CarriageReturn
    and LineFeed.

(c) To have the main Batch file terminate somewhere in the middle of the
    main code, this _X.BAT batch file is run as follows:

    _X.BAT %SELF% SELF _X.BAT

    (in practice, of course, since the file will be in your TEMP folder
     each _X.BAT occurrence in that would become %TEMP%.\_X.BAT)

(d) The result is that the _X.BAT file runs as:

    DEL %SELF%
    SET SELF=
    DEL _X.BAT

    In the first line, %SELF% expands to the full path to the main Batch
    file, so it's deleted. The second line clears the SELF variable, so
    no trace of it remains. The third line deletes _X.BAT itself. Since
    _X.BAT has no final CarriageReturn LineFeed, this doesn't produce an
    error message

(e) Since the main Batch file (which has now been deleted) didn't CALL
    the _X.BAT file, but merely ran it normally, control is transferred
    to the _X.BAT file in the process, and Windows doesn't try to run
    any more of the main Batch file. The MidExit technique leaves no
    trace of either the main Batch file, nor the SELF variable, nor the
    tiny _X.BAT workfile.

 The combination of the START method for locating "self" and the MidExit
 technique for midpoint exit from a Batch file solves the problem of
 Self-deletion in an elegant manner.

 The example file, SELFDEL3.BAT shows the full syntax for the START self
 location method and the MidExit technique. SELFDEL3.BAT deletes itself
 without trace or error when run in Windows 95/98/ME. In this example,
 the entire process: START self-location and MidExit with Self-deletion,
 is placed in a Subroutine you can use in any other Batch file.


===Batch Subroutines

You may wish to read StudyPack 1 (Using Subroutines and the Standard
Batch file Template) to understand how to mix your own code with our
Standard Batch Subroutines.


===One small problem remains

Only one problem remains. When experimenting with Self-deleting Batch
files, they naturally keep deleting themselves!

The final example file, SELFDELR.BAT, will recreate the two Self-deleting
example files, SELFDEL1.BAT and SELFDEL3.BAT making it easier to try
them out several times over, and study their action more easily.


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
