                   Allenware.com Batch Library
                    StudyPack 7 (study07.zip)
                 Universal Prefix file technique
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 7 files in study07.zip

 README.TXT     Common README file contained in all StudyPacks
 UPREFIX.TXT    This file
 UPREFIX1.BAT   Use of Universal Prefix to load number in variable
 UPREFIX2.BAT   Loading most recent file into variable
 UPREFIX.OLD    File dated 00:00am 1-Jan-1986 for use in Tutorial
 UPREFIX.NEW    File dated 00:00am 1-Jan-2025 for use in Tutorial


===Introduction to StudyPack 7

It's a common requirement to retrieve a line of text, or the output of
a command, into an environment variable. The Universal Prefix method is
a very flexible way of doing this. The Inception technique (see our
StudyPack 8) addresses the same requirement, but is less versatile than
the Universal Prefix method.


===Instructions for using StudyPack 7

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Briefly study the two examples (UPREFIX1.BAT and UPREFIX2.BAT) and
    try running them. Watch the results. Then work through the Tutorial
    below.


===Immediate mode Tutorial for the Universal Prefix technique

Work in a custom MS-DOS BatchWindow, as in Instructions (a) above.
We'll create and use a Universal Prefix file to capture a line of
text, and then to capture the name of the oldest file in the current
folder.

(1) At the prompt, create two files with redirection, and TYPE
each one to confirm its contents (note that %%1 is the way to
ensure that %1 is ECHOed into the file - Windows reduces each
pair of %% symbols to a single % each time it processes them)

============Screen capture   (comments added)
C:\WORK>echo.SET %%1=>prefix.bat

C:\WORK>type prefix.bat
SET %1=
                                        (notice this blank line)
C:\WORK>echo.Any line of text>file.txt

C:\WORK>type file.txt
Any line of text

C:\WORK>============End screen capture

Notice the blank line following each TYPEd file. This is because each
file ends with a CarriageReturn LineFeed. Files created with ECHO always
have this termination. So does the output of most command-line operations.

(2) If we could append the contents of FILE.TXT to the file PREFIX.BAT
on the same line as the SET command in PREFIX.BAT we would have:

  SET %%1=Any line of text

Then we could execute the resulting PREFIX.BAT with a parameter:

  call PREFIX.BAT VAR

and it would: SET VAR=Any line of text

This is the basis of the Universal Prefix technique. It allows us to
load a line of text from a file, or the output of a command, into a
variable.

(3) Of course, our current PREFIX.BAT won't do the job. If we try to
append FILE.TXT to it there's a problem. Try it with TYPE and the
append operator >> now, then TYPE the result.

============Screen capture
C:\WORK>type file.txt>>prefix.bat

C:\WORK>type prefix.bat
SET %1=
Any line of text

C:\WORK>
============End screen capture

The contents of FILE.TXT appear on a new line.

(4) However, if we create PREFIX.BAT in a special way, without any final
CarriageReturn or Linefeed, then, when we append FILE.TXT, its contents
will append on the same line.

The DEBUG editor can create a file consisting only of the seven bytes:
SET %1=

and no final CarriageReturn LineFeed. Try creating a Universal Prefix
file with DEBUG now. We'll call the file _P.BAT (in the capture below
we've added comments to explain what's happening):

============Screen capture
C:\WORK>debug _p.bat         - Open a new file with DEBUG
File not found               - DEBUG reports "File not found"
-e100'SET %1='               - Load string at location 100
-rcx                         - Read and change CX register
CX 0000                      - DEBUG shows current value=0
:7                           - Load 7 (the length of the file)
-w                           - W=write the file
Writing 00007 bytes          - DEBUG reports "Writing 7 bytes"
-q                           - Q=Quit DEBUG

C:\WORK>
============End screen capture

In a Batch file, we'd need to use SET %%1= (with two %% since the %%1
would be reduced to %1 by Windows). In immediate mode, at the prompt,
the %1 symbol has no special meaning, so we don't need to double the %.

(5) TYPE the file now, and you'll see that unlike PREFIX.BAT, there is
no blank line after it. This is because there is no final CarriageReturn
or LineFeed termination.

============Screen capture
C:\WORK>type _p.bat
SET %1=
C:\WORK>
============End screen capture

Notice that there is no blank line after _P.BAT is TYPEd to the screen.

(6) Now append the contents of FILE.TXT to _P.BAT with TYPE plus >>
and then TYPE the _P.BAT file that results.

============Screen capture
C:\WORK>type file.txt>>_p.bat

C:\WORK>type _p.bat
SET %1=Any line of text

C:\WORK>
============End screen capture

The contents of FILE.TXT are appended on the same line as the SET command.

(7) Now CALL and execute the _P.BAT file (it's a Batch file, after all)

Specify a parameter "var" to the _P.BAT file, and it will replace the
%1 in the file. You'll see the command ECHO on screen as it runs.

============Screen capture
C:\WORK>call _p.bat var

C:\WORK>SET var=Any line of text                 (the command ECHOes)

C:\WORK>

C:\WORK>
============End screen capture

Since we're not CALLing the _P.BAT from a Batch file with @ECHO OFF set,
its single command ECHOes to screen. This wouldn't happen when it was
called from a Batch file.

(8) Now check that VAR contains our line of text

============Screen capture
C:\WORK>echo. var=%var%
 var=Any line of text

C:\WORK>
============End screen capture

(9) Use DEBUG once more to recreate _P.BAT in its original state

============Screen capture
C:\WORK>debug _p.bat         - Open a new file with DEBUG
-e100'SET %1='               - Load string at location 100
-rcx                         - Read and change CX register
CX 0019                      - DEBUG shows current length=19 now
:7                           - Load 7 (the new length of the file)
-w                           - W=write the file
Writing 00007 bytes          - DEBUG reports "Writing 7 bytes"
-q                           - Q=Quit DEBUG

C:\WORK>
============End screen capture

DEBUG overwrites the _P.BAT file we had with a new 7 byte version,
restoring the original with no CarriageReturn LineFeed termination.

(10) Check it with TYPE

============Screen capture
C:\WORK>type _p.bat
SET %1=
C:\WORK>
============End screen capture

(11) We'll append a DIR command to it. We'll use the /od switch to
list files oldest first, and /a-d to exclude foldernames, and /b to
produce a bare name listing. Try the DIR command on its own first:

============Screen capture
C:\WORK>dir /a-d /od /b
UPREFIX.OLD
UPREFIX.TXT
UPREFIX1.BAT
UPREFIX2.BAT
file.txt
prefix.bat
_P.BAT
UPREFIX.NEW

C:\WORK>
============End screen capture

Your list may have extra files, but UPREFIX.OLD should be the first,
since it's dated 1 Jan 1986 time 00:00 which is the oldest file date
possible.

(12) Now try appending that DIR command to _P.BAT using >> and then
TYPE the result.

============Screen capture
C:\WORK>dir /a-d /od /b>>_p.bat

C:\WORK>type _p.bat
SET %1=UPREFIX.OLD
UPREFIX.TXT
UPREFIX1.BAT
UPREFIX2.BAT
file.txt
prefix.bat
_P.BAT
UPREFIX.NEW

C:\WORK>
============End screen capture

(13) Filter the result to extract the first line only using FIND. Use
the target "SET %1=" with FIND (remember that FIND targets are case
sensitive unless you use the /i switch).

============Screen capture
C:\WORK>type _p.bat | find "SET %1="
SET %1=UPREFIX.OLD

C:\WORK>
============End screen capture

In a Batch file, we'd have to use find "SET %%1=" to make Windows use
"SET %1=" literally (if we didn't double the %% in a Batch file, Windows
would replace %1 with the first command line parameter, or nothing if
there was no command line parameter).

(14) Repeat that filter operation, but this time redirect it with > to
the original _P.BAT file to replace its contents:

============Screen capture
C:\WORK>type _p.bat | find "SET %1=">_p.bat

C:\WORK>type _p.bat
SET %1=UPREFIX.OLD

C:\WORK>
============End screen capture

(15) Now execute the _P.BAT file with, say FN, as the first parameter

============Screen capture
C:\WORK>call _p.bat fn

C:\WORK>SET fn=UPREFIX.OLD

C:\WORK>

C:\WORK>
============End screen capture

(16) Check the contents of the FN variable with ECHO

============Screen capture
C:\WORK>echo. fn=%fn%
 fn=UPREFIX.OLD

C:\WORK>
============End screen capture

Thus, we've captured the name of the oldest file in the current folder
to an environment variable.


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
