                   Allenware.com Batch Library
                     StudyPack 2 (study02.zip)
       Current Date and Time extracted as environment variables
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 2 files in study02.zip

 README.TXT     Common README file contained in all StudyPacks
 DATIME.TXT     This file
 DATIME1.BAT    Simple example showing use of Date/Time Subroutine
 DATIME2.BAT    Example showing more complex use of the Date/Time tokens
 DATIME_.BAT    Tutorial explaining retrieval part of the Subroutine code
 DATIME.HEX     Hex-packed version of the DEBUG code
 DATIME.SR1     The Source Code version of the DEBUG code
 DATIME.SR2     Source Code version + D(ump to Hex-packed) instruction


===Introduction to StudyPack 2 on Dates and Times

It's a common Batch requirement to use files or folders that are named
from the current Date or Time, or both. This enables a Batch file that
is run regularly to create new date/time-related files or folders each
time it's used. We've developed a standard, highly-optimised Batch
Subroutine _DTM that extracts separate two-digit variables for the
current Hour, Minute, Second, and Century, Year, Month, and Day. These
can be combined in any order to create date/time related strings.


===Instructions for using StudyPack 2

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Place the files (listed above) in a working folder on your hard
    drive (preferably one that doesn't contain any other files).

(c) Open your custom MS-DOS window with that working folder as its
    current folder and try running the DATIME1.BAT and DATIME2.BAT
    examples.

The DATIME1.BAT and DATIME2.BAT examples show how to call the _DTM
Subroutine. This Subroutine extracts the current Date and Time elements
from your PC's Real Time Clock CMOS RAM data area, and places them in
seven variables as two-digit (lead-zero packed) values, as follows:

 Current Date: Two-digit Century in variable C
               Two-digit Year in variable    Y
               Two-digit Month in variable  MO
               Two-digit Day in variable     D

 Current Time: Two-digit Hour in variable    H
               Two-digit Minute in variable MI
               Two-digit Seconds in variable S

You can expand these variables in any format you please, for example:

 Current date in format YYYY-MM-DD = %C%%Y%-%MO%-%D%
 Current time in format   HH-MM-SS = %H%-%MI%-%S%

You can adapt the examples in DATIME1.BAT and DATIME2.BAT to handle
most common situations where current dates and times are needed.


===Batch Subroutines

You may wish to read StudyPack 1 (Using Subroutines and the Standard
Batch file Template) to understand how to mix your own code with our
Standard Batch Subroutines.


===How the _DTM code works

The _DTM Batch Subroutine is complex and uses highly-optimised code.
You can treat it as a "Black Box", if you prefer.

However, for those who are interested, the Tutorial below explains the
DEBUG code in the _DTM routine, and the DATIME_.BAT Batch Tutorial walks
you through the key parts of the rest of the Subroutine code, extracting
the current Date and Time tokens as it does, so you see an example that's
explained with current Date and Time data.

The following section explains the DEBUG program code (which the Tutorial
in DATIME_.BAT doesn't cover). Work through this immediate mode Tutorial
then try the DATIME_.BAT Batch Tutorial.


===Tutorial for _DTM Subroutine DEBUG code

Work in a custom MS-DOS BatchWindow, as in Instructions (a) above with
all the files for this StudyPack in the current folder.

(1) Print up DATIME1.BAT and have it by you to consult as you work
through the Tutorial below.

(2) The _DTM Subroutine depends on a tiny program run in DEBUG that
extracts 7 tokens for Second, Day, Month, Minute, Hour, Year, and
Century. This order of the date/time elements happens to be the optimum
for keeping the program code to an absolute minimum. Each token is then
loaded to a suitably-named variable.

(3) A DEBUG script is used to load the hex-packed form of the program
code at offset 100 (the default start point). The script begins with this
line (which is written into a file _DT.BAT in your TEMP folder):

ECHO.e100 e8 0 0 80 c3 2 88 dc cd 1a 89 97 1e 1 89 8f 22 1 c3

(4) This creates a hex-packed form of the program. DEBUG is unusual
because it can handle program code in either Source code format or the
more compact, hex-packed format. The file DATIME.SR1 holds the Source
code format of the small program. For those interested, this Source
code is discussed below. For the moment, treat it as a given.

(5) Let's see how the Source code form of the program operates. Type
the command:

  debug<datime.sr1

============Screen capture
C:\WORK>debug<datime.sr1
-a100
nnnn:0100 call 103          ;Call Subroutine at 103 (bl=0)
nnnn:0103                   ;Fall through into Subroutine for second execution
nnnn:0103 add  bl,02        ;Add 2 to bl (makes 2 first time, 4 second time)
nnnn:0106 mov  ah,bl        ;copy bl to ah
nnnn:0108 int  1a           ;Read real time clock Time:bl=02/Date:bl=04
nnnn:010A mov  [bx+11e],dx  ;}Store time and date elements in the
nnnn:010E mov  [bx+122],cx  ;}date range at offset 121-127 inclusive
nnnn:0112 ret               ;First time Returns, second time exits to DOS
nnnn:0113
-g

Program terminated normally
-d121L7
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii
-q

C:\WORK>
============End screen capture
Where we show:
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii
you will have nnnn=Hex Address which will vary according to your
machine configuration, and for S D Mo Mi H Y C you will see two-digit
numbers for current Second, Day, Month, Minute, Hour, Year and Century.
In your display "ascii" will be the ASCII representation of the current
date/time bytes. DEBUG always shows this alternative form, but it's
not relevant here.

DEBUG ignores the comments (;Anytext) we placed in the Source code, and
assembles it from location 100 (a100), then executes it (we use the
g=Go command to execute the code). DEBUG displays the output in memory
locations from offset 121 for Length 7 with d121L7 (these are the
locations where the tiny program loads the date/time tokens as it
extracts them). Then DEBUG quits (the q command).

DEBUG shows the message "Program terminated normally" because the program
ends by exiting to DOS.

(6) As well as being able to assemble and run Source code, DEBUG can
display the Source code in Hex-packed form, using the D (display memory
contents) command. The second version of the Source code script, called
DATIME.SR2 has the relevant D command added. We'll use it next, and as
well as creating our line of date/time tokens, it will show us the
Hex-packed form of the program. Type the command:

  debug<datime.sr2

============Screen capture
C:\WORK>debug<datime.sr2
-a100
nnnn:0100 call 103          ;Call Subroutine at 103 (bl=0)
nnnn:0103                   ;Fall through into Subroutine for second execution
nnnn:0103 add  bl,02        ;Add 2 to bl (makes 2 first time, 4 second time)
nnnn:0106 mov  ah,bl        ;copy bl to ah
nnnn:0108 int  1a           ;Read real time clock Time:bl=02/Date:bl=04
nnnn:010A mov  [bx+11e],dx  ;}Store time and date elements in the
nnnn:010E mov  [bx+122],cx  ;}date range at offset 121-127 inclusive
nnnn:0112 ret               ;First time Returns, second time exits to DOS
nnnn:0113
-d100 112
nnnn:0100  E8 00 00 80 C3 02 88 DC-CD 1A 89 97 1E 01 89 8F   ascii
nnnn:0110  22 01 C3                                          ascii
-g

Program terminated normally
-d121L7
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii
-q

C:\WORK>
============End screen capture

The d100 112 command asks DEBUG to display the hex-packed form of the
Source code, and those bytes (with leading zeros removed) are used in
the Batch code for the _DTM Subroutine because it's more compact. This
was how we translated the Source code to hex-packed form to use in the
Batch file.

(7) The third script file uses this hex-packed form. Try running it with
the command:

  debug<datime.hex

============Screen capture
C:\WORK>debug<datime.hex
-e100 e8 0 0 80 c3 2 88 dc cd 1a 89 97 1e 1 89 8f 22 1 c3
-g

Program terminated normally
-d121L7
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii
-q

C:\WORK>
============End screen capture

We can see that the hex-packed form also has less clutter in the DEBUG
output.

(8) We can filter the line with the date/time tokens using find. In the
Batch Subroutine, we run the DEBUG script with a pipe, so try that form
first, before we add the FIND stage to the pipe. Type the command

  type datime.hex | debug

C:\WORK>type datime.hex | debug
-e100 e8 0 0 80 c3 2 88 dc cd 1a 89 97 1e 1 89 8f 22 1 c3
-g

Program terminated normally
-d121L7
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii
-q

C:\WORK>

DEBUG will accept a script through a pipe or by input redirection.

(9) Now add a FIND filter stage to the previous pipe. The line we want
is the only line that has a : (colon) in it, so use the command:

  type datime.hex | debug | find ":"

============Screen capture
C:\WORK>type datime.hex | debug | find ":"
nnnn:0120     S  D  Mo Mi H  Y  C                             ascii

C:\WORK>
============End screen capture

Now the line we need is the only output. To understand how the _DTM
routine processes that line to extract the seven date/time tokens to
seven variables, try the DATIME_.BAT Batch Tutorial, where the process
is explained as the tokens are extracted. Again, have the DATIME1.BAT
printout to hand as you run the Batch Tutorial.


===Discussion of the Source Code

The Subroutine works by building a tiny program that uses INTerrupt 1A
to read the current date and time. The program is contained in hex-packed
form in the Subroutine line:

ECHO.e100 e8 0 0 80 c3 2 88 dc cd 1a 89 97 1e 1 89 8f 22 1 c3>%TEMP%.\_DT.BAT

The Script for the program is completed and executed by the lines:

FOR %%C IN (g d121L7 q) DO ECHO.%%C>>%TEMP%.\_DT.BAT
TYPE %TEMP%.\_DT.BAT|debug|find ":">%TEMP%.\_DT.BAT

The hex-packed form of the program:
e8 0 0 80 c3 2 88 dc cd 1a 89 97 1e 1 89 8f 22 1 c3

disassembles to source code as follows:

100 call 103          ;Call Subroutine at 103 (bl=0)
                      ;Fall through into Subroutine for second execution
103 add  bl,02        ;Add 2 to bl (makes 2 first time, 4 second time)
106 mov  ah,bl        ;copy bl to ah
108 int  1a           ;Read real time clock Time:bl=02/Date:bl=04
10a mov  [bx+11e],dx  ;}Store time and date elements in the
10e mov  [bx+122],cx  ;}date range at offset 121-127 inclusive
112 ret               ;First time Returns, second time exits to DOS

The Subroutine code at offset 103 is run twice, first by a normal CALL
and second by fall-through. In the CALL pass, the final RET at offset
112 returns to stack address pushed by CALL, continuing at offset 103,
and therefore falling through into the Subroutine again.

In the fall-through pass, since there was no stack address pushed,
the RET triggers the default INT 20 loaded automatically by DEBUG
at offset 0 (not shown above) which returns to DOS command mode.
This makes a highly compact way of running the Subroutine twice.

Since the counter in register BL is 2 on first pass and 4 on second
pass, the first pass reads subfunction 2=Time and the second pass
reads subfunction 4=Date. The BL value (low byte of BX) also doubles
as an index to store the data to memory, so that the data from the
first pass doesn't overwrite the data from the second pass.

Since INTerrupt 1A returns data as BCD (binary-coded-decimal) the
Batch script makes use of the fact that DEBUG automatically translates
this to Decimal equivalent, without further code for the Hex-to-Decimal
conversion. Together, these factors keep the Batch script very compact.


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
