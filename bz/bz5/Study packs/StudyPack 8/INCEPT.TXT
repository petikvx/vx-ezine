                   Allenware.com Batch Library
                     StudyPack 8 (study08.zip)
          Using the technique of Inception in Batch files
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 8 files in study08.zip

 README.TXT     Common README file contained in all StudyPacks
 INCEPT.TXT     This file
 INCEPT1.BAT    Simple Inception to load Day/Date to variables
 INCEPT2.BAT    Language-independent Inception for Date/Time
 INCEPT_.BAT    Tutorial explaining INCEPT2.BAT


===Introduction to StudyPack 8 on Inception

Inception is an MS-DOS Batch technique that uses the first word of a line
of text as the name of a temporary Batch file. This word then behaves as
a Batch command. If the entire line of text is executed as a command
line, it will call the temporary Batch file with the same name as the
first word. The remaining text forms a set of command-line parameters.

The point of Inception is to load some or all of the words or numbers on
a line of text into one or more environment variables. Placing data in
environment variables makes it easily accessible and usable in your
Batch commands.


===Instructions for using StudyPack 8

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Print up INCEPT1.BAT and work through the Tutorial below, which shows
    you how it works. INCEPT1.BAT is language specific, and will work
    only on English language systems. It needs to be modified to work
    with other languages. Most Inception examples are language specific.

(c) Print up INCEPT2.BAT, and run INCEPT_.BAT which is a Tutorial in the
    form of a Batch file that demonstrates and explains how INCEPT2.BAT
    works. INCEPT2.BAT is language independent, and will work on systems
    in any language. INCEPT2.BAT is unusual for an example of Inception,
    since most Inception examples are language specific.


===Tutorial for INCEPT1.BAT

Work in a custom MS-DOS BatchWindow, as in Instructions (a) above. Like
most examples of Inception, this example is language specific. You must
adapt the explanation below for other languages than English.

The point of INCEPT1.BAT is to load the current date into a variable,
CDATE, and the name of the current day (abbreviated) into a variable,
CDAY. These variables may then be used by expanding them as %CDATE% and
%CDAY% as usual.

(1) Type the command:

  date

and press [Return] when it prompts you for a new date.

============Screen capture
C:\WORK>date
Current date is DAY DD/MM/YYYY
Enter new date (dd-mm-yy):

C:\WORK>
============End screen capture
(you will see the actual day and date in your local format, instead of
the text: DAY DD/MM/YYYY - and your date order may not be DD/MM/YYYY. In
all that follows, we use DAY and DD/MM/YYYY where you will see the
current day and the current date in your system format).

(2) We can provide a [Return] by piping ECHO. into the DATE command, so
it won't stop and wait if it's used in a Batch file. Use the command:

  echo.|date

============Screen capture
C:\WORK>echo.|date
Current date is DAY DD/MM/YYYY
Enter new date (dd-mm-yy):

C:\WORK>
============End screen capture

This is how you would use this command in a Batch file. Otherwise, the
user of the Batch file would have to press [Return] unnecessarily.

The first line of that output contains the name of the Day and the date.
The name of the Day is the third item after the word "Current", and the
current date is the fourth item after the word "Current".

(3) We can capture the output of the DATE command to a file if we use
redirection. We'll capture it to a temporary Batch file called _TEMP.BAT
Type the command:

  echo.|date>_temp.bat

============Screen capture
C:\WORK>echo.|date>_temp.bat

C:\WORK>
============End screen capture

(4) TYPE the new file to check its contents.

============Screen capture
C:\WORK>type _temp.bat
Current date is DAY DD/MM/YYYY
Enter new date (dd-mm-yy):

C:\WORK>
============End screen capture

(5) Now let's run _TEMP.BAT by using the CALL command. Since we've given
the file a .BAT extension, Windows will try to treat it as a Batch file
and execute any commands it contains. Use the command:

  call _temp.bat

============Screen capture
C:\WORK>call _temp.bat

C:\WORK>Current date is DAY DD/MM/YYYY
Bad command or file name

C:\WORK>Enter new date (dd-mm-yy):
Bad command or file name

C:\WORK>

C:\WORK>
============End screen capture

What happened? Why did we see "Bad command or file name"? It's because
"Current" isn't a valid Batch command or program (not normally, anyway)
and nor is "Enter".

(6) Try for yourself by typing the command:

  current

============Screen capture
C:\WORK>current
Bad command or file name

C:\WORK>
============End screen capture

"Current" isn't a valid command, so typing it generates that error. In
the same way, _TEMP.BAT receives an error because its first line tries to
run a command with the name "Current".

(7) However, if there were a Batch file called CURRENT.BAT the command
"Current" wouldn't be invalid. Instead it would run CURRENT.BAT

Create a CURRENT.BAT with redirection. Just ECHO an ECHO command into a
new file called CURRENT.BAT with > redirection. Use the command:

  echo.echo.This file is current.bat>current.bat

============Screen capture
C:\WORK>echo.echo.This file is current.bat>current.bat

C:\WORK>
============End screen capture

(8) TYPE the new file to confirm what it contains:

  type current.bat

============Screen capture
C:\WORK>type current.bat
echo.This file is current.bat

C:\WORK>
============End screen capture

(9) Now try running the new file, by using the command:

  current

============Screen capture
C:\WORK>current

C:\WORK>echo.This file is current.bat
This file is current.bat

C:\WORK>

C:\WORK>
============End screen capture

This time, CURRENT.BAT runs, and we don't see "Bad command or file name"
because "current" is now a valid command. We see its single line ECHO to
the screen as well as produce the message "This file is current.bat"
because it doesn't begin with @ECHO OFF, but don't bother about that.

(10) Now try running our _TEMP.BAT file. This time it will now run the
new CURRENT.BAT batch file, instead of giving the message "Bad command or
file name":

  call _temp.bat

============Screen capture
C:\WORK>call _temp.bat

C:\WORK>Current date is DAY DD/MM/YYYY

C:\WORK>echo.This file is current.bat
This file is current.bat

C:\WORK>

C:\WORK>
============End screen capture

This time, calling _TEMP.BAT runs CURRENT.BAT in turn. That's because the
first word on the first line of _TEMP.BAT is "Current". This now runs the
new CURRENT.BAT batch file. Because it does not use CALL to execute our
CURRENT.BAT, control transfers to CURRENT.BAT and it doesn't return to
_TEMP.BAT, so the "Enter" line never runs. That's why we don't see any
error message for that line in _TEMP.BAT (remember, we originally saw two
error messages from _TEMP.BAT, one for each line).

(11) Now let's change CURRENT.BAT to something more useful. We'll change
it to another ECHO command, but one which displays command line
parameters. We can ECHO the literal text %1 by using %%1, so if we use:

  1st=%%1

This will ECHO into CURRENT.BAT as 1st=%1

Try it. Create a new CURRENT.BAT with the command line:

  echo.echo. 1st=%%1 2nd=%%2 3rd=%%3 4th=%%4>current.bat

============Screen capture
C:\WORK>echo.echo. 1st=%%1 2nd=%%2 3rd=%%3 4th=%%4>current.bat

C:\WORK>
============End screen capture

This will create a new CURRENT.BAT that displays the first four command-
line parameters passed to it.

(12) TYPE out the new CURRENT.BAT to check what it contains.

  type current.bat

============Screen capture
C:\WORK>type current.bat
echo. 1st=%1 2nd=%2 3rd=%3 4th=%4

C:\WORK>
============End screen capture


(13) Try the new CURRENT.BAT with a few command line parameters. Use the
command line:

  current one two three four

============Screen capture
C:\WORK>current one two three four

C:\WORK>echo. 1st=one 2nd=two 3rd=three 4th=four
 1st=one 2nd=two 3rd=three 4th=four

C:\WORK>

C:\WORK>
============End screen capture

(14) Now we'll try CALLing the _TEMP.BAT file again. Remind yourself what
it looks like by TYPE-ing it out first, then CALL it

  type _temp.bat
  call _temp.bat

============Screen capture
C:\WORK>type _temp.bat
Current date is DAY DD/MM/YYYY
Enter new date (dd-mm-yy):

C:\WORK>call _temp.bat

C:\WORK>Current date is DAY DD/MM/YYYY

C:\WORK>echo. 1st=date 2nd=is 3rd=DAY 4th=DD/MM/YYYY
 1st=date 2nd=is 3rd=DAY 4th=DD/MM/YYYY

C:\WORK>

C:\WORK>
============End screen capture

Now you see how, when our CURRENT.BAT is run by the line of text in the
_TEMP.BAT file, the rest of the text in the line we captured from the
DATE command is seen as command-line parameters by CURRENT.BAT and:

  (a) the Day name is the 3rd parameter = %3
  (b) the current Date is the 4th parameter = %4

(15) So now, let's remake CURRENT.BAT one last time. This time we'll put
two SET commands in it, like this:

  SET CDAY=%3
  SET CDATE=%4

Of course, to ECHO the %3 and the %4 literally, we'll need to double the
%% symbols, as usual. And to get the second line into CURRENT.BAT we'll
need to use the >> append operator (if we used the normal redirection
operator > again, we'd overwrite the file and lose our first line).

Use the two commands:

  echo.set cday=%%3>current.bat
  echo.set cdate=%%4>>current.bat

(make sure you use >> append for the second command)

============Screen capture
C:\WORK>echo.set cday=%%3>current.bat

C:\WORK>echo.set cdate=%%4>>current.bat

C:\WORK>
============End screen capture

(16) TYPE the new CURRENT.BAT to confirm what it contains

  type current.bat

============Screen capture
C:\WORK>type current.bat
set cday=%3
set cdate=%4

C:\WORK>
============End screen capture

(17) Now CALL _TEMP.BAT again, and watch carefully as the commands ECHO

  call _temp.bat

============Screen capture
C:\WORK>call _temp.bat

C:\WORK>Current date is DAY DD/MM/YYYY

C:\WORK>set cday=DAY

C:\WORK>set cdate=DD/MM/YYYY

C:\WORK>

C:\WORK>
============End screen capture

There are two stages to this. _TEMP.BAT has the text from DATE, which now
behaves as a command line to run CURRENT.BAT and CURRENT.BAT SETs two
variables for us: the day and the date from the output of the DATE
command.

(18) Use an ECHO command to expand the two variables that were SET

  echo. day=%cday% date=%cdate%

============Screen capture
C:\WORK>echo. day=%cday% date=%cdate%
 day=DAY date=DD/MM/YYYY

C:\WORK>
============End screen capture


===Inception

We call the technique Inception because it's based on using a special
intermediate Batch file named from the word or text at the beginning
(the inception) of the line of text. Whenever you know the word that
is first in the output of a Batch command, or that's the first in a
line of text, you can use Inception to load items from the rest of the
line into variables.

Try the INCEPT_.BAT tutorial Batch file now. It explains the Inception
example in INCEPT2.BAT, which loads both current Time and current Date
into variables. The technique in INCEPT2.BAT is unusual, in that it will
work in any language, since you choose the Inceptive word that appears
first on the line of output from the DIR command. The INCEPT2.BAT method
for loading a simple Time and Date variable is a handy and very simple
method that's worth remembering.

For more complex needs, where you want each of the Time and Date elements
(current hour, minute, second, day, month year, and century) in separate
variables in a suitable form for creating file and folder names, see our
Study Pack 2 (Current Date and Time extracted as environment variables).


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
