                   Allenware.com Batch Library
                    StudyPack 4 (study04.zip)
         Colour displays for Batch messages (without ANSI.SYS)
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 4 files in study04.zip

 README.TXT     Common README file contained in all StudyPacks
 COLOUR.TXT     This file
 COLOUR1.BAT    Example of simple colour display
 COLOUR2.BAT    More complex display showing key to ColourCodes
 COLOUR3.BAT    Displays chart showing all ColourCode combinations


===Introduction to StudyPack 4

Colour in Batch file displays is commonly achieved with the ANSI.SYS
driver and ANSI colour codes. However, this driver is not loaded by
default, so you can't rely on another Windows 95/98 system having
it installed. Furthermore, the standard ANSI.SYS driver can't be used
with Windows Millennium (since it requires real-mode installation as
part of CONFIG.SYS, which is not permitted in Windows Millennium).

The _COLOUR Subroutine in these Batch examples doesn't require ANSI.SYS
since it builds a tiny program that uses BIOS INTerrupt 10 (the video
interrupt) to display coloured text. The program is only 63 bytes in
size and it's deleted when the Batch file finishes.


===Instructions for using StudyPack 4

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Run COLOUR1.BAT and note the colour display examples. COLOUR1.BAT
    is fully commented with the codes and syntax to use colour.

(c) Run COLOUR2.BAT which shows a more complex display explaining the
    syntax of the %COL% command and the ColourCodes.

(d) Run COLOUR3.BAT to review what every possible colour combination
    looks like. Some combinations are more readable than others.

Use COLOUR1.BAT as a template to write your own Batch files with colour
displays. Use COLOUR2.BAT as a quick guide to ColourCodes available and
COLOUR3.BAT to decide which ForeGround/BackGround combinations suit your
purpose.


===Batch Subroutines

You may wish to read StudyPack 1 (Using Subroutines and the Standard
Batch file Template) to understand how to mix your own code with our
Standard Batch Subroutines.


===Immediate mode Tutorial for the ColourCode syntax

Work in a custom MS-DOS BatchWindow, as in Instructions (a) above.
Make sure COLOUR1.BAT is in the current folder.

(1) The tiny program that generates the colour displays is rather like
a specialised ECHO command. The Subroutine loads the path to the program
into a variable (usually COL) for you, so you run the program by
expanding the variable as %COL%

(2) Unlike ECHO, you need to add two ColourCodes and [Space]s as follows:

  %col%[Space]g[Space]@

There must be one, and only one [Space] between %COL% and each of the
ColourCodes.

(3) Unlike ECHO, you should enclose the string to display in "quotes".
This also means that, unlike ECHO messages, the string to display can
contain redirection and pipe operators (and they'll be displayed as
literal characters), thus:

  %col%[Space]g[Space]@[Space]"surround your <message> with quotes"

and again, there must be one, and only one [Space] between the two
ColourCodes and the "quoted message".

(4) With COLOUR1.BAT in the current folder, you can CALL the Subroutine
in it from immediate mode. This will run the Subroutine (creating the
program and setting the variable) and return to the immediate mode
prompt. Type the command:

  call colour1.bat GOTO: _colour col

(you must use CAPITALS for the GOTO: Subroutine flag since it's case
sensitive)

============Screen capture
C:\WORK>call colour1.bat GOTO: _colour col
C:\WORK>
============End screen capture

(5) Because you called the Subroutine, the main code in COLOUR1.BAT
doesn't run, so you don't see the sample messages displayed. Nor does
the command that deletes the %COL% program run, either. So the program
is left for you to try out in immediate mode.

Start by expanding the variable COL to check what it contains. Use the
command line:

  echo. col=%col%

============Screen capture
C:\WORK>echo. col=%col%
 col=C:\WINDOWS\TEMP.\_COL.COM

C:\WORK>
============End screen capture

The screen capture shows TEMP folder as C:\WINDOWS\TEMP (the default).
Your folder may be different (it doesn't matter).

(6) Now try a few colour messages:

  %col% n d "This message will be Yellow on Red"

============Screen capture (this text doesn't show the colour, of course)
C:\WORK>%col% n d "This message will be Yellow on Red"
This message will be Yellow on Red
C:\WORK>
============End screen capture

  %col% g @ "This is standard LightGrey on Black"

============Screen capture
C:\WORK>%col% g @ "This is standard LightGrey on Black"
This is standard LightGrey on Black
C:\WORK>
============End screen capture

  %col% @ k "This is Black on LightCyan"

============Screen capture
C:\WORK>%col% @ k "This is Black on LightCyan"
This is Black on LightCyan
C:\WORK>
============End screen capture

  %col% o c "< white> | on < cyan >"

============Screen capture
C:\WORK>%col% o c "< white> | on < cyan >"
< white> | on < cyan >
C:\WORK>
============End screen capture

Notice that, since the message string for the %COL% command is "quoted",
it can include characters such as < | and > that you can't normally
display with the standard ECHO command. The < | and > characters must
be between "quotes" or they're interpreted as the operators for Input
Redirection, Pipe, or Output Redirection, respectively.

(7) What's more, the %COL% command doesn't add a CarriageReturn LineFeed
to the message so, in a Batch file, consecutive messages appear on the
same line. This allows you to paint a line of text in different colours.
Just use a series of separate %COL% lines each with different ColourCodes.
When you want to start a new line, use an ECHO. command to display a
blank line, as usual.

You can simulate this in immediate mode by using a pipe operator to
separate several %COL% commands (don't do it this way in a Batch file,
where it's more efficient to use separate commands on separate lines).

  %col% o c "All on "|%col% n d "one"|%col% o c " line."

============Screen capture
C:\WORK>%col% o c "All on "|%col% n d "one"|%col% o c " line."
All on one line.
C:\WORK>
============End screen capture

(the "one" appears highlighted in YellowOnRed against WhiteOnCyan)

(8) When you've finished using %COL%, you can delete the program with:

  del %col%

and clear the variable COL with:

  set col=

============Screen capture
C:\WORK>del %col%

C:\WORK>set col=

C:\WORK>
============End screen capture


===Source code for %COL% program

The %COL% program is built in _COL.COM by the hex-packed DEBUG script:

%3 e100 b8 10 0 f6 26 84 0 bb f 0 22 1e 82 0 1 c3
%3 e110 30 ff be 87 0 31 c9 8a e 80 0 83 e9 7 76 1d
%3 e120 51 b9 1 0 b4 9 8a 4 cd 10 53 31 db b4 3 cd
%3 e130 10 80 c2 1 b4 2 cd 10 5b 59 46 e2 e3 cd 20

(where the %3 simply holds an ECHO. that writes the script to a workfile)

The hex-packed bytes in those four lines are the condensed form of the
following Assembly Language Source Code, which is fully commented for
those who are interested (Note "nybble"=4bits or half a byte):

0100  mov ax,10         ;Load ax=10 hex
0103  mul byte ptr [84] ;{ Multiply by Background ColourCode to place
                        ;{ ColourCode in the high-nybble position
0107  mov bx,f          ;Load low-nybble mask (f hex = 1111 binary)
010a  and bl,[82]       ;Mask Foreground ColourCode to low-nybble
010e  add bx,ax         ;Add to 10*Background (=high-nybble position)
0110  xor bh,bh         ;Clear BH (high byte), leaving BL=AttributeCode
                        ;{ The above process creates a byte in BL with
                        ;{ Foreground ColourCode in low nybble, and the
                        ;{ Background ColourCode in high nybble, which
                        ;{ is the right format for Colour Video Service

0112  mov si,87         ;Point SI to start of message in Command-line tail
0115  xor cx,cx         ;Clear CX register
0117  mov cl,[80]       ;Load CL with length of Command-line tail
011b  sub cx,7          ;{ Reduce length by 7 = overhead for characters:
                        ;{ [Space]F[Space]B[Space]""
                        ;{ which is everything but exact message text,
                        ;{ where F=Foreground ColourCode
                        ;{   and B=Background ColourCode
                        ;{   and "" are the two "quotes" around message

011e  jbe 13d           ;Jump 13d=(Exit) if message length is zero
0120  push  cx          ;Save CX register on stack
0121  mov cx,1          ;Load CX=1 (repeat count for video write)
0124  mov ah,9          ;Code for Write Character+Attribute to screen
0126  mov al,[si]       ;Load current character (pointed to by SI)
0128  int 10            ;Call Video Service to write character+colour
012a  push  bx          ;Save BX register on stack
012b  xor bx,bx         ;Clear BX
012d  mov ah,3          ;Code for Read current cursor position
012f  int 10            ;Call Video Service to Read cursor position
0131  add dl,1          ;Bump cursor position to move cursor one place
0134  mov ah,2          ;Code for Set current cursor position
0136  int 10            ;Call Video Service to Set cursor position
0138  pop bx            ;Restore BX from Stack (BL holds ColourCode)
0139  pop cx            ;Restore CX from Stack (it's counting characters)
013a  inc si            ;Move pointer along one character of the message
013b  loop  120         ;Decrement CX count, back to 120 if not finished
013d  int 20            ;Exit to Operating System command mode


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
