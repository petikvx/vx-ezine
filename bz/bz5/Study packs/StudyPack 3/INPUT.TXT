                   Allenware.com Batch Library
                     StudyPack 3 (study03.zip)
         User Input into a Batch file environment variable
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 3 files in study03.zip

 README.TXT     Common README file contained in all StudyPacks
 INPUT.TXT      This file
 INPUT1.BAT     Example of simple User Input
 INPUT2.BAT     Example of User Input with in-line prompt
 INPUT_.BAT     Tutorial explaining the FC /LB1 technique


===Introduction to StudyPack 3

Usually, the best way to input data into a Batch file is to specify the
data as command line parameters. However, there are times when you want
to prompt the user for a line of data, and load this into a variable for
use by the Batch file.

The INPUT1.BAT example shows the basic use of the FC /LB1 technique to
get a line of user input and load it into an environment variable while
the Batch file is running.


===Instructions for using StudyPack 3

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Print up INPUT1.BAT and have it by you, then either:

    (i) Run the INPUT_.BAT Tutorial, it explains how INPUT1.BAT works.

    OR

    (ii) Follow the Immediate mode Tutorial below which talks you
         through the methods in INPUT1.BAT in immediate mode at the
         MS-DOS prompt.

    (or you can study the Input technique both ways, of course)

(c) INPUT2.BAT places the FC /LB1 input technique into a Batch
    Subroutine, which you can cut-and-paste into our standard
    Subroutine Template when writing a new Batch file of your own.

    This Subroutine also allows you to specify a User Prompt, which
    will be displayed on the same line as the user's input. The
    INPUT2.BAT Batch file is extensively documented to explain how to
    specify the User Prompt. If you use ANSI.SYS, it shows how to
    specify a colour prompt with the usual ANSI colour codes.


===Batch Subroutines

You may wish to read StudyPack 1 (Using Subroutines and the Standard
Batch file Template) to understand how to mix your own code with our
Standard Batch Subroutines.


===Immediate mode Tutorial for the methods in INPUT1.BAT

Work in a custom MS-DOS BatchWindow, as in Instructions (a) above.

(1) At the prompt, type the command:

  fc /lb1 con nul

and when you see the message "Comparing files CON and nul" type:

  one two three four

and press [Return] after "four" (just to supply some input text).

============Screen capture
C:\WORK>fc /lb1 con nul
Comparing files CON and nul
one two three four
Resync failed.  Files are too different
****** CON
one two three four
****** nul
******



C:\WORK>
============End screen capture

(2) Notice that the text we typed "one two three four" appears amidst
the report from FC. Our command line asks FC to compare CON (input from
the keyboard) with NUL (the empty device or bit-bucket). The /LB1 switch
tells FC to stop trying to compare (which FC calls resynchronizing) as
soon as one line fails to match. Since NUL contains nothing, the first
line we type fails to match. So FC stops comparing, and reports the
files (that is, our input and the NUL device) are too different to
resynchronize.

Repeat the command, but add > redirection to a file, _IN.BAT (we reserve
an underscore for the first letter of temporary workfile names).

This time you see no "Comparing files CON and nul" message (it's
captured in the _IN.BAT file). As before, type the input:

  one two three four

and press [Return].

Then type the command:

  type _in.bat

to display the text we've captured.


============Screen capture
C:\WORK>fc /lb1 con nul>_in.bat
one two three four

C:\WORK>type _in.bat
Comparing files CON and nul
Resync failed.  Files are too different
****** CON
one two three four
****** nul
******



C:\WORK>
============End screen capture

(3) Use the FIND command to number the lines of the file _IN.BAT. Use
the command line:

  type _in.bat | find /n /v ""

(where | is the pipe operator. If you have difficulty typing the correct
pipe character operator, see Lesson 16 of our Batch File Course).

The /n numbers lines that FIND passes through. The /v "" says pass
through all lines that don't contain the target (/v = inVerted logic).
Since the target is "" (nothing, a null string), and FIND regards even a
blank line as containing something (a CarriageReturn), this is the same
as saying pass through ALL lines (and the /n numbers them on the way).

============Screen capture
C:\WORK>type _in.bat | find /n /v ""
[1]Comparing files CON and nul
[2]Resync failed.  Files are too different
[3]****** CON
[4]one two three four
[5]****** nul
[6]******
[7]
[8]

C:\WORK>
============End screen capture

(4) Notice that our input is line 4. We can use FIND again, with the
target set to "[4]" to pass through only this line. Use a double FIND
pipe to do this. The first part is the same as before, and the second
part filters on "[4]". The combined command line is:

  type _in.bat | find /n /v "" | find "[4]"

============Screen capture
C:\WORK>type _in.bat | find /n /v "" | find "[4]"
[4]one two three four

C:\WORK>
============End screen capture

(5) This produces our original input but with the three characters: [4]
on the front. If we could change that:

[4]one two three four

into

SET %1=one two three four

we would have a batch command that would load any variable we specify as
the %1 parameter with our input. It's easy to overwrite characters with
the DEBUG scriptable editor. However, we need to overwrite [4] (that's
three characters) with SET %1= (that's seven characters, including the
[Space] after SET).

We can get two more characters on the front of the output line by piping
it through MORE. The MORE command prefixes its output with a blank line
(which consists of the two characters CarriageReturn + LineFeed). So if
we use MORE twice, it will add two blank lines (=four characters).

We can do the whole process in one complex pipe, thus:

  type _in.bat | find /n /v "" | find "[4]" | more | more

Try it now.

============Screen capture
C:\WORK>type _in.bat | find /n /v "" | find "[4]" | more | more


[4]one two three four

C:\WORK>============End screen capture

(6) We can capture the result back in our original file _IN.BAT by
using redirection at the end of that command line. A pipe in Windows
95/98/ME uses intermediate temporary files generated by Windows, so that
a pipe can write back into the file that started it, without conflict.

Try it with this command line:

  type _in.bat | find /n /v "" | find "[4]" | more | more >_in.bat

and use TYPE to display the resulting new version of _IN.BAT

============Screen capture
C:\WORK>type _in.bat | find /n /v "" | find "[4]" | more | more >_in.bat

C:\WORK>type _in.bat


[4]one two three four

C:\WORK>
============End screen capture

(7) Now we have seven characters at the front of the file, plus our
original input. We can overwrite these with DEBUG. Use the commands:

  debug _in.bat
  e100 'set %1='
  w
  q

Then use TYPE again to view the new version of the file _IN.BAT


============Screen capture
C:\WORK>debug _in.bat
-e100 'set %1='
-w
Writing 0001B bytes
-q

C:\WORK>type _in.bat
set %1=one two three four

C:\WORK>
============End screen capture

By default, DEBUG loads a file in memory so it begins at memory location
100 hex. The e100 command Enters the string you put in single 'quotes'
at the start of the file, overwriting the seven bytes there already. The
w command Writes the file back again, and the q command Quits DEBUG.

(8) Now if we CALL _IN.BAT with, say, INPUT, as its first parameter, it
will load the original input string into INPUT. Use the command line:

  call _in.bat input

then check the contents of input with an ECHO command, thus:

  echo. input=%input%

============Screen capture
C:\WORK>call _in.bat input

C:\WORK>set input=one two three four

C:\WORK>

C:\WORK>echo. input=%input%
 input=one two three four

C:\WORK>
============End screen capture

(9) All we need to do now is delete our workfile _IN.BAT and that's it.

  del _in.bat

============Screen capture
C:\WORK>del _in.bat

C:\WORK>
============End screen capture


Notes:
(a) In the Batch version, DEBUG is driven from a script with those three
commands in it. The script is built in a second workfile _IN and both
workfiles are located in the TEMP folder by expanding the %TEMP%
variable (this usually points to the path C:\WINDOWS\TEMP).

(b) In the Batch version, to ensure the text SET %1= is treated
literally, we have to double the % symbol, thus SET %%1= (the Batch
processor replaces every %% with % each time a %% pair occurs). If we
didn't double the %, we would write into our file whatever happened to
be in the first parameter passed to the INPUT1.BAT batch file. In
immediate mode, %1 has no special significance, so we were able to use a
single % symbol.


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
