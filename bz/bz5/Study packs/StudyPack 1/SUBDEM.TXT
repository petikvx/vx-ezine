                   Allenware.com Batch Library
                    StudyPack 1 (study01.zip)
       Using Subroutines and the Standard Batch file Template
                   For use in Windows 95/98/ME

===Disclaimer

This package is provided free of charge. It is purely for educational
and study purposes. Use it at your own risk. No warranties are given.
Never use a computer unless all valuable data are properly backed up.


===Version information

This is Version 1.0


===StudyPack 1 files in study01.zip

 README.TXT     Common README file contained in all StudyPacks
 SUBDEM.TXT     This file
 SUBDEM1.BAT    Example Subroutine Demonstration Batch file
 SUBDEM2.BAT    Example showing several Subroutines
 SUBDEM3.BAT    Example with Subroutine to process files matching wildcard
 SUBDEM_.BAT    Tutorial explaining SUBDEM1.BAT line-by-line
 TEMPLATE.BAT   Standard Subroutine Template for writing new code


===Introduction to StudyPack 1 on Batch Subroutines

The Batch Subroutine-Handler we've devised provides a useful method for
implementing the concept of Subroutines in MS-DOS Batch files. A Batch
Subroutine is a chunk of code for inclusion in a main Batch script, and
which can be called one or more times, perhaps with different parameters
each time. The Subroutine performs its function and returns control to
the main Batch code at the line following its invocation.

A Subroutine is isolated from the main Batch code by an initial GOTO EOF
jump, so that it is used only when properly invoked. Batch Subroutines
allow you to keep Batch code in re-usable, independent sections.


===Instructions for using StudyPack 1

(a) The examples are best studied in a custom MS-DOS BatchWindow by
    running them at the command prompt. See the README.TXT file for
    brief details of how to set up a custom MS-DOS BatchWindow. Full
    details of this process are given in the interactive Introduction
    to our Batch File Course.

    Course Syllabus and Index to Lessons at: http://www.allenware.com/

(b) Place the files (listed above) in a working folder on your hard
    drive (preferably one that doesn't contain any other files).

(c) Open your custom MS-DOS window with that working folder as its
    current folder.

(d) Print up SUBDEM1.BAT and have it by you.

(e) Run SUBDEM1.BAT by typing the command:

    subdem1.bat

    at the MS-DOS prompt.

(f) Note the messages it displays and the order in which they appear
    (which is not the order in which they are coded in the file itself)
    Don't try to understand the code at this stage.

(g) Next, run the Tutorial (SUBDEM_.BAT) by typing the command:

      subdem_.bat

    at the MS-DOS prompt.

    The Tutorial will walk you through the code of SUBDEM1.BAT and
    explain what is happening line-by-line. Run through the Tutorial
    several times until you are clear on how the logic of a Subroutine
    call operates.

(h) Print up SUBDEM2.BAT and have it by you.

(i) Run SUBDEM2.BAT by typing the command:

      subdem2.bat

    at the MS-DOS prompt.

    You should now be able to follow this more complex example for
    yourself, and understand how the CALL syntax operates to call
    the different Subroutines, and pass their parameters to them.

(j) Print up SUBDEM3.BAT and have it by you.

(k) Run SUBDEM3.BAT by typing the command:

      subdem3.bat

    at the MS-DOS prompt.

    This example shows how to process a set of files matching a wildcard
    by calling a Subroutine with a FOR IN DO statement that passes each
    file found in turn to the Subroutine.

    This is a very useful technique for processing lists of files.


===Using TEMPLATE.BAT to write Batch files that have Subroutines

Use TEMPLATE.BAT as a Template when you start writing any new Batch file.
It has a working outline of a Subroutine, _SUBR, and the call syntax.

All but the simplest code we write uses Subroutines. A Subroutine starts
with a pair of code lines such as:

  GOTO EOF {=Subroutine-section-below=}
  :_DTM (Usage: CALL %0 GOTO: _DTM)

and ends with the next Subroutine in the file, or if there are no further
Subroutines, our standard End-of-file label, which looks like this:

  :EOF {End-of-file}


===Writing new code that uses Subroutines

Use our TEMPLATE.BAT to start a new Batch file, since it has a simple
Subroutine outline already. Alternatively, follow these guidelines:

Your main Batch Script itself should BEGIN with our two standard lines:
  @ECHO OFF
  IF (GOTO:)==(%1) %1%2 {Subroutine-Handler}

The "Subroutine-Handler" must be the second line of the Batch script.
It intercepts and routes all Subroutine recalls, but doesn't otherwise
play any part in the main code of the Batch script.

Your main Batch script should keep our Subroutine section at the END using
our standard "GOTO EOF {Subroutine-section-below}" introducer and using
our standard ":EOF {End-of-file}" label, like this:

  GOTO EOF {=Subroutine-section-below=}

  :: ... all the lines of code for Subroutine(s) are here ...

  :EOF {End-of-file}

The "GOTO EOF" in the Subroutine-section header isolates the following
Subroutine properly from the main code that you add above this Section.
This makes sure Subroutine code only runs when it's properly invoked.

Typical Subroutine invocations (with Subroutine Parameters) are:
CALL %0 GOTO: _SUBR Par1 Par2

OR where a child shell with large(=4096bytes) environment is required:
%COMSPEC% /e:4096 /c %0 GOTO: _SUBR Par1 Par2

These lines restart the main script (%0 holds its recall name). The GOTO:
(as the %1 parameter) is caught by Subroutine-Handler on the 2nd line of
the main script. The Handler line has this code:

  IF (GOTO:)==(%1) %1%2 {Subroutine-Handler}

In a recall, %1 is GOTO: so the IF Condition is true. The Subroutine's
ID (%2=_SUBR in the example  above) is used to jump directly to the
correct Subroutine. In the Subroutine, Par1 will be %3 and Par2 will
be %4. When the Subroutine ends, control returns to the main script at
the line immediately after the call.


===Editing/mixing our code with your own code in a Batch file

KEEP the "Subroutine-Handler" line as the second line of your own version
(after the initial @ECHO OFF). The Handler line is needed to route calls
to Subroutines, but won't otherwise affect any of your code. The special
parameter GOTO: is a reserved first parameter and only Subroutine calls
should use it.

KEEP all Subroutine code (and the EOF label) at the end of your version.

Remember, the "Subroutine code" is all the text including and following
the line:

 GOTO EOF {=Subroutine-section-below=}

and up to (but not including) the start of the next Subroutine (it will
begin with a similar line), or up to (but not including) the EOF label.

The "GOTO EOF" in the Subroutine Introducer line prevents any execution
of the following Subroutine code unless it's specifically invoked by a
Subroutine (re)call through the Subroutine-Handler line.

Follow these guidelines and it is easier to combine any of our example
Subroutines with your own scripts, and maintain the resultant code mix.


               We hope you find this StudyPack useful


                     William and Linda Allen
 (c) Copyright Allen & Company 2003 - all rights reserved (c)
