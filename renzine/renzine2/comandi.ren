<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="DA RENEGADE FUCKIN' HTML CREATOR">
<TITLE>comandi</TITLE>
<META NAME="Version" CONTENT="8.0.3429">
<META NAME="Date" CONTENT="11/19/96">
<META NAME="Template" CONTENT="D:\Office 99 Pro\Office\HTML.DOT">
</HEAD>
<BODY TEXT="#000000" VLINK="#800080" BGCOLOR="#000000">

<P ALIGN="CENTER"><IMG SRC="mano.ren" WIDTH=180 HEIGHT=81><B><U><FONT SIZE=6 COLOR="#ffff00">I comandi(I)<IMG SRC="mano.ren" WIDTH=180 HEIGHT=81></P>
</U><P ALIGN="CENTER">&nbsp;</P>
</B></FONT><FONT FACE="Arial" COLOR="#ffff00"><P>Come in ogni linguaggio di programmazione, senza comandi ovviamente non funziona niente.Ecco i comandi che userete di pi&ugrave; e la loro funzione:</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>Mov</U> : </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando mov &egrave; uno dei pi&ugrave; importanti.Viene usato per caricare un valore in memoria.La sintassi &egrave; :</FONT><B><FONT FACE="Arial" COLOR="#00ff00">mov destinazione, valore.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Per esempio, </FONT><B><FONT FACE="Arial" COLOR="#00ff00">mov ax,bx </B></FONT><FONT FACE="Arial" COLOR="#ffff00">caricher&agrave; il valore di bx in ax.</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>Movs</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Movs carica direttamente il valore di SI e user&agrave; come destinazione DI.</P>
<P>Esempio : </FONT><B><FONT FACE="Arial" COLOR="#00ff00">mov si, offset 1</P>
<P>mov di, offset 2</P>
<P>movs</P>
</B></FONT><FONT FACE="Arial" COLOR="#ffff00"><P>In questo modo il valore di 1 verr&agrave; caricato sopra il valore di 2.Incontrerete anche </FONT><B><FONT FACE="Arial" COLOR="#00ff00">movsb e movsw.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Stesso discorso solamente che movsb carica un byte e movsw carica un word.</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>LEA</U>:</B></FONT><FONT FACE="Arial" COLOR="#ffff00"> Load Effective Address.Sintassi: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">lea destinazione, indirizzo.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Viene usato per caricare l'indirizzo della memoria di "indirizzo" in "destinazione"."Indirizzo" deve essere stato caricato in memoria.</P>
<P>Esempio: anzich&egrave; scrivere mov si, offset 1 basta un semplice </FONT><B><FONT FACE="Arial" COLOR="#00ff00">lea si, 1</P>
<U><P>Push e Pop</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Come gi&agrave; spiegato nella Ren - Zine #1, Push carica un valore nello stack e pop ripristina un valore.La cosa importante &egrave; che pop ripristiner&agrave; sempre l'ultimo valore caricato nello stack.</P>
<P>Esempio: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">Push cx</P>
<P>Push ax</P>
<P>Pop cx</P>
<P>Pop ax</P>
</B></FONT><FONT FACE="Arial" COLOR="#ffff00"><P>In questo modo pop cx caricher&agrave; il valore di ax e viceversa.Infatti basta un semplice xchg ax,cx, che spiegher&ograve; pi&ugrave; avanti.</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>ADD</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando ADD effettua semplicemente un'addizione.La sintassi &egrave; </FONT><B><FONT FACE="Arial" COLOR="#00ff00">add destinazione, valore.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il risultato sar&agrave; salvato in "destinazione".</P>
<P>Esempio: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">mov ax, 0h </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il valore di ax cos&igrave; sar&agrave; zero.</P>
</FONT><B><FONT FACE="Arial" COLOR="#00ff00"><P>Add ax, 10h </B></FONT><FONT FACE="Arial" COLOR="#ffff00">adesso il valore di ax sar&agrave; di 10h</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>SUB</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando SUB invece effettua una sottrazione.La stessa cosa vale per SUB, </FONT><B><FONT FACE="Arial" COLOR="#00ff00">sub destinazione, valore.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Anche qua il risultato sar&agrave; salvato in "destinazione".</P>
<P>Esempio: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">sub ax, 10h </B></FONT><FONT FACE="Arial" COLOR="#ffff00">questo sottrarre 10h da ax.</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>XCHG</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando Exchange scambier&agrave; i valori di "destinazione" e "valore".</P>
<P>Esempio: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">xchg bx, ax</P>
<P>&nbsp;</P>
<U><P>LODS</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Carica un byte oppure un word in un register.Esattamente come il comando movs, anche qua ci sono </FONT><B><FONT FACE="Arial" COLOR="#00ff00">LODSB e LODSW.</P>
</B></FONT><FONT FACE="Arial" COLOR="#ffff00"><P>Esempio: <B>mov si, offset 1</P>
</FONT><FONT FACE="Arial" COLOR="#00ff00"><P>Lods </P>
</FONT><U><FONT FACE="Arial" SIZE=4 COLOR="#00ff00"><P ALIGN="CENTER">Operazioni logiche booleane</P>
</B></U><P>&nbsp;</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>AND</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Questo comando effettua una specie di confronto bit per bit tra "destinazione" e "valore". Il risultato sar&agrave; salvato in "destinazione".Sintassi : </P>
</FONT><B><FONT FACE="Arial" COLOR="#00ff00"><P>and destinazione, valore.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Esempio:</P>
<B><P>Valore destinazione risultato</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00"> 1</B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00"> 0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
<P>&nbsp;</P>
<U><P>OR</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Anche questo comando effettua un'operazione booleanica (booleanica ? Ma esiste 'sta parola ? 'sti grandi cazzi) Ecco gli effetti su ciascun bit:</P>
<B><P>Valore destinazione risultato</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00"> 0</B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00"> 0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00"> 0 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
<P>&nbsp;</P>
<U><P>XOR</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando XOR fa esattamente lo stesso lavoro di OR, solamente che OR effettua una cosiddetta "Inclusive disjunction" di "destinazione" e "valore", mentre XOR effettua una cosiddetta "exclusive disjunction".La sintassi rimane sempre la stessa, cio&egrave; </FONT><B><FONT FACE="Arial" COLOR="#00ff00">xor destinazione, valore.</P>
<P>&nbsp;</P>
</FONT><FONT FACE="Arial" COLOR="#ffff00"><P>Valore destinazione risultato</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>.......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
<P>&nbsp;</P>
<U><P>XNOR</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Ecco l'effetto su ciascun bit usando il comando XNOR:</P>
<B><P>Valore destinazione risultato</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>........................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>........................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>......................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>........................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
<P>&nbsp;</P>
<U><P>NOT</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Esegue la negazione "bit per bit" di "destinazione".Sintassi:</P>
</FONT><B><FONT FACE="Arial" COLOR="#00ff00"><P>NOT destinazione .</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il risultato verr&agrave; salvato nello stesso "destinazione".</P>
<P>Effetto su ciascun bit:</P>
<B><P>Valore destinazione</P>
</B></FONT><FONT FACE="Arial" SIZE=1><P>.......</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0 </B></FONT><FONT FACE="Arial" SIZE=1>....................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1</P>
</B></FONT><FONT FACE="Arial"><P>.....</FONT><B><FONT FACE="Arial" COLOR="#00ff00">1 </B></FONT><FONT FACE="Arial" SIZE=1>....................</FONT><B><FONT FACE="Arial" COLOR="#00ff00">0</P>
</FONT><FONT FACE="Arial" COLOR="#ffff00"><P>&nbsp;</P>
<P>Altri comandi importanti:</P>
</FONT><U><FONT FACE="Arial" COLOR="#00ff00"><P>CALL</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Call esegue semplicemente una subroutine.La sintassi &egrave; la seguente:</P>
</FONT><B><FONT FACE="Arial" COLOR="#00ff00"><P>Call subroutine</P>
<U><P>CMP</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando Compare confronta i due valori di "destinazione" e "valore".</P>
</FONT><B><FONT FACE="Arial" COLOR="#00ff00"><P>Cmp valore1, valore2</P>
<U><P>JMP</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Il comando Jump carica un valore nuovo, trasferendo cos&igrave; il controllo ad un'altra parte del codice.Sintassi: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">JMP destinazione.</B></FONT><FONT FACE="Arial" COLOR="#ffff00">Ci sono una ventina di comandi diversi del Jump, che spiegher&ograve; nella prossima edizione.</P>
</FONT><B><U><FONT FACE="Arial" COLOR="#00ff00"><P>LOOP</U>: </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Loop ripete semplicemente un operazione, meglio una subroutine, finch&egrave; il counter non avr&agrave; raggiunto il valore zero.Sintassi: </FONT><B><FONT FACE="Arial" COLOR="#00ff00">Loop nome </B></FONT><FONT FACE="Arial" COLOR="#ffff00">Esempio:</P>
<B><P>Mov cx, 15</P>
<P>Subroutine: " parte del codice desiderata"</P>
<P>....</P>
</FONT><FONT FACE="Arial" COLOR="#00ff00"><P>Loop subroutine</P>
</B></FONT><FONT FACE="Arial" COLOR="#ffff00"><P>Ci sono poi un sacco di altri comandi, continueremo nella prossima edizione.</P>
<P>&nbsp;</P>
</FONT><P ALIGN="CENTER"><A HREF="assemb.ren#RITORNA"><B><U><FONT SIZE=5 COLOR="#00ffff">RITORNA</B></U></FONT></A><FONT FACE="Arial" SIZE=1>.................................</FONT> <A HREF="index.ren#INDICE"><B><U><FONT SIZE=5 COLOR="#00ffff">INDICE</B></U></FONT></A></P>
<B><FONT FACE="Arial" COLOR="#00ff00"><P>&nbsp;</P></B></FONT></BODY>
</HTML>
